import json
import hashlib
import base64
import requests
import random
import os
import argparse
import torch

# Set seeds for reproducibility (Note: This affects only this script, not the remote API)
seed = 1
torch.manual_seed(seed)
if torch.cuda.is_available():
    torch.cuda.manual_seed_all(seed)

# Function to generate images via API
def generate_images_with_api(prompt, starting_seed, api_url, batch_size, steps=20, width=512, height=512,
                             cfg_scale=7.0, sampler_name='Euler'):
    payload = {
        "prompt": prompt,
        "seed": starting_seed,
        "subseed": 0,
        "subseed_strength": 0,
        "steps": steps,
        "width": width,
        "height": height,
        "cfg_scale": cfg_scale,
        "sampler_name": sampler_name,
        "batch_size": batch_size,
        "restore_faces": False,
        "tiling": False,
        "do_not_save_samples": True,
        "do_not_save_grid": True,
        "eta": 0,
        "s_churn": 0,
        "s_tmax": None,
        "s_tmin": 0,
        "s_noise": 1,
        "override_settings": {
            "CLIP_stop_at_last_layers": 1,
            "sd_model_checkpoint": "v1-5-pruned-emaonly.safetensors",
            "sd_vae": None,
            "sd_vae_as_default": False,
            "use_optimized_kernels": False,
        },
        "override_settings_restore_afterwards": True,
    }
    response = requests.post(api_url, json=payload, timeout=300)
    response.raise_for_status()
    result = response.json()
    images_data = result.get("images")
    if not images_data:
        raise ValueError("No images were generated by the API.")

    return images_data


# Function to compute image hash directly from base64-encoded data
def compute_image_hash_directly(image_data):
    # Compute the SHA-256 hash directly on the encoded base64 string
    image_hash = hashlib.sha256(image_data.encode()).hexdigest()
    return image_hash

# Function to append data to an existing JSON file or create a new one
def append_to_json_file(filename, starting_seed, batch_hashes):
    if os.path.exists(filename):
        with open(filename, 'r') as f:
            existing_data = json.load(f)
    else:
        existing_data = {'batches': {}}

    # Convert starting_seed to string for consistent JSON keys
    starting_seed_str = str(starting_seed)

    # Add new batch under the starting seed
    existing_data['batches'][starting_seed_str] = batch_hashes

    with open(filename, 'w') as f:
        json.dump(existing_data, f, indent=4)

# Function to create precomputed hashes for a set of random seeds with batch support
def create_and_append_precomputed_hashes(prompt, num_batches, api_url, batch_size, filename):
    for _ in range(num_batches):
        starting_seed = random.randint(1, 1_000_000_000)  # Generate a random starting seed for this batch
        images_data = generate_images_with_api(prompt, starting_seed, api_url, batch_size=batch_size)
        
        # Store the data for each seed in the batch
        batch_hashes = []
        for i, image_data in enumerate(images_data):
            # The seed for each image in the batch is the starting seed + i
            seed = starting_seed + i
            image_hash = compute_image_hash_directly(image_data)
            batch_hashes.append({
                'seed': seed,
                'hash': image_hash
            })
        
        # Append the batch to the JSON file immediately
        append_to_json_file(filename, starting_seed, batch_hashes)

        print(f"Successfully added batch with starting seed {starting_seed} to {filename}.")

def main(api_url, num_batches, batch_size):
    prompt = "Create a stunning mystical mountain landscape with tall snowy peaks and dense forests in the epic style of Bob Ross."
    filename = 'precomputed_hashes.json'

    api_url = api_url.rstrip('/')
    api_url = api_url + '/sdapi/v1/txt2img'

    create_and_append_precomputed_hashes(prompt, num_batches, api_url, batch_size, filename)

    print(f"Successfully added {num_batches} batches of {batch_size} images to {filename}.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate and store image hashes using random starting seeds and batches.')
    parser.add_argument('--api_url', type=str, required=True, help='The API URL to use for image generation.')
    parser.add_argument('--num_batches', type=int, required=True, help='The number of batches to generate.')
    parser.add_argument('--batch_size', type=int, required=True, help='The number of images per batch.')

    args = parser.parse_args()

    main(args.api_url, args.num_batches, args.batch_size)
