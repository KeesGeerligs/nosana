#!/usr/bin/env python3


import requests
import hashlib
import time
import sys
import base64
from PIL import Image
import io
import random
import argparse
import numpy as np

def get_expected_performance(gpu_type):
    """
    Returns expected time per image based on claimed GPU type.
    """
    # Mapping of GPU types to expected performance metrics
    gpu_performance = {
        'RTX 3090': {'time_per_image': 8.0},
        'RTX 3080': {'time_per_image': 9.0},
        'RTX 3070': {'time_per_image': 11.0},
        'RTX 4090': {'time_per_image': 7.0},
        'RTX 3060': {'time_per_image': 13.0},
        'RTX A6000': {'time_per_image': 7.0},
        # Add more GPUs and their expected performance metrics as needed
    }

    performance = gpu_performance.get(gpu_type)
    if not performance:
        raise ValueError(f"Unknown GPU type '{gpu_type}'. Please update the GPU performance mapping.")
    return performance['time_per_image']

def generate_image_with_api(prompt, seed, steps=20, width=512, height=512, cfg_scale=7.0,
                            sampler_name='Euler', api_url='http://localhost:7860/sdapi/v1/txt2img'):
    payload = {
        "prompt": prompt,
        "seed": seed,
        "steps": steps,
        "width": width,
        "height": height,
        "cfg_scale": cfg_scale,
        "sampler_name": sampler_name
    }
    response = requests.post(api_url, json=payload, timeout=300)
    response.raise_for_status()
    result = response.json()
    images_data = result.get("images")
    if not images_data:
        raise ValueError("No images were generated by the API.")
    image_data = images_data[0]
    image = decode_base64_image(image_data)
    return image

def decode_base64_image(image_data):
    if ',' in image_data:
        header, encoded = image_data.split(',', 1)
    else:
        encoded = image_data
    image_bytes = base64.b64decode(encoded)
    image = Image.open(io.BytesIO(image_bytes))
    return image

def compute_image_hash(image):
    image_bytes = io.BytesIO()
    image.save(image_bytes, format='PNG')
    image_hash = hashlib.sha256(image_bytes.getvalue()).hexdigest()
    return image_hash

def check_api_url(api_url):
    info_url = api_url.rstrip('/') + '/info'
    try:
        response = requests.get(info_url, timeout=10)
        response.raise_for_status()
        print("Remote API is reachable.")
        return True
    except requests.exceptions.RequestException as e:
        print(f"Error: Failed to connect to the remote API at {info_url}. {e}")
        return False

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="GPU Verification Benchmark Script")
    parser.add_argument('--api-url', type=str, required=True,
                        help="Remote (e.g., http://remote-pc-address:7860)")
    parser.add_argument('--gpu-type', type=str, required=True,
                        help="Claimed GPU type of the remote PC (e.g., 'RTX 3090')")
    parser.add_argument('--num-images', type=int, default=5,
                        help="Number of images to generate and verify")
    parser.add_argument('--prompt', type=str, default="A futuristic city skyline at sunset",
                        help="Prompt for image generation")
    args = parser.parse_args()

    remote_api_url = args.api_url.rstrip('/')

    # Check if the API is reachable
    if not check_api_url(remote_api_url):
        sys.exit(1)

    remote_api_base_url = args.api_url.rstrip('/')
    remote_api_url = remote_api_base_url + '/sdapi/v1/txt2img'  # Ensure correct endpoint
    claimed_gpu_type = args.gpu_type
    num_images = args.num_images
    prompt = args.prompt

    try:
        # Get expected performance metrics based on claimed GPU
        time_threshold_per_image = get_expected_performance(claimed_gpu_type)

        # Generate random seeds for image generation
        seeds = [random.randint(0, 2**32 - 1) for _ in range(num_images)]

        print("Generating images locally for verification...")
        local_api_url = 'http://localhost:7861/sdapi/v1/txt2img'
        local_images = []
        for seed in seeds:
            image = generate_image_with_api(prompt, seed, api_url=local_api_url)
            local_images.append(image)
        local_hashes = [compute_image_hash(img) for img in local_images]

        # Request images from the remote API
        print("Requesting images from the remote API...")
        remote_images = []
        remote_times = []
        for seed in seeds:
            start_time = time.time()
            image = generate_image_with_api(prompt, seed, api_url=remote_api_url)
            time_taken = time.time() - start_time
            remote_images.append(image)
            remote_times.append(time_taken)

        # Compare image hashes and measure times
        all_hashes_match = True
        all_times_within_threshold = True

        for i in range(num_images):
            local_hash = local_hashes[i]
            remote_hash = compute_image_hash(remote_images[i])
            time_taken = remote_times[i]

            if local_hash != remote_hash:
                print(f"Verification failed: Image {i} hash does not match.")
                all_hashes_match = False
            else:
                print(f"Image {i} hash matches.")

            if time_taken > time_threshold_per_image:
                print(f"Verification failed: Image {i} generation took {time_taken:.2f}s, "
                      f"which exceeds the threshold of {time_threshold_per_image}s for {claimed_gpu_type}.")
                all_times_within_threshold = False
            else:
                print(f"Image {i} generated in {time_taken:.2f}s, within the acceptable threshold.")

        # Final result
        if all_hashes_match and all_times_within_threshold:
            print("\nVerification passed: All images match and were generated within the time threshold.")
            sys.exit(0)
        else:
            print("\nVerification failed.")
            sys.exit(1)

    except ValueError as ve:
        print(f"Error: {ve}")
        sys.exit(1)
    except requests.exceptions.RequestException as e:
        print(f"Error: Failed to connect to remote API. {e}")
        sys.exit(1)
    except requests.exceptions.Timeout:
        print("Error: Request to remote API timed out.")
        sys.exit(1)
    except requests.exceptions.HTTPError as e:
        print(f"Error: HTTP error occurred. {e}")
        sys.exit(1)
    except IOError:
        print("Error: Failed to decode the image. Ensure Pillow is installed and up to date.")
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()