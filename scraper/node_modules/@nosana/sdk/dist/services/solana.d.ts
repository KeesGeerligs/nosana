import { AnchorProvider, Program } from '@coral-xyz/anchor';
import { Keypair, PublicKey, Connection } from '@solana/web3.js';
import type { TokenAmount } from '@solana/web3.js';
import type { NosanaJobs, SolanaConfig, NosanaNodes, NosanaStake } from '../types/index.js';
import { Wallet } from '@coral-xyz/anchor/dist/cjs/provider.js';
/**
 * Class to interact with Nosana Programs on the Solana Blockchain,
 * with the use of Anchor.
 */
export declare class SolanaManager {
    provider: AnchorProvider | undefined;
    jobs: Program<NosanaJobs> | undefined;
    nodes: Program<NosanaNodes> | undefined;
    stake: {
        program: Program<NosanaStake> | null;
        poolsProgram: any;
        rewardsProgram: any;
    } | undefined;
    accounts: {
        [key: string]: PublicKey;
    } | undefined;
    stakeAccounts: {
        [key: string]: any;
    } | undefined;
    poolAccounts: {
        [key: string]: any;
    } | undefined;
    config: SolanaConfig;
    wallet: Wallet;
    connection: Connection | undefined;
    constructor(environment: string | undefined, wallet: Wallet | string | Keypair | Iterable<number>, config?: Partial<SolanaConfig>);
    requestAirdrop(amount?: number, publicKey?: PublicKey): Promise<string | boolean>;
    /**
     * Fetches latest NOS price from coingecko
     * @returns NOS Price in BTC, ETH and USD
     */
    getNosPrice(): Promise<any>;
    /**
     * Get NOS Balance of an address
     * @param address
     * @returns
     */
    getNosBalance(address?: string | PublicKey): Promise<TokenAmount | undefined>;
    /**
     * Get SOL balance of an address
     * @param address
     * @returns
     */
    getSolBalance(address?: string | PublicKey): Promise<number>;
    /**
     * Finds the MetaPlex metadata address for an NFT mint
     * See https://docs.metaplex.com/programs/token-metadata/changelog/v1.0
     * @param mint Publickey address of the NFT
     */
    getMetadataPDA(mint: PublicKey): PublicKey;
    /**
     * Find the first NFT from `collection` owned by `owner`
     * @param owner Publickey address of the owner of the NFT
     * @param collection Publickey address of the NFT collection
     */
    getNftFromCollection(owner: PublicKey | string, collection: string): Promise<PublicKey | undefined>;
    /**
     * Transfer NFT to other address
     * @param destination
     * @param nftAddress
     * @returns
     */
    transferNft(destination: string | PublicKey, nftAddress: string | PublicKey): Promise<string>;
    /**
     * Create a NOS ATA for given address
     * @param address
     * @returns ATA public key
     */
    createNosAta(address: string | PublicKey): Promise<PublicKey | undefined>;
    /**
     * get the NOS ATA of an address
     * @param address
     * @returns ATA Publickey
     */
    getNosATA(address: string | PublicKey): Promise<PublicKey>;
    /**
     * Function to load the Nosana Jobs program into JS
     * https://docs.nosana.io/programs/jobs.html
     */
    loadNosanaJobs(): Promise<void>;
    /**
     * Function to load the Nosana Nodes program into JS
     * https://docs.nosana.io/programs/nodes.html
     */
    loadNosanaNodes(): Promise<void>;
    /**
     * Function to load the Nosana Stake program into JS
     * https://docs.nosana.io/programs/staking.html
     */
    loadNosanaStake(): Promise<void>;
    /**
     * Function to set and calculate most account addresses needed for instructions
     */
    setAccounts(): Promise<void>;
    setStakeAccounts(): Promise<void>;
    /**
     * Sign message with wallet
     * @param message
     * @param verify
     * @returns
     */
    signMessage(message: string, verify?: boolean): Promise<Boolean | Uint8Array>;
}
