import { PublicKey } from '@solana/web3.js';
import type { Job, Market, Run } from '../types/index.js';
import { SolanaManager } from './solana.js';
declare const BN: any;
/**
 * Class to interact with the Nosana Jobs Program
 * https://docs.nosana.io/secrets/start.html
 */
export declare class Jobs extends SolanaManager {
    /**
     * Function to list a Nosana Job in a market
     * @param ipfsHash String of the IPFS hash locating the Nosana Job data.
     */
    list(ipfsHash: string, market?: PublicKey): Promise<{
        tx: string;
        job: string;
        run: string;
    }>;
    /**
     * Function to fetch a job from chain
     * @param job Publickey address of the job to fetch
     */
    get(job: PublicKey | string): Promise<Job>;
    /**
     * Function to fetch multiple jobs from chain
     * @param jobs array with Publickey addresses of the jobs to fetch
     */
    getMultiple(jobs: Array<PublicKey> | Array<string>, fetchRunAccounts?: boolean): Promise<Job[]>;
    /**
     * Function to fetch job accounts from chain
     * @param job Publickey address of the job to fetch
     */
    all(filters?: {
        [key: string]: any;
    }): Promise<{
        pubkey: PublicKey;
        state: number;
        timeStart: number;
        timeEnd: number;
    }[]>;
    /**
     * Function to fetch ALL job accounts from chain
     * NOTE: should only be used to make an export of all jobs
     */
    allFullJobs(): Promise<{
        pubkey: PublicKey;
        ipfsJob: string;
        ipfsResult: string;
        market: PublicKey;
        node: PublicKey;
        payer: PublicKey;
        price: BN;
        project: PublicKey;
        state: number;
        timeEnd: any;
        timeStart: any;
    }[]>;
    /**
     * Function to fetch a run from chain
     * @param run Publickey address of the run to fetch
     */
    getRun(run: PublicKey | string): Promise<Run>;
    /**
     * Function to fetch a run of a job from chain
     * @param job Publickey address of the job to fetch
     */
    getRuns(filter: PublicKey | string | Array<any>): Promise<Array<any>>;
    /**
     * Get all Runs
     * @returns
     */
    getActiveRuns(): Promise<Array<any>>;
    /**
     * Function to fetch a market from chain
     * @param market Publickey address of the market to fetch
     */
    getMarket(market: PublicKey | string): Promise<Market>;
    updateMarket(market: PublicKey | string, updatedData: {
        nodeAccessKey?: string;
        jobExpiration?: typeof BN;
        jobType?: number;
        jobPrice?: typeof BN;
        nodeStakeMinimum: typeof BN;
    }): Promise<string>;
    /**
     * Function to fetch all markets
     */
    allMarkets(): Promise<Array<any>>;
    /**
     * Function to queue a Node or work on a job
     * @returns
     */
    work(market: string | PublicKey, nft?: PublicKey): Promise<string>;
    /**
     * Function to submit a result
     * @param result Uint8Array of result
     * @param run Run account of job
     * @param run Market account of job
     * @returns transaction
     */
    submitResult(result: Array<any>, run: Run | string | PublicKey, market: Market | string | PublicKey): Promise<string>;
    /**
     * Function to quit a job
     * @param run Run account of the job
     * @returns
     */
    quit(run: Run | string | PublicKey): Promise<string>;
    /**
     * Exit the node queue
     * @returns
     */
    stop(market: string | PublicKey): Promise<string>;
}
export {};
