var global$1 = (typeof global !== "undefined" ? global :
  typeof self !== "undefined" ? self :
  typeof window !== "undefined" ? window : {});

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
var title = 'browser';
var platform$2 = 'browser';
var browser$4 = true;
var env = {};
var argv = [];
var version$1 = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};

function noop$1() {}

var on = noop$1;
var addListener = noop$1;
var once = noop$1;
var off = noop$1;
var removeListener = noop$1;
var removeAllListeners = noop$1;
var emit = noop$1;

function binding(name) {
    throw new Error('process.binding is not supported');
}

function cwd () { return '/' }
function chdir (dir) {
    throw new Error('process.chdir is not supported');
}function umask() { return 0; }

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$1.performance || {};
var performanceNow =
  performance.now        ||
  performance.mozNow     ||
  performance.msNow      ||
  performance.oNow       ||
  performance.webkitNow  ||
  function(){ return (new Date()).getTime() };

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){
  var clocktime = performanceNow.call(performance)*1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor((clocktime%1)*1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds<0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds,nanoseconds]
}

var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}

var browser$1$1 = {
  nextTick: nextTick,
  title: title,
  browser: browser$4,
  env: env,
  argv: argv,
  version: version$1,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform$2,
  release: release,
  config: config,
  uptime: uptime
};

var lookup$1 = [];
var revLookup$1 = [];
var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init () {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup$1[i] = code[i];
    revLookup$1[code.charCodeAt(i)] = i;
  }

  revLookup$1['-'.charCodeAt(0)] = 62;
  revLookup$1['_'.charCodeAt(0)] = 63;
}

function toByteArray$1 (b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr$1(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup$1[b64.charCodeAt(i)] << 18) | (revLookup$1[b64.charCodeAt(i + 1)] << 12) | (revLookup$1[b64.charCodeAt(i + 2)] << 6) | revLookup$1[b64.charCodeAt(i + 3)];
    arr[L++] = (tmp >> 16) & 0xFF;
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = (revLookup$1[b64.charCodeAt(i)] << 2) | (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = (revLookup$1[b64.charCodeAt(i)] << 10) | (revLookup$1[b64.charCodeAt(i + 1)] << 4) | (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64$1 (num) {
  return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
}

function encodeChunk$1 (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
    output.push(tripletToBase64$1(tmp));
  }
  return output.join('')
}

function fromByteArray$1 (uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup$1[tmp >> 2];
    output += lookup$1[(tmp << 4) & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
    output += lookup$1[tmp >> 10];
    output += lookup$1[(tmp >> 4) & 0x3F];
    output += lookup$1[(tmp << 2) & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('')
}

function read (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

function write (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString$3 = {}.toString;

var isArray$2 = Array.isArray || function (arr) {
  return toString$3.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
  ? global$1.TYPED_ARRAY_SUPPORT
  : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
var _kMaxLength = kMaxLength();

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr
};

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) ;
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
};

function allocUnsafe (that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
};

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength$1(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that
}

function fromObject (that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len);
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray$2(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length)
}
Buffer.isBuffer = isBuffer$2;
function internalIsBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!isArray$2(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer
};

function byteLength$1 (string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes$3(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes$3(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength$1;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  var length = this.length | 0;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer.prototype.equals = function equals (b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>'
};

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes$3(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray$1(buf)
  } else {
    return fromByteArray$1(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = (value & 0xff);
  return offset + 1
};

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24);
    this[offset + 2] = (value >>> 16);
    this[offset + 1] = (value >>> 8);
    this[offset] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    this[offset + 2] = (value >>> 16);
    this[offset + 3] = (value >>> 24);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val)
      ? val
      : utf8ToBytes$3(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes$3 (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}


function base64ToBytes (str) {
  return toByteArray$1(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}


// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer$2(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
}

function isFastBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
}

var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Buffer: Buffer,
  INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
  SlowBuffer: SlowBuffer,
  isBuffer: isBuffer$2,
  kMaxLength: _kMaxLength
});

function anumber$1(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error('positive integer expected, got ' + n);
}
// copied from utils
function isBytes$2(a) {
    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');
}
function abytes$2(b, ...lengths) {
    if (!isBytes$2(b))
        throw new Error('Uint8Array expected');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);
}
function ahash(h) {
    if (typeof h !== 'function' || typeof h.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    anumber$1(h.outputLen);
    anumber$1(h.blockLen);
}
function aexists$1(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
function aoutput$1(out, instance) {
    abytes$2(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error('digestInto() expects output buffer of length at least ' + min);
    }
}

const crypto$1 = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
// Cast array to view
const createView$1 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
// The rotate right (circular right shift) operation for uint32
const rotr$1 = (word, shift) => (word << (32 - shift)) | (word >>> shift);
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes$2(str) {
    if (typeof str !== 'string')
        throw new Error('utf8ToBytes expected string, got ' + typeof str);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */
function toBytes$1(data) {
    if (typeof data === 'string')
        data = utf8ToBytes$2(data);
    abytes$2(data);
    return data;
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes$1(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes$2(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
// For runtime check if class implements interface
let Hash$1 = class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
};
function wrapConstructor$1(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes$1(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
}
/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */
function randomBytes(bytesLength = 32) {
    if (crypto$1 && typeof crypto$1.getRandomValues === 'function') {
        return crypto$1.getRandomValues(new Uint8Array(bytesLength));
    }
    // Legacy Node.js compatibility
    if (crypto$1 && typeof crypto$1.randomBytes === 'function') {
        return crypto$1.randomBytes(bytesLength);
    }
    throw new Error('crypto.getRandomValues must be defined');
}

/**
 * Polyfill for Safari 14
 */
function setBigUint64$1(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
/**
 * Choice: a ? b : c
 */
const Chi$1 = (a, b, c) => (a & b) ^ (~a & c);
/**
 * Majority function, true if any two inputs is true
 */
const Maj$1 = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
/**
 * Merkle-Damgard hash construction base class.
 * Could be used to create MD5, RIPEMD, SHA1, SHA2.
 */
let HashMD$1 = class HashMD extends Hash$1 {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = createView$1(this.buffer);
    }
    update(data) {
        aexists$1(this);
        const { view, buffer, blockLen } = this;
        data = toBytes$1(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = createView$1(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        aexists$1(this);
        aoutput$1(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in
        // current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64$1(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = createView$1(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4)
            throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
            throw new Error('_sha2: outputLen bigger than state');
        for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
};

const U32_MASK64$1 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n$1 = /* @__PURE__ */ BigInt(32);
// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.
// TODO: re-check https://issues.chromium.org/issues/42212588
function fromBig$1(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64$1), l: Number((n >> _32n$1) & U32_MASK64$1) };
    return { h: Number((n >> _32n$1) & U32_MASK64$1) | 0, l: Number(n & U32_MASK64$1) | 0 };
}
function split$1(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig$1(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
const toBig = (h, l) => (BigInt(h >>> 0) << _32n$1) | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, _l, s) => h >>> s;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l) => l;
const rotr32L = (h, _l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH$1 = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL$1 = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH$1 = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL$1 = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
// prettier-ignore
const u64$6 = {
    fromBig: fromBig$1, split: split$1, toBig,
    shrSH, shrSL,
    rotrSH, rotrSL, rotrBH, rotrBL,
    rotr32H, rotr32L,
    rotlSH: rotlSH$1, rotlSL: rotlSL$1, rotlBH: rotlBH$1, rotlBL: rotlBL$1,
    add, add3L, add3H, add4L, add4H, add5H, add5L,
};
var u64$7 = u64$6;

// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64$7.split([
    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
].map(n => BigInt(n))))();
// Temporary buffer, not used to store anything between runs
const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
class SHA512 extends HashMD$1 {
    constructor() {
        super(128, 64, 16, false);
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x6a09e667 | 0;
        this.Al = 0xf3bcc908 | 0;
        this.Bh = 0xbb67ae85 | 0;
        this.Bl = 0x84caa73b | 0;
        this.Ch = 0x3c6ef372 | 0;
        this.Cl = 0xfe94f82b | 0;
        this.Dh = 0xa54ff53a | 0;
        this.Dl = 0x5f1d36f1 | 0;
        this.Eh = 0x510e527f | 0;
        this.El = 0xade682d1 | 0;
        this.Fh = 0x9b05688c | 0;
        this.Fl = 0x2b3e6c1f | 0;
        this.Gh = 0x1f83d9ab | 0;
        this.Gl = 0xfb41bd6b | 0;
        this.Hh = 0x5be0cd19 | 0;
        this.Hl = 0x137e2179 | 0;
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32((offset += 4));
        }
        for (let i = 16; i < 80; i++) {
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = u64$7.rotrSH(W15h, W15l, 1) ^ u64$7.rotrSH(W15h, W15l, 8) ^ u64$7.shrSH(W15h, W15l, 7);
            const s0l = u64$7.rotrSL(W15h, W15l, 1) ^ u64$7.rotrSL(W15h, W15l, 8) ^ u64$7.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = u64$7.rotrSH(W2h, W2l, 19) ^ u64$7.rotrBH(W2h, W2l, 61) ^ u64$7.shrSH(W2h, W2l, 6);
            const s1l = u64$7.rotrSL(W2h, W2l, 19) ^ u64$7.rotrBL(W2h, W2l, 61) ^ u64$7.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = u64$7.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = u64$7.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for (let i = 0; i < 80; i++) {
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = u64$7.rotrSH(Eh, El, 14) ^ u64$7.rotrSH(Eh, El, 18) ^ u64$7.rotrBH(Eh, El, 41);
            const sigma1l = u64$7.rotrSL(Eh, El, 14) ^ u64$7.rotrSL(Eh, El, 18) ^ u64$7.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = (Eh & Fh) ^ (~Eh & Gh);
            const CHIl = (El & Fl) ^ (~El & Gl);
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = u64$7.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = u64$7.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = u64$7.rotrSH(Ah, Al, 28) ^ u64$7.rotrBH(Ah, Al, 34) ^ u64$7.rotrBH(Ah, Al, 39);
            const sigma0l = u64$7.rotrSL(Ah, Al, 28) ^ u64$7.rotrBL(Ah, Al, 34) ^ u64$7.rotrBL(Ah, Al, 39);
            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = u64$7.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = u64$7.add3L(T1l, sigma0l, MAJl);
            Ah = u64$7.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = u64$7.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = u64$7.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = u64$7.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = u64$7.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = u64$7.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = u64$7.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = u64$7.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = u64$7.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
const sha512 = /* @__PURE__ */ wrapConstructor$1(() => new SHA512());

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
const _0n$5 = /* @__PURE__ */ BigInt(0);
const _1n$7 = /* @__PURE__ */ BigInt(1);
const _2n$5 = /* @__PURE__ */ BigInt(2);
function isBytes$1(a) {
    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');
}
function abytes$1(item) {
    if (!isBytes$1(item))
        throw new Error('Uint8Array expected');
}
function abool(title, value) {
    if (typeof value !== 'boolean')
        throw new Error(title + ' boolean expected, got ' + value);
}
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex(bytes) {
    abytes$1(bytes);
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? '0' + hex : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    return hex === '' ? _0n$5 : BigInt('0x' + hex); // Big Endian
}
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
    if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0; // '2' => 50-48
    if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10); // 'B' => 66-(65-10)
    if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10); // 'b' => 98-(97-10)
    return;
}
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
        throw new Error('hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163
    }
    return array;
}
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
function bytesToNumberLE(bytes) {
    abytes$1(bytes);
    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, '0'));
}
function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
}
// Unpadded, rarely used
function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
}
/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */
function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === 'string') {
        try {
            res = hexToBytes(hex);
        }
        catch (e) {
            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);
        }
    }
    else if (isBytes$1(hex)) {
        // Uint8Array.from() instead of hash.slice() because node.js Buffer
        // is instance of Uint8Array, and its slice() creates **mutable** copy
        res = Uint8Array.from(hex);
    }
    else {
        throw new Error(title + ' must be hex string or Uint8Array');
    }
    const len = res.length;
    if (typeof expectedLength === 'number' && len !== expectedLength)
        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);
    return res;
}
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes$1(a);
        sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
// Compares 2 u8a-s in kinda constant time
function equalBytes(a, b) {
    if (a.length !== b.length)
        return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
    return diff === 0;
}
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes$1(str) {
    if (typeof str !== 'string')
        throw new Error('string expected');
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
// Is positive bigint
const isPosBig = (n) => typeof n === 'bigint' && _0n$5 <= n;
function inRange$1(n, min, max) {
    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
}
/**
 * Asserts min <= n < max. NOTE: It's < max and not <= max.
 * @example
 * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)
 */
function aInRange(title, n, min, max) {
    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?
    // consider P=256n, min=0n, max=P
    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`
    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`
    // - our way is the cleanest:               `inRange('x', x, 0n, P)
    if (!inRange$1(n, min, max))
        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);
}
// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */
function bitLen(n) {
    let len;
    for (len = 0; n > _0n$5; n >>= _1n$7, len += 1)
        ;
    return len;
}
/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */
function bitGet(n, pos) {
    return (n >> BigInt(pos)) & _1n$7;
}
/**
 * Sets single bit at position.
 */
function bitSet(n, pos, value) {
    return n | ((value ? _1n$7 : _0n$5) << BigInt(pos));
}
/**
 * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
 * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
 */
const bitMask = (n) => (_2n$5 << BigInt(n - 1)) - _1n$7;
// DRBG
const u8n = (data) => new Uint8Array(data); // creates Uint8Array
const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== 'number' || hashLen < 2)
        throw new Error('hashLen must be a number');
    if (typeof qByteLen !== 'number' || qByteLen < 2)
        throw new Error('qByteLen must be a number');
    if (typeof hmacFn !== 'function')
        throw new Error('hmacFn must be a function');
    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
    let i = 0; // Iterations counter, will throw when over 1000
    const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
    const reseed = (seed = u8n()) => {
        // HMAC-DRBG reseed() function. Steps D-G
        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
        v = h(); // v = hmac(k || v)
        if (seed.length === 0)
            return;
        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
        v = h(); // v = hmac(k || v)
    };
    const gen = () => {
        // HMAC-DRBG generate() function
        if (i++ >= 1000)
            throw new Error('drbg: tried 1000 values');
        let len = 0;
        const out = [];
        while (len < qByteLen) {
            v = h();
            const sl = v.slice();
            out.push(sl);
            len += v.length;
        }
        return concatBytes(...out);
    };
    const genUntil = (seed, pred) => {
        reset();
        reseed(seed); // Steps D-G
        let res = undefined; // Step H: grind until k is in [1..n-1]
        while (!(res = pred(gen())))
            reseed();
        reset();
        return res;
    };
    return genUntil;
}
// Validating curves and fields
const validatorFns = {
    bigint: (val) => typeof val === 'bigint',
    function: (val) => typeof val === 'function',
    boolean: (val) => typeof val === 'boolean',
    string: (val) => typeof val === 'string',
    stringOrUint8Array: (val) => typeof val === 'string' || isBytes$1(val),
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
};
// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== 'function')
            throw new Error('invalid validator function');
        const val = object[fieldName];
        if (isOptional && val === undefined)
            return;
        if (!checkVal(val, object)) {
            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);
        }
    };
    for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
    return object;
}
// validate type tests
// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
// // Should fail type-check
// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
/**
 * throws not implemented error
 */
const notImplemented = () => {
    throw new Error('not implemented');
};
/**
 * Memoizes (caches) computation result.
 * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.
 */
function memoized(fn) {
    const map = new WeakMap();
    return (arg, ...args) => {
        const val = map.get(arg);
        if (val !== undefined)
            return val;
        const computed = fn(arg, ...args);
        map.set(arg, computed);
        return computed;
    };
}

var ut = /*#__PURE__*/Object.freeze({
  __proto__: null,
  aInRange: aInRange,
  abool: abool,
  abytes: abytes$1,
  bitGet: bitGet,
  bitLen: bitLen,
  bitMask: bitMask,
  bitSet: bitSet,
  bytesToHex: bytesToHex,
  bytesToNumberBE: bytesToNumberBE,
  bytesToNumberLE: bytesToNumberLE,
  concatBytes: concatBytes,
  createHmacDrbg: createHmacDrbg,
  ensureBytes: ensureBytes,
  equalBytes: equalBytes,
  hexToBytes: hexToBytes,
  hexToNumber: hexToNumber,
  inRange: inRange$1,
  isBytes: isBytes$1,
  memoized: memoized,
  notImplemented: notImplemented,
  numberToBytesBE: numberToBytesBE,
  numberToBytesLE: numberToBytesLE,
  numberToHexUnpadded: numberToHexUnpadded,
  numberToVarBytesBE: numberToVarBytesBE,
  utf8ToBytes: utf8ToBytes$1,
  validateObject: validateObject
});

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Utilities for modular arithmetics and finite fields
// prettier-ignore
const _0n$4 = BigInt(0), _1n$6 = BigInt(1), _2n$4 = /* @__PURE__ */ BigInt(2), _3n$1 = /* @__PURE__ */ BigInt(3);
// prettier-ignore
const _4n = /* @__PURE__ */ BigInt(4), _5n$1 = /* @__PURE__ */ BigInt(5), _8n$2 = /* @__PURE__ */ BigInt(8);
// Calculates a modulo b
function mod(a, b) {
    const result = a % b;
    return result >= _0n$4 ? result : b + result;
}
/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */
// TODO: use field version && remove
function pow(num, power, modulo) {
    if (power < _0n$4)
        throw new Error('invalid exponent, negatives unsupported');
    if (modulo <= _0n$4)
        throw new Error('invalid modulus');
    if (modulo === _1n$6)
        return _0n$4;
    let res = _1n$6;
    while (power > _0n$4) {
        if (power & _1n$6)
            res = (res * num) % modulo;
        num = (num * num) % modulo;
        power >>= _1n$6;
    }
    return res;
}
// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n$4) {
        res *= res;
        res %= modulo;
    }
    return res;
}
// Inverses number over modulo
function invert(number, modulo) {
    if (number === _0n$4)
        throw new Error('invert: expected non-zero number');
    if (modulo <= _0n$4)
        throw new Error('invert: expected positive modulus, got ' + modulo);
    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
    let a = mod(number, modulo);
    let b = modulo;
    // prettier-ignore
    let x = _0n$4, u = _1n$6;
    while (a !== _0n$4) {
        // JIT applies optimization if those two lines follow each other
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        // prettier-ignore
        b = a, a = r, x = u, u = m;
    }
    const gcd = b;
    if (gcd !== _1n$6)
        throw new Error('invert: does not exist');
    return mod(x, modulo);
}
/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */
function tonelliShanks(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    const legendreC = (P - _1n$6) / _2n$4;
    let Q, S, Z;
    // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd
    for (Q = P - _1n$6, S = 0; Q % _2n$4 === _0n$4; Q /= _2n$4, S++)
        ;
    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    for (Z = _2n$4; Z < P && pow(Z, legendreC, P) !== P - _1n$6; Z++) {
        // Crash instead of infinity loop, we cannot reasonable count until P.
        if (Z > 1000)
            throw new Error('Cannot find square root: likely non-prime P');
    }
    // Fast-path
    if (S === 1) {
        const p1div4 = (P + _1n$6) / _4n;
        return function tonelliFast(Fp, n) {
            const root = Fp.pow(n, p1div4);
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Slow-path
    const Q1div2 = (Q + _1n$6) / _2n$4;
    return function tonelliSlow(Fp, n) {
        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
            throw new Error('Cannot find square root');
        let r = S;
        // TODO: will fail at Fp2/etc
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
        let x = Fp.pow(n, Q1div2); // first guess at the square root
        let b = Fp.pow(n, Q); // first guess at the fudge factor
        while (!Fp.eql(b, Fp.ONE)) {
            if (Fp.eql(b, Fp.ZERO))
                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
            // Find m such b^(2^m)==1
            let m = 1;
            for (let t2 = Fp.sqr(b); m < r; m++) {
                if (Fp.eql(t2, Fp.ONE))
                    break;
                t2 = Fp.sqr(t2); // t2 *= t2
            }
            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
            const ge = Fp.pow(g, _1n$6 << BigInt(r - m - 1)); // ge = 2^(r-m-1)
            g = Fp.sqr(ge); // g = ge * ge
            x = Fp.mul(x, ge); // x *= ge
            b = Fp.mul(b, g); // b *= g
            r = m;
        }
        return x;
    };
}
function FpSqrt(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n === _3n$1) {
        // Not all roots possible!
        // const ORDER =
        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
        // const NUM = 72057594037927816n;
        const p1div4 = (P + _1n$6) / _4n;
        return function sqrt3mod4(Fp, n) {
            const root = Fp.pow(n, p1div4);
            // Throw if root**2 != n
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
    if (P % _8n$2 === _5n$1) {
        const c1 = (P - _5n$1) / _8n$2;
        return function sqrt5mod8(Fp, n) {
            const n2 = Fp.mul(n, _2n$4);
            const v = Fp.pow(n2, c1);
            const nv = Fp.mul(n, v);
            const i = Fp.mul(Fp.mul(nv, _2n$4), v);
            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Other cases: Tonelli-Shanks algorithm
    return tonelliShanks(P);
}
// Little-endian check for first LE bit (last BE bit);
const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n$6) === _1n$6;
// prettier-ignore
const FIELD_FIELDS = [
    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
    'eql', 'add', 'sub', 'mul', 'pow', 'div',
    'addN', 'subN', 'mulN', 'sqrN'
];
function validateField(field) {
    const initial = {
        ORDER: 'bigint',
        MASK: 'bigint',
        BYTES: 'isSafeInteger',
        BITS: 'isSafeInteger',
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = 'function';
        return map;
    }, initial);
    return validateObject(field, opts);
}
// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */
function FpPow(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < _0n$4)
        throw new Error('invalid exponent, negatives unsupported');
    if (power === _0n$4)
        return f.ONE;
    if (power === _1n$6)
        return num;
    let p = f.ONE;
    let d = num;
    while (power > _0n$4) {
        if (power & _1n$6)
            p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n$6;
    }
    return p;
}
/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */
function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    // Walk from first to last, multiply them by each other MOD p
    const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
            return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
    }, f.ONE);
    // Invert last element
    const inverted = f.inv(lastMultiplied);
    // Walk from last to first, multiply them by inverted each other MOD p
    nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
            return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
    }, inverted);
    return tmp;
}
// CURVE.n lengths
function nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
}
/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * NOTE: operations don't check 'isValid' for all elements for performance reasons,
 * it is caller responsibility to check this.
 * This is low-level code, please make sure you know what you doing.
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */
function Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= _0n$4)
        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
    if (BYTES > 2048)
        throw new Error('invalid field: expected ORDER of <= 2048 bytes');
    let sqrtP; // cached sqrtP
    const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: bitMask(BITS),
        ZERO: _0n$4,
        ONE: _1n$6,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
            if (typeof num !== 'bigint')
                throw new Error('invalid field element: expected bigint, got ' + typeof num);
            return _0n$4 <= num && num < ORDER; // 0 is valid element, but it's not invertible
        },
        is0: (num) => num === _0n$4,
        isOdd: (num) => (num & _1n$6) === _1n$6,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt ||
            ((n) => {
                if (!sqrtP)
                    sqrtP = FpSqrt(ORDER);
                return sqrtP(f, n);
            }),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => (c ? b : a),
        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),
        fromBytes: (bytes) => {
            if (bytes.length !== BYTES)
                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);
            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
        },
    });
    return Object.freeze(f);
}
/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */
function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== 'bigint')
        throw new Error('field order must be bigint');
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
}
/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */
function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
}
/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */
function mapHashToField(key, fieldOrder, isLE = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
    if (len < 16 || len < minLen || len > 1024)
        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);
    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);
    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
    const reduced = mod(num, fieldOrder - _1n$6) + _1n$6;
    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Abelian group utilities
const _0n$3 = BigInt(0);
const _1n$5 = BigInt(1);
function constTimeNegate(condition, item) {
    const neg = item.negate();
    return condition ? neg : item;
}
function validateW(W, bits) {
    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);
}
function calcWOpts(W, bits) {
    validateW(W, bits);
    const windows = Math.ceil(bits / W) + 1; // +1, because
    const windowSize = 2 ** (W - 1); // -1 because we skip zero
    return { windows, windowSize };
}
function validateMSMPoints(points, c) {
    if (!Array.isArray(points))
        throw new Error('array expected');
    points.forEach((p, i) => {
        if (!(p instanceof c))
            throw new Error('invalid point at index ' + i);
    });
}
function validateMSMScalars(scalars, field) {
    if (!Array.isArray(scalars))
        throw new Error('array of scalars expected');
    scalars.forEach((s, i) => {
        if (!field.isValid(s))
            throw new Error('invalid scalar at index ' + i);
    });
}
// Since points in different groups cannot be equal (different object constructor),
// we can have single place to store precomputes
const pointPrecomputes = new WeakMap();
const pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)
function getW(P) {
    return pointWindowSizes.get(P) || 1;
}
// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function wNAF(c, bits) {
    return {
        constTimeNegate,
        hasPrecomputes(elm) {
            return getW(elm) !== 1;
        },
        // non-const time multiplication ladder
        unsafeLadder(elm, n, p = c.ZERO) {
            let d = elm;
            while (n > _0n$3) {
                if (n & _1n$5)
                    p = p.add(d);
                d = d.double();
                n >>= _1n$5;
            }
            return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @param elm Point instance
         * @param W window size
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
            const { windows, windowSize } = calcWOpts(W, bits);
            const points = [];
            let p = elm;
            let base = p;
            for (let window = 0; window < windows; window++) {
                base = p;
                points.push(base);
                // =1, because we skip zero
                for (let i = 1; i < windowSize; i++) {
                    base = base.add(p);
                    points.push(base);
                }
                p = base.double();
            }
            return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
            // But need to carefully remove other checks before wNAF. ORDER == bits here
            const { windows, windowSize } = calcWOpts(W, bits);
            let p = c.ZERO;
            let f = c.BASE;
            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
            const maxNumber = 2 ** W;
            const shiftBy = BigInt(W);
            for (let window = 0; window < windows; window++) {
                const offset = window * windowSize;
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                    wbits -= maxNumber;
                    n += _1n$5;
                }
                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                // there is negate now: it is possible that negated element from low value
                // would be the same as high element, which will create carry into next window.
                // It's not obvious how this can fail, but still worth investigating later.
                // Check if we're onto Zero point.
                // Add random point inside current window to f.
                const offset1 = offset;
                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                const cond1 = window % 2 !== 0;
                const cond2 = wbits < 0;
                if (wbits === 0) {
                    // The most important part for const-time getPublicKey
                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                }
                else {
                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                }
            }
            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
            // Even if the variable is still unused, there are some checks which will
            // throw an exception, so compiler needs to prove they won't happen, which is hard.
            // At this point there is a way to F be infinity-point even if p is not,
            // which makes it less const-time: around 1 bigint multiply.
            return { p, f };
        },
        /**
         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @param acc accumulator point to add result of multiplication
         * @returns point
         */
        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {
            const { windows, windowSize } = calcWOpts(W, bits);
            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
            const maxNumber = 2 ** W;
            const shiftBy = BigInt(W);
            for (let window = 0; window < windows; window++) {
                const offset = window * windowSize;
                if (n === _0n$3)
                    break; // No need to go over empty scalar
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                    wbits -= maxNumber;
                    n += _1n$5;
                }
                if (wbits === 0)
                    continue;
                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero
                if (wbits < 0)
                    curr = curr.negate();
                // NOTE: by re-using acc, we can save a lot of additions in case of MSM
                acc = acc.add(curr);
            }
            return acc;
        },
        getPrecomputes(W, P, transform) {
            // Calculate precomputes on a first run, reuse them after
            let comp = pointPrecomputes.get(P);
            if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1)
                    pointPrecomputes.set(P, transform(comp));
            }
            return comp;
        },
        wNAFCached(P, n, transform) {
            const W = getW(P);
            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);
        },
        wNAFCachedUnsafe(P, n, transform, prev) {
            const W = getW(P);
            if (W === 1)
                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster
            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);
        },
        // We calculate precomputes for elliptic curve point multiplication
        // using windowed method. This specifies window size and
        // stores precomputed values. Usually only base point would be precomputed.
        setWindowSize(P, W) {
            validateW(W, bits);
            pointWindowSizes.set(P, W);
            pointPrecomputes.delete(P);
        },
    };
}
/**
 * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).
 * 30x faster vs naive addition on L=4096, 10x faster with precomputes.
 * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.
 * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.
 * @param c Curve Point constructor
 * @param fieldN field over CURVE.N - important that it's not over CURVE.P
 * @param points array of L curve points
 * @param scalars array of L scalars (aka private keys / bigints)
 */
function pippenger(c, fieldN, points, scalars) {
    // If we split scalars by some window (let's say 8 bits), every chunk will only
    // take 256 buckets even if there are 4096 scalars, also re-uses double.
    // TODO:
    // - https://eprint.iacr.org/2024/750.pdf
    // - https://tches.iacr.org/index.php/TCHES/article/view/10287
    // 0 is accepted in scalars
    validateMSMPoints(points, c);
    validateMSMScalars(scalars, fieldN);
    if (points.length !== scalars.length)
        throw new Error('arrays of points and scalars must have equal length');
    const zero = c.ZERO;
    const wbits = bitLen(BigInt(points.length));
    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits
    const MASK = (1 << windowSize) - 1;
    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array
    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
    let sum = zero;
    for (let i = lastBits; i >= 0; i -= windowSize) {
        buckets.fill(zero);
        for (let j = 0; j < scalars.length; j++) {
            const scalar = scalars[j];
            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));
            buckets[wbits] = buckets[wbits].add(points[j]);
        }
        let resI = zero; // not using this will do small speed-up, but will lose ct
        // Skip first bucket, because it is zero
        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {
            sumI = sumI.add(buckets[j]);
            resI = resI.add(sumI);
        }
        sum = sum.add(resI);
        if (i !== 0)
            for (let j = 0; j < windowSize; j++)
                sum = sum.double();
    }
    return sum;
}
function validateBasic(curve) {
    validateField(curve.Fp);
    validateObject(curve, {
        n: 'bigint',
        h: 'bigint',
        Gx: 'field',
        Gy: 'field',
    }, {
        nBitLength: 'isSafeInteger',
        nByteLength: 'isSafeInteger',
    });
    // Set defaults
    return Object.freeze({
        ...nLength(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER },
    });
}

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²
// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const _0n$2 = BigInt(0), _1n$4 = BigInt(1), _2n$3 = BigInt(2), _8n$1 = BigInt(8);
// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:
const VERIFY_DEFAULT = { zip215: true };
function validateOpts$1(curve) {
    const opts = validateBasic(curve);
    validateObject(curve, {
        hash: 'function',
        a: 'bigint',
        d: 'bigint',
        randomBytes: 'function',
    }, {
        adjustScalarBytes: 'function',
        domain: 'function',
        uvRatio: 'function',
        mapToCurve: 'function',
    });
    // Set defaults
    return Object.freeze({ ...opts });
}
/**
 * Creates Twisted Edwards curve with EdDSA signatures.
 * @example
 * import { Field } from '@noble/curves/abstract/modular';
 * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h
 * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })
 */
function twistedEdwards(curveDef) {
    const CURVE = validateOpts$1(curveDef);
    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;
    // Important:
    // There are some places where Fp.BYTES is used instead of nByteLength.
    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.
    // TODO: test and find curves which behave otherwise.
    const MASK = _2n$3 << (BigInt(nByteLength * 8) - _1n$4);
    const modP = Fp.create; // Function overrides
    const Fn = Field(CURVE.n, CURVE.nBitLength);
    // sqrt(u/v)
    const uvRatio = CURVE.uvRatio ||
        ((u, v) => {
            try {
                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };
            }
            catch (e) {
                return { isValid: false, value: _0n$2 };
            }
        });
    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP
    const domain = CURVE.domain ||
        ((data, ctx, phflag) => {
            abool('phflag', phflag);
            if (ctx.length || phflag)
                throw new Error('Contexts/pre-hash are not supported');
            return data;
        }); // NOOP
    // 0 <= n < MASK
    // Coordinates larger than Fp.ORDER are allowed for zip215
    function aCoordinate(title, n) {
        aInRange('coordinate ' + title, n, _0n$2, MASK);
    }
    function assertPoint(other) {
        if (!(other instanceof Point))
            throw new Error('ExtendedPoint expected');
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    const toAffineMemo = memoized((p, iz) => {
        const { ex: x, ey: y, ez: z } = p;
        const is0 = p.is0();
        if (iz == null)
            iz = is0 ? _8n$1 : Fp.inv(z); // 8 was chosen arbitrarily
        const ax = modP(x * iz);
        const ay = modP(y * iz);
        const zz = modP(z * iz);
        if (is0)
            return { x: _0n$2, y: _1n$4 };
        if (zz !== _1n$4)
            throw new Error('invZ was invalid');
        return { x: ax, y: ay };
    });
    const assertValidMemo = memoized((p) => {
        const { a, d } = CURVE;
        if (p.is0())
            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?
        // Equation in affine coordinates: ax² + y² = 1 + dx²y²
        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²
        const { ex: X, ey: Y, ez: Z, et: T } = p;
        const X2 = modP(X * X); // X²
        const Y2 = modP(Y * Y); // Y²
        const Z2 = modP(Z * Z); // Z²
        const Z4 = modP(Z2 * Z2); // Z⁴
        const aX2 = modP(X2 * a); // aX²
        const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²
        const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²
        if (left !== right)
            throw new Error('bad point: equation left != right (1)');
        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T
        const XY = modP(X * Y);
        const ZT = modP(Z * T);
        if (XY !== ZT)
            throw new Error('bad point: equation left != right (2)');
        return true;
    });
    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).
    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates
    class Point {
        constructor(ex, ey, ez, et) {
            this.ex = ex;
            this.ey = ey;
            this.ez = ez;
            this.et = et;
            aCoordinate('x', ex);
            aCoordinate('y', ey);
            aCoordinate('z', ez);
            aCoordinate('t', et);
            Object.freeze(this);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        static fromAffine(p) {
            if (p instanceof Point)
                throw new Error('extended point not allowed');
            const { x, y } = p || {};
            aCoordinate('x', x);
            aCoordinate('y', y);
            return new Point(x, y, _1n$4, modP(x * y));
        }
        static normalizeZ(points) {
            const toInv = Fp.invertBatch(points.map((p) => p.ez));
            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
            return pippenger(Point, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            wnaf.setWindowSize(this, windowSize);
        }
        // Not required for fromHex(), which always creates valid points.
        // Could be useful for fromAffine().
        assertValidity() {
            assertValidMemo(this);
        }
        // Compare one point to another.
        equals(other) {
            assertPoint(other);
            const { ex: X1, ey: Y1, ez: Z1 } = this;
            const { ex: X2, ey: Y2, ez: Z2 } = other;
            const X1Z2 = modP(X1 * Z2);
            const X2Z1 = modP(X2 * Z1);
            const Y1Z2 = modP(Y1 * Z2);
            const Y2Z1 = modP(Y2 * Z1);
            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        negate() {
            // Flips point sign to a negative one (-x, y in affine coords)
            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));
        }
        // Fast algo for doubling Extended Point.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
        // Cost: 4M + 4S + 1*a + 6add + 1*2.
        double() {
            const { a } = CURVE;
            const { ex: X1, ey: Y1, ez: Z1 } = this;
            const A = modP(X1 * X1); // A = X12
            const B = modP(Y1 * Y1); // B = Y12
            const C = modP(_2n$3 * modP(Z1 * Z1)); // C = 2*Z12
            const D = modP(a * A); // D = a*A
            const x1y1 = X1 + Y1;
            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B
            const G = D + B; // G = D+B
            const F = G - C; // F = G-C
            const H = D - B; // H = D-B
            const X3 = modP(E * F); // X3 = E*F
            const Y3 = modP(G * H); // Y3 = G*H
            const T3 = modP(E * H); // T3 = E*H
            const Z3 = modP(F * G); // Z3 = F*G
            return new Point(X3, Y3, Z3, T3);
        }
        // Fast algo for adding 2 Extended Points.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
        // Cost: 9M + 1*a + 1*d + 7add.
        add(other) {
            assertPoint(other);
            const { a, d } = CURVE;
            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;
            // Faster algo for adding 2 Extended Points when curve's a=-1.
            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4
            // Cost: 8M + 8add + 2*2.
            // Note: It does not check whether the `other` point is valid.
            if (a === BigInt(-1)) {
                const A = modP((Y1 - X1) * (Y2 + X2));
                const B = modP((Y1 + X1) * (Y2 - X2));
                const F = modP(B - A);
                if (F === _0n$2)
                    return this.double(); // Same point. Tests say it doesn't affect timing
                const C = modP(Z1 * _2n$3 * T2);
                const D = modP(T1 * _2n$3 * Z2);
                const E = D + C;
                const G = B + A;
                const H = D - C;
                const X3 = modP(E * F);
                const Y3 = modP(G * H);
                const T3 = modP(E * H);
                const Z3 = modP(F * G);
                return new Point(X3, Y3, Z3, T3);
            }
            const A = modP(X1 * X2); // A = X1*X2
            const B = modP(Y1 * Y2); // B = Y1*Y2
            const C = modP(T1 * d * T2); // C = T1*d*T2
            const D = modP(Z1 * Z2); // D = Z1*Z2
            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B
            const F = D - C; // F = D-C
            const G = D + C; // G = D+C
            const H = modP(B - a * A); // H = B-a*A
            const X3 = modP(E * F); // X3 = E*F
            const Y3 = modP(G * H); // Y3 = G*H
            const T3 = modP(E * H); // T3 = E*H
            const Z3 = modP(F * G); // Z3 = F*G
            return new Point(X3, Y3, Z3, T3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, n, Point.normalizeZ);
        }
        // Constant-time multiplication.
        multiply(scalar) {
            const n = scalar;
            aInRange('scalar', n, _1n$4, CURVE_ORDER); // 1 <= scalar < L
            const { p, f } = this.wNAF(n);
            return Point.normalizeZ([p, f])[0];
        }
        // Non-constant-time multiplication. Uses double-and-add algorithm.
        // It's faster, but should only be used when you don't care about
        // an exposed private key e.g. sig verification.
        // Does NOT allow scalars higher than CURVE.n.
        // Accepts optional accumulator to merge with multiply (important for sparse scalars)
        multiplyUnsafe(scalar, acc = Point.ZERO) {
            const n = scalar;
            aInRange('scalar', n, _0n$2, CURVE_ORDER); // 0 <= scalar < L
            if (n === _0n$2)
                return I;
            if (this.is0() || n === _1n$4)
                return this;
            return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);
        }
        // Checks if point is of small order.
        // If you add something to small order point, you will have "dirty"
        // point with torsion component.
        // Multiplies point by cofactor and checks if the result is 0.
        isSmallOrder() {
            return this.multiplyUnsafe(cofactor).is0();
        }
        // Multiplies point by curve order and checks if the result is 0.
        // Returns `false` is the point is dirty.
        isTorsionFree() {
            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
        }
        // Converts Extended point to default (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        toAffine(iz) {
            return toAffineMemo(this, iz);
        }
        clearCofactor() {
            const { h: cofactor } = CURVE;
            if (cofactor === _1n$4)
                return this;
            return this.multiplyUnsafe(cofactor);
        }
        // Converts hash string or Uint8Array to Point.
        // Uses algo from RFC8032 5.1.3.
        static fromHex(hex, zip215 = false) {
            const { d, a } = CURVE;
            const len = Fp.BYTES;
            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array
            abool('zip215', zip215);
            const normed = hex.slice(); // copy again, we'll manipulate it
            const lastByte = hex[len - 1]; // select last byte
            normed[len - 1] = lastByte & ~0x80; // clear last bit
            const y = bytesToNumberLE(normed);
            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.
            // RFC8032 prohibits >= p, but ZIP215 doesn't
            // zip215=true:  0 <= y < MASK (2^256 for ed25519)
            // zip215=false: 0 <= y < P (2^255-19 for ed25519)
            const max = zip215 ? MASK : Fp.ORDER;
            aInRange('pointHex.y', y, _0n$2, max);
            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:
            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)
            const y2 = modP(y * y); // denominator is always non-0 mod p.
            const u = modP(y2 - _1n$4); // u = y² - 1
            const v = modP(d * y2 - a); // v = d y² + 1.
            let { isValid, value: x } = uvRatio(u, v); // √(u/v)
            if (!isValid)
                throw new Error('Point.fromHex: invalid y coordinate');
            const isXOdd = (x & _1n$4) === _1n$4; // There are 2 square roots. Use x_0 bit to select proper
            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit
            if (!zip215 && x === _0n$2 && isLastByteOdd)
                // if x=0 and x_0 = 1, fail
                throw new Error('Point.fromHex: x=0 and x_0=1');
            if (isLastByteOdd !== isXOdd)
                x = modP(-x); // if x_0 != x mod 2, set x = p-x
            return Point.fromAffine({ x, y });
        }
        static fromPrivateKey(privKey) {
            return getExtendedPublicKey(privKey).point;
        }
        toRawBytes() {
            const { x, y } = this.toAffine();
            const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)
            bytes[bytes.length - 1] |= x & _1n$4 ? 0x80 : 0; // when compressing, it's enough to store y
            return bytes; // and use the last byte to encode sign of x
        }
        toHex() {
            return bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n$4, modP(CURVE.Gx * CURVE.Gy));
    Point.ZERO = new Point(_0n$2, _1n$4, _1n$4, _0n$2); // 0, 1, 1, 0
    const { BASE: G, ZERO: I } = Point;
    const wnaf = wNAF(Point, nByteLength * 8);
    function modN(a) {
        return mod(a, CURVE_ORDER);
    }
    // Little-endian SHA512 with modulo n
    function modN_LE(hash) {
        return modN(bytesToNumberLE(hash));
    }
    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */
    function getExtendedPublicKey(key) {
        const len = Fp.BYTES;
        key = ensureBytes('private key', key, len);
        // Hash private key with curve's hash function to produce uniformingly random input
        // Check byte lengths: ensure(64, h(ensure(32, key)))
        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);
        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE
        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)
        const scalar = modN_LE(head); // The actual private scalar
        const point = G.multiply(scalar); // Point on Edwards curve aka public key
        const pointBytes = point.toRawBytes(); // Uint8Array representation
        return { head, prefix, scalar, point, pointBytes };
    }
    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared
    function getPublicKey(privKey) {
        return getExtendedPublicKey(privKey).pointBytes;
    }
    // int('LE', SHA512(dom2(F, C) || msgs)) mod N
    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {
        const msg = concatBytes(...msgs);
        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));
    }
    /** Signs message with privateKey. RFC8032 5.1.6 */
    function sign(msg, privKey, options = {}) {
        msg = ensureBytes('message', msg);
        if (prehash)
            msg = prehash(msg); // for ed25519ph etc.
        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)
        const R = G.multiply(r).toRawBytes(); // R = rG
        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)
        const s = modN(r + k * scalar); // S = (r + k * s) mod L
        aInRange('signature.s', s, _0n$2, CURVE_ORDER); // 0 <= s < l
        const res = concatBytes(R, numberToBytesLE(s, Fp.BYTES));
        return ensureBytes('result', res, Fp.BYTES * 2); // 64-byte signature
    }
    const verifyOpts = VERIFY_DEFAULT;
    /**
     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.
     * An extended group equation is checked.
     */
    function verify(sig, msg, publicKey, options = verifyOpts) {
        const { context, zip215 } = options;
        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.
        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.
        msg = ensureBytes('message', msg);
        publicKey = ensureBytes('publicKey', publicKey, len);
        if (zip215 !== undefined)
            abool('zip215', zip215);
        if (prehash)
            msg = prehash(msg); // for ed25519ph, etc
        const s = bytesToNumberLE(sig.slice(len, 2 * len));
        let A, R, SB;
        try {
            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.
            // zip215=true:  0 <= y < MASK (2^256 for ed25519)
            // zip215=false: 0 <= y < P (2^255-19 for ed25519)
            A = Point.fromHex(publicKey, zip215);
            R = Point.fromHex(sig.slice(0, len), zip215);
            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside
        }
        catch (error) {
            return false;
        }
        if (!zip215 && A.isSmallOrder())
            return false;
        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
        const RkA = R.add(A.multiplyUnsafe(k));
        // Extended group equation
        // [8][S]B = [8]R + [8][k]A'
        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);
    }
    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.
    const utils = {
        getExtendedPublicKey,
        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
        randomPrivateKey: () => randomBytes(Fp.BYTES),
        /**
         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
         * values. This slows down first getPublicKey() by milliseconds (see Speed section),
         * but allows to speed-up subsequent getPublicKey() calls up to 20x.
         * @param windowSize 2, 4, 8, 16
         */
        precompute(windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3));
            return point;
        },
    };
    return {
        CURVE,
        getPublicKey,
        sign,
        verify,
        ExtendedPoint: Point,
        utils,
    };
}

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
/**
 * ed25519 Twisted Edwards curve with following addons:
 * - X25519 ECDH
 * - Ristretto cofactor elimination
 * - Elligator hash-to-group / point indistinguishability
 */
const ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');
// √(-1) aka √(a) aka 2^((p-1)/4)
const ED25519_SQRT_M1 = /* @__PURE__ */ BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');
// prettier-ignore
BigInt(0); const _1n$3 = BigInt(1), _2n$2 = BigInt(2); BigInt(3);
// prettier-ignore
const _5n = BigInt(5), _8n = BigInt(8);
function ed25519_pow_2_252_3(x) {
    // prettier-ignore
    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
    const P = ED25519_P;
    const x2 = (x * x) % P;
    const b2 = (x2 * x) % P; // x^3, 11
    const b4 = (pow2(b2, _2n$2, P) * b2) % P; // x^15, 1111
    const b5 = (pow2(b4, _1n$3, P) * x) % P; // x^31
    const b10 = (pow2(b5, _5n, P) * b5) % P;
    const b20 = (pow2(b10, _10n, P) * b10) % P;
    const b40 = (pow2(b20, _20n, P) * b20) % P;
    const b80 = (pow2(b40, _40n, P) * b40) % P;
    const b160 = (pow2(b80, _80n, P) * b80) % P;
    const b240 = (pow2(b160, _80n, P) * b80) % P;
    const b250 = (pow2(b240, _10n, P) * b10) % P;
    const pow_p_5_8 = (pow2(b250, _2n$2, P) * x) % P;
    // ^ To pow to (p+3)/8, multiply it by x.
    return { pow_p_5_8, b2 };
}
function adjustScalarBytes(bytes) {
    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
    // set the three least significant bits of the first byte
    bytes[0] &= 248; // 0b1111_1000
    // and the most significant bit of the last to zero,
    bytes[31] &= 127; // 0b0111_1111
    // set the second most significant bit of the last byte to 1
    bytes[31] |= 64; // 0b0100_0000
    return bytes;
}
// sqrt(u/v)
function uvRatio(u, v) {
    const P = ED25519_P;
    const v3 = mod(v * v * v, P); // v³
    const v7 = mod(v3 * v3 * v, P); // v⁷
    // (p+3)/8 and (p-5)/8
    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8
    const vx2 = mod(v * x * x, P); // vx²
    const root1 = x; // First root candidate
    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate
    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root
    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)
    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)
    if (useRoot1)
        x = root1;
    if (useRoot2 || noRoot)
        x = root2; // We return root2 anyway, for const-time
    if (isNegativeLE(x, P))
        x = mod(-x, P);
    return { isValid: useRoot1 || useRoot2, value: x };
}
const Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();
const ed25519Defaults = /* @__PURE__ */ (() => ({
    // Param: a
    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster
    // d is equal to -121665/121666 over finite field.
    // Negative number is P - number, and division is invert(number, P)
    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),
    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
    Fp,
    // Subgroup order: how many points curve has
    // 2n**252n + 27742317777372353535851937790883648493n;
    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),
    // Cofactor
    h: _8n,
    // Base point (x, y) aka generator point
    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),
    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),
    hash: sha512,
    randomBytes,
    adjustScalarBytes,
    // dom2
    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
    // Constant-time, u/√v
    uvRatio,
}))();
/**
 * ed25519 curve with EdDSA signatures.
 */
const ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();

var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs$3 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

var bn = {exports: {}};

var require$$0$1 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(_polyfillNode_buffer);

bn.exports;

(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require$$0$1.Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	    // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this._strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this._strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  function move (dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }

	  BN.prototype._move = function _move (dest) {
	    move(dest, this);
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
	    try {
	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }

	  function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16, 2);
	  };

	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer (endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  var allocate = function allocate (ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    this._strip();

	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };

	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
	    var position = 0;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = (word >> 8) & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position < res.length) {
	      res[position++] = carry;

	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };

	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = (word >> 8) & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position >= 0) {
	      res[position--] = carry;

	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] >>> wbit) & 0x01;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this._strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this._strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this._strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  function jumboMulTo (self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this._strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this._strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modrn = function modrn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn (num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this._strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal$1); 
} (bn));

var bnExports = bn.exports;
var BN$2 = /*@__PURE__*/getDefaultExportFromCjs$3(bnExports);

var safeBuffer = {exports: {}};

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */
	var buffer = require$$0$1;
	var Buffer = buffer.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}; 
} (safeBuffer, safeBuffer.exports));

var safeBufferExports = safeBuffer.exports;

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer$2 = safeBufferExports.Buffer;
function base$4 (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256);
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
  function encode (source) {
    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer$2.from(source); }
    if (!_Buffer$2.isBuffer(source)) { throw new TypeError('Expected Buffer') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
    var b58 = new Uint8Array(size);
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin];
            // Apply "b58 = b58 * 256 + ch".
      var i = 0;
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0;
        b58[it1] = (carry % BASE) >>> 0;
        carry = (carry / BASE) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      pbegin++;
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return _Buffer$2.alloc(0) }
    var psz = 0;
        // Skip and count leading '1's.
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size);
        // Process the characters.
    while (psz < source.length) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)];
            // Invalid character
      if (carry === 255) { return }
      var i = 0;
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0;
        b256[it3] = (carry % 256) >>> 0;
        carry = (carry / 256) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      psz++;
    }
        // Skip leading zeroes in b256.
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = _Buffer$2.allocUnsafe(zeroes + (size - it4));
    vch.fill(0x00, 0, zeroes);
    var j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string);
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
var src$5 = base$4;

var basex$3 = src$5;
var ALPHABET$4 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

var bs58$6 = basex$3(ALPHABET$4);

var bs58$7 = /*@__PURE__*/getDefaultExportFromCjs$3(bs58$6);

function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error('positive integer expected, got ' + n);
}
// copied from utils
function isBytes(a) {
    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');
}
function abytes(b, ...lengths) {
    if (!isBytes(b))
        throw new Error('Uint8Array expected');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);
}
function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
function aoutput(out, instance) {
    abytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error('digestInto() expects output buffer of length at least ' + min);
    }
}

/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
const u32$5 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
// Cast array to view
const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();
// The byte swap operation for uint32
const byteSwap = (word) => ((word << 24) & 0xff000000) |
    ((word << 8) & 0xff0000) |
    ((word >>> 8) & 0xff00) |
    ((word >>> 24) & 0xff);
// In place byte swap for Uint32Array
function byteSwap32(arr) {
    for (let i = 0; i < arr.length; i++) {
        arr[i] = byteSwap(arr[i]);
    }
}
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== 'string')
        throw new Error('utf8ToBytes expected string, got ' + typeof str);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */
function toBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    abytes(data);
    return data;
}
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
}

/**
 * Polyfill for Safari 14
 */
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
/**
 * Choice: a ? b : c
 */
const Chi = (a, b, c) => (a & b) ^ (~a & c);
/**
 * Majority function, true if any two inputs is true
 */
const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
/**
 * Merkle-Damgard hash construction base class.
 * Could be used to create MD5, RIPEMD, SHA1, SHA2.
 */
class HashMD extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = createView(this.buffer);
    }
    update(data) {
        aexists(this);
        const { view, buffer, blockLen } = this;
        data = toBytes(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = createView(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        aexists(this);
        aoutput(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in
        // current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = createView(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4)
            throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
            throw new Error('_sha2: outputLen bigger than state');
        for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
}

// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per late 2024.
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K$1 = /* @__PURE__ */ new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state:
// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
// prettier-ignore
const SHA256_IV$1 = /* @__PURE__ */ new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W$1 = /* @__PURE__ */ new Uint32Array(64);
let SHA256$1 = class SHA256 extends HashMD {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = SHA256_IV$1[0] | 0;
        this.B = SHA256_IV$1[1] | 0;
        this.C = SHA256_IV$1[2] | 0;
        this.D = SHA256_IV$1[3] | 0;
        this.E = SHA256_IV$1[4] | 0;
        this.F = SHA256_IV$1[5] | 0;
        this.G = SHA256_IV$1[6] | 0;
        this.H = SHA256_IV$1[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W$1[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W$1[i - 15];
            const W2 = SHA256_W$1[i - 2];
            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
            SHA256_W$1[i] = (s1 + SHA256_W$1[i - 7] + s0 + SHA256_W$1[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K$1[i] + SHA256_W$1[i]) | 0;
            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W$1.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
};
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
const sha256$2 = /* @__PURE__ */ wrapConstructor(() => new SHA256$1());

var lib$2 = {};

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer$1 = safeBufferExports.Buffer;
function base$3 (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256);
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
  function encode (source) {
    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer$1.from(source); }
    if (!_Buffer$1.isBuffer(source)) { throw new TypeError('Expected Buffer') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
    var b58 = new Uint8Array(size);
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin];
            // Apply "b58 = b58 * 256 + ch".
      var i = 0;
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0;
        b58[it1] = (carry % BASE) >>> 0;
        carry = (carry / BASE) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      pbegin++;
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return _Buffer$1.alloc(0) }
    var psz = 0;
        // Skip and count leading '1's.
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size);
        // Process the characters.
    while (psz < source.length) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)];
            // Invalid character
      if (carry === 255) { return }
      var i = 0;
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0;
        b256[it3] = (carry % 256) >>> 0;
        carry = (carry / 256) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      psz++;
    }
        // Skip leading zeroes in b256.
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = _Buffer$1.allocUnsafe(zeroes + (size - it4));
    vch.fill(0x00, 0, zeroes);
    var j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string);
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
var src$4 = base$3;

var basex$2 = src$4;
var ALPHABET$3 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

var bs58$5 = basex$2(ALPHABET$3);

// This is free and unencumbered software released into the public domain.
// See LICENSE.md for more information.

//
// Utilities
//

/**
 * @param {number} a The number to test.
 * @param {number} min The minimum value in the range, inclusive.
 * @param {number} max The maximum value in the range, inclusive.
 * @return {boolean} True if a >= min and a <= max.
 */
function inRange(a, min, max) {
  return min <= a && a <= max;
}

/**
 * @param {*} o
 * @return {Object}
 */
function ToDictionary(o) {
  if (o === undefined) return {};
  if (o === Object(o)) return o;
  throw TypeError('Could not convert argument to dictionary');
}

/**
 * @param {string} string Input string of UTF-16 code units.
 * @return {!Array.<number>} Code points.
 */
function stringToCodePoints(string) {
  // https://heycam.github.io/webidl/#dfn-obtain-unicode

  // 1. Let S be the DOMString value.
  var s = String(string);

  // 2. Let n be the length of S.
  var n = s.length;

  // 3. Initialize i to 0.
  var i = 0;

  // 4. Initialize U to be an empty sequence of Unicode characters.
  var u = [];

  // 5. While i < n:
  while (i < n) {

    // 1. Let c be the code unit in S at index i.
    var c = s.charCodeAt(i);

    // 2. Depending on the value of c:

    // c < 0xD800 or c > 0xDFFF
    if (c < 0xD800 || c > 0xDFFF) {
      // Append to U the Unicode character with code point c.
      u.push(c);
    }

    // 0xDC00 ≤ c ≤ 0xDFFF
    else if (0xDC00 <= c && c <= 0xDFFF) {
      // Append to U a U+FFFD REPLACEMENT CHARACTER.
      u.push(0xFFFD);
    }

    // 0xD800 ≤ c ≤ 0xDBFF
    else if (0xD800 <= c && c <= 0xDBFF) {
      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
      // CHARACTER.
      if (i === n - 1) {
        u.push(0xFFFD);
      }
      // 2. Otherwise, i < n−1:
      else {
        // 1. Let d be the code unit in S at index i+1.
        var d = string.charCodeAt(i + 1);

        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
        if (0xDC00 <= d && d <= 0xDFFF) {
          // 1. Let a be c & 0x3FF.
          var a = c & 0x3FF;

          // 2. Let b be d & 0x3FF.
          var b = d & 0x3FF;

          // 3. Append to U the Unicode character with code point
          // 2^16+2^10*a+b.
          u.push(0x10000 + (a << 10) + b);

          // 4. Set i to i+1.
          i += 1;
        }

        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
        // U+FFFD REPLACEMENT CHARACTER.
        else  {
          u.push(0xFFFD);
        }
      }
    }

    // 3. Set i to i+1.
    i += 1;
  }

  // 6. Return U.
  return u;
}

/**
 * @param {!Array.<number>} code_points Array of code points.
 * @return {string} string String of UTF-16 code units.
 */
function codePointsToString(code_points) {
  var s = '';
  for (var i = 0; i < code_points.length; ++i) {
    var cp = code_points[i];
    if (cp <= 0xFFFF) {
      s += String.fromCharCode(cp);
    } else {
      cp -= 0x10000;
      s += String.fromCharCode((cp >> 10) + 0xD800,
                               (cp & 0x3FF) + 0xDC00);
    }
  }
  return s;
}


//
// Implementation of Encoding specification
// https://encoding.spec.whatwg.org/
//

//
// 3. Terminology
//

/**
 * End-of-stream is a special token that signifies no more tokens
 * are in the stream.
 * @const
 */ var end_of_stream = -1;

/**
 * A stream represents an ordered sequence of tokens.
 *
 * @constructor
 * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
 * stream.
 */
function Stream(tokens) {
  /** @type {!Array.<number>} */
  this.tokens = [].slice.call(tokens);
}

Stream.prototype = {
  /**
   * @return {boolean} True if end-of-stream has been hit.
   */
  endOfStream: function() {
    return !this.tokens.length;
  },

  /**
   * When a token is read from a stream, the first token in the
   * stream must be returned and subsequently removed, and
   * end-of-stream must be returned otherwise.
   *
   * @return {number} Get the next token from the stream, or
   * end_of_stream.
   */
   read: function() {
    if (!this.tokens.length)
      return end_of_stream;
     return this.tokens.shift();
   },

  /**
   * When one or more tokens are prepended to a stream, those tokens
   * must be inserted, in given order, before the first token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
   */
  prepend: function(token) {
    if (Array.isArray(token)) {
      var tokens = /**@type {!Array.<number>}*/(token);
      while (tokens.length)
        this.tokens.unshift(tokens.pop());
    } else {
      this.tokens.unshift(token);
    }
  },

  /**
   * When one or more tokens are pushed to a stream, those tokens
   * must be inserted, in given order, after the last token in the
   * stream.
   *
   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
   */
  push: function(token) {
    if (Array.isArray(token)) {
      var tokens = /**@type {!Array.<number>}*/(token);
      while (tokens.length)
        this.tokens.push(tokens.shift());
    } else {
      this.tokens.push(token);
    }
  }
};

//
// 4. Encodings
//

// 4.1 Encoders and decoders

/** @const */
var finished = -1;

/**
 * @param {boolean} fatal If true, decoding errors raise an exception.
 * @param {number=} opt_code_point Override the standard fallback code point.
 * @return {number} The code point to insert on a decoding error.
 */
function decoderError(fatal, opt_code_point) {
  if (fatal)
    throw TypeError('Decoder error');
  return opt_code_point || 0xFFFD;
}

//
// 7. API
//

/** @const */ var DEFAULT_ENCODING = 'utf-8';

// 7.1 Interface TextDecoder

/**
 * @constructor
 * @param {string=} encoding The label of the encoding;
 *     defaults to 'utf-8'.
 * @param {Object=} options
 */
function TextDecoder$1(encoding, options) {
  if (!(this instanceof TextDecoder$1)) {
    return new TextDecoder$1(encoding, options);
  }
  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
  if (encoding !== DEFAULT_ENCODING) {
    throw new Error('Encoding not supported. Only utf-8 is supported');
  }
  options = ToDictionary(options);

  /** @private @type {boolean} */
  this._streaming = false;
  /** @private @type {boolean} */
  this._BOMseen = false;
  /** @private @type {?Decoder} */
  this._decoder = null;
  /** @private @type {boolean} */
  this._fatal = Boolean(options['fatal']);
  /** @private @type {boolean} */
  this._ignoreBOM = Boolean(options['ignoreBOM']);

  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
  Object.defineProperty(this, 'fatal', {value: this._fatal});
  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});
}

TextDecoder$1.prototype = {
  /**
   * @param {ArrayBufferView=} input The buffer of bytes to decode.
   * @param {Object=} options
   * @return {string} The decoded string.
   */
  decode: function decode(input, options) {
    var bytes;
    if (typeof input === 'object' && input instanceof ArrayBuffer) {
      bytes = new Uint8Array(input);
    } else if (typeof input === 'object' && 'buffer' in input &&
               input.buffer instanceof ArrayBuffer) {
      bytes = new Uint8Array(input.buffer,
                             input.byteOffset,
                             input.byteLength);
    } else {
      bytes = new Uint8Array(0);
    }

    options = ToDictionary(options);

    if (!this._streaming) {
      this._decoder = new UTF8Decoder({fatal: this._fatal});
      this._BOMseen = false;
    }
    this._streaming = Boolean(options['stream']);

    var input_stream = new Stream(bytes);

    var code_points = [];

    /** @type {?(number|!Array.<number>)} */
    var result;

    while (!input_stream.endOfStream()) {
      result = this._decoder.handler(input_stream, input_stream.read());
      if (result === finished)
        break;
      if (result === null)
        continue;
      if (Array.isArray(result))
        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
      else
        code_points.push(result);
    }
    if (!this._streaming) {
      do {
        result = this._decoder.handler(input_stream, input_stream.read());
        if (result === finished)
          break;
        if (result === null)
          continue;
        if (Array.isArray(result))
          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
        else
          code_points.push(result);
      } while (!input_stream.endOfStream());
      this._decoder = null;
    }

    if (code_points.length) {
      // If encoding is one of utf-8, utf-16be, and utf-16le, and
      // ignore BOM flag and BOM seen flag are unset, run these
      // subsubsteps:
      if (['utf-8'].indexOf(this.encoding) !== -1 &&
          !this._ignoreBOM && !this._BOMseen) {
        // If token is U+FEFF, set BOM seen flag.
        if (code_points[0] === 0xFEFF) {
          this._BOMseen = true;
          code_points.shift();
        } else {
          // Otherwise, if token is not end-of-stream, set BOM seen
          // flag and append token to output.
          this._BOMseen = true;
        }
      }
    }

    return codePointsToString(code_points);
  }
};

// 7.2 Interface TextEncoder

/**
 * @constructor
 * @param {string=} encoding The label of the encoding;
 *     defaults to 'utf-8'.
 * @param {Object=} options
 */
function TextEncoder$1(encoding, options) {
  if (!(this instanceof TextEncoder$1))
    return new TextEncoder$1(encoding, options);
  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
  if (encoding !== DEFAULT_ENCODING) {
    throw new Error('Encoding not supported. Only utf-8 is supported');
  }
  options = ToDictionary(options);

  /** @private @type {boolean} */
  this._streaming = false;
  /** @private @type {?Encoder} */
  this._encoder = null;
  /** @private @type {{fatal: boolean}} */
  this._options = {fatal: Boolean(options['fatal'])};

  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
}

TextEncoder$1.prototype = {
  /**
   * @param {string=} opt_string The string to encode.
   * @param {Object=} options
   * @return {Uint8Array} Encoded bytes, as a Uint8Array.
   */
  encode: function encode(opt_string, options) {
    opt_string = opt_string ? String(opt_string) : '';
    options = ToDictionary(options);

    // NOTE: This option is nonstandard. None of the encodings
    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
    // so streaming is not necessary.
    if (!this._streaming)
      this._encoder = new UTF8Encoder(this._options);
    this._streaming = Boolean(options['stream']);

    var bytes = [];
    var input_stream = new Stream(stringToCodePoints(opt_string));
    /** @type {?(number|!Array.<number>)} */
    var result;
    while (!input_stream.endOfStream()) {
      result = this._encoder.handler(input_stream, input_stream.read());
      if (result === finished)
        break;
      if (Array.isArray(result))
        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
      else
        bytes.push(result);
    }
    if (!this._streaming) {
      while (true) {
        result = this._encoder.handler(input_stream, input_stream.read());
        if (result === finished)
          break;
        if (Array.isArray(result))
          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
        else
          bytes.push(result);
      }
      this._encoder = null;
    }
    return new Uint8Array(bytes);
  }
};

//
// 8. The encoding
//

// 8.1 utf-8

/**
 * @constructor
 * @implements {Decoder}
 * @param {{fatal: boolean}} options
 */
function UTF8Decoder(options) {
  var fatal = options.fatal;

  // utf-8's decoder's has an associated utf-8 code point, utf-8
  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
  // lower boundary (initially 0x80), and a utf-8 upper boundary
  // (initially 0xBF).
  var /** @type {number} */ utf8_code_point = 0,
      /** @type {number} */ utf8_bytes_seen = 0,
      /** @type {number} */ utf8_bytes_needed = 0,
      /** @type {number} */ utf8_lower_boundary = 0x80,
      /** @type {number} */ utf8_upper_boundary = 0xBF;

  /**
   * @param {Stream} stream The stream of bytes being decoded.
   * @param {number} bite The next byte read from the stream.
   * @return {?(number|!Array.<number>)} The next code point(s)
   *     decoded, or null if not enough data exists in the input
   *     stream to decode a complete code point.
   */
  this.handler = function(stream, bite) {
    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
    // set utf-8 bytes needed to 0 and return error.
    if (bite === end_of_stream && utf8_bytes_needed !== 0) {
      utf8_bytes_needed = 0;
      return decoderError(fatal);
    }

    // 2. If byte is end-of-stream, return finished.
    if (bite === end_of_stream)
      return finished;

    // 3. If utf-8 bytes needed is 0, based on byte:
    if (utf8_bytes_needed === 0) {

      // 0x00 to 0x7F
      if (inRange(bite, 0x00, 0x7F)) {
        // Return a code point whose value is byte.
        return bite;
      }

      // 0xC2 to 0xDF
      if (inRange(bite, 0xC2, 0xDF)) {
        // Set utf-8 bytes needed to 1 and utf-8 code point to byte
        // − 0xC0.
        utf8_bytes_needed = 1;
        utf8_code_point = bite - 0xC0;
      }

      // 0xE0 to 0xEF
      else if (inRange(bite, 0xE0, 0xEF)) {
        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
        if (bite === 0xE0)
          utf8_lower_boundary = 0xA0;
        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
        if (bite === 0xED)
          utf8_upper_boundary = 0x9F;
        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
        // byte − 0xE0.
        utf8_bytes_needed = 2;
        utf8_code_point = bite - 0xE0;
      }

      // 0xF0 to 0xF4
      else if (inRange(bite, 0xF0, 0xF4)) {
        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
        if (bite === 0xF0)
          utf8_lower_boundary = 0x90;
        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
        if (bite === 0xF4)
          utf8_upper_boundary = 0x8F;
        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
        // byte − 0xF0.
        utf8_bytes_needed = 3;
        utf8_code_point = bite - 0xF0;
      }

      // Otherwise
      else {
        // Return error.
        return decoderError(fatal);
      }

      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
      // point to utf-8 code point << (6 × utf-8 bytes needed) and
      // return continue.
      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);
      return null;
    }

    // 4. If byte is not in the range utf-8 lower boundary to utf-8
    // upper boundary, run these substeps:
    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
      // utf-8 upper boundary to 0xBF.
      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
      utf8_lower_boundary = 0x80;
      utf8_upper_boundary = 0xBF;

      // 2. Prepend byte to stream.
      stream.prepend(bite);

      // 3. Return error.
      return decoderError(fatal);
    }

    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
    // to 0xBF.
    utf8_lower_boundary = 0x80;
    utf8_upper_boundary = 0xBF;

    // 6. Increase utf-8 bytes seen by one and set utf-8 code point
    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
    // needed − utf-8 bytes seen)).
    utf8_bytes_seen += 1;
    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));

    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
    // continue.
    if (utf8_bytes_seen !== utf8_bytes_needed)
      return null;

    // 8. Let code point be utf-8 code point.
    var code_point = utf8_code_point;

    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
    // seen to 0.
    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

    // 10. Return a code point whose value is code point.
    return code_point;
  };
}

/**
 * @constructor
 * @implements {Encoder}
 * @param {{fatal: boolean}} options
 */
function UTF8Encoder(options) {
  options.fatal;
  /**
   * @param {Stream} stream Input stream.
   * @param {number} code_point Next code point read from the stream.
   * @return {(number|!Array.<number>)} Byte(s) to emit.
   */
  this.handler = function(stream, code_point) {
    // 1. If code point is end-of-stream, return finished.
    if (code_point === end_of_stream)
      return finished;

    // 2. If code point is in the range U+0000 to U+007F, return a
    // byte whose value is code point.
    if (inRange(code_point, 0x0000, 0x007f))
      return code_point;

    // 3. Set count and offset based on the range code point is in:
    var count, offset;
    // U+0080 to U+07FF:    1 and 0xC0
    if (inRange(code_point, 0x0080, 0x07FF)) {
      count = 1;
      offset = 0xC0;
    }
    // U+0800 to U+FFFF:    2 and 0xE0
    else if (inRange(code_point, 0x0800, 0xFFFF)) {
      count = 2;
      offset = 0xE0;
    }
    // U+10000 to U+10FFFF: 3 and 0xF0
    else if (inRange(code_point, 0x10000, 0x10FFFF)) {
      count = 3;
      offset = 0xF0;
    }

    // 4.Let bytes be a byte sequence whose first byte is (code
    // point >> (6 × count)) + offset.
    var bytes = [(code_point >> (6 * count)) + offset];

    // 5. Run these substeps while count is greater than 0:
    while (count > 0) {

      // 1. Set temp to code point >> (6 × (count − 1)).
      var temp = code_point >> (6 * (count - 1));

      // 2. Append to bytes 0x80 | (temp & 0x3F).
      bytes.push(0x80 | (temp & 0x3F));

      // 3. Decrease count by one.
      count -= 1;
    }

    // 6. Return bytes bytes, in order.
    return bytes;
  };
}

var encoding_lib = /*#__PURE__*/Object.freeze({
  __proto__: null,
  TextDecoder: TextDecoder$1,
  TextEncoder: TextEncoder$1
});

var require$$2 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(encoding_lib);

var __createBinding$2 = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$2 = (commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar$2 = (commonjsGlobal$1 && commonjsGlobal$1.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
    __setModuleDefault$2(result, mod);
    return result;
};
var __importDefault$1 = (commonjsGlobal$1 && commonjsGlobal$1.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(lib$2, "__esModule", { value: true });
var deserializeUnchecked_1 = lib$2.deserializeUnchecked = deserialize_1 = lib$2.deserialize = serialize_1 = lib$2.serialize = lib$2.BinaryReader = lib$2.BinaryWriter = lib$2.BorshError = lib$2.baseDecode = lib$2.baseEncode = void 0;
const bn_js_1 = __importDefault$1(bnExports);
const bs58_1$1 = __importDefault$1(bs58$5);
// TODO: Make sure this polyfill not included when not required
const encoding = __importStar$2(require$$2);
const ResolvedTextDecoder = typeof TextDecoder !== "function" ? encoding.TextDecoder : TextDecoder;
const textDecoder = new ResolvedTextDecoder("utf-8", { fatal: true });
function baseEncode(value) {
    if (typeof value === "string") {
        value = Buffer.from(value, "utf8");
    }
    return bs58_1$1.default.encode(Buffer.from(value));
}
lib$2.baseEncode = baseEncode;
function baseDecode(value) {
    return Buffer.from(bs58_1$1.default.decode(value));
}
lib$2.baseDecode = baseDecode;
const INITIAL_LENGTH = 1024;
class BorshError extends Error {
    constructor(message) {
        super(message);
        this.fieldPath = [];
        this.originalMessage = message;
    }
    addToFieldPath(fieldName) {
        this.fieldPath.splice(0, 0, fieldName);
        // NOTE: Modifying message directly as jest doesn't use .toString()
        this.message = this.originalMessage + ": " + this.fieldPath.join(".");
    }
}
lib$2.BorshError = BorshError;
/// Binary encoder.
class BinaryWriter {
    constructor() {
        this.buf = Buffer.alloc(INITIAL_LENGTH);
        this.length = 0;
    }
    maybeResize() {
        if (this.buf.length < 16 + this.length) {
            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);
        }
    }
    writeU8(value) {
        this.maybeResize();
        this.buf.writeUInt8(value, this.length);
        this.length += 1;
    }
    writeU16(value) {
        this.maybeResize();
        this.buf.writeUInt16LE(value, this.length);
        this.length += 2;
    }
    writeU32(value) {
        this.maybeResize();
        this.buf.writeUInt32LE(value, this.length);
        this.length += 4;
    }
    writeU64(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 8)));
    }
    writeU128(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 16)));
    }
    writeU256(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 32)));
    }
    writeU512(value) {
        this.maybeResize();
        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray("le", 64)));
    }
    writeBuffer(buffer) {
        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser
        this.buf = Buffer.concat([
            Buffer.from(this.buf.subarray(0, this.length)),
            buffer,
            Buffer.alloc(INITIAL_LENGTH),
        ]);
        this.length += buffer.length;
    }
    writeString(str) {
        this.maybeResize();
        const b = Buffer.from(str, "utf8");
        this.writeU32(b.length);
        this.writeBuffer(b);
    }
    writeFixedArray(array) {
        this.writeBuffer(Buffer.from(array));
    }
    writeArray(array, fn) {
        this.maybeResize();
        this.writeU32(array.length);
        for (const elem of array) {
            this.maybeResize();
            fn(elem);
        }
    }
    toArray() {
        return this.buf.subarray(0, this.length);
    }
}
lib$2.BinaryWriter = BinaryWriter;
function handlingRangeError(target, propertyKey, propertyDescriptor) {
    const originalMethod = propertyDescriptor.value;
    propertyDescriptor.value = function (...args) {
        try {
            return originalMethod.apply(this, args);
        }
        catch (e) {
            if (e instanceof RangeError) {
                const code = e.code;
                if (["ERR_BUFFER_OUT_OF_BOUNDS", "ERR_OUT_OF_RANGE"].indexOf(code) >= 0) {
                    throw new BorshError("Reached the end of buffer when deserializing");
                }
            }
            throw e;
        }
    };
}
class BinaryReader {
    constructor(buf) {
        this.buf = buf;
        this.offset = 0;
    }
    readU8() {
        const value = this.buf.readUInt8(this.offset);
        this.offset += 1;
        return value;
    }
    readU16() {
        const value = this.buf.readUInt16LE(this.offset);
        this.offset += 2;
        return value;
    }
    readU32() {
        const value = this.buf.readUInt32LE(this.offset);
        this.offset += 4;
        return value;
    }
    readU64() {
        const buf = this.readBuffer(8);
        return new bn_js_1.default(buf, "le");
    }
    readU128() {
        const buf = this.readBuffer(16);
        return new bn_js_1.default(buf, "le");
    }
    readU256() {
        const buf = this.readBuffer(32);
        return new bn_js_1.default(buf, "le");
    }
    readU512() {
        const buf = this.readBuffer(64);
        return new bn_js_1.default(buf, "le");
    }
    readBuffer(len) {
        if (this.offset + len > this.buf.length) {
            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);
        }
        const result = this.buf.slice(this.offset, this.offset + len);
        this.offset += len;
        return result;
    }
    readString() {
        const len = this.readU32();
        const buf = this.readBuffer(len);
        try {
            // NOTE: Using TextDecoder to fail on invalid UTF-8
            return textDecoder.decode(buf);
        }
        catch (e) {
            throw new BorshError(`Error decoding UTF-8 string: ${e}`);
        }
    }
    readFixedArray(len) {
        return new Uint8Array(this.readBuffer(len));
    }
    readArray(fn) {
        const len = this.readU32();
        const result = Array();
        for (let i = 0; i < len; ++i) {
            result.push(fn());
        }
        return result;
    }
}
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU8", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU16", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU32", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU64", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU128", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU256", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readU512", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readString", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readFixedArray", null);
__decorate([
    handlingRangeError
], BinaryReader.prototype, "readArray", null);
lib$2.BinaryReader = BinaryReader;
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function serializeField(schema, fieldName, value, fieldType, writer) {
    try {
        // TODO: Handle missing values properly (make sure they never result in just skipped write)
        if (typeof fieldType === "string") {
            writer[`write${capitalizeFirstLetter(fieldType)}`](value);
        }
        else if (fieldType instanceof Array) {
            if (typeof fieldType[0] === "number") {
                if (value.length !== fieldType[0]) {
                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);
                }
                writer.writeFixedArray(value);
            }
            else if (fieldType.length === 2 && typeof fieldType[1] === "number") {
                if (value.length !== fieldType[1]) {
                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);
                }
                for (let i = 0; i < fieldType[1]; i++) {
                    serializeField(schema, null, value[i], fieldType[0], writer);
                }
            }
            else {
                writer.writeArray(value, (item) => {
                    serializeField(schema, fieldName, item, fieldType[0], writer);
                });
            }
        }
        else if (fieldType.kind !== undefined) {
            switch (fieldType.kind) {
                case "option": {
                    if (value === null || value === undefined) {
                        writer.writeU8(0);
                    }
                    else {
                        writer.writeU8(1);
                        serializeField(schema, fieldName, value, fieldType.type, writer);
                    }
                    break;
                }
                case "map": {
                    writer.writeU32(value.size);
                    value.forEach((val, key) => {
                        serializeField(schema, fieldName, key, fieldType.key, writer);
                        serializeField(schema, fieldName, val, fieldType.value, writer);
                    });
                    break;
                }
                default:
                    throw new BorshError(`FieldType ${fieldType} unrecognized`);
            }
        }
        else {
            serializeStruct(schema, value, writer);
        }
    }
    catch (error) {
        if (error instanceof BorshError) {
            error.addToFieldPath(fieldName);
        }
        throw error;
    }
}
function serializeStruct(schema, obj, writer) {
    if (typeof obj.borshSerialize === "function") {
        obj.borshSerialize(writer);
        return;
    }
    const structSchema = schema.get(obj.constructor);
    if (!structSchema) {
        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);
    }
    if (structSchema.kind === "struct") {
        structSchema.fields.map(([fieldName, fieldType]) => {
            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
        });
    }
    else if (structSchema.kind === "enum") {
        const name = obj[structSchema.field];
        for (let idx = 0; idx < structSchema.values.length; ++idx) {
            const [fieldName, fieldType] = structSchema.values[idx];
            if (fieldName === name) {
                writer.writeU8(idx);
                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
                break;
            }
        }
    }
    else {
        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);
    }
}
/// Serialize given object using schema of the form:
/// { class_name -> [ [field_name, field_type], .. ], .. }
function serialize(schema, obj, Writer = BinaryWriter) {
    const writer = new Writer();
    serializeStruct(schema, obj, writer);
    return writer.toArray();
}
var serialize_1 = lib$2.serialize = serialize;
function deserializeField(schema, fieldName, fieldType, reader) {
    try {
        if (typeof fieldType === "string") {
            return reader[`read${capitalizeFirstLetter(fieldType)}`]();
        }
        if (fieldType instanceof Array) {
            if (typeof fieldType[0] === "number") {
                return reader.readFixedArray(fieldType[0]);
            }
            else if (typeof fieldType[1] === "number") {
                const arr = [];
                for (let i = 0; i < fieldType[1]; i++) {
                    arr.push(deserializeField(schema, null, fieldType[0], reader));
                }
                return arr;
            }
            else {
                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));
            }
        }
        if (fieldType.kind === "option") {
            const option = reader.readU8();
            if (option) {
                return deserializeField(schema, fieldName, fieldType.type, reader);
            }
            return undefined;
        }
        if (fieldType.kind === "map") {
            let map = new Map();
            const length = reader.readU32();
            for (let i = 0; i < length; i++) {
                const key = deserializeField(schema, fieldName, fieldType.key, reader);
                const val = deserializeField(schema, fieldName, fieldType.value, reader);
                map.set(key, val);
            }
            return map;
        }
        return deserializeStruct(schema, fieldType, reader);
    }
    catch (error) {
        if (error instanceof BorshError) {
            error.addToFieldPath(fieldName);
        }
        throw error;
    }
}
function deserializeStruct(schema, classType, reader) {
    if (typeof classType.borshDeserialize === "function") {
        return classType.borshDeserialize(reader);
    }
    const structSchema = schema.get(classType);
    if (!structSchema) {
        throw new BorshError(`Class ${classType.name} is missing in schema`);
    }
    if (structSchema.kind === "struct") {
        const result = {};
        for (const [fieldName, fieldType] of schema.get(classType).fields) {
            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
        }
        return new classType(result);
    }
    if (structSchema.kind === "enum") {
        const idx = reader.readU8();
        if (idx >= structSchema.values.length) {
            throw new BorshError(`Enum index: ${idx} is out of range`);
        }
        const [fieldName, fieldType] = structSchema.values[idx];
        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);
        return new classType({ [fieldName]: fieldValue });
    }
    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);
}
/// Deserializes object from bytes using schema.
function deserialize(schema, classType, buffer, Reader = BinaryReader) {
    const reader = new Reader(buffer);
    const result = deserializeStruct(schema, classType, reader);
    if (reader.offset < buffer.length) {
        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);
    }
    return result;
}
var deserialize_1 = lib$2.deserialize = deserialize;
/// Deserializes object from bytes using schema, without checking the length read
function deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {
    const reader = new Reader(buffer);
    return deserializeStruct(schema, classType, reader);
}
deserializeUnchecked_1 = lib$2.deserializeUnchecked = deserializeUnchecked;

var Layout$4 = {};

/* The MIT License (MIT)
 *
 * Copyright 2015-2018 Peter A. Bigot
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(Layout$4, "__esModule", { value: true });
Layout$4.s16 = Layout$4.s8 = Layout$4.nu64be = Layout$4.u48be = Layout$4.u40be = Layout$4.u32be = Layout$4.u24be = Layout$4.u16be = nu64$1 = Layout$4.nu64 = Layout$4.u48 = Layout$4.u40 = u32$4 = Layout$4.u32 = Layout$4.u24 = u16$3 = Layout$4.u16 = u8$4 = Layout$4.u8 = offset$1 = Layout$4.offset = Layout$4.greedy = Layout$4.Constant = Layout$4.UTF8 = Layout$4.CString = Layout$4.Blob = Layout$4.Boolean = Layout$4.BitField = Layout$4.BitStructure = Layout$4.VariantLayout = Layout$4.Union = Layout$4.UnionLayoutDiscriminator = Layout$4.UnionDiscriminator = Layout$4.Structure = Layout$4.Sequence = Layout$4.DoubleBE = Layout$4.Double = Layout$4.FloatBE = Layout$4.Float = Layout$4.NearInt64BE = Layout$4.NearInt64 = Layout$4.NearUInt64BE = Layout$4.NearUInt64 = Layout$4.IntBE = Layout$4.Int = Layout$4.UIntBE = Layout$4.UInt = Layout$4.OffsetLayout = Layout$4.GreedyCount = Layout$4.ExternalLayout = Layout$4.bindConstructorLayout = Layout$4.nameWithProperty = Layout$4.Layout = Layout$4.uint8ArrayToBuffer = Layout$4.checkUint8Array = void 0;
Layout$4.constant = Layout$4.utf8 = Layout$4.cstr = blob$2 = Layout$4.blob = Layout$4.unionLayoutDiscriminator = Layout$4.union = seq = Layout$4.seq = Layout$4.bits = struct$4 = Layout$4.struct = Layout$4.f64be = Layout$4.f64 = Layout$4.f32be = Layout$4.f32 = Layout$4.ns64be = Layout$4.s48be = Layout$4.s40be = Layout$4.s32be = Layout$4.s24be = Layout$4.s16be = ns64$1 = Layout$4.ns64 = Layout$4.s48 = Layout$4.s40 = Layout$4.s32 = Layout$4.s24 = void 0;
const buffer_1$2 = require$$0$1;
/* Check if a value is a Uint8Array.
 *
 * @ignore */
function checkUint8Array(b) {
    if (!(b instanceof Uint8Array)) {
        throw new TypeError('b must be a Uint8Array');
    }
}
Layout$4.checkUint8Array = checkUint8Array;
/* Create a Buffer instance from a Uint8Array.
 *
 * @ignore */
function uint8ArrayToBuffer(b) {
    checkUint8Array(b);
    return buffer_1$2.Buffer.from(b.buffer, b.byteOffset, b.length);
}
Layout$4.uint8ArrayToBuffer = uint8ArrayToBuffer;
/**
 * Base class for layout objects.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support the {@link
 * Layout#encode|encode} or {@link Layout#decode|decode} functions.
 *
 * @param {Number} span - Initializer for {@link Layout#span|span}.  The
 * parameter must be an integer; a negative value signifies that the
 * span is {@link Layout#getSpan|value-specific}.
 *
 * @param {string} [property] - Initializer for {@link
 * Layout#property|property}.
 *
 * @abstract
 */
let Layout$3 = class Layout {
    constructor(span, property) {
        if (!Number.isInteger(span)) {
            throw new TypeError('span must be an integer');
        }
        /** The span of the layout in bytes.
         *
         * Positive values are generally expected.
         *
         * Zero will only appear in {@link Constant}s and in {@link
         * Sequence}s where the {@link Sequence#count|count} is zero.
         *
         * A negative value indicates that the span is value-specific, and
         * must be obtained using {@link Layout#getSpan|getSpan}. */
        this.span = span;
        /** The property name used when this layout is represented in an
         * Object.
         *
         * Used only for layouts that {@link Layout#decode|decode} to Object
         * instances.  If left undefined the span of the unnamed layout will
         * be treated as padding: it will not be mutated by {@link
         * Layout#encode|encode} nor represented as a property in the
         * decoded Object. */
        this.property = property;
    }
    /** Function to create an Object into which decoded properties will
     * be written.
     *
     * Used only for layouts that {@link Layout#decode|decode} to Object
     * instances, which means:
     * * {@link Structure}
     * * {@link Union}
     * * {@link VariantLayout}
     * * {@link BitStructure}
     *
     * If left undefined the JavaScript representation of these layouts
     * will be Object instances.
     *
     * See {@link bindConstructorLayout}.
     */
    makeDestinationObject() {
        return {};
    }
    /**
     * Calculate the span of a specific instance of a layout.
     *
     * @param {Uint8Array} b - the buffer that contains an encoded instance.
     *
     * @param {Number} [offset] - the offset at which the encoded instance
     * starts.  If absent a zero offset is inferred.
     *
     * @return {Number} - the number of bytes covered by the layout
     * instance.  If this method is not overridden in a subclass the
     * definition-time constant {@link Layout#span|span} will be
     * returned.
     *
     * @throws {RangeError} - if the length of the value cannot be
     * determined.
     */
    getSpan(b, offset) {
        if (0 > this.span) {
            throw new RangeError('indeterminate span');
        }
        return this.span;
    }
    /**
     * Replicate the layout using a new property.
     *
     * This function must be used to get a structurally-equivalent layout
     * with a different name since all {@link Layout} instances are
     * immutable.
     *
     * **NOTE** This is a shallow copy.  All fields except {@link
     * Layout#property|property} are strictly equal to the origin layout.
     *
     * @param {String} property - the value for {@link
     * Layout#property|property} in the replica.
     *
     * @returns {Layout} - the copy with {@link Layout#property|property}
     * set to `property`.
     */
    replicate(property) {
        const rv = Object.create(this.constructor.prototype);
        Object.assign(rv, this);
        rv.property = property;
        return rv;
    }
    /**
     * Create an object from layout properties and an array of values.
     *
     * **NOTE** This function returns `undefined` if invoked on a layout
     * that does not return its value as an Object.  Objects are
     * returned for things that are a {@link Structure}, which includes
     * {@link VariantLayout|variant layouts} if they are structures, and
     * excludes {@link Union}s.  If you want this feature for a union
     * you must use {@link Union.getVariant|getVariant} to select the
     * desired layout.
     *
     * @param {Array} values - an array of values that correspond to the
     * default order for properties.  As with {@link Layout#decode|decode}
     * layout elements that have no property name are skipped when
     * iterating over the array values.  Only the top-level properties are
     * assigned; arguments are not assigned to properties of contained
     * layouts.  Any unused values are ignored.
     *
     * @return {(Object|undefined)}
     */
    fromArray(values) {
        return undefined;
    }
};
Layout$4.Layout = Layout$3;
/* Provide text that carries a name (such as for a function that will
 * be throwing an error) annotated with the property of a given layout
 * (such as one for which the value was unacceptable).
 *
 * @ignore */
function nameWithProperty$2(name, lo) {
    if (lo.property) {
        return name + '[' + lo.property + ']';
    }
    return name;
}
Layout$4.nameWithProperty = nameWithProperty$2;
/**
 * Augment a class so that instances can be encoded/decoded using a
 * given layout.
 *
 * Calling this function couples `Class` with `layout` in several ways:
 *
 * * `Class.layout_` becomes a static member property equal to `layout`;
 * * `layout.boundConstructor_` becomes a static member property equal
 *    to `Class`;
 * * The {@link Layout#makeDestinationObject|makeDestinationObject()}
 *   property of `layout` is set to a function that returns a `new
 *   Class()`;
 * * `Class.decode(b, offset)` becomes a static member function that
 *   delegates to {@link Layout#decode|layout.decode}.  The
 *   synthesized function may be captured and extended.
 * * `Class.prototype.encode(b, offset)` provides an instance member
 *   function that delegates to {@link Layout#encode|layout.encode}
 *   with `src` set to `this`.  The synthesized function may be
 *   captured and extended, but when the extension is invoked `this`
 *   must be explicitly bound to the instance.
 *
 * @param {class} Class - a JavaScript class with a nullary
 * constructor.
 *
 * @param {Layout} layout - the {@link Layout} instance used to encode
 * instances of `Class`.
 */
// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function bindConstructorLayout$1(Class, layout) {
    if ('function' !== typeof Class) {
        throw new TypeError('Class must be constructor');
    }
    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {
        throw new Error('Class is already bound to a layout');
    }
    if (!(layout && (layout instanceof Layout$3))) {
        throw new TypeError('layout must be a Layout');
    }
    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {
        throw new Error('layout is already bound to a constructor');
    }
    Class.layout_ = layout;
    layout.boundConstructor_ = Class;
    layout.makeDestinationObject = (() => new Class());
    Object.defineProperty(Class.prototype, 'encode', {
        value(b, offset) {
            return layout.encode(this, b, offset);
        },
        writable: true,
    });
    Object.defineProperty(Class, 'decode', {
        value(b, offset) {
            return layout.decode(b, offset);
        },
        writable: true,
    });
}
Layout$4.bindConstructorLayout = bindConstructorLayout$1;
/**
 * An object that behaves like a layout but does not consume space
 * within its containing layout.
 *
 * This is primarily used to obtain metadata about a member, such as a
 * {@link OffsetLayout} that can provide data about a {@link
 * Layout#getSpan|value-specific span}.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support {@link
 * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @abstract
 * @augments {Layout}
 */
let ExternalLayout$2 = class ExternalLayout extends Layout$3 {
    /**
     * Return `true` iff the external layout decodes to an unsigned
     * integer layout.
     *
     * In that case it can be used as the source of {@link
     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
     * or as {@link UnionLayoutDiscriminator#layout|external union
     * discriminators}.
     *
     * @abstract
     */
    isCount() {
        throw new Error('ExternalLayout is abstract');
    }
};
Layout$4.ExternalLayout = ExternalLayout$2;
/**
 * An {@link ExternalLayout} that determines its {@link
 * Layout#decode|value} based on offset into and length of the buffer
 * on which it is invoked.
 *
 * *Factory*: {@link module:Layout.greedy|greedy}
 *
 * @param {Number} [elementSpan] - initializer for {@link
 * GreedyCount#elementSpan|elementSpan}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {ExternalLayout}
 */
let GreedyCount$1 = class GreedyCount extends ExternalLayout$2 {
    constructor(elementSpan = 1, property) {
        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {
            throw new TypeError('elementSpan must be a (positive) integer');
        }
        super(-1, property);
        /** The layout for individual elements of the sequence.  The value
         * must be a positive integer.  If not provided, the value will be
         * 1. */
        this.elementSpan = elementSpan;
    }
    /** @override */
    isCount() {
        return true;
    }
    /** @override */
    decode(b, offset = 0) {
        checkUint8Array(b);
        const rem = b.length - offset;
        return Math.floor(rem / this.elementSpan);
    }
    /** @override */
    encode(src, b, offset) {
        return 0;
    }
};
Layout$4.GreedyCount = GreedyCount$1;
/**
 * An {@link ExternalLayout} that supports accessing a {@link Layout}
 * at a fixed offset from the start of another Layout.  The offset may
 * be before, within, or after the base layout.
 *
 * *Factory*: {@link module:Layout.offset|offset}
 *
 * @param {Layout} layout - initializer for {@link
 * OffsetLayout#layout|layout}, modulo `property`.
 *
 * @param {Number} [offset] - Initializes {@link
 * OffsetLayout#offset|offset}.  Defaults to zero.
 *
 * @param {string} [property] - Optional new property name for a
 * {@link Layout#replicate| replica} of `layout` to be used as {@link
 * OffsetLayout#layout|layout}.  If not provided the `layout` is used
 * unchanged.
 *
 * @augments {Layout}
 */
let OffsetLayout$2 = class OffsetLayout extends ExternalLayout$2 {
    constructor(layout, offset = 0, property) {
        if (!(layout instanceof Layout$3)) {
            throw new TypeError('layout must be a Layout');
        }
        if (!Number.isInteger(offset)) {
            throw new TypeError('offset must be integer or undefined');
        }
        super(layout.span, property || layout.property);
        /** The subordinated layout. */
        this.layout = layout;
        /** The location of {@link OffsetLayout#layout} relative to the
         * start of another layout.
         *
         * The value may be positive or negative, but an error will thrown
         * if at the point of use it goes outside the span of the Uint8Array
         * being accessed.  */
        this.offset = offset;
    }
    /** @override */
    isCount() {
        return ((this.layout instanceof UInt$2)
            || (this.layout instanceof UIntBE$2));
    }
    /** @override */
    decode(b, offset = 0) {
        return this.layout.decode(b, offset + this.offset);
    }
    /** @override */
    encode(src, b, offset = 0) {
        return this.layout.encode(src, b, offset + this.offset);
    }
};
Layout$4.OffsetLayout = OffsetLayout$2;
/**
 * Represent an unsigned integer in little-endian format.
 *
 * *Factory*: {@link module:Layout.u8|u8}, {@link
 *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
 *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
 *  module:Layout.u48|u48}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let UInt$2 = class UInt extends Layout$3 {
    constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
            throw new RangeError('span must not exceed 6 bytes');
        }
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);
        return this.span;
    }
};
Layout$4.UInt = UInt$2;
/**
 * Represent an unsigned integer in big-endian format.
 *
 * *Factory*: {@link module:Layout.u8be|u8be}, {@link
 * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},
 * {@link module:Layout.u32be|u32be}, {@link
 * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let UIntBE$2 = class UIntBE extends Layout$3 {
    constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
            throw new RangeError('span must not exceed 6 bytes');
        }
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);
        return this.span;
    }
};
Layout$4.UIntBE = UIntBE$2;
/**
 * Represent a signed integer in little-endian format.
 *
 * *Factory*: {@link module:Layout.s8|s8}, {@link
 *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link
 *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link
 *  module:Layout.s48|s48}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Int$1 = class Int extends Layout$3 {
    constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
            throw new RangeError('span must not exceed 6 bytes');
        }
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);
        return this.span;
    }
};
Layout$4.Int = Int$1;
/**
 * Represent a signed integer in big-endian format.
 *
 * *Factory*: {@link module:Layout.s8be|s8be}, {@link
 * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},
 * {@link module:Layout.s32be|s32be}, {@link
 * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let IntBE$1 = class IntBE extends Layout$3 {
    constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
            throw new RangeError('span must not exceed 6 bytes');
        }
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);
        return this.span;
    }
};
Layout$4.IntBE = IntBE$1;
const V2E32$2 = Math.pow(2, 32);
/* True modulus high and low 32-bit words, where low word is always
 * non-negative. */
function divmodInt64$2(src) {
    const hi32 = Math.floor(src / V2E32$2);
    const lo32 = src - (hi32 * V2E32$2);
    return { hi32, lo32 };
}
/* Reconstruct Number from quotient and non-negative remainder */
function roundedInt64$2(hi32, lo32) {
    return hi32 * V2E32$2 + lo32;
}
/**
 * Represent an unsigned 64-bit integer in little-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.nu64|nu64}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
let NearUInt64$2 = class NearUInt64 extends Layout$3 {
    constructor(property) {
        super(8, property);
    }
    /** @override */
    decode(b, offset = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const lo32 = buffer.readUInt32LE(offset);
        const hi32 = buffer.readUInt32LE(offset + 4);
        return roundedInt64$2(hi32, lo32);
    }
    /** @override */
    encode(src, b, offset = 0) {
        const split = divmodInt64$2(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32LE(split.lo32, offset);
        buffer.writeUInt32LE(split.hi32, offset + 4);
        return 8;
    }
};
Layout$4.NearUInt64 = NearUInt64$2;
/**
 * Represent an unsigned 64-bit integer in big-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.nu64be|nu64be}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
let NearUInt64BE$1 = class NearUInt64BE extends Layout$3 {
    constructor(property) {
        super(8, property);
    }
    /** @override */
    decode(b, offset = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const hi32 = buffer.readUInt32BE(offset);
        const lo32 = buffer.readUInt32BE(offset + 4);
        return roundedInt64$2(hi32, lo32);
    }
    /** @override */
    encode(src, b, offset = 0) {
        const split = divmodInt64$2(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32BE(split.hi32, offset);
        buffer.writeUInt32BE(split.lo32, offset + 4);
        return 8;
    }
};
Layout$4.NearUInt64BE = NearUInt64BE$1;
/**
 * Represent a signed 64-bit integer in little-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.ns64|ns64}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
let NearInt64$2 = class NearInt64 extends Layout$3 {
    constructor(property) {
        super(8, property);
    }
    /** @override */
    decode(b, offset = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const lo32 = buffer.readUInt32LE(offset);
        const hi32 = buffer.readInt32LE(offset + 4);
        return roundedInt64$2(hi32, lo32);
    }
    /** @override */
    encode(src, b, offset = 0) {
        const split = divmodInt64$2(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32LE(split.lo32, offset);
        buffer.writeInt32LE(split.hi32, offset + 4);
        return 8;
    }
};
Layout$4.NearInt64 = NearInt64$2;
/**
 * Represent a signed 64-bit integer in big-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.ns64be|ns64be}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
let NearInt64BE$1 = class NearInt64BE extends Layout$3 {
    constructor(property) {
        super(8, property);
    }
    /** @override */
    decode(b, offset = 0) {
        const buffer = uint8ArrayToBuffer(b);
        const hi32 = buffer.readInt32BE(offset);
        const lo32 = buffer.readUInt32BE(offset + 4);
        return roundedInt64$2(hi32, lo32);
    }
    /** @override */
    encode(src, b, offset = 0) {
        const split = divmodInt64$2(src);
        const buffer = uint8ArrayToBuffer(b);
        buffer.writeInt32BE(split.hi32, offset);
        buffer.writeUInt32BE(split.lo32, offset + 4);
        return 8;
    }
};
Layout$4.NearInt64BE = NearInt64BE$1;
/**
 * Represent a 32-bit floating point number in little-endian format.
 *
 * *Factory*: {@link module:Layout.f32|f32}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Float$1 = class Float extends Layout$3 {
    constructor(property) {
        super(4, property);
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readFloatLE(offset);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeFloatLE(src, offset);
        return 4;
    }
};
Layout$4.Float = Float$1;
/**
 * Represent a 32-bit floating point number in big-endian format.
 *
 * *Factory*: {@link module:Layout.f32be|f32be}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let FloatBE$1 = class FloatBE extends Layout$3 {
    constructor(property) {
        super(4, property);
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readFloatBE(offset);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeFloatBE(src, offset);
        return 4;
    }
};
Layout$4.FloatBE = FloatBE$1;
/**
 * Represent a 64-bit floating point number in little-endian format.
 *
 * *Factory*: {@link module:Layout.f64|f64}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Double$1 = class Double extends Layout$3 {
    constructor(property) {
        super(8, property);
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readDoubleLE(offset);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);
        return 8;
    }
};
Layout$4.Double = Double$1;
/**
 * Represent a 64-bit floating point number in big-endian format.
 *
 * *Factory*: {@link module:Layout.f64be|f64be}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let DoubleBE$1 = class DoubleBE extends Layout$3 {
    constructor(property) {
        super(8, property);
    }
    /** @override */
    decode(b, offset = 0) {
        return uint8ArrayToBuffer(b).readDoubleBE(offset);
    }
    /** @override */
    encode(src, b, offset = 0) {
        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);
        return 8;
    }
};
Layout$4.DoubleBE = DoubleBE$1;
/**
 * Represent a contiguous sequence of a specific layout as an Array.
 *
 * *Factory*: {@link module:Layout.seq|seq}
 *
 * @param {Layout} elementLayout - initializer for {@link
 * Sequence#elementLayout|elementLayout}.
 *
 * @param {(Number|ExternalLayout)} count - initializer for {@link
 * Sequence#count|count}.  The parameter must be either a positive
 * integer or an instance of {@link ExternalLayout}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Sequence$1 = class Sequence extends Layout$3 {
    constructor(elementLayout, count, property) {
        if (!(elementLayout instanceof Layout$3)) {
            throw new TypeError('elementLayout must be a Layout');
        }
        if (!(((count instanceof ExternalLayout$2) && count.isCount())
            || (Number.isInteger(count) && (0 <= count)))) {
            throw new TypeError('count must be non-negative integer '
                + 'or an unsigned integer ExternalLayout');
        }
        let span = -1;
        if ((!(count instanceof ExternalLayout$2))
            && (0 < elementLayout.span)) {
            span = count * elementLayout.span;
        }
        super(span, property);
        /** The layout for individual elements of the sequence. */
        this.elementLayout = elementLayout;
        /** The number of elements in the sequence.
         *
         * This will be either a non-negative integer or an instance of
         * {@link ExternalLayout} for which {@link
         * ExternalLayout#isCount|isCount()} is `true`. */
        this.count = count;
    }
    /** @override */
    getSpan(b, offset = 0) {
        if (0 <= this.span) {
            return this.span;
        }
        let span = 0;
        let count = this.count;
        if (count instanceof ExternalLayout$2) {
            count = count.decode(b, offset);
        }
        if (0 < this.elementLayout.span) {
            span = count * this.elementLayout.span;
        }
        else {
            let idx = 0;
            while (idx < count) {
                span += this.elementLayout.getSpan(b, offset + span);
                ++idx;
            }
        }
        return span;
    }
    /** @override */
    decode(b, offset = 0) {
        const rv = [];
        let i = 0;
        let count = this.count;
        if (count instanceof ExternalLayout$2) {
            count = count.decode(b, offset);
        }
        while (i < count) {
            rv.push(this.elementLayout.decode(b, offset));
            offset += this.elementLayout.getSpan(b, offset);
            i += 1;
        }
        return rv;
    }
    /** Implement {@link Layout#encode|encode} for {@link Sequence}.
     *
     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
     * the unused space in the buffer is left unchanged.  If `src` is
     * longer than {@link Sequence#count|count} the unneeded elements are
     * ignored.
     *
     * **NOTE** If {@link Layout#count|count} is an instance of {@link
     * ExternalLayout} then the length of `src` will be encoded as the
     * count after `src` is encoded. */
    encode(src, b, offset = 0) {
        const elo = this.elementLayout;
        const span = src.reduce((span, v) => {
            return span + elo.encode(v, b, offset + span);
        }, 0);
        if (this.count instanceof ExternalLayout$2) {
            this.count.encode(src.length, b, offset);
        }
        return span;
    }
};
Layout$4.Sequence = Sequence$1;
/**
 * Represent a contiguous sequence of arbitrary layout elements as an
 * Object.
 *
 * *Factory*: {@link module:Layout.struct|struct}
 *
 * **NOTE** The {@link Layout#span|span} of the structure is variable
 * if any layout in {@link Structure#fields|fields} has a variable
 * span.  When {@link Layout#encode|encoding} we must have a value for
 * all variable-length fields, or we wouldn't be able to figure out
 * how much space to use for storage.  We can only identify the value
 * for a field when it has a {@link Layout#property|property}.  As
 * such, although a structure may contain both unnamed fields and
 * variable-length fields, it cannot contain an unnamed
 * variable-length field.
 *
 * @param {Layout[]} fields - initializer for {@link
 * Structure#fields|fields}.  An error is raised if this contains a
 * variable-length field for which a {@link Layout#property|property}
 * is not defined.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @param {Boolean} [decodePrefixes] - initializer for {@link
 * Structure#decodePrefixes|property}.
 *
 * @throws {Error} - if `fields` contains an unnamed variable-length
 * layout.
 *
 * @augments {Layout}
 */
let Structure$2 = class Structure extends Layout$3 {
    constructor(fields, property, decodePrefixes) {
        if (!(Array.isArray(fields)
            && fields.reduce((acc, v) => acc && (v instanceof Layout$3), true))) {
            throw new TypeError('fields must be array of Layout instances');
        }
        if (('boolean' === typeof property)
            && (undefined === decodePrefixes)) {
            decodePrefixes = property;
            property = undefined;
        }
        /* Verify absence of unnamed variable-length fields. */
        for (const fd of fields) {
            if ((0 > fd.span)
                && (undefined === fd.property)) {
                throw new Error('fields cannot contain unnamed variable-length layout');
            }
        }
        let span = -1;
        try {
            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);
        }
        catch (e) {
            // ignore error
        }
        super(span, property);
        /** The sequence of {@link Layout} values that comprise the
         * structure.
         *
         * The individual elements need not be the same type, and may be
         * either scalar or aggregate layouts.  If a member layout leaves
         * its {@link Layout#property|property} undefined the
         * corresponding region of the buffer associated with the element
         * will not be mutated.
         *
         * @type {Layout[]} */
        this.fields = fields;
        /** Control behavior of {@link Layout#decode|decode()} given short
         * buffers.
         *
         * In some situations a structure many be extended with additional
         * fields over time, with older installations providing only a
         * prefix of the full structure.  If this property is `true`
         * decoding will accept those buffers and leave subsequent fields
         * undefined, as long as the buffer ends at a field boundary.
         * Defaults to `false`. */
        this.decodePrefixes = !!decodePrefixes;
    }
    /** @override */
    getSpan(b, offset = 0) {
        if (0 <= this.span) {
            return this.span;
        }
        let span = 0;
        try {
            span = this.fields.reduce((span, fd) => {
                const fsp = fd.getSpan(b, offset);
                offset += fsp;
                return span + fsp;
            }, 0);
        }
        catch (e) {
            throw new RangeError('indeterminate span');
        }
        return span;
    }
    /** @override */
    decode(b, offset = 0) {
        checkUint8Array(b);
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
            if (undefined !== fd.property) {
                dest[fd.property] = fd.decode(b, offset);
            }
            offset += fd.getSpan(b, offset);
            if (this.decodePrefixes
                && (b.length === offset)) {
                break;
            }
        }
        return dest;
    }
    /** Implement {@link Layout#encode|encode} for {@link Structure}.
     *
     * If `src` is missing a property for a member with a defined {@link
     * Layout#property|property} the corresponding region of the buffer is
     * left unmodified. */
    encode(src, b, offset = 0) {
        const firstOffset = offset;
        let lastOffset = 0;
        let lastWrote = 0;
        for (const fd of this.fields) {
            let span = fd.span;
            lastWrote = (0 < span) ? span : 0;
            if (undefined !== fd.property) {
                const fv = src[fd.property];
                if (undefined !== fv) {
                    lastWrote = fd.encode(fv, b, offset);
                    if (0 > span) {
                        /* Read the as-encoded span, which is not necessarily the
                         * same as what we wrote. */
                        span = fd.getSpan(b, offset);
                    }
                }
            }
            lastOffset = offset;
            offset += span;
        }
        /* Use (lastOffset + lastWrote) instead of offset because the last
         * item may have had a dynamic length and we don't want to include
         * the padding between it and the end of the space reserved for
         * it. */
        return (lastOffset + lastWrote) - firstOffset;
    }
    /** @override */
    fromArray(values) {
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
            if ((undefined !== fd.property)
                && (0 < values.length)) {
                dest[fd.property] = values.shift();
            }
        }
        return dest;
    }
    /**
     * Get access to the layout of a given property.
     *
     * @param {String} property - the structure member of interest.
     *
     * @return {Layout} - the layout associated with `property`, or
     * undefined if there is no such property.
     */
    layoutFor(property) {
        if ('string' !== typeof property) {
            throw new TypeError('property must be string');
        }
        for (const fd of this.fields) {
            if (fd.property === property) {
                return fd;
            }
        }
        return undefined;
    }
    /**
     * Get the offset of a structure member.
     *
     * @param {String} property - the structure member of interest.
     *
     * @return {Number} - the offset in bytes to the start of `property`
     * within the structure, or undefined if `property` is not a field
     * within the structure.  If the property is a member but follows a
     * variable-length structure member a negative number will be
     * returned.
     */
    offsetOf(property) {
        if ('string' !== typeof property) {
            throw new TypeError('property must be string');
        }
        let offset = 0;
        for (const fd of this.fields) {
            if (fd.property === property) {
                return offset;
            }
            if (0 > fd.span) {
                offset = -1;
            }
            else if (0 <= offset) {
                offset += fd.span;
            }
        }
        return undefined;
    }
};
Layout$4.Structure = Structure$2;
/**
 * An object that can provide a {@link
 * Union#discriminator|discriminator} API for {@link Union}.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support the {@link
 * UnionDiscriminator#encode|encode} or {@link
 * UnionDiscriminator#decode|decode} functions.
 *
 * @param {string} [property] - Default for {@link
 * UnionDiscriminator#property|property}.
 *
 * @abstract
 */
let UnionDiscriminator$2 = class UnionDiscriminator {
    constructor(property) {
        /** The {@link Layout#property|property} to be used when the
         * discriminator is referenced in isolation (generally when {@link
         * Union#decode|Union decode} cannot delegate to a specific
         * variant). */
        this.property = property;
    }
    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
     *
     * The implementation of this method need not reference the buffer if
     * variant information is available through other means. */
    decode(b, offset) {
        throw new Error('UnionDiscriminator is abstract');
    }
    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
     *
     * The implementation of this method need not store the value if
     * variant information is maintained through other means. */
    encode(src, b, offset) {
        throw new Error('UnionDiscriminator is abstract');
    }
};
Layout$4.UnionDiscriminator = UnionDiscriminator$2;
/**
 * An object that can provide a {@link
 * UnionDiscriminator|discriminator API} for {@link Union} using an
 * unsigned integral {@link Layout} instance located either inside or
 * outside the union.
 *
 * @param {ExternalLayout} layout - initializes {@link
 * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link
 * ExternalLayout#isCount|isCount()}.
 *
 * @param {string} [property] - Default for {@link
 * UnionDiscriminator#property|property}, superseding the property
 * from `layout`, but defaulting to `variant` if neither `property`
 * nor layout provide a property name.
 *
 * @augments {UnionDiscriminator}
 */
let UnionLayoutDiscriminator$2 = class UnionLayoutDiscriminator extends UnionDiscriminator$2 {
    constructor(layout, property) {
        if (!((layout instanceof ExternalLayout$2)
            && layout.isCount())) {
            throw new TypeError('layout must be an unsigned integer ExternalLayout');
        }
        super(property || layout.property || 'variant');
        /** The {@link ExternalLayout} used to access the discriminator
         * value. */
        this.layout = layout;
    }
    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
    decode(b, offset) {
        return this.layout.decode(b, offset);
    }
    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
    encode(src, b, offset) {
        return this.layout.encode(src, b, offset);
    }
};
Layout$4.UnionLayoutDiscriminator = UnionLayoutDiscriminator$2;
/**
 * Represent any number of span-compatible layouts.
 *
 * *Factory*: {@link module:Layout.union|union}
 *
 * If the union has a {@link Union#defaultLayout|default layout} that
 * layout must have a non-negative {@link Layout#span|span}.  The span
 * of a fixed-span union includes its {@link
 * Union#discriminator|discriminator} if the variant is a {@link
 * Union#usesPrefixDiscriminator|prefix of the union}, plus the span
 * of its {@link Union#defaultLayout|default layout}.
 *
 * If the union does not have a default layout then the encoded span
 * of the union depends on the encoded span of its variant (which may
 * be fixed or variable).
 *
 * {@link VariantLayout#layout|Variant layout}s are added through
 * {@link Union#addVariant|addVariant}.  If the union has a default
 * layout, the span of the {@link VariantLayout#layout|layout
 * contained by the variant} must not exceed the span of the {@link
 * Union#defaultLayout|default layout} (minus the span of a {@link
 * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The
 * span of the variant will equal the span of the union itself.
 *
 * The variant for a buffer can only be identified from the {@link
 * Union#discriminator|discriminator} {@link
 * UnionDiscriminator#property|property} (in the case of the {@link
 * Union#defaultLayout|default layout}), or by using {@link
 * Union#getVariant|getVariant} and examining the resulting {@link
 * VariantLayout} instance.
 *
 * A variant compatible with a JavaScript object can be identified
 * using {@link Union#getSourceVariant|getSourceVariant}.
 *
 * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to
 * identify the layout used to interpret the union contents.  The
 * parameter must be an instance of {@link UnionDiscriminator}, an
 * {@link ExternalLayout} that satisfies {@link
 * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link
 * UIntBE}).  When a non-external layout element is passed the layout
 * appears at the start of the union.  In all cases the (synthesized)
 * {@link UnionDiscriminator} instance is recorded as {@link
 * Union#discriminator|discriminator}.
 *
 * @param {(Layout|null)} defaultLayout - initializer for {@link
 * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.
 * If `null` there is no default layout: the union has data-dependent
 * length and attempts to decode or encode unrecognized variants will
 * throw an exception.  A {@link Layout} instance must have a
 * non-negative {@link Layout#span|span}, and if it lacks a {@link
 * Layout#property|property} the {@link
 * Union#defaultLayout|defaultLayout} will be a {@link
 * Layout#replicate|replica} with property `content`.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Union$2 = class Union extends Layout$3 {
    constructor(discr, defaultLayout, property) {
        let discriminator;
        if ((discr instanceof UInt$2)
            || (discr instanceof UIntBE$2)) {
            discriminator = new UnionLayoutDiscriminator$2(new OffsetLayout$2(discr));
        }
        else if ((discr instanceof ExternalLayout$2)
            && discr.isCount()) {
            discriminator = new UnionLayoutDiscriminator$2(discr);
        }
        else if (!(discr instanceof UnionDiscriminator$2)) {
            throw new TypeError('discr must be a UnionDiscriminator '
                + 'or an unsigned integer layout');
        }
        else {
            discriminator = discr;
        }
        if (undefined === defaultLayout) {
            defaultLayout = null;
        }
        if (!((null === defaultLayout)
            || (defaultLayout instanceof Layout$3))) {
            throw new TypeError('defaultLayout must be null or a Layout');
        }
        if (null !== defaultLayout) {
            if (0 > defaultLayout.span) {
                throw new Error('defaultLayout must have constant span');
            }
            if (undefined === defaultLayout.property) {
                defaultLayout = defaultLayout.replicate('content');
            }
        }
        /* The union span can be estimated only if there's a default
         * layout.  The union spans its default layout, plus any prefix
         * variant layout.  By construction both layouts, if present, have
         * non-negative span. */
        let span = -1;
        if (defaultLayout) {
            span = defaultLayout.span;
            if ((0 <= span) && ((discr instanceof UInt$2)
                || (discr instanceof UIntBE$2))) {
                span += discriminator.layout.span;
            }
        }
        super(span, property);
        /** The interface for the discriminator value in isolation.
         *
         * This a {@link UnionDiscriminator} either passed to the
         * constructor or synthesized from the `discr` constructor
         * argument.  {@link
         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be
         * `true` iff the `discr` parameter was a non-offset {@link
         * Layout} instance. */
        this.discriminator = discriminator;
        /** `true` if the {@link Union#discriminator|discriminator} is the
         * first field in the union.
         *
         * If `false` the discriminator is obtained from somewhere
         * else. */
        this.usesPrefixDiscriminator = (discr instanceof UInt$2)
            || (discr instanceof UIntBE$2);
        /** The layout for non-discriminator content when the value of the
         * discriminator is not recognized.
         *
         * This is the value passed to the constructor.  It is
         * structurally equivalent to the second component of {@link
         * Union#layout|layout} but may have a different property
         * name. */
        this.defaultLayout = defaultLayout;
        /** A registry of allowed variants.
         *
         * The keys are unsigned integers which should be compatible with
         * {@link Union.discriminator|discriminator}.  The property value
         * is the corresponding {@link VariantLayout} instances assigned
         * to this union by {@link Union#addVariant|addVariant}.
         *
         * **NOTE** The registry remains mutable so that variants can be
         * {@link Union#addVariant|added} at any time.  Users should not
         * manipulate the content of this property. */
        this.registry = {};
        /* Private variable used when invoking getSourceVariant */
        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);
        /** Function to infer the variant selected by a source object.
         *
         * Defaults to {@link
         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may
         * be overridden using {@link
         * Union#configGetSourceVariant|configGetSourceVariant}.
         *
         * @param {Object} src - as with {@link
         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
         *
         * @returns {(undefined|VariantLayout)} The default variant
         * (`undefined`) or first registered variant that uses a property
         * available in `src`. */
        this.getSourceVariant = function (src) {
            return boundGetSourceVariant(src);
        };
        /** Function to override the implementation of {@link
         * Union#getSourceVariant|getSourceVariant}.
         *
         * Use this if the desired variant cannot be identified using the
         * algorithm of {@link
         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
         *
         * **NOTE** The provided function will be invoked bound to this
         * Union instance, providing local access to {@link
         * Union#registry|registry}.
         *
         * @param {Function} gsv - a function that follows the API of
         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */
        this.configGetSourceVariant = function (gsv) {
            boundGetSourceVariant = gsv.bind(this);
        };
    }
    /** @override */
    getSpan(b, offset = 0) {
        if (0 <= this.span) {
            return this.span;
        }
        /* Default layouts always have non-negative span, so we don't have
         * one and we have to recognize the variant which will in turn
         * determine the span. */
        const vlo = this.getVariant(b, offset);
        if (!vlo) {
            throw new Error('unable to determine span for unrecognized variant');
        }
        return vlo.getSpan(b, offset);
    }
    /**
     * Method to infer a registered Union variant compatible with `src`.
     *
     * The first satisfied rule in the following sequence defines the
     * return value:
     * * If `src` has properties matching the Union discriminator and
     *   the default layout, `undefined` is returned regardless of the
     *   value of the discriminator property (this ensures the default
     *   layout will be used);
     * * If `src` has a property matching the Union discriminator, the
     *   value of the discriminator identifies a registered variant, and
     *   either (a) the variant has no layout, or (b) `src` has the
     *   variant's property, then the variant is returned (because the
     *   source satisfies the constraints of the variant it identifies);
     * * If `src` does not have a property matching the Union
     *   discriminator, but does have a property matching a registered
     *   variant, then the variant is returned (because the source
     *   matches a variant without an explicit conflict);
     * * An error is thrown (because we either can't identify a variant,
     *   or we were explicitly told the variant but can't satisfy it).
     *
     * @param {Object} src - an object presumed to be compatible with
     * the content of the Union.
     *
     * @return {(undefined|VariantLayout)} - as described above.
     *
     * @throws {Error} - if `src` cannot be associated with a default or
     * registered variant.
     */
    defaultGetSourceVariant(src) {
        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {
            if (this.defaultLayout && this.defaultLayout.property
                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {
                return undefined;
            }
            const vlo = this.registry[src[this.discriminator.property]];
            if (vlo
                && ((!vlo.layout)
                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {
                return vlo;
            }
        }
        else {
            for (const tag in this.registry) {
                const vlo = this.registry[tag];
                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {
                    return vlo;
                }
            }
        }
        throw new Error('unable to infer src variant');
    }
    /** Implement {@link Layout#decode|decode} for {@link Union}.
     *
     * If the variant is {@link Union#addVariant|registered} the return
     * value is an instance of that variant, with no explicit
     * discriminator.  Otherwise the {@link Union#defaultLayout|default
     * layout} is used to decode the content. */
    decode(b, offset = 0) {
        let dest;
        const dlo = this.discriminator;
        const discr = dlo.decode(b, offset);
        const clo = this.registry[discr];
        if (undefined === clo) {
            const defaultLayout = this.defaultLayout;
            let contentOffset = 0;
            if (this.usesPrefixDiscriminator) {
                contentOffset = dlo.layout.span;
            }
            dest = this.makeDestinationObject();
            dest[dlo.property] = discr;
            // defaultLayout.property can be undefined, but this is allowed by buffer-layout
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);
        }
        else {
            dest = clo.decode(b, offset);
        }
        return dest;
    }
    /** Implement {@link Layout#encode|encode} for {@link Union}.
     *
     * This API assumes the `src` object is consistent with the union's
     * {@link Union#defaultLayout|default layout}.  To encode variants
     * use the appropriate variant-specific {@link VariantLayout#encode}
     * method. */
    encode(src, b, offset = 0) {
        const vlo = this.getSourceVariant(src);
        if (undefined === vlo) {
            const dlo = this.discriminator;
            // this.defaultLayout is not undefined when vlo is undefined
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const clo = this.defaultLayout;
            let contentOffset = 0;
            if (this.usesPrefixDiscriminator) {
                contentOffset = dlo.layout.span;
            }
            dlo.encode(src[dlo.property], b, offset);
            // clo.property is not undefined when vlo is undefined
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);
        }
        return vlo.encode(src, b, offset);
    }
    /** Register a new variant structure within a union.  The newly
     * created variant is returned.
     *
     * @param {Number} variant - initializer for {@link
     * VariantLayout#variant|variant}.
     *
     * @param {Layout} layout - initializer for {@link
     * VariantLayout#layout|layout}.
     *
     * @param {String} property - initializer for {@link
     * Layout#property|property}.
     *
     * @return {VariantLayout} */
    addVariant(variant, layout, property) {
        const rv = new VariantLayout$2(this, variant, layout, property);
        this.registry[variant] = rv;
        return rv;
    }
    /**
     * Get the layout associated with a registered variant.
     *
     * If `vb` does not produce a registered variant the function returns
     * `undefined`.
     *
     * @param {(Number|Uint8Array)} vb - either the variant number, or a
     * buffer from which the discriminator is to be read.
     *
     * @param {Number} offset - offset into `vb` for the start of the
     * union.  Used only when `vb` is an instance of {Uint8Array}.
     *
     * @return {({VariantLayout}|undefined)}
     */
    getVariant(vb, offset = 0) {
        let variant;
        if (vb instanceof Uint8Array) {
            variant = this.discriminator.decode(vb, offset);
        }
        else {
            variant = vb;
        }
        return this.registry[variant];
    }
};
Layout$4.Union = Union$2;
/**
 * Represent a specific variant within a containing union.
 *
 * **NOTE** The {@link Layout#span|span} of the variant may include
 * the span of the {@link Union#discriminator|discriminator} used to
 * identify it, but values read and written using the variant strictly
 * conform to the content of {@link VariantLayout#layout|layout}.
 *
 * **NOTE** User code should not invoke this constructor directly.  Use
 * the union {@link Union#addVariant|addVariant} helper method.
 *
 * @param {Union} union - initializer for {@link
 * VariantLayout#union|union}.
 *
 * @param {Number} variant - initializer for {@link
 * VariantLayout#variant|variant}.
 *
 * @param {Layout} [layout] - initializer for {@link
 * VariantLayout#layout|layout}.  If absent the variant carries no
 * data.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.  Unlike many other layouts, variant
 * layouts normally include a property name so they can be identified
 * within their containing {@link Union}.  The property identifier may
 * be absent only if `layout` is is absent.
 *
 * @augments {Layout}
 */
let VariantLayout$2 = class VariantLayout extends Layout$3 {
    constructor(union, variant, layout, property) {
        if (!(union instanceof Union$2)) {
            throw new TypeError('union must be a Union');
        }
        if ((!Number.isInteger(variant)) || (0 > variant)) {
            throw new TypeError('variant must be a (non-negative) integer');
        }
        if (('string' === typeof layout)
            && (undefined === property)) {
            property = layout;
            layout = null;
        }
        if (layout) {
            if (!(layout instanceof Layout$3)) {
                throw new TypeError('layout must be a Layout');
            }
            if ((null !== union.defaultLayout)
                && (0 <= layout.span)
                && (layout.span > union.defaultLayout.span)) {
                throw new Error('variant span exceeds span of containing union');
            }
            if ('string' !== typeof property) {
                throw new TypeError('variant must have a String property');
            }
        }
        let span = union.span;
        if (0 > union.span) {
            span = layout ? layout.span : 0;
            if ((0 <= span) && union.usesPrefixDiscriminator) {
                span += union.discriminator.layout.span;
            }
        }
        super(span, property);
        /** The {@link Union} to which this variant belongs. */
        this.union = union;
        /** The unsigned integral value identifying this variant within
         * the {@link Union#discriminator|discriminator} of the containing
         * union. */
        this.variant = variant;
        /** The {@link Layout} to be used when reading/writing the
         * non-discriminator part of the {@link
         * VariantLayout#union|union}.  If `null` the variant carries no
         * data. */
        this.layout = layout || null;
    }
    /** @override */
    getSpan(b, offset = 0) {
        if (0 <= this.span) {
            /* Will be equal to the containing union span if that is not
             * variable. */
            return this.span;
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
            contentOffset = this.union.discriminator.layout.span;
        }
        /* Span is defined solely by the variant (and prefix discriminator) */
        let span = 0;
        if (this.layout) {
            span = this.layout.getSpan(b, offset + contentOffset);
        }
        return contentOffset + span;
    }
    /** @override */
    decode(b, offset = 0) {
        const dest = this.makeDestinationObject();
        if (this !== this.union.getVariant(b, offset)) {
            throw new Error('variant mismatch');
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
            contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout) {
            dest[this.property] = this.layout.decode(b, offset + contentOffset);
        }
        else if (this.property) {
            dest[this.property] = true;
        }
        else if (this.union.usesPrefixDiscriminator) {
            dest[this.union.discriminator.property] = this.variant;
        }
        return dest;
    }
    /** @override */
    encode(src, b, offset = 0) {
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
            contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout
            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {
            throw new TypeError('variant lacks property ' + this.property);
        }
        this.union.discriminator.encode(this.variant, b, offset);
        let span = contentOffset;
        if (this.layout) {
            this.layout.encode(src[this.property], b, offset + contentOffset);
            span += this.layout.getSpan(b, offset + contentOffset);
            if ((0 <= this.union.span)
                && (span > this.union.span)) {
                throw new Error('encoded variant overruns containing union');
            }
        }
        return span;
    }
    /** Delegate {@link Layout#fromArray|fromArray} to {@link
     * VariantLayout#layout|layout}. */
    fromArray(values) {
        if (this.layout) {
            return this.layout.fromArray(values);
        }
        return undefined;
    }
};
Layout$4.VariantLayout = VariantLayout$2;
/** JavaScript chose to define bitwise operations as operating on
 * signed 32-bit values in 2's complement form, meaning any integer
 * with bit 31 set is going to look negative.  For right shifts that's
 * not a problem, because `>>>` is a logical shift, but for every
 * other bitwise operator we have to compensate for possible negative
 * results. */
function fixBitwiseResult$1(v) {
    if (0 > v) {
        v += 0x100000000;
    }
    return v;
}
/**
 * Contain a sequence of bit fields as an unsigned integer.
 *
 * *Factory*: {@link module:Layout.bits|bits}
 *
 * This is a container element; within it there are {@link BitField}
 * instances that provide the extracted properties.  The container
 * simply defines the aggregate representation and its bit ordering.
 * The representation is an object containing properties with numeric
 * or {@link Boolean} values.
 *
 * {@link BitField}s are added with the {@link
 * BitStructure#addField|addField} and {@link
 * BitStructure#addBoolean|addBoolean} methods.

 * @param {Layout} word - initializer for {@link
 * BitStructure#word|word}.  The parameter must be an instance of
 * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.
 *
 * @param {bool} [msb] - `true` if the bit numbering starts at the
 * most significant bit of the containing word; `false` (default) if
 * it starts at the least significant bit of the containing word.  If
 * the parameter at this position is a string and `property` is
 * `undefined` the value of this argument will instead be used as the
 * value of `property`.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let BitStructure$1 = class BitStructure extends Layout$3 {
    constructor(word, msb, property) {
        if (!((word instanceof UInt$2)
            || (word instanceof UIntBE$2))) {
            throw new TypeError('word must be a UInt or UIntBE layout');
        }
        if (('string' === typeof msb)
            && (undefined === property)) {
            property = msb;
            msb = false;
        }
        if (4 < word.span) {
            throw new RangeError('word cannot exceed 32 bits');
        }
        super(word.span, property);
        /** The layout used for the packed value.  {@link BitField}
         * instances are packed sequentially depending on {@link
         * BitStructure#msb|msb}. */
        this.word = word;
        /** Whether the bit sequences are packed starting at the most
         * significant bit growing down (`true`), or the least significant
         * bit growing up (`false`).
         *
         * **NOTE** Regardless of this value, the least significant bit of
         * any {@link BitField} value is the least significant bit of the
         * corresponding section of the packed value. */
        this.msb = !!msb;
        /** The sequence of {@link BitField} layouts that comprise the
         * packed structure.
         *
         * **NOTE** The array remains mutable to allow fields to be {@link
         * BitStructure#addField|added} after construction.  Users should
         * not manipulate the content of this property.*/
        this.fields = [];
        /* Storage for the value.  Capture a variable instead of using an
         * instance property because we don't want anything to change the
         * value without going through the mutator. */
        let value = 0;
        this._packedSetValue = function (v) {
            value = fixBitwiseResult$1(v);
            return this;
        };
        this._packedGetValue = function () {
            return value;
        };
    }
    /** @override */
    decode(b, offset = 0) {
        const dest = this.makeDestinationObject();
        const value = this.word.decode(b, offset);
        this._packedSetValue(value);
        for (const fd of this.fields) {
            if (undefined !== fd.property) {
                dest[fd.property] = fd.decode(b);
            }
        }
        return dest;
    }
    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
     *
     * If `src` is missing a property for a member with a defined {@link
     * Layout#property|property} the corresponding region of the packed
     * value is left unmodified.  Unused bits are also left unmodified. */
    encode(src, b, offset = 0) {
        const value = this.word.decode(b, offset);
        this._packedSetValue(value);
        for (const fd of this.fields) {
            if (undefined !== fd.property) {
                const fv = src[fd.property];
                if (undefined !== fv) {
                    fd.encode(fv);
                }
            }
        }
        return this.word.encode(this._packedGetValue(), b, offset);
    }
    /** Register a new bitfield with a containing bit structure.  The
     * resulting bitfield is returned.
     *
     * @param {Number} bits - initializer for {@link BitField#bits|bits}.
     *
     * @param {string} property - initializer for {@link
     * Layout#property|property}.
     *
     * @return {BitField} */
    addField(bits, property) {
        const bf = new BitField$1(this, bits, property);
        this.fields.push(bf);
        return bf;
    }
    /** As with {@link BitStructure#addField|addField} for single-bit
     * fields with `boolean` value representation.
     *
     * @param {string} property - initializer for {@link
     * Layout#property|property}.
     *
     * @return {Boolean} */
    // `Boolean` conflicts with the native primitive type
    // eslint-disable-next-line @typescript-eslint/ban-types
    addBoolean(property) {
        // This is my Boolean, not the Javascript one.
        const bf = new Boolean$2(this, property);
        this.fields.push(bf);
        return bf;
    }
    /**
     * Get access to the bit field for a given property.
     *
     * @param {String} property - the bit field of interest.
     *
     * @return {BitField} - the field associated with `property`, or
     * undefined if there is no such property.
     */
    fieldFor(property) {
        if ('string' !== typeof property) {
            throw new TypeError('property must be string');
        }
        for (const fd of this.fields) {
            if (fd.property === property) {
                return fd;
            }
        }
        return undefined;
    }
};
Layout$4.BitStructure = BitStructure$1;
/**
 * Represent a sequence of bits within a {@link BitStructure}.
 *
 * All bit field values are represented as unsigned integers.
 *
 * **NOTE** User code should not invoke this constructor directly.
 * Use the container {@link BitStructure#addField|addField} helper
 * method.
 *
 * **NOTE** BitField instances are not instances of {@link Layout}
 * since {@link Layout#span|span} measures 8-bit units.
 *
 * @param {BitStructure} container - initializer for {@link
 * BitField#container|container}.
 *
 * @param {Number} bits - initializer for {@link BitField#bits|bits}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 */
let BitField$1 = class BitField {
    constructor(container, bits, property) {
        if (!(container instanceof BitStructure$1)) {
            throw new TypeError('container must be a BitStructure');
        }
        if ((!Number.isInteger(bits)) || (0 >= bits)) {
            throw new TypeError('bits must be positive integer');
        }
        const totalBits = 8 * container.span;
        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);
        if ((bits + usedBits) > totalBits) {
            throw new Error('bits too long for span remainder ('
                + (totalBits - usedBits) + ' of '
                + totalBits + ' remain)');
        }
        /** The {@link BitStructure} instance to which this bit field
         * belongs. */
        this.container = container;
        /** The span of this value in bits. */
        this.bits = bits;
        /** A mask of {@link BitField#bits|bits} bits isolating value bits
         * that fit within the field.
         *
         * That is, it masks a value that has not yet been shifted into
         * position within its containing packed integer. */
        this.valueMask = (1 << bits) - 1;
        if (32 === bits) { // shifted value out of range
            this.valueMask = 0xFFFFFFFF;
        }
        /** The offset of the value within the containing packed unsigned
         * integer.  The least significant bit of the packed value is at
         * offset zero, regardless of bit ordering used. */
        this.start = usedBits;
        if (this.container.msb) {
            this.start = totalBits - usedBits - bits;
        }
        /** A mask of {@link BitField#bits|bits} isolating the field value
         * within the containing packed unsigned integer. */
        this.wordMask = fixBitwiseResult$1(this.valueMask << this.start);
        /** The property name used when this bitfield is represented in an
         * Object.
         *
         * Intended to be functionally equivalent to {@link
         * Layout#property}.
         *
         * If left undefined the corresponding span of bits will be
         * treated as padding: it will not be mutated by {@link
         * Layout#encode|encode} nor represented as a property in the
         * decoded Object. */
        this.property = property;
    }
    /** Store a value into the corresponding subsequence of the containing
     * bit field. */
    decode(b, offset) {
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult$1(word & this.wordMask);
        const value = wordValue >>> this.start;
        return value;
    }
    /** Store a value into the corresponding subsequence of the containing
     * bit field.
     *
     * **NOTE** This is not a specialization of {@link
     * Layout#encode|Layout.encode} and there is no return value. */
    encode(value) {
        if ('number' !== typeof value
            || !Number.isInteger(value)
            || (value !== fixBitwiseResult$1(value & this.valueMask))) {
            throw new TypeError(nameWithProperty$2('BitField.encode', this)
                + ' value must be integer not exceeding ' + this.valueMask);
        }
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult$1(value << this.start);
        this.container._packedSetValue(fixBitwiseResult$1(word & ~this.wordMask)
            | wordValue);
    }
};
Layout$4.BitField = BitField$1;
/**
 * Represent a single bit within a {@link BitStructure} as a
 * JavaScript boolean.
 *
 * **NOTE** User code should not invoke this constructor directly.
 * Use the container {@link BitStructure#addBoolean|addBoolean} helper
 * method.
 *
 * @param {BitStructure} container - initializer for {@link
 * BitField#container|container}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {BitField}
 */
/* eslint-disable no-extend-native */
let Boolean$2 = class Boolean extends BitField$1 {
    constructor(container, property) {
        super(container, 1, property);
    }
    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
     *
     * @returns {boolean} */
    decode(b, offset) {
        return !!super.decode(b, offset);
    }
    /** @override */
    encode(value) {
        if ('boolean' === typeof value) {
            // BitField requires integer values
            value = +value;
        }
        super.encode(value);
    }
};
Layout$4.Boolean = Boolean$2;
/* eslint-enable no-extend-native */
/**
 * Contain a fixed-length block of arbitrary data, represented as a
 * Uint8Array.
 *
 * *Factory*: {@link module:Layout.blob|blob}
 *
 * @param {(Number|ExternalLayout)} length - initializes {@link
 * Blob#length|length}.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Blob$4 = class Blob extends Layout$3 {
    constructor(length, property) {
        if (!(((length instanceof ExternalLayout$2) && length.isCount())
            || (Number.isInteger(length) && (0 <= length)))) {
            throw new TypeError('length must be positive integer '
                + 'or an unsigned integer ExternalLayout');
        }
        let span = -1;
        if (!(length instanceof ExternalLayout$2)) {
            span = length;
        }
        super(span, property);
        /** The number of bytes in the blob.
         *
         * This may be a non-negative integer, or an instance of {@link
         * ExternalLayout} that satisfies {@link
         * ExternalLayout#isCount|isCount()}. */
        this.length = length;
    }
    /** @override */
    getSpan(b, offset) {
        let span = this.span;
        if (0 > span) {
            span = this.length.decode(b, offset);
        }
        return span;
    }
    /** @override */
    decode(b, offset = 0) {
        let span = this.span;
        if (0 > span) {
            span = this.length.decode(b, offset);
        }
        return uint8ArrayToBuffer(b).slice(offset, offset + span);
    }
    /** Implement {@link Layout#encode|encode} for {@link Blob}.
     *
     * **NOTE** If {@link Layout#count|count} is an instance of {@link
     * ExternalLayout} then the length of `src` will be encoded as the
     * count after `src` is encoded. */
    encode(src, b, offset) {
        let span = this.length;
        if (this.length instanceof ExternalLayout$2) {
            span = src.length;
        }
        if (!(src instanceof Uint8Array && span === src.length)) {
            throw new TypeError(nameWithProperty$2('Blob.encode', this)
                + ' requires (length ' + span + ') Uint8Array as src');
        }
        if ((offset + span) > b.length) {
            throw new RangeError('encoding overruns Uint8Array');
        }
        const srcBuffer = uint8ArrayToBuffer(src);
        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');
        if (this.length instanceof ExternalLayout$2) {
            this.length.encode(span, b, offset);
        }
        return span;
    }
};
Layout$4.Blob = Blob$4;
/**
 * Contain a `NUL`-terminated UTF8 string.
 *
 * *Factory*: {@link module:Layout.cstr|cstr}
 *
 * **NOTE** Any UTF8 string that incorporates a zero-valued byte will
 * not be correctly decoded by this layout.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let CString$1 = class CString extends Layout$3 {
    constructor(property) {
        super(-1, property);
    }
    /** @override */
    getSpan(b, offset = 0) {
        checkUint8Array(b);
        let idx = offset;
        while ((idx < b.length) && (0 !== b[idx])) {
            idx += 1;
        }
        return 1 + idx - offset;
    }
    /** @override */
    decode(b, offset = 0) {
        const span = this.getSpan(b, offset);
        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');
    }
    /** @override */
    encode(src, b, offset = 0) {
        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */
        if ('string' !== typeof src) {
            src = String(src);
        }
        const srcb = buffer_1$2.Buffer.from(src, 'utf8');
        const span = srcb.length;
        if ((offset + span) > b.length) {
            throw new RangeError('encoding overruns Buffer');
        }
        const buffer = uint8ArrayToBuffer(b);
        srcb.copy(buffer, offset);
        buffer[offset + span] = 0;
        return span + 1;
    }
};
Layout$4.CString = CString$1;
/**
 * Contain a UTF8 string with implicit length.
 *
 * *Factory*: {@link module:Layout.utf8|utf8}
 *
 * **NOTE** Because the length is implicit in the size of the buffer
 * this layout should be used only in isolation, or in a situation
 * where the length can be expressed by operating on a slice of the
 * containing buffer.
 *
 * @param {Number} [maxSpan] - the maximum length allowed for encoded
 * string content.  If not provided there is no bound on the allowed
 * content.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let UTF8$1 = class UTF8 extends Layout$3 {
    constructor(maxSpan, property) {
        if (('string' === typeof maxSpan) && (undefined === property)) {
            property = maxSpan;
            maxSpan = undefined;
        }
        if (undefined === maxSpan) {
            maxSpan = -1;
        }
        else if (!Number.isInteger(maxSpan)) {
            throw new TypeError('maxSpan must be an integer');
        }
        super(-1, property);
        /** The maximum span of the layout in bytes.
         *
         * Positive values are generally expected.  Zero is abnormal.
         * Attempts to encode or decode a value that exceeds this length
         * will throw a `RangeError`.
         *
         * A negative value indicates that there is no bound on the length
         * of the content. */
        this.maxSpan = maxSpan;
    }
    /** @override */
    getSpan(b, offset = 0) {
        checkUint8Array(b);
        return b.length - offset;
    }
    /** @override */
    decode(b, offset = 0) {
        const span = this.getSpan(b, offset);
        if ((0 <= this.maxSpan)
            && (this.maxSpan < span)) {
            throw new RangeError('text length exceeds maxSpan');
        }
        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');
    }
    /** @override */
    encode(src, b, offset = 0) {
        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */
        if ('string' !== typeof src) {
            src = String(src);
        }
        const srcb = buffer_1$2.Buffer.from(src, 'utf8');
        const span = srcb.length;
        if ((0 <= this.maxSpan)
            && (this.maxSpan < span)) {
            throw new RangeError('text length exceeds maxSpan');
        }
        if ((offset + span) > b.length) {
            throw new RangeError('encoding overruns Buffer');
        }
        srcb.copy(uint8ArrayToBuffer(b), offset);
        return span;
    }
};
Layout$4.UTF8 = UTF8$1;
/**
 * Contain a constant value.
 *
 * This layout may be used in cases where a JavaScript value can be
 * inferred without an expression in the binary encoding.  An example
 * would be a {@link VariantLayout|variant layout} where the content
 * is implied by the union {@link Union#discriminator|discriminator}.
 *
 * @param {Object|Number|String} value - initializer for {@link
 * Constant#value|value}.  If the value is an object (or array) and
 * the application intends the object to remain unchanged regardless
 * of what is done to values decoded by this layout, the value should
 * be frozen prior passing it to this constructor.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Constant$1 = class Constant extends Layout$3 {
    constructor(value, property) {
        super(0, property);
        /** The value produced by this constant when the layout is {@link
         * Constant#decode|decoded}.
         *
         * Any JavaScript value including `null` and `undefined` is
         * permitted.
         *
         * **WARNING** If `value` passed in the constructor was not
         * frozen, it is possible for users of decoded values to change
         * the content of the value. */
        this.value = value;
    }
    /** @override */
    decode(b, offset) {
        return this.value;
    }
    /** @override */
    encode(src, b, offset) {
        /* Constants take no space */
        return 0;
    }
};
Layout$4.Constant = Constant$1;
/** Factory for {@link GreedyCount}. */
Layout$4.greedy = ((elementSpan, property) => new GreedyCount$1(elementSpan, property));
/** Factory for {@link OffsetLayout}. */
var offset$1 = Layout$4.offset = ((layout, offset, property) => new OffsetLayout$2(layout, offset, property));
/** Factory for {@link UInt|unsigned int layouts} spanning one
 * byte. */
var u8$4 = Layout$4.u8 = ((property) => new UInt$2(1, property));
/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning two bytes. */
var u16$3 = Layout$4.u16 = ((property) => new UInt$2(2, property));
/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning three bytes. */
Layout$4.u24 = ((property) => new UInt$2(3, property));
/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning four bytes. */
var u32$4 = Layout$4.u32 = ((property) => new UInt$2(4, property));
/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning five bytes. */
Layout$4.u40 = ((property) => new UInt$2(5, property));
/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning six bytes. */
Layout$4.u48 = ((property) => new UInt$2(6, property));
/** Factory for {@link NearUInt64|little-endian unsigned int
 * layouts} interpreted as Numbers. */
var nu64$1 = Layout$4.nu64 = ((property) => new NearUInt64$2(property));
/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning two bytes. */
Layout$4.u16be = ((property) => new UIntBE$2(2, property));
/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning three bytes. */
Layout$4.u24be = ((property) => new UIntBE$2(3, property));
/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning four bytes. */
Layout$4.u32be = ((property) => new UIntBE$2(4, property));
/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning five bytes. */
Layout$4.u40be = ((property) => new UIntBE$2(5, property));
/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning six bytes. */
Layout$4.u48be = ((property) => new UIntBE$2(6, property));
/** Factory for {@link NearUInt64BE|big-endian unsigned int
 * layouts} interpreted as Numbers. */
Layout$4.nu64be = ((property) => new NearUInt64BE$1(property));
/** Factory for {@link Int|signed int layouts} spanning one
 * byte. */
Layout$4.s8 = ((property) => new Int$1(1, property));
/** Factory for {@link Int|little-endian signed int layouts}
 * spanning two bytes. */
Layout$4.s16 = ((property) => new Int$1(2, property));
/** Factory for {@link Int|little-endian signed int layouts}
 * spanning three bytes. */
Layout$4.s24 = ((property) => new Int$1(3, property));
/** Factory for {@link Int|little-endian signed int layouts}
 * spanning four bytes. */
Layout$4.s32 = ((property) => new Int$1(4, property));
/** Factory for {@link Int|little-endian signed int layouts}
 * spanning five bytes. */
Layout$4.s40 = ((property) => new Int$1(5, property));
/** Factory for {@link Int|little-endian signed int layouts}
 * spanning six bytes. */
Layout$4.s48 = ((property) => new Int$1(6, property));
/** Factory for {@link NearInt64|little-endian signed int layouts}
 * interpreted as Numbers. */
var ns64$1 = Layout$4.ns64 = ((property) => new NearInt64$2(property));
/** Factory for {@link Int|big-endian signed int layouts}
 * spanning two bytes. */
Layout$4.s16be = ((property) => new IntBE$1(2, property));
/** Factory for {@link Int|big-endian signed int layouts}
 * spanning three bytes. */
Layout$4.s24be = ((property) => new IntBE$1(3, property));
/** Factory for {@link Int|big-endian signed int layouts}
 * spanning four bytes. */
Layout$4.s32be = ((property) => new IntBE$1(4, property));
/** Factory for {@link Int|big-endian signed int layouts}
 * spanning five bytes. */
Layout$4.s40be = ((property) => new IntBE$1(5, property));
/** Factory for {@link Int|big-endian signed int layouts}
 * spanning six bytes. */
Layout$4.s48be = ((property) => new IntBE$1(6, property));
/** Factory for {@link NearInt64BE|big-endian signed int layouts}
 * interpreted as Numbers. */
Layout$4.ns64be = ((property) => new NearInt64BE$1(property));
/** Factory for {@link Float|little-endian 32-bit floating point} values. */
Layout$4.f32 = ((property) => new Float$1(property));
/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */
Layout$4.f32be = ((property) => new FloatBE$1(property));
/** Factory for {@link Double|little-endian 64-bit floating point} values. */
Layout$4.f64 = ((property) => new Double$1(property));
/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */
Layout$4.f64be = ((property) => new DoubleBE$1(property));
/** Factory for {@link Structure} values. */
var struct$4 = Layout$4.struct = ((fields, property, decodePrefixes) => new Structure$2(fields, property, decodePrefixes));
/** Factory for {@link BitStructure} values. */
Layout$4.bits = ((word, msb, property) => new BitStructure$1(word, msb, property));
/** Factory for {@link Sequence} values. */
var seq = Layout$4.seq = ((elementLayout, count, property) => new Sequence$1(elementLayout, count, property));
/** Factory for {@link Union} values. */
Layout$4.union = ((discr, defaultLayout, property) => new Union$2(discr, defaultLayout, property));
/** Factory for {@link UnionLayoutDiscriminator} values. */
Layout$4.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator$2(layout, property));
/** Factory for {@link Blob} values. */
var blob$2 = Layout$4.blob = ((length, property) => new Blob$4(length, property));
/** Factory for {@link CString} values. */
Layout$4.cstr = ((property) => new CString$1(property));
/** Factory for {@link UTF8} values. */
Layout$4.utf8 = ((maxSpan, property) => new UTF8$1(maxSpan, property));
/** Factory for {@link Constant} values. */
Layout$4.constant = ((value, property) => new Constant$1(value, property));

var browser$3 = {};

Object.defineProperty(browser$3, "__esModule", { value: true });
/**
 * Convert a little-endian buffer into a BigInt.
 * @param buf The little-endian buffer to convert
 * @returns A BigInt with the little-endian representation of buf.
 */
function toBigIntLE(buf) {
    {
        const reversed = Buffer.from(buf);
        reversed.reverse();
        const hex = reversed.toString('hex');
        if (hex.length === 0) {
            return BigInt(0);
        }
        return BigInt(`0x${hex}`);
    }
}
var toBigIntLE_1 = browser$3.toBigIntLE = toBigIntLE;
/**
 * Convert a big-endian buffer into a BigInt
 * @param buf The big-endian buffer to convert.
 * @returns A BigInt with the big-endian representation of buf.
 */
function toBigIntBE(buf) {
    {
        const hex = buf.toString('hex');
        if (hex.length === 0) {
            return BigInt(0);
        }
        return BigInt(`0x${hex}`);
    }
}
browser$3.toBigIntBE = toBigIntBE;
/**
 * Convert a BigInt to a little-endian buffer.
 * @param num   The BigInt to convert.
 * @param width The number of bytes that the resulting buffer should be.
 * @returns A little-endian buffer representation of num.
 */
function toBufferLE(num, width) {
    {
        const hex = num.toString(16);
        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');
        buffer.reverse();
        return buffer;
    }
}
var toBufferLE_1 = browser$3.toBufferLE = toBufferLE;
/**
 * Convert a BigInt to a big-endian buffer.
 * @param num   The BigInt to convert.
 * @param width The number of bytes that the resulting buffer should be.
 * @returns A big-endian buffer representation of num.
 */
function toBufferBE(num, width) {
    {
        const hex = num.toString(16);
        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');
    }
}
browser$3.toBufferBE = toBufferBE;

/**
 * A `StructFailure` represents a single specific failure in validation.
 */
/**
 * `StructError` objects are thrown (or returned) when validation fails.
 *
 * Validation logic is design to exit early for maximum performance. The error
 * represents the first error encountered during validation. For more detail,
 * the `error.failures` property is a generator function that can be run to
 * continue validation and receive all the failures in the data.
 */
let StructError$1 = class StructError extends TypeError {
    constructor(failure, failures) {
        let cached;
        const { message, explanation, ...rest } = failure;
        const { path } = failure;
        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;
        super(explanation ?? msg);
        if (explanation != null)
            this.cause = msg;
        Object.assign(this, rest);
        this.name = this.constructor.name;
        this.failures = () => {
            return (cached ?? (cached = [failure, ...failures()]));
        };
    }
};

/**
 * Check if a value is an iterator.
 */
function isIterable$1(x) {
    return isObject$3(x) && typeof x[Symbol.iterator] === 'function';
}
/**
 * Check if a value is a plain object.
 */
function isObject$3(x) {
    return typeof x === 'object' && x != null;
}
/**
 * Check if a value is a non-array object.
 */
function isNonArrayObject(x) {
    return isObject$3(x) && !Array.isArray(x);
}
/**
 * Return a value as a printable string.
 */
function print$1(value) {
    if (typeof value === 'symbol') {
        return value.toString();
    }
    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;
}
/**
 * Shifts (removes and returns) the first value from the `input` iterator.
 * Like `Array.prototype.shift()` but for an `Iterator`.
 */
function shiftIterator$1(input) {
    const { done, value } = input.next();
    return done ? undefined : value;
}
/**
 * Convert a single validation result to a failure.
 */
function toFailure$1(result, context, struct, value) {
    if (result === true) {
        return;
    }
    else if (result === false) {
        result = {};
    }
    else if (typeof result === 'string') {
        result = { message: result };
    }
    const { path, branch } = context;
    const { type } = struct;
    const { refinement, message = `Expected a value of type \`${type}\`${refinement ? ` with refinement \`${refinement}\`` : ''}, but received: \`${print$1(value)}\``, } = result;
    return {
        value,
        type,
        refinement,
        key: path[path.length - 1],
        path,
        branch,
        ...result,
        message,
    };
}
/**
 * Convert a validation result to an iterable of failures.
 */
function* toFailures$1(result, context, struct, value) {
    if (!isIterable$1(result)) {
        result = [result];
    }
    for (const r of result) {
        const failure = toFailure$1(r, context, struct, value);
        if (failure) {
            yield failure;
        }
    }
}
/**
 * Check a value against a struct, traversing deeply into nested values, and
 * returning an iterator of failures or success.
 */
function* run$1(value, struct, options = {}) {
    const { path = [], branch = [value], coerce = false, mask = false } = options;
    const ctx = { path, branch, mask };
    if (coerce) {
        value = struct.coercer(value, ctx);
    }
    let status = 'valid';
    for (const failure of struct.validator(value, ctx)) {
        failure.explanation = options.message;
        status = 'not_valid';
        yield [failure, undefined];
    }
    for (let [k, v, s] of struct.entries(value, ctx)) {
        const ts = run$1(v, s, {
            path: k === undefined ? path : [...path, k],
            branch: k === undefined ? branch : [...branch, v],
            coerce,
            mask,
            message: options.message,
        });
        for (const t of ts) {
            if (t[0]) {
                status = t[0].refinement != null ? 'not_refined' : 'not_valid';
                yield [t[0], undefined];
            }
            else if (coerce) {
                v = t[1];
                if (k === undefined) {
                    value = v;
                }
                else if (value instanceof Map) {
                    value.set(k, v);
                }
                else if (value instanceof Set) {
                    value.add(v);
                }
                else if (isObject$3(value)) {
                    if (v !== undefined || k in value)
                        value[k] = v;
                }
            }
        }
    }
    if (status !== 'not_valid') {
        for (const failure of struct.refiner(value, ctx)) {
            failure.explanation = options.message;
            status = 'not_refined';
            yield [failure, undefined];
        }
    }
    if (status === 'valid') {
        yield [undefined, value];
    }
}

/**
 * `Struct` objects encapsulate the validation logic for a specific type of
 * values. Once constructed, you use the `assert`, `is` or `validate` helpers to
 * validate unknown input data against the struct.
 */
let Struct$2 = class Struct {
    constructor(props) {
        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;
        this.type = type;
        this.schema = schema;
        this.entries = entries;
        this.coercer = coercer;
        if (validator) {
            this.validator = (value, context) => {
                const result = validator(value, context);
                return toFailures$1(result, context, this, value);
            };
        }
        else {
            this.validator = () => [];
        }
        if (refiner) {
            this.refiner = (value, context) => {
                const result = refiner(value, context);
                return toFailures$1(result, context, this, value);
            };
        }
        else {
            this.refiner = () => [];
        }
    }
    /**
     * Assert that a value passes the struct's validation, throwing if it doesn't.
     */
    assert(value, message) {
        return assert$4(value, this, message);
    }
    /**
     * Create a value with the struct's coercion logic, then validate it.
     */
    create(value, message) {
        return create$1(value, this, message);
    }
    /**
     * Check if a value passes the struct's validation.
     */
    is(value) {
        return is$3(value, this);
    }
    /**
     * Mask a value, coercing and validating it, but returning only the subset of
     * properties defined by the struct's schema. Masking applies recursively to
     * props of `object` structs only.
     */
    mask(value, message) {
        return mask$1(value, this, message);
    }
    /**
     * Validate a value with the struct's validation logic, returning a tuple
     * representing the result.
     *
     * You may optionally pass `true` for the `coerce` argument to coerce
     * the value before attempting to validate it. If you do, the result will
     * contain the coerced result when successful. Also, `mask` will turn on
     * masking of the unknown `object` props recursively if passed.
     */
    validate(value, options = {}) {
        return validate$4(value, this, options);
    }
};
/**
 * Assert that a value passes a struct, throwing if it doesn't.
 */
function assert$4(value, struct, message) {
    const result = validate$4(value, struct, { message });
    if (result[0]) {
        throw result[0];
    }
}
/**
 * Create a value with the coercion logic of struct and validate it.
 */
function create$1(value, struct, message) {
    const result = validate$4(value, struct, { coerce: true, message });
    if (result[0]) {
        throw result[0];
    }
    else {
        return result[1];
    }
}
/**
 * Mask a value, returning only the subset of properties defined by a struct.
 */
function mask$1(value, struct, message) {
    const result = validate$4(value, struct, { coerce: true, mask: true, message });
    if (result[0]) {
        throw result[0];
    }
    else {
        return result[1];
    }
}
/**
 * Check if a value passes a struct.
 */
function is$3(value, struct) {
    const result = validate$4(value, struct);
    return !result[0];
}
/**
 * Validate a value against a struct, returning an error if invalid, or the
 * value (with potential coercion) if valid.
 */
function validate$4(value, struct, options = {}) {
    const tuples = run$1(value, struct, options);
    const tuple = shiftIterator$1(tuples);
    if (tuple[0]) {
        const error = new StructError$1(tuple[0], function* () {
            for (const t of tuples) {
                if (t[0]) {
                    yield t[0];
                }
            }
        });
        return [error, undefined];
    }
    else {
        const v = tuple[1];
        return [undefined, v];
    }
}
/**
 * Define a new struct type with a custom validation function.
 */
function define$1(name, validator) {
    return new Struct$2({ type: name, schema: null, validator });
}

/**
 * Ensure that any value passes validation.
 */
function any$1() {
    return define$1('any', () => true);
}
function array$7(Element) {
    return new Struct$2({
        type: 'array',
        schema: Element,
        *entries(value) {
            if (Element && Array.isArray(value)) {
                for (const [i, v] of value.entries()) {
                    yield [i, v, Element];
                }
            }
        },
        coercer(value) {
            return Array.isArray(value) ? value.slice() : value;
        },
        validator(value) {
            return (Array.isArray(value) ||
                `Expected an array value, but received: ${print$1(value)}`);
        },
    });
}
/**
 * Ensure that a value is a boolean.
 */
function boolean$6() {
    return define$1('boolean', (value) => {
        return typeof value === 'boolean';
    });
}
/**
 * Ensure that a value is an instance of a specific class.
 */
function instance(Class) {
    return define$1('instance', (value) => {
        return (value instanceof Class ||
            `Expected a \`${Class.name}\` instance, but received: ${print$1(value)}`);
    });
}
function literal$1(constant) {
    const description = print$1(constant);
    const t = typeof constant;
    return new Struct$2({
        type: 'literal',
        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,
        validator(value) {
            return (value === constant ||
                `Expected the literal \`${description}\`, but received: ${print$1(value)}`);
        },
    });
}
/**
 * Ensure that no value ever passes validation.
 */
function never() {
    return define$1('never', () => false);
}
/**
 * Augment an existing struct to allow `null` values.
 */
function nullable$4(struct) {
    return new Struct$2({
        ...struct,
        validator: (value, ctx) => value === null || struct.validator(value, ctx),
        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),
    });
}
/**
 * Ensure that a value is a number.
 */
function number$6() {
    return define$1('number', (value) => {
        return ((typeof value === 'number' && !isNaN(value)) ||
            `Expected a number, but received: ${print$1(value)}`);
    });
}
/**
 * Augment a struct to allow `undefined` values.
 */
function optional$1(struct) {
    return new Struct$2({
        ...struct,
        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),
        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),
    });
}
/**
 * Ensure that a value is an object with keys and values of specific types, but
 * without ensuring any specific shape of properties.
 *
 * Like TypeScript's `Record` utility.
 */
function record(Key, Value) {
    return new Struct$2({
        type: 'record',
        schema: null,
        *entries(value) {
            if (isObject$3(value)) {
                for (const k in value) {
                    const v = value[k];
                    yield [k, k, Key];
                    yield [k, v, Value];
                }
            }
        },
        validator(value) {
            return (isNonArrayObject(value) ||
                `Expected an object, but received: ${print$1(value)}`);
        },
        coercer(value) {
            return isNonArrayObject(value) ? { ...value } : value;
        },
    });
}
/**
 * Ensure that a value is a string.
 */
function string$9() {
    return define$1('string', (value) => {
        return (typeof value === 'string' ||
            `Expected a string, but received: ${print$1(value)}`);
    });
}
/**
 * Ensure that a value is a tuple of a specific length, and that each of its
 * elements is of a specific type.
 */
function tuple$3(Structs) {
    const Never = never();
    return new Struct$2({
        type: 'tuple',
        schema: null,
        *entries(value) {
            if (Array.isArray(value)) {
                const length = Math.max(Structs.length, value.length);
                for (let i = 0; i < length; i++) {
                    yield [i, value[i], Structs[i] || Never];
                }
            }
        },
        validator(value) {
            return (Array.isArray(value) ||
                `Expected an array, but received: ${print$1(value)}`);
        },
        coercer(value) {
            return Array.isArray(value) ? value.slice() : value;
        },
    });
}
/**
 * Ensure that a value has a set of known properties of specific types.
 *
 * Note: Unrecognized properties are allowed and untouched. This is similar to
 * how TypeScript's structural typing works.
 */
function type$1(schema) {
    const keys = Object.keys(schema);
    return new Struct$2({
        type: 'type',
        schema,
        *entries(value) {
            if (isObject$3(value)) {
                for (const k of keys) {
                    yield [k, value[k], schema[k]];
                }
            }
        },
        validator(value) {
            return (isNonArrayObject(value) ||
                `Expected an object, but received: ${print$1(value)}`);
        },
        coercer(value) {
            return isNonArrayObject(value) ? { ...value } : value;
        },
    });
}
/**
 * Ensure that a value matches one of a set of types.
 */
function union$2(Structs) {
    const description = Structs.map((s) => s.type).join(' | ');
    return new Struct$2({
        type: 'union',
        schema: null,
        coercer(value, ctx) {
            for (const S of Structs) {
                const [error, coerced] = S.validate(value, {
                    coerce: true,
                    mask: ctx.mask,
                });
                if (!error) {
                    return coerced;
                }
            }
            return value;
        },
        validator(value, ctx) {
            const failures = [];
            for (const S of Structs) {
                const [...tuples] = run$1(value, S, ctx);
                const [first] = tuples;
                if (!first[0]) {
                    return [];
                }
                else {
                    for (const [failure] of tuples) {
                        if (failure) {
                            failures.push(failure);
                        }
                    }
                }
            }
            return [
                `Expected the value to satisfy a union of \`${description}\`, but received: ${print$1(value)}`,
                ...failures,
            ];
        },
    });
}
/**
 * Ensure that any value passes validation, without widening its type to `any`.
 */
function unknown$1() {
    return define$1('unknown', () => true);
}

/**
 * Augment a `Struct` to add an additional coercion step to its input.
 *
 * This allows you to transform input data before validating it, to increase the
 * likelihood that it passes validation—for example for default values, parsing
 * different formats, etc.
 *
 * Note: You must use `create(value, Struct)` on the value to have the coercion
 * take effect! Using simply `assert()` or `is()` will not use coercion.
 */
function coerce$1(struct, condition, coercer) {
    return new Struct$2({
        ...struct,
        coercer: (value, ctx) => {
            return is$3(value, condition)
                ? struct.coercer(coercer(value, ctx), ctx)
                : struct.coercer(value, ctx);
        },
    });
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate$3(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i$1 = 0; i$1 < 256; ++i$1) {
  byteToHex.push((i$1 + 0x100).toString(16).substr(1));
}

function stringify$2(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate$3(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || stringify$2(b);
}

function parse(uuid) {
  if (!validate$3(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL$1 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35 (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = parse(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return stringify$2(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL$1;
  return generateUUID;
}

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var v3 = v35('v3', 0x30, md5);
var v3$1 = v3;

function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return stringify$2(rnds);
}

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var v5 = v35('v5', 0x50, sha1);
var v5$1 = v5;

var nil = '00000000-0000-0000-0000-000000000000';

function version(uuid) {
  if (!validate$3(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var esmBrowser = /*#__PURE__*/Object.freeze({
  __proto__: null,
  NIL: nil,
  parse: parse,
  stringify: stringify$2,
  v1: v1,
  v3: v3$1,
  v4: v4,
  v5: v5$1,
  validate: validate$3,
  version: version
});

const uuid$2 = esmBrowser.v4;

/**
 *  Generates a JSON-RPC 1.0 or 2.0 request
 *  @param {String} method Name of method to call
 *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value
 *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation
 *  @param {Object} [options]
 *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)
 *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it
 *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID
 *  @throws {TypeError} If any of the parameters are invalid
 *  @return {Object} A JSON-RPC 1.0 or 2.0 request
 *  @memberOf Utils
 */
const generateRequest$1 = function(method, params, id, options) {
  if(typeof method !== 'string') {
    throw new TypeError(method + ' must be a string');
  }

  options = options || {};

  // check valid version provided
  const version = typeof options.version === 'number' ? options.version : 2;
  if (version !== 1 && version !== 2) {
    throw new TypeError(version + ' must be 1 or 2');
  }

  const request = {
    method: method
  };

  if(version === 2) {
    request.jsonrpc = '2.0';
  }

  if(params) {
    // params given, but invalid?
    if(typeof params !== 'object' && !Array.isArray(params)) {
      throw new TypeError(params + ' must be an object, array or omitted');
    }
    request.params = params;
  }

  // if id was left out, generate one (null means explicit notification)
  if(typeof(id) === 'undefined') {
    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid$2(); };
    request.id = generator(request, options);
  } else if (version === 2 && id === null) {
    // we have a version 2 notification
    if (options.notificationIdNull) {
      request.id = null; // id will not be set at all unless option provided
    }
  } else {
    request.id = id;
  }

  return request;
};

var generateRequest_1 = generateRequest$1;

const uuid$1 = esmBrowser.v4;
const generateRequest = generateRequest_1;

/**
 * Constructor for a Jayson Browser Client that does not depend any node.js core libraries
 * @class ClientBrowser
 * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback
 * @param {Object} [options]
 * @param {Function} [options.reviver] Reviver function for JSON
 * @param {Function} [options.replacer] Replacer function for JSON
 * @param {Number} [options.version=2] JSON-RPC version to use (1|2)
 * @param {Function} [options.generator] Function to use for generating request IDs
 *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it
 * @return {ClientBrowser}
 */
const ClientBrowser = function(callServer, options) {
  if(!(this instanceof ClientBrowser)) {
    return new ClientBrowser(callServer, options);
  }

  if (!options) {
    options = {};
  }

  this.options = {
    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,
    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,
    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid$1(); },
    version: typeof options.version !== 'undefined' ? options.version : 2,
    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,
  };

  this.callServer = callServer;
};

var browser$2 = ClientBrowser;

/**
 *  Creates a request and dispatches it if given a callback.
 *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String
 *  @param {Array|Object} [params] Parameters for the method
 *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request
 *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.
 *  @throws {TypeError} Invalid parameters
 *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request
 */
ClientBrowser.prototype.request = function(method, params, id, callback) {
  const self = this;
  let request = null;

  // is this a batch request?
  const isBatch = Array.isArray(method) && typeof params === 'function';

  if (this.options.version === 1 && isBatch) {
    throw new TypeError('JSON-RPC 1.0 does not support batching');
  }

  // is this a raw request?
  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';

  if(isBatch || isRaw) {
    callback = params;
    request = method;
  } else {
    if(typeof id === 'function') {
      callback = id;
      // specifically undefined because "null" is a notification request
      id = undefined;
    }

    const hasCallback = typeof callback === 'function';

    try {
      request = generateRequest(method, params, id, {
        generator: this.options.generator,
        version: this.options.version,
        notificationIdNull: this.options.notificationIdNull,
      });
    } catch(err) {
      if(hasCallback) {
        return callback(err);
      }
      throw err;
    }

    // no callback means we should just return a raw request
    if(!hasCallback) {
      return request;
    }

  }

  let message;
  try {
    message = JSON.stringify(request, this.options.replacer);
  } catch(err) {
    return callback(err);
  }

  this.callServer(message, function(err, response) {
    self._parseResponse(err, response, callback);
  });

  // always return the raw request
  return request;
};

/**
 * Parses a response from a server
 * @param {Object} err Error to pass on that is unrelated to the actual response
 * @param {String} responseText JSON-RPC 1.0 or 2.0 response
 * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters
 * @private
 */
ClientBrowser.prototype._parseResponse = function(err, responseText, callback) {
  if(err) {
    callback(err);
    return;
  }

  if(!responseText) {
    // empty response text, assume that is correct because it could be a
    // notification which jayson does not give any body for
    return callback();
  }

  let response;
  try {
    response = JSON.parse(responseText, this.options.reviver);
  } catch(err) {
    return callback(err);
  }

  if(callback.length === 3) {
    // if callback length is 3, we split callback arguments on error and response

    // is batch response?
    if(Array.isArray(response)) {

      // neccesary to split strictly on validity according to spec here
      const isError = function(res) {
        return typeof res.error !== 'undefined';
      };

      const isNotError = function (res) {
        return !isError(res);
      };

      return callback(null, response.filter(isError), response.filter(isNotError));
    
    } else {

      // split regardless of validity
      return callback(null, response.error, response.result);
    
    }
  
  }

  callback(null, response);
};

var RpcClient = /*@__PURE__*/getDefaultExportFromCjs$3(browser$2);

var eventemitter3$1 = {exports: {}};

(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	} 
} (eventemitter3$1));

var eventemitter3Exports$1 = eventemitter3$1.exports;
var EventEmitter$1 = /*@__PURE__*/getDefaultExportFromCjs$3(eventemitter3Exports$1);

// node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js
var WebSocketBrowserImpl = class extends EventEmitter$1 {
  socket;
  /** Instantiate a WebSocket class
  * @constructor
  * @param {String} address - url to a websocket server
  * @param {(Object)} options - websocket options
  * @param {(String|Array)} protocols - a list of protocols
  * @return {WebSocketBrowserImpl} - returns a WebSocket instance
  */
  constructor(address, options, protocols) {
    super();
    this.socket = new window.WebSocket(address, protocols);
    this.socket.onopen = () => this.emit("open");
    this.socket.onmessage = (event) => this.emit("message", event.data);
    this.socket.onerror = (error) => this.emit("error", error);
    this.socket.onclose = (event) => {
      this.emit("close", event.code, event.reason);
    };
  }
  /**
  * Sends data through a websocket connection
  * @method
  * @param {(String|Object)} data - data to be sent via websocket
  * @param {Object} optionsOrCallback - ws options
  * @param {Function} callback - a callback called once the data is sent
  * @return {Undefined}
  */
  send(data, optionsOrCallback, callback) {
    const cb = callback || optionsOrCallback;
    try {
      this.socket.send(data);
      cb();
    } catch (error) {
      cb(error);
    }
  }
  /**
  * Closes an underlying socket
  * @method
  * @param {Number} code - status code explaining why the connection is being closed
  * @param {String} reason - a description why the connection is closing
  * @return {Undefined}
  * @throws {Error}
  */
  close(code, reason) {
    this.socket.close(code, reason);
  }
  addEventListener(type, listener, options) {
    this.socket.addEventListener(type, listener, options);
  }
};
function WebSocket(address, options) {
  return new WebSocketBrowserImpl(address, options);
}

// src/lib/utils.ts
var DefaultDataPack = class {
  encode(value) {
    return JSON.stringify(value);
  }
  decode(value) {
    return JSON.parse(value);
  }
};

// src/lib/client.ts
var CommonClient = class extends EventEmitter$1 {
  address;
  rpc_id;
  queue;
  options;
  autoconnect;
  ready;
  reconnect;
  reconnect_timer_id;
  reconnect_interval;
  max_reconnects;
  rest_options;
  current_reconnects;
  generate_request_id;
  socket;
  webSocketFactory;
  dataPack;
  /**
  * Instantiate a Client class.
  * @constructor
  * @param {webSocketFactory} webSocketFactory - factory method for WebSocket
  * @param {String} address - url to a websocket server
  * @param {Object} options - ws options object with reconnect parameters
  * @param {Function} generate_request_id - custom generation request Id
  * @param {DataPack} dataPack - data pack contains encoder and decoder
  * @return {CommonClient}
  */
  constructor(webSocketFactory, address = "ws://localhost:8080", {
    autoconnect = true,
    reconnect = true,
    reconnect_interval = 1e3,
    max_reconnects = 5,
    ...rest_options
  } = {}, generate_request_id, dataPack) {
    super();
    this.webSocketFactory = webSocketFactory;
    this.queue = {};
    this.rpc_id = 0;
    this.address = address;
    this.autoconnect = autoconnect;
    this.ready = false;
    this.reconnect = reconnect;
    this.reconnect_timer_id = void 0;
    this.reconnect_interval = reconnect_interval;
    this.max_reconnects = max_reconnects;
    this.rest_options = rest_options;
    this.current_reconnects = 0;
    this.generate_request_id = generate_request_id || (() => ++this.rpc_id);
    if (!dataPack) this.dataPack = new DefaultDataPack();
    else this.dataPack = dataPack;
    if (this.autoconnect)
      this._connect(this.address, {
        autoconnect: this.autoconnect,
        reconnect: this.reconnect,
        reconnect_interval: this.reconnect_interval,
        max_reconnects: this.max_reconnects,
        ...this.rest_options
      });
  }
  /**
  * Connects to a defined server if not connected already.
  * @method
  * @return {Undefined}
  */
  connect() {
    if (this.socket) return;
    this._connect(this.address, {
      autoconnect: this.autoconnect,
      reconnect: this.reconnect,
      reconnect_interval: this.reconnect_interval,
      max_reconnects: this.max_reconnects,
      ...this.rest_options
    });
  }
  /**
  * Calls a registered RPC method on server.
  * @method
  * @param {String} method - RPC method name
  * @param {Object|Array} params - optional method parameters
  * @param {Number} timeout - RPC reply timeout value
  * @param {Object} ws_opts - options passed to ws
  * @return {Promise}
  */
  call(method, params, timeout, ws_opts) {
    if (!ws_opts && "object" === typeof timeout) {
      ws_opts = timeout;
      timeout = null;
    }
    return new Promise((resolve, reject) => {
      if (!this.ready) return reject(new Error("socket not ready"));
      const rpc_id = this.generate_request_id(method, params);
      const message = {
        jsonrpc: "2.0",
        method,
        params: params || void 0,
        id: rpc_id
      };
      this.socket.send(this.dataPack.encode(message), ws_opts, (error) => {
        if (error) return reject(error);
        this.queue[rpc_id] = { promise: [resolve, reject] };
        if (timeout) {
          this.queue[rpc_id].timeout = setTimeout(() => {
            delete this.queue[rpc_id];
            reject(new Error("reply timeout"));
          }, timeout);
        }
      });
    });
  }
  /**
  * Logins with the other side of the connection.
  * @method
  * @param {Object} params - Login credentials object
  * @return {Promise}
  */
  async login(params) {
    const resp = await this.call("rpc.login", params);
    if (!resp) throw new Error("authentication failed");
    return resp;
  }
  /**
  * Fetches a list of client's methods registered on server.
  * @method
  * @return {Array}
  */
  async listMethods() {
    return await this.call("__listMethods");
  }
  /**
  * Sends a JSON-RPC 2.0 notification to server.
  * @method
  * @param {String} method - RPC method name
  * @param {Object} params - optional method parameters
  * @return {Promise}
  */
  notify(method, params) {
    return new Promise((resolve, reject) => {
      if (!this.ready) return reject(new Error("socket not ready"));
      const message = {
        jsonrpc: "2.0",
        method,
        params
      };
      this.socket.send(this.dataPack.encode(message), (error) => {
        if (error) return reject(error);
        resolve();
      });
    });
  }
  /**
  * Subscribes for a defined event.
  * @method
  * @param {String|Array} event - event name
  * @return {Undefined}
  * @throws {Error}
  */
  async subscribe(event) {
    if (typeof event === "string") event = [event];
    const result = await this.call("rpc.on", event);
    if (typeof event === "string" && result[event] !== "ok")
      throw new Error(
        "Failed subscribing to an event '" + event + "' with: " + result[event]
      );
    return result;
  }
  /**
  * Unsubscribes from a defined event.
  * @method
  * @param {String|Array} event - event name
  * @return {Undefined}
  * @throws {Error}
  */
  async unsubscribe(event) {
    if (typeof event === "string") event = [event];
    const result = await this.call("rpc.off", event);
    if (typeof event === "string" && result[event] !== "ok")
      throw new Error("Failed unsubscribing from an event with: " + result);
    return result;
  }
  /**
  * Closes a WebSocket connection gracefully.
  * @method
  * @param {Number} code - socket close code
  * @param {String} data - optional data to be sent before closing
  * @return {Undefined}
  */
  close(code, data) {
    this.socket.close(code || 1e3, data);
  }
  /**
  * Enable / disable automatic reconnection.
  * @method
  * @param {Boolean} reconnect - enable / disable reconnection
  * @return {Undefined}
  */
  setAutoReconnect(reconnect) {
    this.reconnect = reconnect;
  }
  /**
  * Set the interval between reconnection attempts.
  * @method
  * @param {Number} interval - reconnection interval in milliseconds
  * @return {Undefined}
  */
  setReconnectInterval(interval) {
    this.reconnect_interval = interval;
  }
  /**
  * Set the maximum number of reconnection attempts.
  * @method
  * @param {Number} max_reconnects - maximum reconnection attempts
  * @return {Undefined}
  */
  setMaxReconnects(max_reconnects) {
    this.max_reconnects = max_reconnects;
  }
  /**
  * Connection/Message handler.
  * @method
  * @private
  * @param {String} address - WebSocket API address
  * @param {Object} options - ws options object
  * @return {Undefined}
  */
  _connect(address, options) {
    clearTimeout(this.reconnect_timer_id);
    this.socket = this.webSocketFactory(address, options);
    this.socket.addEventListener("open", () => {
      this.ready = true;
      this.emit("open");
      this.current_reconnects = 0;
    });
    this.socket.addEventListener("message", ({ data: message }) => {
      if (message instanceof ArrayBuffer)
        message = Buffer.from(message).toString();
      try {
        message = this.dataPack.decode(message);
      } catch (error) {
        return;
      }
      if (message.notification && this.listeners(message.notification).length) {
        if (!Object.keys(message.params).length)
          return this.emit(message.notification);
        const args = [message.notification];
        if (message.params.constructor === Object) args.push(message.params);
        else
          for (let i = 0; i < message.params.length; i++)
            args.push(message.params[i]);
        return Promise.resolve().then(() => {
          this.emit.apply(this, args);
        });
      }
      if (!this.queue[message.id]) {
        if (message.method) {
          return Promise.resolve().then(() => {
            this.emit(message.method, message?.params);
          });
        }
        return;
      }
      if ("error" in message === "result" in message)
        this.queue[message.id].promise[1](
          new Error(
            'Server response malformed. Response must include either "result" or "error", but not both.'
          )
        );
      if (this.queue[message.id].timeout)
        clearTimeout(this.queue[message.id].timeout);
      if (message.error) this.queue[message.id].promise[1](message.error);
      else this.queue[message.id].promise[0](message.result);
      delete this.queue[message.id];
    });
    this.socket.addEventListener("error", (error) => this.emit("error", error));
    this.socket.addEventListener("close", ({ code, reason }) => {
      if (this.ready)
        setTimeout(() => this.emit("close", code, reason), 0);
      this.ready = false;
      this.socket = void 0;
      if (code === 1e3) return;
      this.current_reconnects++;
      if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0))
        this.reconnect_timer_id = setTimeout(
          () => this._connect(address, options),
          this.reconnect_interval
        );
    });
  }
};

const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.
// TODO: re-check https://issues.chromium.org/issues/42212588
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));

// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
// It's called a sponge function.
// Various per round constants calculations
const SHA3_PI = [];
const SHA3_ROTL = [];
const _SHA3_IOTA = [];
const _0n$1 = /* @__PURE__ */ BigInt(0);
const _1n$2 = /* @__PURE__ */ BigInt(1);
const _2n$1 = /* @__PURE__ */ BigInt(2);
const _7n = /* @__PURE__ */ BigInt(7);
const _256n = /* @__PURE__ */ BigInt(256);
const _0x71n = /* @__PURE__ */ BigInt(0x71);
for (let round = 0, R = _1n$2, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n$1;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n$2) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n$1)
            t ^= _1n$2 << ((_1n$2 << /* @__PURE__ */ BigInt(j)) - _1n$2);
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));
const rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
class Keccak extends Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        anumber(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error('Sha3 supports only keccak-f1600 function');
        this.state = new Uint8Array(200);
        this.state32 = u32$5(this.state);
    }
    keccak() {
        if (!isLE)
            byteSwap32(this.state32);
        keccakP(this.state32, this.rounds);
        if (!isLE)
            byteSwap32(this.state32);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        aexists(this);
        const { blockLen, state } = this;
        data = toBytes(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        aexists(this, false);
        abytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= blockLen)
                this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        anumber(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        aoutput(out, this);
        if (this.finished)
            throw new Error('digest() was already called');
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */
const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);

// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per late 2024.
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = /* @__PURE__ */ new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state:
// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
// prettier-ignore
const SHA256_IV = /* @__PURE__ */ new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends HashMD$1 {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = SHA256_IV[0] | 0;
        this.B = SHA256_IV[1] | 0;
        this.C = SHA256_IV[2] | 0;
        this.D = SHA256_IV[3] | 0;
        this.E = SHA256_IV[4] | 0;
        this.F = SHA256_IV[5] | 0;
        this.G = SHA256_IV[6] | 0;
        this.H = SHA256_IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = rotr$1(W15, 7) ^ rotr$1(W15, 18) ^ (W15 >>> 3);
            const s1 = rotr$1(W2, 17) ^ rotr$1(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = rotr$1(E, 6) ^ rotr$1(E, 11) ^ rotr$1(E, 25);
            const T1 = (H + sigma1 + Chi$1(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = rotr$1(A, 2) ^ rotr$1(A, 13) ^ rotr$1(A, 22);
            const T2 = (sigma0 + Maj$1(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
const sha256$1 = /* @__PURE__ */ wrapConstructor$1(() => new SHA256());

// HMAC (RFC 2104)
class HMAC extends Hash$1 {
    constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        ahash(hash);
        const key = toBytes$1(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== 'function')
            throw new Error('Expected instance of class which extends utils.Hash');
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36 ^ 0x5c;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        aexists$1(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        aexists$1(this);
        abytes$2(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 * @example
 * import { hmac } from '@noble/hashes/hmac';
 * import { sha256 } from '@noble/hashes/sha2';
 * const mac1 = hmac(sha256, 'key', 'message');
 */
const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
hmac.create = (hash, key) => new HMAC(hash, key);

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Short Weierstrass curve. The formula is: y² = x³ + ax + b
function validateSigVerOpts(opts) {
    if (opts.lowS !== undefined)
        abool('lowS', opts.lowS);
    if (opts.prehash !== undefined)
        abool('prehash', opts.prehash);
}
function validatePointOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
        a: 'field',
        b: 'field',
    }, {
        allowedPrivateKeyLengths: 'array',
        wrapPrivateKey: 'boolean',
        isTorsionFree: 'function',
        clearCofactor: 'function',
        allowInfinityPoint: 'boolean',
        fromBytes: 'function',
        toBytes: 'function',
    });
    const { endo, Fp, a } = opts;
    if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');
        }
        if (typeof endo !== 'object' ||
            typeof endo.beta !== 'bigint' ||
            typeof endo.splitScalar !== 'function') {
            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');
        }
    }
    return Object.freeze({ ...opts });
}
const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
/**
 * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:
 *
 *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]
 *
 * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html
 */
const DER = {
    // asn.1 DER encoding utils
    Err: class DERErr extends Error {
        constructor(m = '') {
            super(m);
        }
    },
    // Basic building block is TLV (Tag-Length-Value)
    _tlv: {
        encode: (tag, data) => {
            const { Err: E } = DER;
            if (tag < 0 || tag > 256)
                throw new E('tlv.encode: wrong tag');
            if (data.length & 1)
                throw new E('tlv.encode: unpadded data');
            const dataLen = data.length / 2;
            const len = numberToHexUnpadded(dataLen);
            if ((len.length / 2) & 128)
                throw new E('tlv.encode: long form length too big');
            // length of length with long form flag
            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';
            const t = numberToHexUnpadded(tag);
            return t + lenLen + len + data;
        },
        // v - value, l - left bytes (unparsed)
        decode(tag, data) {
            const { Err: E } = DER;
            let pos = 0;
            if (tag < 0 || tag > 256)
                throw new E('tlv.encode: wrong tag');
            if (data.length < 2 || data[pos++] !== tag)
                throw new E('tlv.decode: wrong tlv');
            const first = data[pos++];
            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form
            let length = 0;
            if (!isLong)
                length = first;
            else {
                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]
                const lenLen = first & 127;
                if (!lenLen)
                    throw new E('tlv.decode(long): indefinite length not supported');
                if (lenLen > 4)
                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js
                const lengthBytes = data.subarray(pos, pos + lenLen);
                if (lengthBytes.length !== lenLen)
                    throw new E('tlv.decode: length bytes not complete');
                if (lengthBytes[0] === 0)
                    throw new E('tlv.decode(long): zero leftmost byte');
                for (const b of lengthBytes)
                    length = (length << 8) | b;
                pos += lenLen;
                if (length < 128)
                    throw new E('tlv.decode(long): not minimal encoding');
            }
            const v = data.subarray(pos, pos + length);
            if (v.length !== length)
                throw new E('tlv.decode: wrong value length');
            return { v, l: data.subarray(pos + length) };
        },
    },
    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
    // since we always use positive integers here. It must always be empty:
    // - add zero byte if exists
    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
    _int: {
        encode(num) {
            const { Err: E } = DER;
            if (num < _0n)
                throw new E('integer: negative integers are not allowed');
            let hex = numberToHexUnpadded(num);
            // Pad with zero byte if negative flag is present
            if (Number.parseInt(hex[0], 16) & 0b1000)
                hex = '00' + hex;
            if (hex.length & 1)
                throw new E('unexpected DER parsing assertion: unpadded hex');
            return hex;
        },
        decode(data) {
            const { Err: E } = DER;
            if (data[0] & 128)
                throw new E('invalid signature integer: negative');
            if (data[0] === 0x00 && !(data[1] & 128))
                throw new E('invalid signature integer: unnecessary leading zero');
            return b2n(data);
        },
    },
    toSig(hex) {
        // parse DER signature
        const { Err: E, _int: int, _tlv: tlv } = DER;
        const data = typeof hex === 'string' ? h2b(hex) : hex;
        abytes$1(data);
        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);
        if (seqLeftBytes.length)
            throw new E('invalid signature: left bytes after parsing');
        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);
        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);
        if (sLeftBytes.length)
            throw new E('invalid signature: left bytes after parsing');
        return { r: int.decode(rBytes), s: int.decode(sBytes) };
    },
    hexFromSig(sig) {
        const { _tlv: tlv, _int: int } = DER;
        const rs = tlv.encode(0x02, int.encode(sig.r));
        const ss = tlv.encode(0x02, int.encode(sig.s));
        const seq = rs + ss;
        return tlv.encode(0x30, seq);
    },
};
// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const _0n = BigInt(0), _1n$1 = BigInt(1); BigInt(2); const _3n = BigInt(3); BigInt(4);
function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
    const Fn = Field(CURVE.n, CURVE.nBitLength);
    const toBytes = CURVE.toBytes ||
        ((_c, point, _isCompressed) => {
            const a = point.toAffine();
            return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
        });
    const fromBytes = CURVE.fromBytes ||
        ((bytes) => {
            // const head = bytes[0];
            const tail = bytes.subarray(1);
            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
        });
    /**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */
    function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x); // x * x
        const x3 = Fp.mul(x2, x); // x2 * x
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
    }
    // Validate whether the passed curve params are valid.
    // We check if curve equation works for generator point.
    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
    // ProjectivePoint class has not been initialized yet.
    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error('bad generator point: equation left != right');
    // Valid group elements reside in range 1..n-1
    function isWithinCurveOrder(num) {
        return inRange$1(num, _1n$1, CURVE.n);
    }
    // Validates if priv key is valid and converts it to bigint.
    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
    function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;
        if (lengths && typeof key !== 'bigint') {
            if (isBytes$1(key))
                key = bytesToHex(key);
            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
            if (typeof key !== 'string' || !lengths.includes(key.length))
                throw new Error('invalid private key');
            key = key.padStart(nByteLength * 2, '0');
        }
        let num;
        try {
            num =
                typeof key === 'bigint'
                    ? key
                    : bytesToNumberBE(ensureBytes('private key', key, nByteLength));
        }
        catch (error) {
            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);
        }
        if (wrapPrivateKey)
            num = mod(num, N); // disabled by default, enabled for BLS
        aInRange('private key', num, _1n$1, N); // num in range [1..N-1]
        return num;
    }
    function assertPrjPoint(other) {
        if (!(other instanceof Point))
            throw new Error('ProjectivePoint expected');
    }
    // Memoized toAffine / validity check. They are heavy. Points are immutable.
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    const toAffineMemo = memoized((p, iz) => {
        const { px: x, py: y, pz: z } = p;
        // Fast-path for normalized points
        if (Fp.eql(z, Fp.ONE))
            return { x, y };
        const is0 = p.is0();
        // If invZ was 0, we return zero point. However we still want to execute
        // all operations, so we replace invZ with a random number, 1.
        if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
        const ax = Fp.mul(x, iz);
        const ay = Fp.mul(y, iz);
        const zz = Fp.mul(z, iz);
        if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
        if (!Fp.eql(zz, Fp.ONE))
            throw new Error('invZ was invalid');
        return { x: ax, y: ay };
    });
    // NOTE: on exception this will crash 'cached' and no value will be set.
    // Otherwise true will be return
    const assertValidMemo = memoized((p) => {
        if (p.is0()) {
            // (0, 1, 0) aka ZERO is invalid in most contexts.
            // In BLS, ZERO can be serialized, so we allow it.
            // (0, 0, 0) is invalid representation of ZERO.
            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))
                return;
            throw new Error('bad point: ZERO');
        }
        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
        const { x, y } = p.toAffine();
        // Check if x, y are valid field elements
        if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error('bad point: x or y not FE');
        const left = Fp.sqr(y); // y²
        const right = weierstrassEquation(x); // x³ + ax + b
        if (!Fp.eql(left, right))
            throw new Error('bad point: equation left != right');
        if (!p.isTorsionFree())
            throw new Error('bad point: not in prime-order subgroup');
        return true;
    });
    /**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */
    class Point {
        constructor(px, py, pz) {
            this.px = px;
            this.py = py;
            this.pz = pz;
            if (px == null || !Fp.isValid(px))
                throw new Error('x required');
            if (py == null || !Fp.isValid(py))
                throw new Error('y required');
            if (pz == null || !Fp.isValid(pz))
                throw new Error('z required');
            Object.freeze(this);
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
            const { x, y } = p || {};
            if (!p || !Fp.isValid(x) || !Fp.isValid(y))
                throw new Error('invalid affine point');
            if (p instanceof Point)
                throw new Error('projective point not allowed');
            const is0 = (i) => Fp.eql(i, Fp.ZERO);
            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
            if (is0(x) && is0(y))
                return Point.ZERO;
            return new Point(x, y, Fp.ONE);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
            const toInv = Fp.invertBatch(points.map((p) => p.pz));
            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));
            P.assertValidity();
            return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
            return pippenger(Point, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            wnaf.setWindowSize(this, windowSize);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
            assertValidMemo(this);
        }
        hasEvenY() {
            const { y } = this.toAffine();
            if (Fp.isOdd)
                return !Fp.isOdd(y);
            throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
            return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
            return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
            const { a, b } = CURVE;
            const b3 = Fp.mul(b, _3n);
            const { px: X1, py: Y1, pz: Z1 } = this;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            let t0 = Fp.mul(X1, X1); // step 1
            let t1 = Fp.mul(Y1, Y1);
            let t2 = Fp.mul(Z1, Z1);
            let t3 = Fp.mul(X1, Y1);
            t3 = Fp.add(t3, t3); // step 5
            Z3 = Fp.mul(X1, Z1);
            Z3 = Fp.add(Z3, Z3);
            X3 = Fp.mul(a, Z3);
            Y3 = Fp.mul(b3, t2);
            Y3 = Fp.add(X3, Y3); // step 10
            X3 = Fp.sub(t1, Y3);
            Y3 = Fp.add(t1, Y3);
            Y3 = Fp.mul(X3, Y3);
            X3 = Fp.mul(t3, X3);
            Z3 = Fp.mul(b3, Z3); // step 15
            t2 = Fp.mul(a, t2);
            t3 = Fp.sub(t0, t2);
            t3 = Fp.mul(a, t3);
            t3 = Fp.add(t3, Z3);
            Z3 = Fp.add(t0, t0); // step 20
            t0 = Fp.add(Z3, t0);
            t0 = Fp.add(t0, t2);
            t0 = Fp.mul(t0, t3);
            Y3 = Fp.add(Y3, t0);
            t2 = Fp.mul(Y1, Z1); // step 25
            t2 = Fp.add(t2, t2);
            t0 = Fp.mul(t2, t3);
            X3 = Fp.sub(X3, t0);
            Z3 = Fp.mul(t2, t1);
            Z3 = Fp.add(Z3, Z3); // step 30
            Z3 = Fp.add(Z3, Z3);
            return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            const a = CURVE.a;
            const b3 = Fp.mul(CURVE.b, _3n);
            let t0 = Fp.mul(X1, X2); // step 1
            let t1 = Fp.mul(Y1, Y2);
            let t2 = Fp.mul(Z1, Z2);
            let t3 = Fp.add(X1, Y1);
            let t4 = Fp.add(X2, Y2); // step 5
            t3 = Fp.mul(t3, t4);
            t4 = Fp.add(t0, t1);
            t3 = Fp.sub(t3, t4);
            t4 = Fp.add(X1, Z1);
            let t5 = Fp.add(X2, Z2); // step 10
            t4 = Fp.mul(t4, t5);
            t5 = Fp.add(t0, t2);
            t4 = Fp.sub(t4, t5);
            t5 = Fp.add(Y1, Z1);
            X3 = Fp.add(Y2, Z2); // step 15
            t5 = Fp.mul(t5, X3);
            X3 = Fp.add(t1, t2);
            t5 = Fp.sub(t5, X3);
            Z3 = Fp.mul(a, t4);
            X3 = Fp.mul(b3, t2); // step 20
            Z3 = Fp.add(X3, Z3);
            X3 = Fp.sub(t1, Z3);
            Z3 = Fp.add(t1, Z3);
            Y3 = Fp.mul(X3, Z3);
            t1 = Fp.add(t0, t0); // step 25
            t1 = Fp.add(t1, t0);
            t2 = Fp.mul(a, t2);
            t4 = Fp.mul(b3, t4);
            t1 = Fp.add(t1, t2);
            t2 = Fp.sub(t0, t2); // step 30
            t2 = Fp.mul(a, t2);
            t4 = Fp.add(t4, t2);
            t0 = Fp.mul(t1, t4);
            Y3 = Fp.add(Y3, t0);
            t0 = Fp.mul(t5, t4); // step 35
            X3 = Fp.mul(t3, X3);
            X3 = Fp.sub(X3, t0);
            t0 = Fp.mul(t3, t1);
            Z3 = Fp.mul(t5, Z3);
            Z3 = Fp.add(Z3, t0); // step 40
            return new Point(X3, Y3, Z3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, n, Point.normalizeZ);
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(sc) {
            const { endo, n: N } = CURVE;
            aInRange('scalar', sc, _0n, N);
            const I = Point.ZERO;
            if (sc === _0n)
                return I;
            if (this.is0() || sc === _1n$1)
                return this;
            // Case a: no endomorphism. Case b: has precomputes.
            if (!endo || wnaf.hasPrecomputes(this))
                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);
            // Case c: endomorphism
            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
            let k1p = I;
            let k2p = I;
            let d = this;
            while (k1 > _0n || k2 > _0n) {
                if (k1 & _1n$1)
                    k1p = k1p.add(d);
                if (k2 & _1n$1)
                    k2p = k2p.add(d);
                d = d.double();
                k1 >>= _1n$1;
                k2 >>= _1n$1;
            }
            if (k1neg)
                k1p = k1p.negate();
            if (k2neg)
                k2p = k2p.negate();
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
            const { endo, n: N } = CURVE;
            aInRange('scalar', scalar, _1n$1, N);
            let point, fake; // Fake point is used to const-time mult
            if (endo) {
                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
                let { p: k1p, f: f1p } = this.wNAF(k1);
                let { p: k2p, f: f2p } = this.wNAF(k2);
                k1p = wnaf.constTimeNegate(k1neg, k1p);
                k2p = wnaf.constTimeNegate(k2neg, k2p);
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                point = k1p.add(k2p);
                fake = f1p.add(f2p);
            }
            else {
                const { p, f } = this.wNAF(scalar);
                point = p;
                fake = f;
            }
            // Normalize `z` for both points, but return only real one
            return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
            const mul = (P, a // Select faster multiply() method
            ) => (a === _0n || a === _1n$1 || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
            const sum = mul(this, a).add(mul(Q, b));
            return sum.is0() ? undefined : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
            return toAffineMemo(this, iz);
        }
        isTorsionFree() {
            const { h: cofactor, isTorsionFree } = CURVE;
            if (cofactor === _1n$1)
                return true; // No subgroups, always torsion-free
            if (isTorsionFree)
                return isTorsionFree(Point, this);
            throw new Error('isTorsionFree() has not been declared for the elliptic curve');
        }
        clearCofactor() {
            const { h: cofactor, clearCofactor } = CURVE;
            if (cofactor === _1n$1)
                return this; // Fast-path
            if (clearCofactor)
                return clearCofactor(Point, this);
            return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
            abool('isCompressed', isCompressed);
            this.assertValidity();
            return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
            abool('isCompressed', isCompressed);
            return bytesToHex(this.toRawBytes(isCompressed));
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    // Validate if generator point is on curve
    return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder,
    };
}
function validateOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
        hash: 'hash',
        hmac: 'function',
        randomBytes: 'function',
    }, {
        bits2int: 'function',
        bits2int_modN: 'function',
        lowS: 'boolean',
    });
    return Object.freeze({ lowS: true, ...opts });
}
/**
 * Creates short weierstrass curve and ECDSA signature methods for it.
 * @example
 * import { Field } from '@noble/curves/abstract/modular';
 * // Before that, define BigInt-s: a, b, p, n, Gx, Gy
 * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })
 */
function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
    function modN(a) {
        return mod(a, CURVE_ORDER);
    }
    function invN(a) {
        return invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
            const a = point.toAffine();
            const x = Fp.toBytes(a.x);
            const cat = concatBytes;
            abool('isCompressed', isCompressed);
            if (isCompressed) {
                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
            }
            else {
                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
            }
        },
        fromBytes(bytes) {
            const len = bytes.length;
            const head = bytes[0];
            const tail = bytes.subarray(1);
            // this.assertValidity() is done inside of fromHex
            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                const x = bytesToNumberBE(tail);
                if (!inRange$1(x, _1n$1, Fp.ORDER))
                    throw new Error('Point is not on curve');
                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                let y;
                try {
                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                }
                catch (sqrtError) {
                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';
                    throw new Error('Point is not on curve' + suffix);
                }
                const isYOdd = (y & _1n$1) === _1n$1;
                // ECDSA
                const isHeadOdd = (head & 1) === 1;
                if (isHeadOdd !== isYOdd)
                    y = Fp.neg(y);
                return { x, y };
            }
            else if (len === uncompressedLen && head === 0x04) {
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return { x, y };
            }
            else {
                const cl = compressedLen;
                const ul = uncompressedLen;
                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);
            }
        },
    });
    const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n$1;
        return number > HALF;
    }
    function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    // slice bytes num
    const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
    /**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */
    class Signature {
        constructor(r, s, recovery) {
            this.r = r;
            this.s = s;
            this.recovery = recovery;
            this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
            const l = CURVE.nByteLength;
            hex = ensureBytes('compactSignature', hex, l * 2);
            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
            const { r, s } = DER.toSig(ensureBytes('DER', hex));
            return new Signature(r, s);
        }
        assertValidity() {
            aInRange('r', this.r, _1n$1, CURVE_ORDER); // r in [1..N]
            aInRange('s', this.s, _1n$1, CURVE_ORDER); // s in [1..N]
        }
        addRecoveryBit(recovery) {
            return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
            const { r, s, recovery: rec } = this;
            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash
            if (rec == null || ![0, 1, 2, 3].includes(rec))
                throw new Error('recovery id invalid');
            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
            if (radj >= Fp.ORDER)
                throw new Error('recovery id 2 or 3 invalid');
            const prefix = (rec & 1) === 0 ? '02' : '03';
            const R = Point.fromHex(prefix + numToNByteStr(radj));
            const ir = invN(radj); // r^-1
            const u1 = modN(-h * ir); // -hr^-1
            const u2 = modN(s * ir); // sr^-1
            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
            if (!Q)
                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
            Q.assertValidity();
            return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
            return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
            return hexToBytes(this.toDERHex());
        }
        toDERHex() {
            return DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
            return hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
            return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
    }
    const utils = {
        isValidPrivateKey(privateKey) {
            try {
                normPrivateKeyToScalar(privateKey);
                return true;
            }
            catch (error) {
                return false;
            }
        },
        normPrivateKeyToScalar: normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
            const length = getMinHashLength(CURVE.n);
            return mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
            return point;
        },
    };
    /**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */
    function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    /**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */
    function isProbPub(item) {
        const arr = isBytes$1(item);
        const str = typeof item === 'string';
        const len = (arr || str) && item.length;
        if (arr)
            return len === compressedLen || len === uncompressedLen;
        if (str)
            return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
            return true;
        return false;
    }
    /**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */
    function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
            throw new Error('first arg must be private key');
        if (!isProbPub(publicB))
            throw new Error('second arg must be public key');
        const b = Point.fromHex(publicB); // check for being on-curve
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
    const bits2int = CURVE.bits2int ||
        function (bytes) {
            // Our custom check "just in case"
            if (bytes.length > 8192)
                throw new Error('input is too large');
            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
            // for some cases, since bytes.length * 8 is not actual bitLength.
            const num = bytesToNumberBE(bytes); // check for == u8 done here
            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
            return delta > 0 ? num >> BigInt(delta) : num;
        };
    const bits2int_modN = CURVE.bits2int_modN ||
        function (bytes) {
            return modN(bits2int(bytes)); // can't use bytesToNumberBE here
        };
    // NOTE: pads output with zero as per spec
    const ORDER_MASK = bitMask(CURVE.nBitLength);
    /**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */
    function int2octets(num) {
        aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);
        // works with order, can have different size than numToField!
        return numberToBytesBE(num, CURVE.nByteLength);
    }
    // Steps A, D of RFC6979 3.2
    // Creates RFC6979 seed; converts msg/privKey to numbers.
    // Used only in sign, not in verify.
    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,
    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (['recovered', 'canonical'].some((k) => k in opts))
            throw new Error('sign() legacy options not supported');
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
        if (lowS == null)
            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
        msgHash = ensureBytes('msgHash', msgHash);
        validateSigVerOpts(opts);
        if (prehash)
            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));
        // We can't later call bits2octets, since nested bits2int is broken for curves
        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
        const seedArgs = [int2octets(d), int2octets(h1int)];
        // extraEntropy. RFC6979 3.6: additional k' (optional).
        if (ent != null && ent !== false) {
            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes
        }
        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2
        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
        // Converts signature params into point w r/s, checks result for validity.
        function k2sig(kBytes) {
            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
            if (!isWithinCurveOrder(k))
                return; // Important: all mod() calls here must be done over N
            const ik = invN(k); // k^-1 mod n
            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
            const r = modN(q.x); // r = q.x mod n
            if (r === _0n)
                return;
            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
            const s = modN(ik * modN(m + r * d)); // Not using blinding here
            if (s === _0n)
                return;
            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$1); // recovery bit (2 or 3, when q.x > n)
            let normS = s;
            if (lowS && isBiggerThanHalfOrder(s)) {
                normS = normalizeS(s); // if lowS was passed, ensure s is always
                recovery ^= 1; // // in the bottom half of N
            }
            return new Signature(r, normS, recovery); // use normS, not s
        }
        return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    /**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */
    function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
        const C = CURVE;
        const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
    }
    // Enable precomputes. Slows down first publicKey computation by 20ms.
    Point.BASE._setWindowSize(8);
    // utils.precompute(8, ProjectivePoint.BASE)
    /**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */
    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = ensureBytes('msgHash', msgHash);
        publicKey = ensureBytes('publicKey', publicKey);
        const { lowS, prehash, format } = opts;
        // Verify opts, deduce signature format
        validateSigVerOpts(opts);
        if ('strict' in opts)
            throw new Error('options.strict was renamed to lowS');
        if (format !== undefined && format !== 'compact' && format !== 'der')
            throw new Error('format must be compact or der');
        const isHex = typeof sg === 'string' || isBytes$1(sg);
        const isObj = !isHex &&
            !format &&
            typeof sg === 'object' &&
            sg !== null &&
            typeof sg.r === 'bigint' &&
            typeof sg.s === 'bigint';
        if (!isHex && !isObj)
            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');
        let _sig = undefined;
        let P;
        try {
            if (isObj)
                _sig = new Signature(sg.r, sg.s);
            if (isHex) {
                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                // Since DER can also be 2*nByteLength bytes, we check for it first.
                try {
                    if (format !== 'compact')
                        _sig = Signature.fromDER(sg);
                }
                catch (derError) {
                    if (!(derError instanceof DER.Err))
                        throw derError;
                }
                if (!_sig && format !== 'der')
                    _sig = Signature.fromCompact(sg);
            }
            P = Point.fromHex(publicKey);
        }
        catch (error) {
            return false;
        }
        if (!_sig)
            return false;
        if (lowS && _sig.hasHighS())
            return false;
        if (prehash)
            msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
        const is = invN(s); // s^-1
        const u1 = modN(h * is); // u1 = hs^-1 mod n
        const u2 = modN(r * is); // u2 = rs^-1 mod n
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
        if (!R)
            return false;
        const v = modN(R.x);
        return v === r;
    }
    return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils,
    };
}

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// connects noble-curves to noble-hashes
function getHash(hash) {
    return {
        hash,
        hmac: (key, ...msgs) => hmac(hash, key, concatBytes$1(...msgs)),
        randomBytes,
    };
}
function createCurve(curveDef, defHash) {
    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });
    return Object.freeze({ ...create(defHash), create });
}

/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
const _1n = BigInt(1);
const _2n = BigInt(2);
const divNearest = (a, b) => (a + b / _2n) / b;
/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */
function sqrtMod(y) {
    const P = secp256k1P;
    // prettier-ignore
    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    // prettier-ignore
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = (y * y * y) % P; // x^3, 11
    const b3 = (b2 * b2 * y) % P; // x^7
    const b6 = (pow2(b3, _3n, P) * b3) % P;
    const b9 = (pow2(b6, _3n, P) * b3) % P;
    const b11 = (pow2(b9, _2n, P) * b2) % P;
    const b22 = (pow2(b11, _11n, P) * b11) % P;
    const b44 = (pow2(b22, _22n, P) * b22) % P;
    const b88 = (pow2(b44, _44n, P) * b44) % P;
    const b176 = (pow2(b88, _88n, P) * b88) % P;
    const b220 = (pow2(b176, _44n, P) * b44) % P;
    const b223 = (pow2(b220, _3n, P) * b3) % P;
    const t1 = (pow2(b223, _23n, P) * b22) % P;
    const t2 = (pow2(t1, _6n, P) * b2) % P;
    const root = pow2(t2, _2n, P);
    if (!Fpk1.eql(Fpk1.sqr(root), y))
        throw new Error('Cannot find square root');
    return root;
}
const Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
/**
 * secp256k1 short weierstrass curve and ECDSA signatures over it.
 */
const secp256k1 = createCurve({
    a: BigInt(0), // equation params: a, b
    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
    n: secp256k1N, // Curve order, total count of valid points in the field
    // Base point (x, y) aka generator point
    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
    h: BigInt(1), // Cofactor
    lowS: true, // Allow only low-S signatures by default in sign() and verify()
    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */
    endo: {
        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
        splitScalar: (k) => {
            const n = secp256k1N;
            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
            const b2 = a1;
            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
            const c1 = divNearest(b2 * k, n);
            const c2 = divNearest(-b1 * k, n);
            let k1 = mod(k - c1 * a1 - c2 * a2, n);
            let k2 = mod(-c1 * b1 - c2 * b2, n);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg)
                k1 = n - k1;
            if (k2neg)
                k2 = n - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) {
                throw new Error('splitScalar: Endomorphism failed, k=' + k);
            }
            return { k1neg, k1, k2neg, k2 };
        },
    },
}, sha256$1);
// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
BigInt(0);
secp256k1.ProjectivePoint;

/**
 * A 64 byte secret key, the first 32 bytes of which is the
 * private scalar and the last 32 bytes is the public key.
 * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/
 */

/**
 * Ed25519 Keypair
 */

const generatePrivateKey = ed25519.utils.randomPrivateKey;
const generateKeypair = () => {
  const privateScalar = ed25519.utils.randomPrivateKey();
  const publicKey = getPublicKey(privateScalar);
  const secretKey = new Uint8Array(64);
  secretKey.set(privateScalar);
  secretKey.set(publicKey, 32);
  return {
    publicKey,
    secretKey
  };
};
const getPublicKey = ed25519.getPublicKey;
function isOnCurve(publicKey) {
  try {
    ed25519.ExtendedPoint.fromHex(publicKey);
    return true;
  } catch {
    return false;
  }
}
const sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));
const verify = ed25519.verify;

const toBuffer = arr => {
  if (Buffer.isBuffer(arr)) {
    return arr;
  } else if (arr instanceof Uint8Array) {
    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);
  } else {
    return Buffer.from(arr);
  }
};

// Class wrapping a plain object
let Struct$1 = class Struct {
  constructor(properties) {
    Object.assign(this, properties);
  }
  encode() {
    return Buffer.from(serialize_1(SOLANA_SCHEMA, this));
  }
  static decode(data) {
    return deserialize_1(SOLANA_SCHEMA, this, data);
  }
  static decodeUnchecked(data) {
    return deserializeUnchecked_1(SOLANA_SCHEMA, this, data);
  }
};

// Class representing a Rust-compatible enum, since enums are only strings or
// numbers in pure JS
class Enum extends Struct$1 {
  constructor(properties) {
    super(properties);
    this.enum = '';
    if (Object.keys(properties).length !== 1) {
      throw new Error('Enum can only take single value');
    }
    Object.keys(properties).map(key => {
      this.enum = key;
    });
  }
}
const SOLANA_SCHEMA = new Map();

var _PublicKey;

/**
 * Maximum length of derived pubkey seed
 */
const MAX_SEED_LENGTH = 32;

/**
 * Size of public key in bytes
 */
const PUBLIC_KEY_LENGTH$2 = 32;

/**
 * Value to be converted into public key
 */

/**
 * JSON object representation of PublicKey class
 */

function isPublicKeyData(value) {
  return value._bn !== undefined;
}

// local counter used by PublicKey.unique()
let uniquePublicKeyCounter = 1;

/**
 * A public key
 */
class PublicKey extends Struct$1 {
  /**
   * Create a new PublicKey object
   * @param value ed25519 public key as buffer or base-58 encoded string
   */
  constructor(value) {
    super({});
    /** @internal */
    this._bn = void 0;
    if (isPublicKeyData(value)) {
      this._bn = value._bn;
    } else {
      if (typeof value === 'string') {
        // assume base 58 encoding by default
        const decoded = bs58$7.decode(value);
        if (decoded.length != PUBLIC_KEY_LENGTH$2) {
          throw new Error(`Invalid public key input`);
        }
        this._bn = new BN$2(decoded);
      } else {
        this._bn = new BN$2(value);
      }
      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH$2) {
        throw new Error(`Invalid public key input`);
      }
    }
  }

  /**
   * Returns a unique PublicKey for tests and benchmarks using a counter
   */
  static unique() {
    const key = new PublicKey(uniquePublicKeyCounter);
    uniquePublicKeyCounter += 1;
    return new PublicKey(key.toBuffer());
  }

  /**
   * Default public key value. The base58-encoded string representation is all ones (as seen below)
   * The underlying BN number is 32 bytes that are all zeros
   */

  /**
   * Checks if two publicKeys are equal
   */
  equals(publicKey) {
    return this._bn.eq(publicKey._bn);
  }

  /**
   * Return the base-58 representation of the public key
   */
  toBase58() {
    return bs58$7.encode(this.toBytes());
  }
  toJSON() {
    return this.toBase58();
  }

  /**
   * Return the byte array representation of the public key in big endian
   */
  toBytes() {
    const buf = this.toBuffer();
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  /**
   * Return the Buffer representation of the public key in big endian
   */
  toBuffer() {
    const b = this._bn.toArrayLike(Buffer);
    if (b.length === PUBLIC_KEY_LENGTH$2) {
      return b;
    }
    const zeroPad = Buffer.alloc(32);
    b.copy(zeroPad, 32 - b.length);
    return zeroPad;
  }
  get [Symbol.toStringTag]() {
    return `PublicKey(${this.toString()})`;
  }

  /**
   * Return the base-58 representation of the public key
   */
  toString() {
    return this.toBase58();
  }

  /**
   * Derive a public key from another key, a seed, and a program ID.
   * The program ID will also serve as the owner of the public key, giving
   * it permission to write data to the account.
   */
  /* eslint-disable require-await */
  static async createWithSeed(fromPublicKey, seed, programId) {
    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);
    const publicKeyBytes = sha256$2(buffer);
    return new PublicKey(publicKeyBytes);
  }

  /**
   * Derive a program address from seeds and a program ID.
   */
  /* eslint-disable require-await */
  static createProgramAddressSync(seeds, programId) {
    let buffer = Buffer.alloc(0);
    seeds.forEach(function (seed) {
      if (seed.length > MAX_SEED_LENGTH) {
        throw new TypeError(`Max seed length exceeded`);
      }
      buffer = Buffer.concat([buffer, toBuffer(seed)]);
    });
    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);
    const publicKeyBytes = sha256$2(buffer);
    if (isOnCurve(publicKeyBytes)) {
      throw new Error(`Invalid seeds, address must fall off the curve`);
    }
    return new PublicKey(publicKeyBytes);
  }

  /**
   * Async version of createProgramAddressSync
   * For backwards compatibility
   *
   * @deprecated Use {@link createProgramAddressSync} instead
   */
  /* eslint-disable require-await */
  static async createProgramAddress(seeds, programId) {
    return this.createProgramAddressSync(seeds, programId);
  }

  /**
   * Find a valid program address
   *
   * Valid program addresses must fall off the ed25519 curve.  This function
   * iterates a nonce until it finds one that when combined with the seeds
   * results in a valid program address.
   */
  static findProgramAddressSync(seeds, programId) {
    let nonce = 255;
    let address;
    while (nonce != 0) {
      try {
        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));
        address = this.createProgramAddressSync(seedsWithNonce, programId);
      } catch (err) {
        if (err instanceof TypeError) {
          throw err;
        }
        nonce--;
        continue;
      }
      return [address, nonce];
    }
    throw new Error(`Unable to find a viable program address nonce`);
  }

  /**
   * Async version of findProgramAddressSync
   * For backwards compatibility
   *
   * @deprecated Use {@link findProgramAddressSync} instead
   */
  static async findProgramAddress(seeds, programId) {
    return this.findProgramAddressSync(seeds, programId);
  }

  /**
   * Check that a pubkey is on the ed25519 curve.
   */
  static isOnCurve(pubkeyData) {
    const pubkey = new PublicKey(pubkeyData);
    return isOnCurve(pubkey.toBytes());
  }
}
_PublicKey = PublicKey;
PublicKey.default = new _PublicKey('11111111111111111111111111111111');
SOLANA_SCHEMA.set(PublicKey, {
  kind: 'struct',
  fields: [['_bn', 'u256']]
});

/**
 * An account key pair (public and secret keys).
 *
 * @deprecated since v1.10.0, please use {@link Keypair} instead.
 */
let Account$1 = class Account {
  /**
   * Create a new Account object
   *
   * If the secretKey parameter is not provided a new key pair is randomly
   * created for the account
   *
   * @param secretKey Secret key for the account
   */
  constructor(secretKey) {
    /** @internal */
    this._publicKey = void 0;
    /** @internal */
    this._secretKey = void 0;
    if (secretKey) {
      const secretKeyBuffer = toBuffer(secretKey);
      if (secretKey.length !== 64) {
        throw new Error('bad secret key size');
      }
      this._publicKey = secretKeyBuffer.slice(32, 64);
      this._secretKey = secretKeyBuffer.slice(0, 32);
    } else {
      this._secretKey = toBuffer(generatePrivateKey());
      this._publicKey = toBuffer(getPublicKey(this._secretKey));
    }
  }

  /**
   * The public key for this account
   */
  get publicKey() {
    return new PublicKey(this._publicKey);
  }

  /**
   * The **unencrypted** secret key for this account. The first 32 bytes
   * is the private scalar and the last 32 bytes is the public key.
   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/
   */
  get secretKey() {
    return Buffer.concat([this._secretKey, this._publicKey], 64);
  }
};

const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');

/**
 * Maximum over-the-wire size of a Transaction
 *
 * 1280 is IPv6 minimum MTU
 * 40 bytes is the size of the IPv6 header
 * 8 bytes is the size of the fragment header
 */
const PACKET_DATA_SIZE = 1280 - 40 - 8;
const VERSION_PREFIX_MASK = 0x7f;
const SIGNATURE_LENGTH_IN_BYTES = 64;

class TransactionExpiredBlockheightExceededError extends Error {
  constructor(signature) {
    super(`Signature ${signature} has expired: block height exceeded.`);
    this.signature = void 0;
    this.signature = signature;
  }
}
Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {
  value: 'TransactionExpiredBlockheightExceededError'
});
class TransactionExpiredTimeoutError extends Error {
  constructor(signature, timeoutSeconds) {
    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);
    this.signature = void 0;
    this.signature = signature;
  }
}
Object.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {
  value: 'TransactionExpiredTimeoutError'
});
class TransactionExpiredNonceInvalidError extends Error {
  constructor(signature) {
    super(`Signature ${signature} has expired: the nonce is no longer valid.`);
    this.signature = void 0;
    this.signature = signature;
  }
}
Object.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {
  value: 'TransactionExpiredNonceInvalidError'
});

class MessageAccountKeys {
  constructor(staticAccountKeys, accountKeysFromLookups) {
    this.staticAccountKeys = void 0;
    this.accountKeysFromLookups = void 0;
    this.staticAccountKeys = staticAccountKeys;
    this.accountKeysFromLookups = accountKeysFromLookups;
  }
  keySegments() {
    const keySegments = [this.staticAccountKeys];
    if (this.accountKeysFromLookups) {
      keySegments.push(this.accountKeysFromLookups.writable);
      keySegments.push(this.accountKeysFromLookups.readonly);
    }
    return keySegments;
  }
  get(index) {
    for (const keySegment of this.keySegments()) {
      if (index < keySegment.length) {
        return keySegment[index];
      } else {
        index -= keySegment.length;
      }
    }
    return;
  }
  get length() {
    return this.keySegments().flat().length;
  }
  compileInstructions(instructions) {
    // Bail early if any account indexes would overflow a u8
    const U8_MAX = 255;
    if (this.length > U8_MAX + 1) {
      throw new Error('Account index overflow encountered during compilation');
    }
    const keyIndexMap = new Map();
    this.keySegments().flat().forEach((key, index) => {
      keyIndexMap.set(key.toBase58(), index);
    });
    const findKeyIndex = key => {
      const keyIndex = keyIndexMap.get(key.toBase58());
      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');
      return keyIndex;
    };
    return instructions.map(instruction => {
      return {
        programIdIndex: findKeyIndex(instruction.programId),
        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),
        data: instruction.data
      };
    });
  }
}

/**
 * Layout for a public key
 */
const publicKey$7 = (property = 'publicKey') => {
  return blob$2(32, property);
};

/**
 * Layout for a signature
 */
const signature = (property = 'signature') => {
  return blob$2(64, property);
};
/**
 * Layout for a Rust String type
 */
const rustString = (property = 'string') => {
  const rsl = struct$4([u32$4('length'), u32$4('lengthPadding'), blob$2(offset$1(u32$4(), -8), 'chars')], property);
  const _decode = rsl.decode.bind(rsl);
  const _encode = rsl.encode.bind(rsl);
  const rslShim = rsl;
  rslShim.decode = (b, offset) => {
    const data = _decode(b, offset);
    return data['chars'].toString();
  };
  rslShim.encode = (str, b, offset) => {
    const data = {
      chars: Buffer.from(str, 'utf8')
    };
    return _encode(data, b, offset);
  };
  rslShim.alloc = str => {
    return u32$4().span + u32$4().span + Buffer.from(str, 'utf8').length;
  };
  return rslShim;
};

/**
 * Layout for an Authorized object
 */
const authorized = (property = 'authorized') => {
  return struct$4([publicKey$7('staker'), publicKey$7('withdrawer')], property);
};

/**
 * Layout for a Lockup object
 */
const lockup = (property = 'lockup') => {
  return struct$4([ns64$1('unixTimestamp'), ns64$1('epoch'), publicKey$7('custodian')], property);
};

/**
 *  Layout for a VoteInit object
 */
const voteInit = (property = 'voteInit') => {
  return struct$4([publicKey$7('nodePubkey'), publicKey$7('authorizedVoter'), publicKey$7('authorizedWithdrawer'), u8$4('commission')], property);
};

/**
 *  Layout for a VoteAuthorizeWithSeedArgs object
 */
const voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {
  return struct$4([u32$4('voteAuthorizationType'), publicKey$7('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey$7('newAuthorized')], property);
};
function getAlloc(type, fields) {
  const getItemAlloc = item => {
    if (item.span >= 0) {
      return item.span;
    } else if (typeof item.alloc === 'function') {
      return item.alloc(fields[item.property]);
    } else if ('count' in item && 'elementLayout' in item) {
      const field = fields[item.property];
      if (Array.isArray(field)) {
        return field.length * getItemAlloc(item.elementLayout);
      }
    } else if ('fields' in item) {
      // This is a `Structure` whose size needs to be recursively measured.
      return getAlloc({
        layout: item
      }, fields[item.property]);
    }
    // Couldn't determine allocated size of layout
    return 0;
  };
  let alloc = 0;
  type.layout.fields.forEach(item => {
    alloc += getItemAlloc(item);
  });
  return alloc;
}

function decodeLength(bytes) {
  let len = 0;
  let size = 0;
  for (;;) {
    let elem = bytes.shift();
    len |= (elem & 0x7f) << size * 7;
    size += 1;
    if ((elem & 0x80) === 0) {
      break;
    }
  }
  return len;
}
function encodeLength(bytes, len) {
  let rem_len = len;
  for (;;) {
    let elem = rem_len & 0x7f;
    rem_len >>= 7;
    if (rem_len == 0) {
      bytes.push(elem);
      break;
    } else {
      elem |= 0x80;
      bytes.push(elem);
    }
  }
}

function assert$3 (condition, message) {
  if (!condition) {
    throw new Error(message || 'Assertion failed');
  }
}

class CompiledKeys {
  constructor(payer, keyMetaMap) {
    this.payer = void 0;
    this.keyMetaMap = void 0;
    this.payer = payer;
    this.keyMetaMap = keyMetaMap;
  }
  static compile(instructions, payer) {
    const keyMetaMap = new Map();
    const getOrInsertDefault = pubkey => {
      const address = pubkey.toBase58();
      let keyMeta = keyMetaMap.get(address);
      if (keyMeta === undefined) {
        keyMeta = {
          isSigner: false,
          isWritable: false,
          isInvoked: false
        };
        keyMetaMap.set(address, keyMeta);
      }
      return keyMeta;
    };
    const payerKeyMeta = getOrInsertDefault(payer);
    payerKeyMeta.isSigner = true;
    payerKeyMeta.isWritable = true;
    for (const ix of instructions) {
      getOrInsertDefault(ix.programId).isInvoked = true;
      for (const accountMeta of ix.keys) {
        const keyMeta = getOrInsertDefault(accountMeta.pubkey);
        keyMeta.isSigner ||= accountMeta.isSigner;
        keyMeta.isWritable ||= accountMeta.isWritable;
      }
    }
    return new CompiledKeys(payer, keyMetaMap);
  }
  getMessageComponents() {
    const mapEntries = [...this.keyMetaMap.entries()];
    assert$3(mapEntries.length <= 256, 'Max static account keys length exceeded');
    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);
    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);
    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);
    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);
    const header = {
      numRequiredSignatures: writableSigners.length + readonlySigners.length,
      numReadonlySignedAccounts: readonlySigners.length,
      numReadonlyUnsignedAccounts: readonlyNonSigners.length
    };

    // sanity checks
    {
      assert$3(writableSigners.length > 0, 'Expected at least one writable signer key');
      const [payerAddress] = writableSigners[0];
      assert$3(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');
    }
    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];
    return [header, staticAccountKeys];
  }
  extractTableLookup(lookupTable) {
    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);
    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);

    // Don't extract lookup if no keys were found
    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {
      return;
    }
    return [{
      accountKey: lookupTable.key,
      writableIndexes,
      readonlyIndexes
    }, {
      writable: drainedWritableKeys,
      readonly: drainedReadonlyKeys
    }];
  }

  /** @internal */
  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {
    const lookupTableIndexes = new Array();
    const drainedKeys = new Array();
    for (const [address, keyMeta] of this.keyMetaMap.entries()) {
      if (keyMetaFilter(keyMeta)) {
        const key = new PublicKey(address);
        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));
        if (lookupTableIndex >= 0) {
          assert$3(lookupTableIndex < 256, 'Max lookup table index exceeded');
          lookupTableIndexes.push(lookupTableIndex);
          drainedKeys.push(key);
          this.keyMetaMap.delete(address);
        }
      }
    }
    return [lookupTableIndexes, drainedKeys];
  }
}

const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';

/**
 * Delegates to `Array#shift`, but throws if the array is zero-length.
 */
function guardedShift(byteArray) {
  if (byteArray.length === 0) {
    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
  }
  return byteArray.shift();
}

/**
 * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of
 * the array.
 */
function guardedSplice(byteArray, ...args) {
  const [start] = args;
  if (args.length === 2 // Implies that `deleteCount` was supplied
  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {
    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
  }
  return byteArray.splice(...args);
}

/**
 * An instruction to execute by a program
 *
 * @property {number} programIdIndex
 * @property {number[]} accounts
 * @property {string} data
 */

/**
 * Message constructor arguments
 */

/**
 * List of instructions to be processed atomically
 */
class Message {
  constructor(args) {
    this.header = void 0;
    this.accountKeys = void 0;
    this.recentBlockhash = void 0;
    this.instructions = void 0;
    this.indexToProgramIds = new Map();
    this.header = args.header;
    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));
    this.recentBlockhash = args.recentBlockhash;
    this.instructions = args.instructions;
    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));
  }
  get version() {
    return 'legacy';
  }
  get staticAccountKeys() {
    return this.accountKeys;
  }
  get compiledInstructions() {
    return this.instructions.map(ix => ({
      programIdIndex: ix.programIdIndex,
      accountKeyIndexes: ix.accounts,
      data: bs58$7.decode(ix.data)
    }));
  }
  get addressTableLookups() {
    return [];
  }
  getAccountKeys() {
    return new MessageAccountKeys(this.staticAccountKeys);
  }
  static compile(args) {
    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);
    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();
    const accountKeys = new MessageAccountKeys(staticAccountKeys);
    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({
      programIdIndex: ix.programIdIndex,
      accounts: ix.accountKeyIndexes,
      data: bs58$7.encode(ix.data)
    }));
    return new Message({
      header,
      accountKeys: staticAccountKeys,
      recentBlockhash: args.recentBlockhash,
      instructions
    });
  }
  isAccountSigner(index) {
    return index < this.header.numRequiredSignatures;
  }
  isAccountWritable(index) {
    const numSignedAccounts = this.header.numRequiredSignatures;
    if (index >= this.header.numRequiredSignatures) {
      const unsignedAccountIndex = index - numSignedAccounts;
      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;
      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
      return unsignedAccountIndex < numWritableUnsignedAccounts;
    } else {
      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
      return index < numWritableSignedAccounts;
    }
  }
  isProgramId(index) {
    return this.indexToProgramIds.has(index);
  }
  programIds() {
    return [...this.indexToProgramIds.values()];
  }
  nonProgramIds() {
    return this.accountKeys.filter((_, index) => !this.isProgramId(index));
  }
  serialize() {
    const numKeys = this.accountKeys.length;
    let keyCount = [];
    encodeLength(keyCount, numKeys);
    const instructions = this.instructions.map(instruction => {
      const {
        accounts,
        programIdIndex
      } = instruction;
      const data = Array.from(bs58$7.decode(instruction.data));
      let keyIndicesCount = [];
      encodeLength(keyIndicesCount, accounts.length);
      let dataCount = [];
      encodeLength(dataCount, data.length);
      return {
        programIdIndex,
        keyIndicesCount: Buffer.from(keyIndicesCount),
        keyIndices: accounts,
        dataLength: Buffer.from(dataCount),
        data
      };
    });
    let instructionCount = [];
    encodeLength(instructionCount, instructions.length);
    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);
    Buffer.from(instructionCount).copy(instructionBuffer);
    let instructionBufferLength = instructionCount.length;
    instructions.forEach(instruction => {
      const instructionLayout = struct$4([u8$4('programIdIndex'), blob$2(instruction.keyIndicesCount.length, 'keyIndicesCount'), seq(u8$4('keyIndex'), instruction.keyIndices.length, 'keyIndices'), blob$2(instruction.dataLength.length, 'dataLength'), seq(u8$4('userdatum'), instruction.data.length, 'data')]);
      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);
      instructionBufferLength += length;
    });
    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);
    const signDataLayout = struct$4([blob$2(1, 'numRequiredSignatures'), blob$2(1, 'numReadonlySignedAccounts'), blob$2(1, 'numReadonlyUnsignedAccounts'), blob$2(keyCount.length, 'keyCount'), seq(publicKey$7('key'), numKeys, 'keys'), publicKey$7('recentBlockhash')]);
    const transaction = {
      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),
      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),
      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),
      keyCount: Buffer.from(keyCount),
      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),
      recentBlockhash: bs58$7.decode(this.recentBlockhash)
    };
    let signData = Buffer.alloc(2048);
    const length = signDataLayout.encode(transaction, signData);
    instructionBuffer.copy(signData, length);
    return signData.slice(0, length + instructionBuffer.length);
  }

  /**
   * Decode a compiled message into a Message object.
   */
  static from(buffer) {
    // Slice up wire data
    let byteArray = [...buffer];
    const numRequiredSignatures = guardedShift(byteArray);
    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {
      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');
    }
    const numReadonlySignedAccounts = guardedShift(byteArray);
    const numReadonlyUnsignedAccounts = guardedShift(byteArray);
    const accountCount = decodeLength(byteArray);
    let accountKeys = [];
    for (let i = 0; i < accountCount; i++) {
      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH$2);
      accountKeys.push(new PublicKey(Buffer.from(account)));
    }
    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH$2);
    const instructionCount = decodeLength(byteArray);
    let instructions = [];
    for (let i = 0; i < instructionCount; i++) {
      const programIdIndex = guardedShift(byteArray);
      const accountCount = decodeLength(byteArray);
      const accounts = guardedSplice(byteArray, 0, accountCount);
      const dataLength = decodeLength(byteArray);
      const dataSlice = guardedSplice(byteArray, 0, dataLength);
      const data = bs58$7.encode(Buffer.from(dataSlice));
      instructions.push({
        programIdIndex,
        accounts,
        data
      });
    }
    const messageArgs = {
      header: {
        numRequiredSignatures,
        numReadonlySignedAccounts,
        numReadonlyUnsignedAccounts
      },
      recentBlockhash: bs58$7.encode(Buffer.from(recentBlockhash)),
      accountKeys,
      instructions
    };
    return new Message(messageArgs);
  }
}

/**
 * Message constructor arguments
 */

class MessageV0 {
  constructor(args) {
    this.header = void 0;
    this.staticAccountKeys = void 0;
    this.recentBlockhash = void 0;
    this.compiledInstructions = void 0;
    this.addressTableLookups = void 0;
    this.header = args.header;
    this.staticAccountKeys = args.staticAccountKeys;
    this.recentBlockhash = args.recentBlockhash;
    this.compiledInstructions = args.compiledInstructions;
    this.addressTableLookups = args.addressTableLookups;
  }
  get version() {
    return 0;
  }
  get numAccountKeysFromLookups() {
    let count = 0;
    for (const lookup of this.addressTableLookups) {
      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;
    }
    return count;
  }
  getAccountKeys(args) {
    let accountKeysFromLookups;
    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {
      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {
        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');
      }
      accountKeysFromLookups = args.accountKeysFromLookups;
    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {
      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);
    } else if (this.addressTableLookups.length > 0) {
      throw new Error('Failed to get account keys because address table lookups were not resolved');
    }
    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);
  }
  isAccountSigner(index) {
    return index < this.header.numRequiredSignatures;
  }
  isAccountWritable(index) {
    const numSignedAccounts = this.header.numRequiredSignatures;
    const numStaticAccountKeys = this.staticAccountKeys.length;
    if (index >= numStaticAccountKeys) {
      const lookupAccountKeysIndex = index - numStaticAccountKeys;
      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);
      return lookupAccountKeysIndex < numWritableLookupAccountKeys;
    } else if (index >= this.header.numRequiredSignatures) {
      const unsignedAccountIndex = index - numSignedAccounts;
      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;
      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
      return unsignedAccountIndex < numWritableUnsignedAccounts;
    } else {
      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
      return index < numWritableSignedAccounts;
    }
  }
  resolveAddressTableLookups(addressLookupTableAccounts) {
    const accountKeysFromLookups = {
      writable: [],
      readonly: []
    };
    for (const tableLookup of this.addressTableLookups) {
      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));
      if (!tableAccount) {
        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);
      }
      for (const index of tableLookup.writableIndexes) {
        if (index < tableAccount.state.addresses.length) {
          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);
        } else {
          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);
        }
      }
      for (const index of tableLookup.readonlyIndexes) {
        if (index < tableAccount.state.addresses.length) {
          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);
        } else {
          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);
        }
      }
    }
    return accountKeysFromLookups;
  }
  static compile(args) {
    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);
    const addressTableLookups = new Array();
    const accountKeysFromLookups = {
      writable: new Array(),
      readonly: new Array()
    };
    const lookupTableAccounts = args.addressLookupTableAccounts || [];
    for (const lookupTable of lookupTableAccounts) {
      const extractResult = compiledKeys.extractTableLookup(lookupTable);
      if (extractResult !== undefined) {
        const [addressTableLookup, {
          writable,
          readonly
        }] = extractResult;
        addressTableLookups.push(addressTableLookup);
        accountKeysFromLookups.writable.push(...writable);
        accountKeysFromLookups.readonly.push(...readonly);
      }
    }
    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();
    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);
    const compiledInstructions = accountKeys.compileInstructions(args.instructions);
    return new MessageV0({
      header,
      staticAccountKeys,
      recentBlockhash: args.recentBlockhash,
      compiledInstructions,
      addressTableLookups
    });
  }
  serialize() {
    const encodedStaticAccountKeysLength = Array();
    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);
    const serializedInstructions = this.serializeInstructions();
    const encodedInstructionsLength = Array();
    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);
    const serializedAddressTableLookups = this.serializeAddressTableLookups();
    const encodedAddressTableLookupsLength = Array();
    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);
    const messageLayout = struct$4([u8$4('prefix'), struct$4([u8$4('numRequiredSignatures'), u8$4('numReadonlySignedAccounts'), u8$4('numReadonlyUnsignedAccounts')], 'header'), blob$2(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), seq(publicKey$7(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey$7('recentBlockhash'), blob$2(encodedInstructionsLength.length, 'instructionsLength'), blob$2(serializedInstructions.length, 'serializedInstructions'), blob$2(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), blob$2(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);
    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);
    const MESSAGE_VERSION_0_PREFIX = 1 << 7;
    const serializedMessageLength = messageLayout.encode({
      prefix: MESSAGE_VERSION_0_PREFIX,
      header: this.header,
      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),
      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),
      recentBlockhash: bs58$7.decode(this.recentBlockhash),
      instructionsLength: new Uint8Array(encodedInstructionsLength),
      serializedInstructions,
      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),
      serializedAddressTableLookups
    }, serializedMessage);
    return serializedMessage.slice(0, serializedMessageLength);
  }
  serializeInstructions() {
    let serializedLength = 0;
    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);
    for (const instruction of this.compiledInstructions) {
      const encodedAccountKeyIndexesLength = Array();
      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);
      const encodedDataLength = Array();
      encodeLength(encodedDataLength, instruction.data.length);
      const instructionLayout = struct$4([u8$4('programIdIndex'), blob$2(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), seq(u8$4(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), blob$2(encodedDataLength.length, 'encodedDataLength'), blob$2(instruction.data.length, 'data')]);
      serializedLength += instructionLayout.encode({
        programIdIndex: instruction.programIdIndex,
        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),
        accountKeyIndexes: instruction.accountKeyIndexes,
        encodedDataLength: new Uint8Array(encodedDataLength),
        data: instruction.data
      }, serializedInstructions, serializedLength);
    }
    return serializedInstructions.slice(0, serializedLength);
  }
  serializeAddressTableLookups() {
    let serializedLength = 0;
    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);
    for (const lookup of this.addressTableLookups) {
      const encodedWritableIndexesLength = Array();
      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);
      const encodedReadonlyIndexesLength = Array();
      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);
      const addressTableLookupLayout = struct$4([publicKey$7('accountKey'), blob$2(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), seq(u8$4(), lookup.writableIndexes.length, 'writableIndexes'), blob$2(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), seq(u8$4(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);
      serializedLength += addressTableLookupLayout.encode({
        accountKey: lookup.accountKey.toBytes(),
        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),
        writableIndexes: lookup.writableIndexes,
        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),
        readonlyIndexes: lookup.readonlyIndexes
      }, serializedAddressTableLookups, serializedLength);
    }
    return serializedAddressTableLookups.slice(0, serializedLength);
  }
  static deserialize(serializedMessage) {
    let byteArray = [...serializedMessage];
    const prefix = guardedShift(byteArray);
    const maskedPrefix = prefix & VERSION_PREFIX_MASK;
    assert$3(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);
    const version = maskedPrefix;
    assert$3(version === 0, `Expected versioned message with version 0 but found version ${version}`);
    const header = {
      numRequiredSignatures: guardedShift(byteArray),
      numReadonlySignedAccounts: guardedShift(byteArray),
      numReadonlyUnsignedAccounts: guardedShift(byteArray)
    };
    const staticAccountKeys = [];
    const staticAccountKeysLength = decodeLength(byteArray);
    for (let i = 0; i < staticAccountKeysLength; i++) {
      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH$2)));
    }
    const recentBlockhash = bs58$7.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH$2));
    const instructionCount = decodeLength(byteArray);
    const compiledInstructions = [];
    for (let i = 0; i < instructionCount; i++) {
      const programIdIndex = guardedShift(byteArray);
      const accountKeyIndexesLength = decodeLength(byteArray);
      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);
      const dataLength = decodeLength(byteArray);
      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));
      compiledInstructions.push({
        programIdIndex,
        accountKeyIndexes,
        data
      });
    }
    const addressTableLookupsCount = decodeLength(byteArray);
    const addressTableLookups = [];
    for (let i = 0; i < addressTableLookupsCount; i++) {
      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH$2));
      const writableIndexesLength = decodeLength(byteArray);
      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);
      const readonlyIndexesLength = decodeLength(byteArray);
      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);
      addressTableLookups.push({
        accountKey,
        writableIndexes,
        readonlyIndexes
      });
    }
    return new MessageV0({
      header,
      staticAccountKeys,
      recentBlockhash,
      compiledInstructions,
      addressTableLookups
    });
  }
}

// eslint-disable-next-line no-redeclare
const VersionedMessage = {
  deserializeMessageVersion(serializedMessage) {
    const prefix = serializedMessage[0];
    const maskedPrefix = prefix & VERSION_PREFIX_MASK;

    // if the highest bit of the prefix is not set, the message is not versioned
    if (maskedPrefix === prefix) {
      return 'legacy';
    }

    // the lower 7 bits of the prefix indicate the message version
    return maskedPrefix;
  },
  deserialize: serializedMessage => {
    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);
    if (version === 'legacy') {
      return Message.from(serializedMessage);
    }
    if (version === 0) {
      return MessageV0.deserialize(serializedMessage);
    } else {
      throw new Error(`Transaction message version ${version} deserialization is not supported`);
    }
  }
};

/** @internal */

/**
 * Transaction signature as base-58 encoded string
 */

let TransactionStatus = /*#__PURE__*/function (TransactionStatus) {
  TransactionStatus[TransactionStatus["BLOCKHEIGHT_EXCEEDED"] = 0] = "BLOCKHEIGHT_EXCEEDED";
  TransactionStatus[TransactionStatus["PROCESSED"] = 1] = "PROCESSED";
  TransactionStatus[TransactionStatus["TIMED_OUT"] = 2] = "TIMED_OUT";
  TransactionStatus[TransactionStatus["NONCE_INVALID"] = 3] = "NONCE_INVALID";
  return TransactionStatus;
}({});

/**
 * Default (empty) signature
 */
const DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);

/**
 * Account metadata used to define instructions
 */

/**
 * List of TransactionInstruction object fields that may be initialized at construction
 */

/**
 * Configuration object for Transaction.serialize()
 */

/**
 * @internal
 */

/**
 * Transaction Instruction class
 */
class TransactionInstruction {
  constructor(opts) {
    /**
     * Public keys to include in this transaction
     * Boolean represents whether this pubkey needs to sign the transaction
     */
    this.keys = void 0;
    /**
     * Program Id to execute
     */
    this.programId = void 0;
    /**
     * Program input
     */
    this.data = Buffer.alloc(0);
    this.programId = opts.programId;
    this.keys = opts.keys;
    if (opts.data) {
      this.data = opts.data;
    }
  }

  /**
   * @internal
   */
  toJSON() {
    return {
      keys: this.keys.map(({
        pubkey,
        isSigner,
        isWritable
      }) => ({
        pubkey: pubkey.toJSON(),
        isSigner,
        isWritable
      })),
      programId: this.programId.toJSON(),
      data: [...this.data]
    };
  }
}

/**
 * Pair of signature and corresponding public key
 */

/**
 * List of Transaction object fields that may be initialized at construction
 */

// For backward compatibility; an unfortunate consequence of being
// forced to over-export types by the documentation generator.
// See https://github.com/solana-labs/solana/pull/25820

/**
 * Blockhash-based transactions have a lifetime that are defined by
 * the blockhash they include. Any transaction whose blockhash is
 * too old will be rejected.
 */

/**
 * Use these options to construct a durable nonce transaction.
 */

/**
 * Nonce information to be used to build an offline Transaction.
 */

/**
 * @internal
 */

/**
 * Transaction class
 */
let Transaction$3 = class Transaction {
  /**
   * The first (payer) Transaction signature
   *
   * @returns {Buffer | null} Buffer of payer's signature
   */
  get signature() {
    if (this.signatures.length > 0) {
      return this.signatures[0].signature;
    }
    return null;
  }

  /**
   * The transaction fee payer
   */

  // Construct a transaction with a blockhash and lastValidBlockHeight

  // Construct a transaction using a durable nonce

  /**
   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.
   * Please supply a `TransactionBlockhashCtor` instead.
   */

  /**
   * Construct an empty Transaction
   */
  constructor(opts) {
    /**
     * Signatures for the transaction.  Typically created by invoking the
     * `sign()` method
     */
    this.signatures = [];
    this.feePayer = void 0;
    /**
     * The instructions to atomically execute
     */
    this.instructions = [];
    /**
     * A recent transaction id. Must be populated by the caller
     */
    this.recentBlockhash = void 0;
    /**
     * the last block chain can advance to before tx is declared expired
     * */
    this.lastValidBlockHeight = void 0;
    /**
     * Optional Nonce information. If populated, transaction will use a durable
     * Nonce hash instead of a recentBlockhash. Must be populated by the caller
     */
    this.nonceInfo = void 0;
    /**
     * If this is a nonce transaction this represents the minimum slot from which
     * to evaluate if the nonce has advanced when attempting to confirm the
     * transaction. This protects against a case where the transaction confirmation
     * logic loads the nonce account from an old slot and assumes the mismatch in
     * nonce value implies that the nonce has been advanced.
     */
    this.minNonceContextSlot = void 0;
    /**
     * @internal
     */
    this._message = void 0;
    /**
     * @internal
     */
    this._json = void 0;
    if (!opts) {
      return;
    }
    if (opts.feePayer) {
      this.feePayer = opts.feePayer;
    }
    if (opts.signatures) {
      this.signatures = opts.signatures;
    }
    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {
      const {
        minContextSlot,
        nonceInfo
      } = opts;
      this.minNonceContextSlot = minContextSlot;
      this.nonceInfo = nonceInfo;
    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {
      const {
        blockhash,
        lastValidBlockHeight
      } = opts;
      this.recentBlockhash = blockhash;
      this.lastValidBlockHeight = lastValidBlockHeight;
    } else {
      const {
        recentBlockhash,
        nonceInfo
      } = opts;
      if (nonceInfo) {
        this.nonceInfo = nonceInfo;
      }
      this.recentBlockhash = recentBlockhash;
    }
  }

  /**
   * @internal
   */
  toJSON() {
    return {
      recentBlockhash: this.recentBlockhash || null,
      feePayer: this.feePayer ? this.feePayer.toJSON() : null,
      nonceInfo: this.nonceInfo ? {
        nonce: this.nonceInfo.nonce,
        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()
      } : null,
      instructions: this.instructions.map(instruction => instruction.toJSON()),
      signers: this.signatures.map(({
        publicKey
      }) => {
        return publicKey.toJSON();
      })
    };
  }

  /**
   * Add one or more instructions to this Transaction
   *
   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction
   */
  add(...items) {
    if (items.length === 0) {
      throw new Error('No instructions');
    }
    items.forEach(item => {
      if ('instructions' in item) {
        this.instructions = this.instructions.concat(item.instructions);
      } else if ('data' in item && 'programId' in item && 'keys' in item) {
        this.instructions.push(item);
      } else {
        this.instructions.push(new TransactionInstruction(item));
      }
    });
    return this;
  }

  /**
   * Compile transaction data
   */
  compileMessage() {
    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {
      return this._message;
    }
    let recentBlockhash;
    let instructions;
    if (this.nonceInfo) {
      recentBlockhash = this.nonceInfo.nonce;
      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {
        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];
      } else {
        instructions = this.instructions;
      }
    } else {
      recentBlockhash = this.recentBlockhash;
      instructions = this.instructions;
    }
    if (!recentBlockhash) {
      throw new Error('Transaction recentBlockhash required');
    }
    if (instructions.length < 1) {
      console.warn('No instructions provided');
    }
    let feePayer;
    if (this.feePayer) {
      feePayer = this.feePayer;
    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {
      // Use implicit fee payer
      feePayer = this.signatures[0].publicKey;
    } else {
      throw new Error('Transaction fee payer required');
    }
    for (let i = 0; i < instructions.length; i++) {
      if (instructions[i].programId === undefined) {
        throw new Error(`Transaction instruction index ${i} has undefined program id`);
      }
    }
    const programIds = [];
    const accountMetas = [];
    instructions.forEach(instruction => {
      instruction.keys.forEach(accountMeta => {
        accountMetas.push({
          ...accountMeta
        });
      });
      const programId = instruction.programId.toString();
      if (!programIds.includes(programId)) {
        programIds.push(programId);
      }
    });

    // Append programID account metas
    programIds.forEach(programId => {
      accountMetas.push({
        pubkey: new PublicKey(programId),
        isSigner: false,
        isWritable: false
      });
    });

    // Cull duplicate account metas
    const uniqueMetas = [];
    accountMetas.forEach(accountMeta => {
      const pubkeyString = accountMeta.pubkey.toString();
      const uniqueIndex = uniqueMetas.findIndex(x => {
        return x.pubkey.toString() === pubkeyString;
      });
      if (uniqueIndex > -1) {
        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;
        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;
      } else {
        uniqueMetas.push(accountMeta);
      }
    });

    // Sort. Prioritizing first by signer, then by writable
    uniqueMetas.sort(function (x, y) {
      if (x.isSigner !== y.isSigner) {
        // Signers always come before non-signers
        return x.isSigner ? -1 : 1;
      }
      if (x.isWritable !== y.isWritable) {
        // Writable accounts always come before read-only accounts
        return x.isWritable ? -1 : 1;
      }
      // Otherwise, sort by pubkey, stringwise.
      const options = {
        localeMatcher: 'best fit',
        usage: 'sort',
        sensitivity: 'variant',
        ignorePunctuation: false,
        numeric: false,
        caseFirst: 'lower'
      };
      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);
    });

    // Move fee payer to the front
    const feePayerIndex = uniqueMetas.findIndex(x => {
      return x.pubkey.equals(feePayer);
    });
    if (feePayerIndex > -1) {
      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);
      payerMeta.isSigner = true;
      payerMeta.isWritable = true;
      uniqueMetas.unshift(payerMeta);
    } else {
      uniqueMetas.unshift({
        pubkey: feePayer,
        isSigner: true,
        isWritable: true
      });
    }

    // Disallow unknown signers
    for (const signature of this.signatures) {
      const uniqueIndex = uniqueMetas.findIndex(x => {
        return x.pubkey.equals(signature.publicKey);
      });
      if (uniqueIndex > -1) {
        if (!uniqueMetas[uniqueIndex].isSigner) {
          uniqueMetas[uniqueIndex].isSigner = true;
          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');
        }
      } else {
        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);
      }
    }
    let numRequiredSignatures = 0;
    let numReadonlySignedAccounts = 0;
    let numReadonlyUnsignedAccounts = 0;

    // Split out signing from non-signing keys and count header values
    const signedKeys = [];
    const unsignedKeys = [];
    uniqueMetas.forEach(({
      pubkey,
      isSigner,
      isWritable
    }) => {
      if (isSigner) {
        signedKeys.push(pubkey.toString());
        numRequiredSignatures += 1;
        if (!isWritable) {
          numReadonlySignedAccounts += 1;
        }
      } else {
        unsignedKeys.push(pubkey.toString());
        if (!isWritable) {
          numReadonlyUnsignedAccounts += 1;
        }
      }
    });
    const accountKeys = signedKeys.concat(unsignedKeys);
    const compiledInstructions = instructions.map(instruction => {
      const {
        data,
        programId
      } = instruction;
      return {
        programIdIndex: accountKeys.indexOf(programId.toString()),
        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),
        data: bs58$7.encode(data)
      };
    });
    compiledInstructions.forEach(instruction => {
      assert$3(instruction.programIdIndex >= 0);
      instruction.accounts.forEach(keyIndex => assert$3(keyIndex >= 0));
    });
    return new Message({
      header: {
        numRequiredSignatures,
        numReadonlySignedAccounts,
        numReadonlyUnsignedAccounts
      },
      accountKeys,
      recentBlockhash,
      instructions: compiledInstructions
    });
  }

  /**
   * @internal
   */
  _compile() {
    const message = this.compileMessage();
    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);
    if (this.signatures.length === signedKeys.length) {
      const valid = this.signatures.every((pair, index) => {
        return signedKeys[index].equals(pair.publicKey);
      });
      if (valid) return message;
    }
    this.signatures = signedKeys.map(publicKey => ({
      signature: null,
      publicKey
    }));
    return message;
  }

  /**
   * Get a buffer of the Transaction data that need to be covered by signatures
   */
  serializeMessage() {
    return this._compile().serialize();
  }

  /**
   * Get the estimated fee associated with a transaction
   *
   * @param {Connection} connection Connection to RPC Endpoint.
   *
   * @returns {Promise<number | null>} The estimated fee for the transaction
   */
  async getEstimatedFee(connection) {
    return (await connection.getFeeForMessage(this.compileMessage())).value;
  }

  /**
   * Specify the public keys which will be used to sign the Transaction.
   * The first signer will be used as the transaction fee payer account.
   *
   * Signatures can be added with either `partialSign` or `addSignature`
   *
   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be
   * specified and it can be set in the Transaction constructor or with the
   * `feePayer` property.
   */
  setSigners(...signers) {
    if (signers.length === 0) {
      throw new Error('No signers');
    }
    const seen = new Set();
    this.signatures = signers.filter(publicKey => {
      const key = publicKey.toString();
      if (seen.has(key)) {
        return false;
      } else {
        seen.add(key);
        return true;
      }
    }).map(publicKey => ({
      signature: null,
      publicKey
    }));
  }

  /**
   * Sign the Transaction with the specified signers. Multiple signatures may
   * be applied to a Transaction. The first signature is considered "primary"
   * and is used identify and confirm transactions.
   *
   * If the Transaction `feePayer` is not set, the first signer will be used
   * as the transaction fee payer account.
   *
   * Transaction fields should not be modified after the first call to `sign`,
   * as doing so may invalidate the signature and cause the Transaction to be
   * rejected.
   *
   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method
   *
   * @param {Array<Signer>} signers Array of signers that will sign the transaction
   */
  sign(...signers) {
    if (signers.length === 0) {
      throw new Error('No signers');
    }

    // Dedupe signers
    const seen = new Set();
    const uniqueSigners = [];
    for (const signer of signers) {
      const key = signer.publicKey.toString();
      if (seen.has(key)) {
        continue;
      } else {
        seen.add(key);
        uniqueSigners.push(signer);
      }
    }
    this.signatures = uniqueSigners.map(signer => ({
      signature: null,
      publicKey: signer.publicKey
    }));
    const message = this._compile();
    this._partialSign(message, ...uniqueSigners);
  }

  /**
   * Partially sign a transaction with the specified accounts. All accounts must
   * correspond to either the fee payer or a signer account in the transaction
   * instructions.
   *
   * All the caveats from the `sign` method apply to `partialSign`
   *
   * @param {Array<Signer>} signers Array of signers that will sign the transaction
   */
  partialSign(...signers) {
    if (signers.length === 0) {
      throw new Error('No signers');
    }

    // Dedupe signers
    const seen = new Set();
    const uniqueSigners = [];
    for (const signer of signers) {
      const key = signer.publicKey.toString();
      if (seen.has(key)) {
        continue;
      } else {
        seen.add(key);
        uniqueSigners.push(signer);
      }
    }
    const message = this._compile();
    this._partialSign(message, ...uniqueSigners);
  }

  /**
   * @internal
   */
  _partialSign(message, ...signers) {
    const signData = message.serialize();
    signers.forEach(signer => {
      const signature = sign(signData, signer.secretKey);
      this._addSignature(signer.publicKey, toBuffer(signature));
    });
  }

  /**
   * Add an externally created signature to a transaction. The public key
   * must correspond to either the fee payer or a signer account in the transaction
   * instructions.
   *
   * @param {PublicKey} pubkey Public key that will be added to the transaction.
   * @param {Buffer} signature An externally created signature to add to the transaction.
   */
  addSignature(pubkey, signature) {
    this._compile(); // Ensure signatures array is populated
    this._addSignature(pubkey, signature);
  }

  /**
   * @internal
   */
  _addSignature(pubkey, signature) {
    assert$3(signature.length === 64);
    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));
    if (index < 0) {
      throw new Error(`unknown signer: ${pubkey.toString()}`);
    }
    this.signatures[index].signature = Buffer.from(signature);
  }

  /**
   * Verify signatures of a Transaction
   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.
   * If no boolean is provided, we expect a fully signed Transaction by default.
   *
   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction
   */
  verifySignatures(requireAllSignatures = true) {
    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);
    return !signatureErrors;
  }

  /**
   * @internal
   */
  _getMessageSignednessErrors(message, requireAllSignatures) {
    const errors = {};
    for (const {
      signature,
      publicKey
    } of this.signatures) {
      if (signature === null) {
        if (requireAllSignatures) {
          (errors.missing ||= []).push(publicKey);
        }
      } else {
        if (!verify(signature, message, publicKey.toBytes())) {
          (errors.invalid ||= []).push(publicKey);
        }
      }
    }
    return errors.invalid || errors.missing ? errors : undefined;
  }

  /**
   * Serialize the Transaction in the wire format.
   *
   * @param {Buffer} [config] Config of transaction.
   *
   * @returns {Buffer} Signature of transaction in wire format.
   */
  serialize(config) {
    const {
      requireAllSignatures,
      verifySignatures
    } = Object.assign({
      requireAllSignatures: true,
      verifySignatures: true
    }, config);
    const signData = this.serializeMessage();
    if (verifySignatures) {
      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);
      if (sigErrors) {
        let errorMessage = 'Signature verification failed.';
        if (sigErrors.invalid) {
          errorMessage += `\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\`].`;
        }
        if (sigErrors.missing) {
          errorMessage += `\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\`].`;
        }
        throw new Error(errorMessage);
      }
    }
    return this._serialize(signData);
  }

  /**
   * @internal
   */
  _serialize(signData) {
    const {
      signatures
    } = this;
    const signatureCount = [];
    encodeLength(signatureCount, signatures.length);
    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;
    const wireTransaction = Buffer.alloc(transactionLength);
    assert$3(signatures.length < 256);
    Buffer.from(signatureCount).copy(wireTransaction, 0);
    signatures.forEach(({
      signature
    }, index) => {
      if (signature !== null) {
        assert$3(signature.length === 64, `signature has invalid length`);
        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);
      }
    });
    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);
    assert$3(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);
    return wireTransaction;
  }

  /**
   * Deprecated method
   * @internal
   */
  get keys() {
    assert$3(this.instructions.length === 1);
    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);
  }

  /**
   * Deprecated method
   * @internal
   */
  get programId() {
    assert$3(this.instructions.length === 1);
    return this.instructions[0].programId;
  }

  /**
   * Deprecated method
   * @internal
   */
  get data() {
    assert$3(this.instructions.length === 1);
    return this.instructions[0].data;
  }

  /**
   * Parse a wire transaction into a Transaction object.
   *
   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction
   *
   * @returns {Transaction} Transaction associated with the signature
   */
  static from(buffer) {
    // Slice up wire data
    let byteArray = [...buffer];
    const signatureCount = decodeLength(byteArray);
    let signatures = [];
    for (let i = 0; i < signatureCount; i++) {
      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);
      signatures.push(bs58$7.encode(Buffer.from(signature)));
    }
    return Transaction.populate(Message.from(byteArray), signatures);
  }

  /**
   * Populate Transaction object from message and signatures
   *
   * @param {Message} message Message of transaction
   * @param {Array<string>} signatures List of signatures to assign to the transaction
   *
   * @returns {Transaction} The populated Transaction
   */
  static populate(message, signatures = []) {
    const transaction = new Transaction();
    transaction.recentBlockhash = message.recentBlockhash;
    if (message.header.numRequiredSignatures > 0) {
      transaction.feePayer = message.accountKeys[0];
    }
    signatures.forEach((signature, index) => {
      const sigPubkeyPair = {
        signature: signature == bs58$7.encode(DEFAULT_SIGNATURE) ? null : bs58$7.decode(signature),
        publicKey: message.accountKeys[index]
      };
      transaction.signatures.push(sigPubkeyPair);
    });
    message.instructions.forEach(instruction => {
      const keys = instruction.accounts.map(account => {
        const pubkey = message.accountKeys[account];
        return {
          pubkey,
          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),
          isWritable: message.isAccountWritable(account)
        };
      });
      transaction.instructions.push(new TransactionInstruction({
        keys,
        programId: message.accountKeys[instruction.programIdIndex],
        data: bs58$7.decode(instruction.data)
      }));
    });
    transaction._message = message;
    transaction._json = transaction.toJSON();
    return transaction;
  }
};

class TransactionMessage {
  constructor(args) {
    this.payerKey = void 0;
    this.instructions = void 0;
    this.recentBlockhash = void 0;
    this.payerKey = args.payerKey;
    this.instructions = args.instructions;
    this.recentBlockhash = args.recentBlockhash;
  }
  static decompile(message, args) {
    const {
      header,
      compiledInstructions,
      recentBlockhash
    } = message;
    const {
      numRequiredSignatures,
      numReadonlySignedAccounts,
      numReadonlyUnsignedAccounts
    } = header;
    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;
    assert$3(numWritableSignedAccounts > 0, 'Message header is invalid');
    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;
    assert$3(numWritableUnsignedAccounts >= 0, 'Message header is invalid');
    const accountKeys = message.getAccountKeys(args);
    const payerKey = accountKeys.get(0);
    if (payerKey === undefined) {
      throw new Error('Failed to decompile message because no account keys were found');
    }
    const instructions = [];
    for (const compiledIx of compiledInstructions) {
      const keys = [];
      for (const keyIndex of compiledIx.accountKeyIndexes) {
        const pubkey = accountKeys.get(keyIndex);
        if (pubkey === undefined) {
          throw new Error(`Failed to find key for account key index ${keyIndex}`);
        }
        const isSigner = keyIndex < numRequiredSignatures;
        let isWritable;
        if (isSigner) {
          isWritable = keyIndex < numWritableSignedAccounts;
        } else if (keyIndex < accountKeys.staticAccountKeys.length) {
          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;
        } else {
          isWritable = keyIndex - accountKeys.staticAccountKeys.length <
          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above
          accountKeys.accountKeysFromLookups.writable.length;
        }
        keys.push({
          pubkey,
          isSigner: keyIndex < header.numRequiredSignatures,
          isWritable
        });
      }
      const programId = accountKeys.get(compiledIx.programIdIndex);
      if (programId === undefined) {
        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);
      }
      instructions.push(new TransactionInstruction({
        programId,
        data: toBuffer(compiledIx.data),
        keys
      }));
    }
    return new TransactionMessage({
      payerKey,
      instructions,
      recentBlockhash
    });
  }
  compileToLegacyMessage() {
    return Message.compile({
      payerKey: this.payerKey,
      recentBlockhash: this.recentBlockhash,
      instructions: this.instructions
    });
  }
  compileToV0Message(addressLookupTableAccounts) {
    return MessageV0.compile({
      payerKey: this.payerKey,
      recentBlockhash: this.recentBlockhash,
      instructions: this.instructions,
      addressLookupTableAccounts
    });
  }
}

/**
 * Versioned transaction class
 */
class VersionedTransaction {
  get version() {
    return this.message.version;
  }
  constructor(message, signatures) {
    this.signatures = void 0;
    this.message = void 0;
    if (signatures !== undefined) {
      assert$3(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');
      this.signatures = signatures;
    } else {
      const defaultSignatures = [];
      for (let i = 0; i < message.header.numRequiredSignatures; i++) {
        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));
      }
      this.signatures = defaultSignatures;
    }
    this.message = message;
  }
  serialize() {
    const serializedMessage = this.message.serialize();
    const encodedSignaturesLength = Array();
    encodeLength(encodedSignaturesLength, this.signatures.length);
    const transactionLayout = struct$4([blob$2(encodedSignaturesLength.length, 'encodedSignaturesLength'), seq(signature(), this.signatures.length, 'signatures'), blob$2(serializedMessage.length, 'serializedMessage')]);
    const serializedTransaction = new Uint8Array(2048);
    const serializedTransactionLength = transactionLayout.encode({
      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),
      signatures: this.signatures,
      serializedMessage
    }, serializedTransaction);
    return serializedTransaction.slice(0, serializedTransactionLength);
  }
  static deserialize(serializedTransaction) {
    let byteArray = [...serializedTransaction];
    const signatures = [];
    const signaturesLength = decodeLength(byteArray);
    for (let i = 0; i < signaturesLength; i++) {
      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));
    }
    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));
    return new VersionedTransaction(message, signatures);
  }
  sign(signers) {
    const messageData = this.message.serialize();
    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
    for (const signer of signers) {
      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));
      assert$3(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);
      this.signatures[signerIndex] = sign(messageData, signer.secretKey);
    }
  }
  addSignature(publicKey, signature) {
    assert$3(signature.byteLength === 64, 'Signature must be 64 bytes long');
    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));
    assert$3(signerIndex >= 0, `Can not add signature; \`${publicKey.toBase58()}\` is not required to sign this transaction`);
    this.signatures[signerIndex] = signature;
  }
}

// TODO: These constants should be removed in favor of reading them out of a
// Syscall account

/**
 * @internal
 */
const NUM_TICKS_PER_SECOND = 160;

/**
 * @internal
 */
const DEFAULT_TICKS_PER_SLOT = 64;

/**
 * @internal
 */
const NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;

/**
 * @internal
 */
const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;

const SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');
const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');
const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');
const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');
const SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');
const SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');
const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');
const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');
const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');

class SendTransactionError extends Error {
  constructor({
    action,
    signature,
    transactionMessage,
    logs
  }) {
    const maybeLogsOutput = logs ? `Logs: \n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';
    const guideText = '\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';
    let message;
    switch (action) {
      case 'send':
        message = `Transaction ${signature} resulted in an error. \n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;
        break;
      case 'simulate':
        message = `Simulation failed. \nMessage: ${transactionMessage}. \n` + maybeLogsOutput + guideText;
        break;
      default:
        {
          message = `Unknown action '${(a => a)(action)}'`;
        }
    }
    super(message);
    this.signature = void 0;
    this.transactionMessage = void 0;
    this.transactionLogs = void 0;
    this.signature = signature;
    this.transactionMessage = transactionMessage;
    this.transactionLogs = logs ? logs : undefined;
  }
  get transactionError() {
    return {
      message: this.transactionMessage,
      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined
    };
  }

  /* @deprecated Use `await getLogs()` instead */
  get logs() {
    const cachedLogs = this.transactionLogs;
    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {
      return undefined;
    }
    return cachedLogs;
  }
  async getLogs(connection) {
    if (!Array.isArray(this.transactionLogs)) {
      this.transactionLogs = new Promise((resolve, reject) => {
        connection.getTransaction(this.signature).then(tx => {
          if (tx && tx.meta && tx.meta.logMessages) {
            const logs = tx.meta.logMessages;
            this.transactionLogs = logs;
            resolve(logs);
          } else {
            reject(new Error('Log messages not found'));
          }
        }).catch(reject);
      });
    }
    return await this.transactionLogs;
  }
}

// Keep in sync with client/src/rpc_custom_errors.rs
// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/
const SolanaJSONRPCErrorCode = {
  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,
  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,
  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,
  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,
  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,
  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,
  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,
  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,
  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,
  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,
  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,
  JSON_RPC_SCAN_ERROR: -32012,
  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,
  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,
  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,
  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016
};
class SolanaJSONRPCError extends Error {
  constructor({
    code,
    message,
    data
  }, customMessage) {
    super(customMessage != null ? `${customMessage}: ${message}` : message);
    this.code = void 0;
    this.data = void 0;
    this.code = code;
    this.data = data;
    this.name = 'SolanaJSONRPCError';
  }
}

/**
 * Sign, send and confirm a transaction.
 *
 * If `commitment` option is not specified, defaults to 'max' commitment.
 *
 * @param {Connection} connection
 * @param {Transaction} transaction
 * @param {Array<Signer>} signers
 * @param {ConfirmOptions} [options]
 * @returns {Promise<TransactionSignature>}
 */
async function sendAndConfirmTransaction(connection, transaction, signers, options) {
  const sendOptions = options && {
    skipPreflight: options.skipPreflight,
    preflightCommitment: options.preflightCommitment || options.commitment,
    maxRetries: options.maxRetries,
    minContextSlot: options.minContextSlot
  };
  const signature = await connection.sendTransaction(transaction, signers, sendOptions);
  let status;
  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {
    status = (await connection.confirmTransaction({
      abortSignal: options?.abortSignal,
      signature: signature,
      blockhash: transaction.recentBlockhash,
      lastValidBlockHeight: transaction.lastValidBlockHeight
    }, options && options.commitment)).value;
  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {
    const {
      nonceInstruction
    } = transaction.nonceInfo;
    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;
    status = (await connection.confirmTransaction({
      abortSignal: options?.abortSignal,
      minContextSlot: transaction.minNonceContextSlot,
      nonceAccountPubkey,
      nonceValue: transaction.nonceInfo.nonce,
      signature
    }, options && options.commitment)).value;
  } else {
    if (options?.abortSignal != null) {
      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');
    }
    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;
  }
  if (status.err) {
    if (signature != null) {
      throw new SendTransactionError({
        action: 'send',
        signature: signature,
        transactionMessage: `Status: (${JSON.stringify(status)})`
      });
    }
    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);
  }
  return signature;
}

// zzz
function sleep$1(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * @internal
 */

/**
 * Populate a buffer of instruction data using an InstructionType
 * @internal
 */
function encodeData$1(type, fields) {
  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);
  const data = Buffer.alloc(allocLength);
  const layoutFields = Object.assign({
    instruction: type.index
  }, fields);
  type.layout.encode(layoutFields, data);
  return data;
}

/**
 * Decode instruction data buffer using an InstructionType
 * @internal
 */
function decodeData$1(type, buffer) {
  let data;
  try {
    data = type.layout.decode(buffer);
  } catch (err) {
    throw new Error('invalid instruction; ' + err);
  }
  if (data.instruction !== type.index) {
    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);
  }
  return data;
}

/**
 * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11
 *
 * @internal
 */
const FeeCalculatorLayout = nu64$1('lamportsPerSignature');

/**
 * Calculator for transaction fees.
 *
 * @deprecated Deprecated since Solana v1.8.0.
 */

/**
 * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32
 *
 * @internal
 */
const NonceAccountLayout = struct$4([u32$4('version'), u32$4('state'), publicKey$7('authorizedPubkey'), publicKey$7('nonce'), struct$4([FeeCalculatorLayout], 'feeCalculator')]);
const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;

/**
 * A durable nonce is a 32 byte value encoded as a base58 string.
 */

/**
 * NonceAccount class
 */
class NonceAccount {
  /**
   * @internal
   */
  constructor(args) {
    this.authorizedPubkey = void 0;
    this.nonce = void 0;
    this.feeCalculator = void 0;
    this.authorizedPubkey = args.authorizedPubkey;
    this.nonce = args.nonce;
    this.feeCalculator = args.feeCalculator;
  }

  /**
   * Deserialize NonceAccount from the account data.
   *
   * @param buffer account data
   * @return NonceAccount
   */
  static fromAccountData(buffer) {
    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);
    return new NonceAccount({
      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),
      nonce: new PublicKey(nonceAccount.nonce).toString(),
      feeCalculator: nonceAccount.feeCalculator
    });
  }
}

const encodeDecode$1 = layout => {
  const decode = layout.decode.bind(layout);
  const encode = layout.encode.bind(layout);
  return {
    decode,
    encode
  };
};
const bigInt$1 = length => property => {
  const layout = blob$2(length, property);
  const {
    encode,
    decode
  } = encodeDecode$1(layout);
  const bigIntLayout = layout;
  bigIntLayout.decode = (buffer, offset) => {
    const src = decode(buffer, offset);
    return toBigIntLE_1(Buffer.from(src));
  };
  bigIntLayout.encode = (bigInt, buffer, offset) => {
    const src = toBufferLE_1(bigInt, length);
    return encode(src, buffer, offset);
  };
  return bigIntLayout;
};
const u64$5 = bigInt$1(8);

/**
 * Create account system transaction params
 */

/**
 * Transfer system transaction params
 */

/**
 * Assign system transaction params
 */

/**
 * Create account with seed system transaction params
 */

/**
 * Create nonce account system transaction params
 */

/**
 * Create nonce account with seed system transaction params
 */

/**
 * Initialize nonce account system instruction params
 */

/**
 * Advance nonce account system instruction params
 */

/**
 * Withdraw nonce account system transaction params
 */

/**
 * Authorize nonce account system transaction params
 */

/**
 * Allocate account system transaction params
 */

/**
 * Allocate account with seed system transaction params
 */

/**
 * Assign account with seed system transaction params
 */

/**
 * Transfer with seed system transaction params
 */

/** Decoded transfer system transaction instruction */

/** Decoded transferWithSeed system transaction instruction */

/**
 * System Instruction class
 */
class SystemInstruction {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Decode a system instruction and retrieve the instruction type.
   */
  static decodeInstructionType(instruction) {
    this.checkProgramId(instruction.programId);
    const instructionTypeLayout = u32$4('instruction');
    const typeIndex = instructionTypeLayout.decode(instruction.data);
    let type;
    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {
      if (layout.index == typeIndex) {
        type = ixType;
        break;
      }
    }
    if (!type) {
      throw new Error('Instruction type incorrect; not a SystemInstruction');
    }
    return type;
  }

  /**
   * Decode a create account system instruction and retrieve the instruction params.
   */
  static decodeCreateAccount(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 2);
    const {
      lamports,
      space,
      programId
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);
    return {
      fromPubkey: instruction.keys[0].pubkey,
      newAccountPubkey: instruction.keys[1].pubkey,
      lamports,
      space,
      programId: new PublicKey(programId)
    };
  }

  /**
   * Decode a transfer system instruction and retrieve the instruction params.
   */
  static decodeTransfer(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 2);
    const {
      lamports
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);
    return {
      fromPubkey: instruction.keys[0].pubkey,
      toPubkey: instruction.keys[1].pubkey,
      lamports
    };
  }

  /**
   * Decode a transfer with seed system instruction and retrieve the instruction params.
   */
  static decodeTransferWithSeed(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    const {
      lamports,
      seed,
      programId
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);
    return {
      fromPubkey: instruction.keys[0].pubkey,
      basePubkey: instruction.keys[1].pubkey,
      toPubkey: instruction.keys[2].pubkey,
      lamports,
      seed,
      programId: new PublicKey(programId)
    };
  }

  /**
   * Decode an allocate system instruction and retrieve the instruction params.
   */
  static decodeAllocate(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 1);
    const {
      space
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);
    return {
      accountPubkey: instruction.keys[0].pubkey,
      space
    };
  }

  /**
   * Decode an allocate with seed system instruction and retrieve the instruction params.
   */
  static decodeAllocateWithSeed(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 1);
    const {
      base,
      seed,
      space,
      programId
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);
    return {
      accountPubkey: instruction.keys[0].pubkey,
      basePubkey: new PublicKey(base),
      seed,
      space,
      programId: new PublicKey(programId)
    };
  }

  /**
   * Decode an assign system instruction and retrieve the instruction params.
   */
  static decodeAssign(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 1);
    const {
      programId
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);
    return {
      accountPubkey: instruction.keys[0].pubkey,
      programId: new PublicKey(programId)
    };
  }

  /**
   * Decode an assign with seed system instruction and retrieve the instruction params.
   */
  static decodeAssignWithSeed(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 1);
    const {
      base,
      seed,
      programId
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);
    return {
      accountPubkey: instruction.keys[0].pubkey,
      basePubkey: new PublicKey(base),
      seed,
      programId: new PublicKey(programId)
    };
  }

  /**
   * Decode a create account with seed system instruction and retrieve the instruction params.
   */
  static decodeCreateWithSeed(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 2);
    const {
      base,
      seed,
      lamports,
      space,
      programId
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);
    return {
      fromPubkey: instruction.keys[0].pubkey,
      newAccountPubkey: instruction.keys[1].pubkey,
      basePubkey: new PublicKey(base),
      seed,
      lamports,
      space,
      programId: new PublicKey(programId)
    };
  }

  /**
   * Decode a nonce initialize system instruction and retrieve the instruction params.
   */
  static decodeNonceInitialize(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    const {
      authorized
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);
    return {
      noncePubkey: instruction.keys[0].pubkey,
      authorizedPubkey: new PublicKey(authorized)
    };
  }

  /**
   * Decode a nonce advance system instruction and retrieve the instruction params.
   */
  static decodeNonceAdvance(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);
    return {
      noncePubkey: instruction.keys[0].pubkey,
      authorizedPubkey: instruction.keys[2].pubkey
    };
  }

  /**
   * Decode a nonce withdraw system instruction and retrieve the instruction params.
   */
  static decodeNonceWithdraw(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 5);
    const {
      lamports
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);
    return {
      noncePubkey: instruction.keys[0].pubkey,
      toPubkey: instruction.keys[1].pubkey,
      authorizedPubkey: instruction.keys[4].pubkey,
      lamports
    };
  }

  /**
   * Decode a nonce authorize system instruction and retrieve the instruction params.
   */
  static decodeNonceAuthorize(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 2);
    const {
      authorized
    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);
    return {
      noncePubkey: instruction.keys[0].pubkey,
      authorizedPubkey: instruction.keys[1].pubkey,
      newAuthorizedPubkey: new PublicKey(authorized)
    };
  }

  /**
   * @internal
   */
  static checkProgramId(programId) {
    if (!programId.equals(SystemProgram.programId)) {
      throw new Error('invalid instruction; programId is not SystemProgram');
    }
  }

  /**
   * @internal
   */
  static checkKeyLength(keys, expectedLength) {
    if (keys.length < expectedLength) {
      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
    }
  }
}

/**
 * An enumeration of valid SystemInstructionType's
 */

/**
 * An enumeration of valid system InstructionType's
 * @internal
 */
const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({
  Create: {
    index: 0,
    layout: struct$4([u32$4('instruction'), ns64$1('lamports'), ns64$1('space'), publicKey$7('programId')])
  },
  Assign: {
    index: 1,
    layout: struct$4([u32$4('instruction'), publicKey$7('programId')])
  },
  Transfer: {
    index: 2,
    layout: struct$4([u32$4('instruction'), u64$5('lamports')])
  },
  CreateWithSeed: {
    index: 3,
    layout: struct$4([u32$4('instruction'), publicKey$7('base'), rustString('seed'), ns64$1('lamports'), ns64$1('space'), publicKey$7('programId')])
  },
  AdvanceNonceAccount: {
    index: 4,
    layout: struct$4([u32$4('instruction')])
  },
  WithdrawNonceAccount: {
    index: 5,
    layout: struct$4([u32$4('instruction'), ns64$1('lamports')])
  },
  InitializeNonceAccount: {
    index: 6,
    layout: struct$4([u32$4('instruction'), publicKey$7('authorized')])
  },
  AuthorizeNonceAccount: {
    index: 7,
    layout: struct$4([u32$4('instruction'), publicKey$7('authorized')])
  },
  Allocate: {
    index: 8,
    layout: struct$4([u32$4('instruction'), ns64$1('space')])
  },
  AllocateWithSeed: {
    index: 9,
    layout: struct$4([u32$4('instruction'), publicKey$7('base'), rustString('seed'), ns64$1('space'), publicKey$7('programId')])
  },
  AssignWithSeed: {
    index: 10,
    layout: struct$4([u32$4('instruction'), publicKey$7('base'), rustString('seed'), publicKey$7('programId')])
  },
  TransferWithSeed: {
    index: 11,
    layout: struct$4([u32$4('instruction'), u64$5('lamports'), rustString('seed'), publicKey$7('programId')])
  },
  UpgradeNonceAccount: {
    index: 12,
    layout: struct$4([u32$4('instruction')])
  }
});

/**
 * Factory class for transactions to interact with the System program
 */
class SystemProgram {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Public key that identifies the System program
   */

  /**
   * Generate a transaction instruction that creates a new account
   */
  static createAccount(params) {
    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;
    const data = encodeData$1(type, {
      lamports: params.lamports,
      space: params.space,
      programId: toBuffer(params.programId.toBuffer())
    });
    return new TransactionInstruction({
      keys: [{
        pubkey: params.fromPubkey,
        isSigner: true,
        isWritable: true
      }, {
        pubkey: params.newAccountPubkey,
        isSigner: true,
        isWritable: true
      }],
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction instruction that transfers lamports from one account to another
   */
  static transfer(params) {
    let data;
    let keys;
    if ('basePubkey' in params) {
      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;
      data = encodeData$1(type, {
        lamports: BigInt(params.lamports),
        seed: params.seed,
        programId: toBuffer(params.programId.toBuffer())
      });
      keys = [{
        pubkey: params.fromPubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: params.basePubkey,
        isSigner: true,
        isWritable: false
      }, {
        pubkey: params.toPubkey,
        isSigner: false,
        isWritable: true
      }];
    } else {
      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
      data = encodeData$1(type, {
        lamports: BigInt(params.lamports)
      });
      keys = [{
        pubkey: params.fromPubkey,
        isSigner: true,
        isWritable: true
      }, {
        pubkey: params.toPubkey,
        isSigner: false,
        isWritable: true
      }];
    }
    return new TransactionInstruction({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction instruction that assigns an account to a program
   */
  static assign(params) {
    let data;
    let keys;
    if ('basePubkey' in params) {
      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;
      data = encodeData$1(type, {
        base: toBuffer(params.basePubkey.toBuffer()),
        seed: params.seed,
        programId: toBuffer(params.programId.toBuffer())
      });
      keys = [{
        pubkey: params.accountPubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: params.basePubkey,
        isSigner: true,
        isWritable: false
      }];
    } else {
      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;
      data = encodeData$1(type, {
        programId: toBuffer(params.programId.toBuffer())
      });
      keys = [{
        pubkey: params.accountPubkey,
        isSigner: true,
        isWritable: true
      }];
    }
    return new TransactionInstruction({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction instruction that creates a new account at
   *   an address generated with `from`, a seed, and programId
   */
  static createAccountWithSeed(params) {
    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;
    const data = encodeData$1(type, {
      base: toBuffer(params.basePubkey.toBuffer()),
      seed: params.seed,
      lamports: params.lamports,
      space: params.space,
      programId: toBuffer(params.programId.toBuffer())
    });
    let keys = [{
      pubkey: params.fromPubkey,
      isSigner: true,
      isWritable: true
    }, {
      pubkey: params.newAccountPubkey,
      isSigner: false,
      isWritable: true
    }];
    if (!params.basePubkey.equals(params.fromPubkey)) {
      keys.push({
        pubkey: params.basePubkey,
        isSigner: true,
        isWritable: false
      });
    }
    return new TransactionInstruction({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction that creates a new Nonce account
   */
  static createNonceAccount(params) {
    const transaction = new Transaction$3();
    if ('basePubkey' in params && 'seed' in params) {
      transaction.add(SystemProgram.createAccountWithSeed({
        fromPubkey: params.fromPubkey,
        newAccountPubkey: params.noncePubkey,
        basePubkey: params.basePubkey,
        seed: params.seed,
        lamports: params.lamports,
        space: NONCE_ACCOUNT_LENGTH,
        programId: this.programId
      }));
    } else {
      transaction.add(SystemProgram.createAccount({
        fromPubkey: params.fromPubkey,
        newAccountPubkey: params.noncePubkey,
        lamports: params.lamports,
        space: NONCE_ACCOUNT_LENGTH,
        programId: this.programId
      }));
    }
    const initParams = {
      noncePubkey: params.noncePubkey,
      authorizedPubkey: params.authorizedPubkey
    };
    transaction.add(this.nonceInitialize(initParams));
    return transaction;
  }

  /**
   * Generate an instruction to initialize a Nonce account
   */
  static nonceInitialize(params) {
    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;
    const data = encodeData$1(type, {
      authorized: toBuffer(params.authorizedPubkey.toBuffer())
    });
    const instructionData = {
      keys: [{
        pubkey: params.noncePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: false,
        isWritable: false
      }],
      programId: this.programId,
      data
    };
    return new TransactionInstruction(instructionData);
  }

  /**
   * Generate an instruction to advance the nonce in a Nonce account
   */
  static nonceAdvance(params) {
    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;
    const data = encodeData$1(type);
    const instructionData = {
      keys: [{
        pubkey: params.noncePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: params.authorizedPubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    };
    return new TransactionInstruction(instructionData);
  }

  /**
   * Generate a transaction instruction that withdraws lamports from a Nonce account
   */
  static nonceWithdraw(params) {
    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;
    const data = encodeData$1(type, {
      lamports: params.lamports
    });
    return new TransactionInstruction({
      keys: [{
        pubkey: params.noncePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: params.toPubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: params.authorizedPubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction instruction that authorizes a new PublicKey as the authority
   * on a Nonce account.
   */
  static nonceAuthorize(params) {
    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;
    const data = encodeData$1(type, {
      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())
    });
    return new TransactionInstruction({
      keys: [{
        pubkey: params.noncePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: params.authorizedPubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction instruction that allocates space in an account without funding
   */
  static allocate(params) {
    let data;
    let keys;
    if ('basePubkey' in params) {
      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;
      data = encodeData$1(type, {
        base: toBuffer(params.basePubkey.toBuffer()),
        seed: params.seed,
        space: params.space,
        programId: toBuffer(params.programId.toBuffer())
      });
      keys = [{
        pubkey: params.accountPubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: params.basePubkey,
        isSigner: true,
        isWritable: false
      }];
    } else {
      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;
      data = encodeData$1(type, {
        space: params.space
      });
      keys = [{
        pubkey: params.accountPubkey,
        isSigner: true,
        isWritable: true
      }];
    }
    return new TransactionInstruction({
      keys,
      programId: this.programId,
      data
    });
  }
}
SystemProgram.programId = new PublicKey('11111111111111111111111111111111');

// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the
// rest of the Transaction fields
//
// TODO: replace 300 with a proper constant for the size of the other
// Transaction fields
const CHUNK_SIZE = PACKET_DATA_SIZE - 300;

/**
 * Program loader interface
 */
class Loader {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Amount of program data placed in each load Transaction
   */

  /**
   * Minimum number of signatures required to load a program not including
   * retries
   *
   * Can be used to calculate transaction fees
   */
  static getMinNumSignatures(dataLength) {
    return 2 * (
    // Every transaction requires two signatures (payer + program)
    Math.ceil(dataLength / Loader.chunkSize) + 1 +
    // Add one for Create transaction
    1) // Add one for Finalize transaction
    ;
  }

  /**
   * Loads a generic program
   *
   * @param connection The connection to use
   * @param payer System account that pays to load the program
   * @param program Account to load the program into
   * @param programId Public key that identifies the loader
   * @param data Program octets
   * @return true if program was loaded successfully, false if program was already loaded
   */
  static async load(connection, payer, program, programId, data) {
    {
      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);

      // Fetch program account info to check if it has already been created
      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');
      let transaction = null;
      if (programInfo !== null) {
        if (programInfo.executable) {
          console.error('Program load failed, account is already executable');
          return false;
        }
        if (programInfo.data.length !== data.length) {
          transaction = transaction || new Transaction$3();
          transaction.add(SystemProgram.allocate({
            accountPubkey: program.publicKey,
            space: data.length
          }));
        }
        if (!programInfo.owner.equals(programId)) {
          transaction = transaction || new Transaction$3();
          transaction.add(SystemProgram.assign({
            accountPubkey: program.publicKey,
            programId
          }));
        }
        if (programInfo.lamports < balanceNeeded) {
          transaction = transaction || new Transaction$3();
          transaction.add(SystemProgram.transfer({
            fromPubkey: payer.publicKey,
            toPubkey: program.publicKey,
            lamports: balanceNeeded - programInfo.lamports
          }));
        }
      } else {
        transaction = new Transaction$3().add(SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: program.publicKey,
          lamports: balanceNeeded > 0 ? balanceNeeded : 1,
          space: data.length,
          programId
        }));
      }

      // If the account is already created correctly, skip this step
      // and proceed directly to loading instructions
      if (transaction !== null) {
        await sendAndConfirmTransaction(connection, transaction, [payer, program], {
          commitment: 'confirmed'
        });
      }
    }
    const dataLayout = struct$4([u32$4('instruction'), u32$4('offset'), u32$4('bytesLength'), u32$4('bytesLengthPadding'), seq(u8$4('byte'), offset$1(u32$4(), -8), 'bytes')]);
    const chunkSize = Loader.chunkSize;
    let offset = 0;
    let array = data;
    let transactions = [];
    while (array.length > 0) {
      const bytes = array.slice(0, chunkSize);
      const data = Buffer.alloc(chunkSize + 16);
      dataLayout.encode({
        instruction: 0,
        // Load instruction
        offset,
        bytes: bytes,
        bytesLength: 0,
        bytesLengthPadding: 0
      }, data);
      const transaction = new Transaction$3().add({
        keys: [{
          pubkey: program.publicKey,
          isSigner: true,
          isWritable: true
        }],
        programId,
        data
      });
      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {
        commitment: 'confirmed'
      }));

      // Delay between sends in an attempt to reduce rate limit errors
      if (connection._rpcEndpoint.includes('solana.com')) {
        const REQUESTS_PER_SECOND = 4;
        await sleep$1(1000 / REQUESTS_PER_SECOND);
      }
      offset += chunkSize;
      array = array.slice(chunkSize);
    }
    await Promise.all(transactions);

    // Finalize the account loaded with program data for execution
    {
      const dataLayout = struct$4([u32$4('instruction')]);
      const data = Buffer.alloc(dataLayout.span);
      dataLayout.encode({
        instruction: 1 // Finalize instruction
      }, data);
      const transaction = new Transaction$3().add({
        keys: [{
          pubkey: program.publicKey,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }],
        programId,
        data
      });
      const deployCommitment = 'processed';
      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {
        preflightCommitment: deployCommitment
      });
      const {
        context,
        value
      } = await connection.confirmTransaction({
        signature: finalizeSignature,
        lastValidBlockHeight: transaction.lastValidBlockHeight,
        blockhash: transaction.recentBlockhash
      }, deployCommitment);
      if (value.err) {
        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);
      }
      // We prevent programs from being usable until the slot after their deployment.
      // See https://github.com/solana-labs/solana/pull/29654
      while (true // eslint-disable-line no-constant-condition
      ) {
        try {
          const currentSlot = await connection.getSlot({
            commitment: deployCommitment
          });
          if (currentSlot > context.slot) {
            break;
          }
        } catch {
          /* empty */
        }
        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));
      }
    }

    // success
    return true;
  }
}
Loader.chunkSize = CHUNK_SIZE;

/**
 * @deprecated Deprecated since Solana v1.17.20.
 */
const BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');

/**
 * Factory class for transactions to interact with a program loader
 *
 * @deprecated Deprecated since Solana v1.17.20.
 */
class BpfLoader {
  /**
   * Minimum number of signatures required to load a program not including
   * retries
   *
   * Can be used to calculate transaction fees
   */
  static getMinNumSignatures(dataLength) {
    return Loader.getMinNumSignatures(dataLength);
  }

  /**
   * Load a SBF program
   *
   * @param connection The connection to use
   * @param payer Account that will pay program loading fees
   * @param program Account to load the program into
   * @param elf The entire ELF containing the SBF program
   * @param loaderProgramId The program id of the BPF loader to use
   * @return true if program was loaded successfully, false if program was already loaded
   */
  static load(connection, payer, program, elf, loaderProgramId) {
    return Loader.load(connection, payer, program, loaderProgramId, elf);
  }
}

function getDefaultExportFromCjs$2 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var fastStableStringify$1;
var hasRequiredFastStableStringify;

function requireFastStableStringify () {
	if (hasRequiredFastStableStringify) return fastStableStringify$1;
	hasRequiredFastStableStringify = 1;
	var objToString = Object.prototype.toString;
	var objKeys = Object.keys || function(obj) {
			var keys = [];
			for (var name in obj) {
				keys.push(name);
			}
			return keys;
		};

	function stringify(val, isArrayProp) {
		var i, max, str, keys, key, propVal, toStr;
		if (val === true) {
			return "true";
		}
		if (val === false) {
			return "false";
		}
		switch (typeof val) {
			case "object":
				if (val === null) {
					return null;
				} else if (val.toJSON && typeof val.toJSON === "function") {
					return stringify(val.toJSON(), isArrayProp);
				} else {
					toStr = objToString.call(val);
					if (toStr === "[object Array]") {
						str = '[';
						max = val.length - 1;
						for(i = 0; i < max; i++) {
							str += stringify(val[i], true) + ',';
						}
						if (max > -1) {
							str += stringify(val[i], true);
						}
						return str + ']';
					} else if (toStr === "[object Object]") {
						// only object is left
						keys = objKeys(val).sort();
						max = keys.length;
						str = "";
						i = 0;
						while (i < max) {
							key = keys[i];
							propVal = stringify(val[key], false);
							if (propVal !== undefined) {
								if (str) {
									str += ',';
								}
								str += JSON.stringify(key) + ':' + propVal;
							}
							i++;
						}
						return '{' + str + '}';
					} else {
						return JSON.stringify(val);
					}
				}
			case "function":
			case "undefined":
				return isArrayProp ? null : undefined;
			case "string":
				return JSON.stringify(val);
			default:
				return isFinite(val) ? val : null;
		}
	}

	fastStableStringify$1 = function(val) {
		var returnVal = stringify(val, false);
		if (returnVal !== undefined) {
			return ''+ returnVal;
		}
	};
	return fastStableStringify$1;
}

var fastStableStringifyExports = /*@__PURE__*/ requireFastStableStringify();
var fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs$2(fastStableStringifyExports);

const MINIMUM_SLOT_PER_EPOCH = 32;

// Returns the number of trailing zeros in the binary representation of self.
function trailingZeros(n) {
  let trailingZeros = 0;
  while (n > 1) {
    n /= 2;
    trailingZeros++;
  }
  return trailingZeros;
}

// Returns the smallest power of two greater than or equal to n
function nextPowerOfTwo(n) {
  if (n === 0) return 1;
  n--;
  n |= n >> 1;
  n |= n >> 2;
  n |= n >> 4;
  n |= n >> 8;
  n |= n >> 16;
  n |= n >> 32;
  return n + 1;
}

/**
 * Epoch schedule
 * (see https://docs.solana.com/terminology#epoch)
 * Can be retrieved with the {@link Connection.getEpochSchedule} method
 */
class EpochSchedule {
  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {
    /** The maximum number of slots in each epoch */
    this.slotsPerEpoch = void 0;
    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */
    this.leaderScheduleSlotOffset = void 0;
    /** Indicates whether epochs start short and grow */
    this.warmup = void 0;
    /** The first epoch with `slotsPerEpoch` slots */
    this.firstNormalEpoch = void 0;
    /** The first slot of `firstNormalEpoch` */
    this.firstNormalSlot = void 0;
    this.slotsPerEpoch = slotsPerEpoch;
    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;
    this.warmup = warmup;
    this.firstNormalEpoch = firstNormalEpoch;
    this.firstNormalSlot = firstNormalSlot;
  }
  getEpoch(slot) {
    return this.getEpochAndSlotIndex(slot)[0];
  }
  getEpochAndSlotIndex(slot) {
    if (slot < this.firstNormalSlot) {
      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;
      const epochLen = this.getSlotsInEpoch(epoch);
      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);
      return [epoch, slotIndex];
    } else {
      const normalSlotIndex = slot - this.firstNormalSlot;
      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);
      const epoch = this.firstNormalEpoch + normalEpochIndex;
      const slotIndex = normalSlotIndex % this.slotsPerEpoch;
      return [epoch, slotIndex];
    }
  }
  getFirstSlotInEpoch(epoch) {
    if (epoch <= this.firstNormalEpoch) {
      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;
    } else {
      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;
    }
  }
  getLastSlotInEpoch(epoch) {
    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;
  }
  getSlotsInEpoch(epoch) {
    if (epoch < this.firstNormalEpoch) {
      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));
    } else {
      return this.slotsPerEpoch;
    }
  }
}

var fetchImpl = globalThis.fetch;

class RpcWebSocketClient extends CommonClient {
  constructor(address, options, generate_request_id) {
    const webSocketFactory = url => {
      const rpc = WebSocket(url, {
        autoconnect: true,
        max_reconnects: 5,
        reconnect: true,
        reconnect_interval: 1000,
        ...options
      });
      if ('socket' in rpc) {
        this.underlyingSocket = rpc.socket;
      } else {
        this.underlyingSocket = rpc;
      }
      return rpc;
    };
    super(webSocketFactory, address, options, generate_request_id);
    this.underlyingSocket = void 0;
  }
  call(...args) {
    const readyState = this.underlyingSocket?.readyState;
    if (readyState === 1 /* WebSocket.OPEN */) {
      return super.call(...args);
    }
    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));
  }
  notify(...args) {
    const readyState = this.underlyingSocket?.readyState;
    if (readyState === 1 /* WebSocket.OPEN */) {
      return super.notify(...args);
    }
    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));
  }
}

/**
 * @internal
 */

/**
 * Decode account data buffer using an AccountType
 * @internal
 */
function decodeData(type, data) {
  let decoded;
  try {
    decoded = type.layout.decode(data);
  } catch (err) {
    throw new Error('invalid instruction; ' + err);
  }
  if (decoded.typeIndex !== type.index) {
    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);
  }
  return decoded;
}

/// The serialized size of lookup table metadata
const LOOKUP_TABLE_META_SIZE = 56;
class AddressLookupTableAccount {
  constructor(args) {
    this.key = void 0;
    this.state = void 0;
    this.key = args.key;
    this.state = args.state;
  }
  isActive() {
    const U64_MAX = BigInt('0xffffffffffffffff');
    return this.state.deactivationSlot === U64_MAX;
  }
  static deserialize(accountData) {
    const meta = decodeData(LookupTableMetaLayout, accountData);
    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;
    assert$3(serializedAddressesLen >= 0, 'lookup table is invalid');
    assert$3(serializedAddressesLen % 32 === 0, 'lookup table is invalid');
    const numSerializedAddresses = serializedAddressesLen / 32;
    const {
      addresses
    } = struct$4([seq(publicKey$7(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));
    return {
      deactivationSlot: meta.deactivationSlot,
      lastExtendedSlot: meta.lastExtendedSlot,
      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,
      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,
      addresses: addresses.map(address => new PublicKey(address))
    };
  }
}
const LookupTableMetaLayout = {
  index: 1,
  layout: struct$4([u32$4('typeIndex'), u64$5('deactivationSlot'), nu64$1('lastExtendedSlot'), u8$4('lastExtendedStartIndex'), u8$4(),
  // option
  seq(publicKey$7(), offset$1(u8$4(), -1), 'authority')])
};

const URL_RE = /^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i;
function makeWebsocketUrl(endpoint) {
  const matches = endpoint.match(URL_RE);
  if (matches == null) {
    throw TypeError(`Failed to validate endpoint URL \`${endpoint}\``);
  }
  const [_,
  // eslint-disable-line @typescript-eslint/no-unused-vars
  hostish, portWithColon, rest] = matches;
  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';
  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);
  const websocketPort =
  // Only shift the port by +1 as a convention for ws(s) only if given endpoint
  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming
  // we're directly trying to connect to agave-validator's ws listening port.
  // When the endpoint omits the port, we're connecting to the protocol
  // default ports: http(80) or https(443) and it's assumed we're behind a reverse
  // proxy which manages WebSocket upgrade and backend port redirection.
  startPort == null ? '' : `:${startPort + 1}`;
  return `${protocol}//${hostish}${websocketPort}${rest}`;
}

const PublicKeyFromString = coerce$1(instance(PublicKey), string$9(), value => new PublicKey(value));
const RawAccountDataResult = tuple$3([string$9(), literal$1('base64')]);
const BufferFromRawAccountData = coerce$1(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));

/**
 * Attempt to use a recent blockhash for up to 30 seconds
 * @internal
 */
const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;

/**
 * HACK.
 * Copied from rpc-websockets/dist/lib/client.
 * Otherwise, `yarn build` fails with:
 * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d
 */

/** @internal */
/** @internal */
/** @internal */
/** @internal */

/** @internal */
/**
 * @internal
 * Every subscription contains the args used to open the subscription with
 * the server, and a list of callers interested in notifications.
 */

/**
 * @internal
 * A subscription may be in various states of connectedness. Only when it is
 * fully connected will it have a server subscription id associated with it.
 * This id can be returned to the server to unsubscribe the client entirely.
 */

/**
 * A type that encapsulates a subscription's RPC method
 * names and notification (callback) signature.
 */

/**
 * @internal
 * Utility type that keeps tagged unions intact while omitting properties.
 */

/**
 * @internal
 * This type represents a single subscribable 'topic.' It's made up of:
 *
 * - The args used to open the subscription with the server,
 * - The state of the subscription, in terms of its connectedness, and
 * - The set of callbacks to call when the server publishes notifications
 *
 * This record gets indexed by `SubscriptionConfigHash` and is used to
 * set up subscriptions, fan out notifications, and track subscription state.
 */

/**
 * @internal
 */

/**
 * Extra contextual information for RPC responses
 */

/**
 * Options for sending transactions
 */

/**
 * Options for confirming transactions
 */

/**
 * Options for getConfirmedSignaturesForAddress2
 */

/**
 * Options for getSignaturesForAddress
 */

/**
 * RPC Response with extra contextual information
 */

/**
 * A strategy for confirming transactions that uses the last valid
 * block height for a given blockhash to check for transaction expiration.
 */

/**
 * A strategy for confirming durable nonce transactions.
 */

/**
 * Properties shared by all transaction confirmation strategies
 */

/**
 * This type represents all transaction confirmation strategies
 */

/* @internal */
function assertEndpointUrl(putativeUrl) {
  if (/^https?:/.test(putativeUrl) === false) {
    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');
  }
  return putativeUrl;
}

/** @internal */
function extractCommitmentFromConfig(commitmentOrConfig) {
  let commitment;
  let config;
  if (typeof commitmentOrConfig === 'string') {
    commitment = commitmentOrConfig;
  } else if (commitmentOrConfig) {
    const {
      commitment: specifiedCommitment,
      ...specifiedConfig
    } = commitmentOrConfig;
    commitment = specifiedCommitment;
    config = specifiedConfig;
  }
  return {
    commitment,
    config
  };
}

/**
 * @internal
 */
function applyDefaultMemcmpEncodingToFilters(filters) {
  return filters.map(filter => 'memcmp' in filter ? {
    ...filter,
    memcmp: {
      ...filter.memcmp,
      encoding: filter.memcmp.encoding ?? 'base58'
    }
  } : filter);
}

/**
 * @internal
 */
function createRpcResult$1(result) {
  return union$2([type$1({
    jsonrpc: literal$1('2.0'),
    id: string$9(),
    result
  }), type$1({
    jsonrpc: literal$1('2.0'),
    id: string$9(),
    error: type$1({
      code: unknown$1(),
      message: string$9(),
      data: optional$1(any$1())
    })
  })]);
}
const UnknownRpcResult$1 = createRpcResult$1(unknown$1());

/**
 * @internal
 */
function jsonRpcResult$1(schema) {
  return coerce$1(createRpcResult$1(schema), UnknownRpcResult$1, value => {
    if ('error' in value) {
      return value;
    } else {
      return {
        ...value,
        result: create$1(value.result, schema)
      };
    }
  });
}

/**
 * @internal
 */
function jsonRpcResultAndContext$1(value) {
  return jsonRpcResult$1(type$1({
    context: type$1({
      slot: number$6()
    }),
    value
  }));
}

/**
 * @internal
 */
function notificationResultAndContext(value) {
  return type$1({
    context: type$1({
      slot: number$6()
    }),
    value
  });
}

/**
 * @internal
 */
function versionedMessageFromResponse(version, response) {
  if (version === 0) {
    return new MessageV0({
      header: response.header,
      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),
      recentBlockhash: response.recentBlockhash,
      compiledInstructions: response.instructions.map(ix => ({
        programIdIndex: ix.programIdIndex,
        accountKeyIndexes: ix.accounts,
        data: bs58$7.decode(ix.data)
      })),
      addressTableLookups: response.addressTableLookups
    });
  } else {
    return new Message(response);
  }
}

/**
 * The level of commitment desired when querying state
 * <pre>
 *   'processed': Query the most recent block which has reached 1 confirmation by the connected node
 *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster
 *   'finalized': Query the most recent block which has been finalized by the cluster
 * </pre>
 */

// Deprecated as of v1.5.5

/**
 * A subset of Commitment levels, which are at least optimistically confirmed
 * <pre>
 *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster
 *   'finalized': Query the most recent block which has been finalized by the cluster
 * </pre>
 */

/**
 * Filter for largest accounts query
 * <pre>
 *   'circulating':    Return the largest accounts that are part of the circulating supply
 *   'nonCirculating': Return the largest accounts that are not part of the circulating supply
 * </pre>
 */

/**
 * Configuration object for changing `getAccountInfo` query behavior
 */

/**
 * Configuration object for changing `getBalance` query behavior
 */

/**
 * Configuration object for changing `getBlock` query behavior
 */

/**
 * Configuration object for changing `getBlock` query behavior
 */

/**
 * Configuration object for changing `getStakeMinimumDelegation` query behavior
 */

/**
 * Configuration object for changing `getBlockHeight` query behavior
 */

/**
 * Configuration object for changing `getEpochInfo` query behavior
 */

/**
 * Configuration object for changing `getInflationReward` query behavior
 */

/**
 * Configuration object for changing `getLatestBlockhash` query behavior
 */

/**
 * Configuration object for changing `isBlockhashValid` query behavior
 */

/**
 * Configuration object for changing `getSlot` query behavior
 */

/**
 * Configuration object for changing `getSlotLeader` query behavior
 */

/**
 * Configuration object for changing `getTransaction` query behavior
 */

/**
 * Configuration object for changing `getTransaction` query behavior
 */

/**
 * Configuration object for changing `getLargestAccounts` query behavior
 */

/**
 * Configuration object for changing `getSupply` request behavior
 */

/**
 * Configuration object for changing query behavior
 */

/**
 * Information describing a cluster node
 */

/**
 * Information describing a vote account
 */

/**
 * A collection of cluster vote accounts
 */

/**
 * Network Inflation
 * (see https://docs.solana.com/implemented-proposals/ed_overview)
 */

const GetInflationGovernorResult = type$1({
  foundation: number$6(),
  foundationTerm: number$6(),
  initial: number$6(),
  taper: number$6(),
  terminal: number$6()
});

/**
 * The inflation reward for an epoch
 */

/**
 * Expected JSON RPC response for the "getInflationReward" message
 */
const GetInflationRewardResult = jsonRpcResult$1(array$7(nullable$4(type$1({
  epoch: number$6(),
  effectiveSlot: number$6(),
  amount: number$6(),
  postBalance: number$6(),
  commission: optional$1(nullable$4(number$6()))
}))));

/**
 * Configuration object for changing `getRecentPrioritizationFees` query behavior
 */

/**
 * Expected JSON RPC response for the "getRecentPrioritizationFees" message
 */
const GetRecentPrioritizationFeesResult = array$7(type$1({
  slot: number$6(),
  prioritizationFee: number$6()
}));
/**
 * Expected JSON RPC response for the "getInflationRate" message
 */
const GetInflationRateResult = type$1({
  total: number$6(),
  validator: number$6(),
  foundation: number$6(),
  epoch: number$6()
});

/**
 * Information about the current epoch
 */

const GetEpochInfoResult = type$1({
  epoch: number$6(),
  slotIndex: number$6(),
  slotsInEpoch: number$6(),
  absoluteSlot: number$6(),
  blockHeight: optional$1(number$6()),
  transactionCount: optional$1(number$6())
});
const GetEpochScheduleResult = type$1({
  slotsPerEpoch: number$6(),
  leaderScheduleSlotOffset: number$6(),
  warmup: boolean$6(),
  firstNormalEpoch: number$6(),
  firstNormalSlot: number$6()
});

/**
 * Leader schedule
 * (see https://docs.solana.com/terminology#leader-schedule)
 */

const GetLeaderScheduleResult = record(string$9(), array$7(number$6()));

/**
 * Transaction error or null
 */
const TransactionErrorResult = nullable$4(union$2([type$1({}), string$9()]));

/**
 * Signature status for a transaction
 */
const SignatureStatusResult = type$1({
  err: TransactionErrorResult
});

/**
 * Transaction signature received notification
 */
const SignatureReceivedResult = literal$1('receivedSignature');

/**
 * Version info for a node
 */

const VersionResult = type$1({
  'solana-core': string$9(),
  'feature-set': optional$1(number$6())
});
const ParsedInstructionStruct = type$1({
  program: string$9(),
  programId: PublicKeyFromString,
  parsed: unknown$1()
});
const PartiallyDecodedInstructionStruct = type$1({
  programId: PublicKeyFromString,
  accounts: array$7(PublicKeyFromString),
  data: string$9()
});
const SimulatedTransactionResponseStruct$1 = jsonRpcResultAndContext$1(type$1({
  err: nullable$4(union$2([type$1({}), string$9()])),
  logs: nullable$4(array$7(string$9())),
  accounts: optional$1(nullable$4(array$7(nullable$4(type$1({
    executable: boolean$6(),
    owner: string$9(),
    lamports: number$6(),
    data: array$7(string$9()),
    rentEpoch: optional$1(number$6())
  }))))),
  unitsConsumed: optional$1(number$6()),
  returnData: optional$1(nullable$4(type$1({
    programId: string$9(),
    data: tuple$3([string$9(), literal$1('base64')])
  }))),
  innerInstructions: optional$1(nullable$4(array$7(type$1({
    index: number$6(),
    instructions: array$7(union$2([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))
  }))))
}));

/**
 * Metadata for a parsed confirmed transaction on the ledger
 *
 * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.
 */

/**
 * Collection of addresses loaded by a transaction using address table lookups
 */

/**
 * Metadata for a parsed transaction on the ledger
 */

/**
 * Metadata for a confirmed transaction on the ledger
 */

/**
 * A processed transaction from the RPC API
 */

/**
 * A processed transaction from the RPC API
 */

/**
 * A processed transaction message from the RPC API
 */

/**
 * A confirmed transaction on the ledger
 *
 * @deprecated Deprecated since RPC v1.8.0.
 */

/**
 * A partially decoded transaction instruction
 */

/**
 * A parsed transaction message account
 */

/**
 * A parsed transaction instruction
 */

/**
 * A parsed address table lookup
 */

/**
 * A parsed transaction message
 */

/**
 * A parsed transaction
 */

/**
 * A parsed and confirmed transaction on the ledger
 *
 * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.
 */

/**
 * A parsed transaction on the ledger with meta
 */

/**
 * A processed block fetched from the RPC API
 */

/**
 * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`
 */

/**
 * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`
 */

/**
 * A block with parsed transactions
 */

/**
 * A block with parsed transactions where the `transactionDetails` mode is `accounts`
 */

/**
 * A block with parsed transactions where the `transactionDetails` mode is `none`
 */

/**
 * A processed block fetched from the RPC API
 */

/**
 * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`
 */

/**
 * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`
 */

/**
 * A confirmed block on the ledger
 *
 * @deprecated Deprecated since RPC v1.8.0.
 */

/**
 * A Block on the ledger with signatures only
 */

/**
 * recent block production information
 */

/**
 * Expected JSON RPC response for the "getBlockProduction" message
 */
const BlockProductionResponseStruct = jsonRpcResultAndContext$1(type$1({
  byIdentity: record(string$9(), array$7(number$6())),
  range: type$1({
    firstSlot: number$6(),
    lastSlot: number$6()
  })
}));

/**
 * A performance sample
 */

function createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {
  const fetch = customFetch ? customFetch : fetchImpl;
  let agent;
  {
    if (httpAgent != null) {
      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');
    }
  }
  let fetchWithMiddleware;
  if (fetchMiddleware) {
    fetchWithMiddleware = async (info, init) => {
      const modifiedFetchArgs = await new Promise((resolve, reject) => {
        try {
          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));
        } catch (error) {
          reject(error);
        }
      });
      return await fetch(...modifiedFetchArgs);
    };
  }
  const clientBrowser = new RpcClient(async (request, callback) => {
    const options = {
      method: 'POST',
      body: request,
      agent,
      headers: Object.assign({
        'Content-Type': 'application/json'
      }, httpHeaders || {}, COMMON_HTTP_HEADERS)
    };
    try {
      let too_many_requests_retries = 5;
      let res;
      let waitTime = 500;
      for (;;) {
        if (fetchWithMiddleware) {
          res = await fetchWithMiddleware(url, options);
        } else {
          res = await fetch(url, options);
        }
        if (res.status !== 429 /* Too many requests */) {
          break;
        }
        if (disableRetryOnRateLimit === true) {
          break;
        }
        too_many_requests_retries -= 1;
        if (too_many_requests_retries === 0) {
          break;
        }
        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);
        await sleep$1(waitTime);
        waitTime *= 2;
      }
      const text = await res.text();
      if (res.ok) {
        callback(null, text);
      } else {
        callback(new Error(`${res.status} ${res.statusText}: ${text}`));
      }
    } catch (err) {
      if (err instanceof Error) callback(err);
    }
  }, {});
  return clientBrowser;
}
function createRpcRequest(client) {
  return (method, args) => {
    return new Promise((resolve, reject) => {
      client.request(method, args, (err, response) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(response);
      });
    });
  };
}
function createRpcBatchRequest(client) {
  return requests => {
    return new Promise((resolve, reject) => {
      // Do nothing if requests is empty
      if (requests.length === 0) resolve([]);
      const batch = requests.map(params => {
        return client.request(params.methodName, params.args);
      });
      client.request(batch, (err, response) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(response);
      });
    });
  };
}

/**
 * Expected JSON RPC response for the "getInflationGovernor" message
 */
const GetInflationGovernorRpcResult = jsonRpcResult$1(GetInflationGovernorResult);

/**
 * Expected JSON RPC response for the "getInflationRate" message
 */
const GetInflationRateRpcResult = jsonRpcResult$1(GetInflationRateResult);

/**
 * Expected JSON RPC response for the "getRecentPrioritizationFees" message
 */
const GetRecentPrioritizationFeesRpcResult = jsonRpcResult$1(GetRecentPrioritizationFeesResult);

/**
 * Expected JSON RPC response for the "getEpochInfo" message
 */
const GetEpochInfoRpcResult = jsonRpcResult$1(GetEpochInfoResult);

/**
 * Expected JSON RPC response for the "getEpochSchedule" message
 */
const GetEpochScheduleRpcResult = jsonRpcResult$1(GetEpochScheduleResult);

/**
 * Expected JSON RPC response for the "getLeaderSchedule" message
 */
const GetLeaderScheduleRpcResult = jsonRpcResult$1(GetLeaderScheduleResult);

/**
 * Expected JSON RPC response for the "minimumLedgerSlot" and "getFirstAvailableBlock" messages
 */
const SlotRpcResult = jsonRpcResult$1(number$6());

/**
 * Supply
 */

/**
 * Expected JSON RPC response for the "getSupply" message
 */
const GetSupplyRpcResult = jsonRpcResultAndContext$1(type$1({
  total: number$6(),
  circulating: number$6(),
  nonCirculating: number$6(),
  nonCirculatingAccounts: array$7(PublicKeyFromString)
}));

/**
 * Token amount object which returns a token amount in different formats
 * for various client use cases.
 */

/**
 * Expected JSON RPC structure for token amounts
 */
const TokenAmountResult = type$1({
  amount: string$9(),
  uiAmount: nullable$4(number$6()),
  decimals: number$6(),
  uiAmountString: optional$1(string$9())
});

/**
 * Token address and balance.
 */

/**
 * Expected JSON RPC response for the "getTokenLargestAccounts" message
 */
const GetTokenLargestAccountsResult = jsonRpcResultAndContext$1(array$7(type$1({
  address: PublicKeyFromString,
  amount: string$9(),
  uiAmount: nullable$4(number$6()),
  decimals: number$6(),
  uiAmountString: optional$1(string$9())
})));

/**
 * Expected JSON RPC response for the "getTokenAccountsByOwner" message
 */
const GetTokenAccountsByOwner = jsonRpcResultAndContext$1(array$7(type$1({
  pubkey: PublicKeyFromString,
  account: type$1({
    executable: boolean$6(),
    owner: PublicKeyFromString,
    lamports: number$6(),
    data: BufferFromRawAccountData,
    rentEpoch: number$6()
  })
})));
const ParsedAccountDataResult = type$1({
  program: string$9(),
  parsed: unknown$1(),
  space: number$6()
});

/**
 * Expected JSON RPC response for the "getTokenAccountsByOwner" message with parsed data
 */
const GetParsedTokenAccountsByOwner = jsonRpcResultAndContext$1(array$7(type$1({
  pubkey: PublicKeyFromString,
  account: type$1({
    executable: boolean$6(),
    owner: PublicKeyFromString,
    lamports: number$6(),
    data: ParsedAccountDataResult,
    rentEpoch: number$6()
  })
})));

/**
 * Pair of an account address and its balance
 */

/**
 * Expected JSON RPC response for the "getLargestAccounts" message
 */
const GetLargestAccountsRpcResult = jsonRpcResultAndContext$1(array$7(type$1({
  lamports: number$6(),
  address: PublicKeyFromString
})));

/**
 * @internal
 */
const AccountInfoResult = type$1({
  executable: boolean$6(),
  owner: PublicKeyFromString,
  lamports: number$6(),
  data: BufferFromRawAccountData,
  rentEpoch: number$6()
});

/**
 * @internal
 */
const KeyedAccountInfoResult = type$1({
  pubkey: PublicKeyFromString,
  account: AccountInfoResult
});
const ParsedOrRawAccountData = coerce$1(union$2([instance(Buffer), ParsedAccountDataResult]), union$2([RawAccountDataResult, ParsedAccountDataResult]), value => {
  if (Array.isArray(value)) {
    return create$1(value, BufferFromRawAccountData);
  } else {
    return value;
  }
});

/**
 * @internal
 */
const ParsedAccountInfoResult = type$1({
  executable: boolean$6(),
  owner: PublicKeyFromString,
  lamports: number$6(),
  data: ParsedOrRawAccountData,
  rentEpoch: number$6()
});
const KeyedParsedAccountInfoResult = type$1({
  pubkey: PublicKeyFromString,
  account: ParsedAccountInfoResult
});

/**
 * @internal
 */
const StakeActivationResult = type$1({
  state: union$2([literal$1('active'), literal$1('inactive'), literal$1('activating'), literal$1('deactivating')]),
  active: number$6(),
  inactive: number$6()
});

/**
 * Expected JSON RPC response for the "getConfirmedSignaturesForAddress2" message
 */

const GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult$1(array$7(type$1({
  signature: string$9(),
  slot: number$6(),
  err: TransactionErrorResult,
  memo: nullable$4(string$9()),
  blockTime: optional$1(nullable$4(number$6()))
})));

/**
 * Expected JSON RPC response for the "getSignaturesForAddress" message
 */
const GetSignaturesForAddressRpcResult = jsonRpcResult$1(array$7(type$1({
  signature: string$9(),
  slot: number$6(),
  err: TransactionErrorResult,
  memo: nullable$4(string$9()),
  blockTime: optional$1(nullable$4(number$6()))
})));

/***
 * Expected JSON RPC response for the "accountNotification" message
 */
const AccountNotificationResult = type$1({
  subscription: number$6(),
  result: notificationResultAndContext(AccountInfoResult)
});

/**
 * @internal
 */
const ProgramAccountInfoResult = type$1({
  pubkey: PublicKeyFromString,
  account: AccountInfoResult
});

/***
 * Expected JSON RPC response for the "programNotification" message
 */
const ProgramAccountNotificationResult = type$1({
  subscription: number$6(),
  result: notificationResultAndContext(ProgramAccountInfoResult)
});

/**
 * @internal
 */
const SlotInfoResult = type$1({
  parent: number$6(),
  slot: number$6(),
  root: number$6()
});

/**
 * Expected JSON RPC response for the "slotNotification" message
 */
const SlotNotificationResult = type$1({
  subscription: number$6(),
  result: SlotInfoResult
});

/**
 * Slot updates which can be used for tracking the live progress of a cluster.
 * - `"firstShredReceived"`: connected node received the first shred of a block.
 * Indicates that a new block that is being produced.
 * - `"completed"`: connected node has received all shreds of a block. Indicates
 * a block was recently produced.
 * - `"optimisticConfirmation"`: block was optimistically confirmed by the
 * cluster. It is not guaranteed that an optimistic confirmation notification
 * will be sent for every finalized blocks.
 * - `"root"`: the connected node rooted this block.
 * - `"createdBank"`: the connected node has started validating this block.
 * - `"frozen"`: the connected node has validated this block.
 * - `"dead"`: the connected node failed to validate this block.
 */

/**
 * @internal
 */
const SlotUpdateResult = union$2([type$1({
  type: union$2([literal$1('firstShredReceived'), literal$1('completed'), literal$1('optimisticConfirmation'), literal$1('root')]),
  slot: number$6(),
  timestamp: number$6()
}), type$1({
  type: literal$1('createdBank'),
  parent: number$6(),
  slot: number$6(),
  timestamp: number$6()
}), type$1({
  type: literal$1('frozen'),
  slot: number$6(),
  timestamp: number$6(),
  stats: type$1({
    numTransactionEntries: number$6(),
    numSuccessfulTransactions: number$6(),
    numFailedTransactions: number$6(),
    maxTransactionsPerEntry: number$6()
  })
}), type$1({
  type: literal$1('dead'),
  slot: number$6(),
  timestamp: number$6(),
  err: string$9()
})]);

/**
 * Expected JSON RPC response for the "slotsUpdatesNotification" message
 */
const SlotUpdateNotificationResult = type$1({
  subscription: number$6(),
  result: SlotUpdateResult
});

/**
 * Expected JSON RPC response for the "signatureNotification" message
 */
const SignatureNotificationResult = type$1({
  subscription: number$6(),
  result: notificationResultAndContext(union$2([SignatureStatusResult, SignatureReceivedResult]))
});

/**
 * Expected JSON RPC response for the "rootNotification" message
 */
const RootNotificationResult = type$1({
  subscription: number$6(),
  result: number$6()
});
const ContactInfoResult = type$1({
  pubkey: string$9(),
  gossip: nullable$4(string$9()),
  tpu: nullable$4(string$9()),
  rpc: nullable$4(string$9()),
  version: nullable$4(string$9())
});
const VoteAccountInfoResult = type$1({
  votePubkey: string$9(),
  nodePubkey: string$9(),
  activatedStake: number$6(),
  epochVoteAccount: boolean$6(),
  epochCredits: array$7(tuple$3([number$6(), number$6(), number$6()])),
  commission: number$6(),
  lastVote: number$6(),
  rootSlot: nullable$4(number$6())
});

/**
 * Expected JSON RPC response for the "getVoteAccounts" message
 */
const GetVoteAccounts = jsonRpcResult$1(type$1({
  current: array$7(VoteAccountInfoResult),
  delinquent: array$7(VoteAccountInfoResult)
}));
const ConfirmationStatus = union$2([literal$1('processed'), literal$1('confirmed'), literal$1('finalized')]);
const SignatureStatusResponse = type$1({
  slot: number$6(),
  confirmations: nullable$4(number$6()),
  err: TransactionErrorResult,
  confirmationStatus: optional$1(ConfirmationStatus)
});

/**
 * Expected JSON RPC response for the "getSignatureStatuses" message
 */
const GetSignatureStatusesRpcResult = jsonRpcResultAndContext$1(array$7(nullable$4(SignatureStatusResponse)));

/**
 * Expected JSON RPC response for the "getMinimumBalanceForRentExemption" message
 */
const GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult$1(number$6());
const AddressTableLookupStruct = type$1({
  accountKey: PublicKeyFromString,
  writableIndexes: array$7(number$6()),
  readonlyIndexes: array$7(number$6())
});
const ConfirmedTransactionResult = type$1({
  signatures: array$7(string$9()),
  message: type$1({
    accountKeys: array$7(string$9()),
    header: type$1({
      numRequiredSignatures: number$6(),
      numReadonlySignedAccounts: number$6(),
      numReadonlyUnsignedAccounts: number$6()
    }),
    instructions: array$7(type$1({
      accounts: array$7(number$6()),
      data: string$9(),
      programIdIndex: number$6()
    })),
    recentBlockhash: string$9(),
    addressTableLookups: optional$1(array$7(AddressTableLookupStruct))
  })
});
const AnnotatedAccountKey = type$1({
  pubkey: PublicKeyFromString,
  signer: boolean$6(),
  writable: boolean$6(),
  source: optional$1(union$2([literal$1('transaction'), literal$1('lookupTable')]))
});
const ConfirmedTransactionAccountsModeResult = type$1({
  accountKeys: array$7(AnnotatedAccountKey),
  signatures: array$7(string$9())
});
const ParsedInstructionResult = type$1({
  parsed: unknown$1(),
  program: string$9(),
  programId: PublicKeyFromString
});
const RawInstructionResult = type$1({
  accounts: array$7(PublicKeyFromString),
  data: string$9(),
  programId: PublicKeyFromString
});
const InstructionResult = union$2([RawInstructionResult, ParsedInstructionResult]);
const UnknownInstructionResult = union$2([type$1({
  parsed: unknown$1(),
  program: string$9(),
  programId: string$9()
}), type$1({
  accounts: array$7(string$9()),
  data: string$9(),
  programId: string$9()
})]);
const ParsedOrRawInstruction = coerce$1(InstructionResult, UnknownInstructionResult, value => {
  if ('accounts' in value) {
    return create$1(value, RawInstructionResult);
  } else {
    return create$1(value, ParsedInstructionResult);
  }
});

/**
 * @internal
 */
const ParsedConfirmedTransactionResult = type$1({
  signatures: array$7(string$9()),
  message: type$1({
    accountKeys: array$7(AnnotatedAccountKey),
    instructions: array$7(ParsedOrRawInstruction),
    recentBlockhash: string$9(),
    addressTableLookups: optional$1(nullable$4(array$7(AddressTableLookupStruct)))
  })
});
const TokenBalanceResult = type$1({
  accountIndex: number$6(),
  mint: string$9(),
  owner: optional$1(string$9()),
  programId: optional$1(string$9()),
  uiTokenAmount: TokenAmountResult
});
const LoadedAddressesResult = type$1({
  writable: array$7(PublicKeyFromString),
  readonly: array$7(PublicKeyFromString)
});

/**
 * @internal
 */
const ConfirmedTransactionMetaResult = type$1({
  err: TransactionErrorResult,
  fee: number$6(),
  innerInstructions: optional$1(nullable$4(array$7(type$1({
    index: number$6(),
    instructions: array$7(type$1({
      accounts: array$7(number$6()),
      data: string$9(),
      programIdIndex: number$6()
    }))
  })))),
  preBalances: array$7(number$6()),
  postBalances: array$7(number$6()),
  logMessages: optional$1(nullable$4(array$7(string$9()))),
  preTokenBalances: optional$1(nullable$4(array$7(TokenBalanceResult))),
  postTokenBalances: optional$1(nullable$4(array$7(TokenBalanceResult))),
  loadedAddresses: optional$1(LoadedAddressesResult),
  computeUnitsConsumed: optional$1(number$6())
});

/**
 * @internal
 */
const ParsedConfirmedTransactionMetaResult = type$1({
  err: TransactionErrorResult,
  fee: number$6(),
  innerInstructions: optional$1(nullable$4(array$7(type$1({
    index: number$6(),
    instructions: array$7(ParsedOrRawInstruction)
  })))),
  preBalances: array$7(number$6()),
  postBalances: array$7(number$6()),
  logMessages: optional$1(nullable$4(array$7(string$9()))),
  preTokenBalances: optional$1(nullable$4(array$7(TokenBalanceResult))),
  postTokenBalances: optional$1(nullable$4(array$7(TokenBalanceResult))),
  loadedAddresses: optional$1(LoadedAddressesResult),
  computeUnitsConsumed: optional$1(number$6())
});
const TransactionVersionStruct = union$2([literal$1(0), literal$1('legacy')]);

/** @internal */
const RewardsResult = type$1({
  pubkey: string$9(),
  lamports: number$6(),
  postBalance: nullable$4(number$6()),
  rewardType: nullable$4(string$9()),
  commission: optional$1(nullable$4(number$6()))
});

/**
 * Expected JSON RPC response for the "getBlock" message
 */
const GetBlockRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  transactions: array$7(type$1({
    transaction: ConfirmedTransactionResult,
    meta: nullable$4(ConfirmedTransactionMetaResult),
    version: optional$1(TransactionVersionStruct)
  })),
  rewards: optional$1(array$7(RewardsResult)),
  blockTime: nullable$4(number$6()),
  blockHeight: nullable$4(number$6())
})));

/**
 * Expected JSON RPC response for the "getBlock" message when `transactionDetails` is `none`
 */
const GetNoneModeBlockRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  rewards: optional$1(array$7(RewardsResult)),
  blockTime: nullable$4(number$6()),
  blockHeight: nullable$4(number$6())
})));

/**
 * Expected JSON RPC response for the "getBlock" message when `transactionDetails` is `accounts`
 */
const GetAccountsModeBlockRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  transactions: array$7(type$1({
    transaction: ConfirmedTransactionAccountsModeResult,
    meta: nullable$4(ConfirmedTransactionMetaResult),
    version: optional$1(TransactionVersionStruct)
  })),
  rewards: optional$1(array$7(RewardsResult)),
  blockTime: nullable$4(number$6()),
  blockHeight: nullable$4(number$6())
})));

/**
 * Expected parsed JSON RPC response for the "getBlock" message
 */
const GetParsedBlockRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  transactions: array$7(type$1({
    transaction: ParsedConfirmedTransactionResult,
    meta: nullable$4(ParsedConfirmedTransactionMetaResult),
    version: optional$1(TransactionVersionStruct)
  })),
  rewards: optional$1(array$7(RewardsResult)),
  blockTime: nullable$4(number$6()),
  blockHeight: nullable$4(number$6())
})));

/**
 * Expected parsed JSON RPC response for the "getBlock" message  when `transactionDetails` is `accounts`
 */
const GetParsedAccountsModeBlockRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  transactions: array$7(type$1({
    transaction: ConfirmedTransactionAccountsModeResult,
    meta: nullable$4(ParsedConfirmedTransactionMetaResult),
    version: optional$1(TransactionVersionStruct)
  })),
  rewards: optional$1(array$7(RewardsResult)),
  blockTime: nullable$4(number$6()),
  blockHeight: nullable$4(number$6())
})));

/**
 * Expected parsed JSON RPC response for the "getBlock" message  when `transactionDetails` is `none`
 */
const GetParsedNoneModeBlockRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  rewards: optional$1(array$7(RewardsResult)),
  blockTime: nullable$4(number$6()),
  blockHeight: nullable$4(number$6())
})));

/**
 * Expected JSON RPC response for the "getConfirmedBlock" message
 *
 * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.
 */
const GetConfirmedBlockRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  transactions: array$7(type$1({
    transaction: ConfirmedTransactionResult,
    meta: nullable$4(ConfirmedTransactionMetaResult)
  })),
  rewards: optional$1(array$7(RewardsResult)),
  blockTime: nullable$4(number$6())
})));

/**
 * Expected JSON RPC response for the "getBlock" message
 */
const GetBlockSignaturesRpcResult = jsonRpcResult$1(nullable$4(type$1({
  blockhash: string$9(),
  previousBlockhash: string$9(),
  parentSlot: number$6(),
  signatures: array$7(string$9()),
  blockTime: nullable$4(number$6())
})));

/**
 * Expected JSON RPC response for the "getTransaction" message
 */
const GetTransactionRpcResult = jsonRpcResult$1(nullable$4(type$1({
  slot: number$6(),
  meta: nullable$4(ConfirmedTransactionMetaResult),
  blockTime: optional$1(nullable$4(number$6())),
  transaction: ConfirmedTransactionResult,
  version: optional$1(TransactionVersionStruct)
})));

/**
 * Expected parsed JSON RPC response for the "getTransaction" message
 */
const GetParsedTransactionRpcResult = jsonRpcResult$1(nullable$4(type$1({
  slot: number$6(),
  transaction: ParsedConfirmedTransactionResult,
  meta: nullable$4(ParsedConfirmedTransactionMetaResult),
  blockTime: optional$1(nullable$4(number$6())),
  version: optional$1(TransactionVersionStruct)
})));

/**
 * Expected JSON RPC response for the "getLatestBlockhash" message
 */
const GetLatestBlockhashRpcResult = jsonRpcResultAndContext$1(type$1({
  blockhash: string$9(),
  lastValidBlockHeight: number$6()
}));

/**
 * Expected JSON RPC response for the "isBlockhashValid" message
 */
const IsBlockhashValidRpcResult = jsonRpcResultAndContext$1(boolean$6());
const PerfSampleResult = type$1({
  slot: number$6(),
  numTransactions: number$6(),
  numSlots: number$6(),
  samplePeriodSecs: number$6()
});

/*
 * Expected JSON RPC response for "getRecentPerformanceSamples" message
 */
const GetRecentPerformanceSamplesRpcResult = jsonRpcResult$1(array$7(PerfSampleResult));

/**
 * Expected JSON RPC response for the "getFeeCalculatorForBlockhash" message
 */
const GetFeeCalculatorRpcResult = jsonRpcResultAndContext$1(nullable$4(type$1({
  feeCalculator: type$1({
    lamportsPerSignature: number$6()
  })
})));

/**
 * Expected JSON RPC response for the "requestAirdrop" message
 */
const RequestAirdropRpcResult = jsonRpcResult$1(string$9());

/**
 * Expected JSON RPC response for the "sendTransaction" message
 */
const SendTransactionRpcResult = jsonRpcResult$1(string$9());

/**
 * Information about the latest slot being processed by a node
 */

/**
 * Parsed account data
 */

/**
 * Stake Activation data
 */

/**
 * Data slice argument for getProgramAccounts
 */

/**
 * Memory comparison filter for getProgramAccounts
 */

/**
 * Data size comparison filter for getProgramAccounts
 */

/**
 * A filter object for getProgramAccounts
 */

/**
 * Configuration object for getProgramAccounts requests
 */

/**
 * Configuration object for getParsedProgramAccounts
 */

/**
 * Configuration object for getMultipleAccounts
 */

/**
 * Configuration object for `getStakeActivation`
 */

/**
 * Configuration object for `getStakeActivation`
 */

/**
 * Configuration object for `getStakeActivation`
 */

/**
 * Configuration object for `getNonce`
 */

/**
 * Configuration object for `getNonceAndContext`
 */

/**
 * Information describing an account
 */

/**
 * Account information identified by pubkey
 */

/**
 * Callback function for account change notifications
 */

/**
 * Callback function for program account change notifications
 */

/**
 * Callback function for slot change notifications
 */

/**
 * Callback function for slot update notifications
 */

/**
 * Callback function for signature status notifications
 */

/**
 * Signature status notification with transaction result
 */

/**
 * Signature received notification
 */

/**
 * Callback function for signature notifications
 */

/**
 * Signature subscription options
 */

/**
 * Callback function for root change notifications
 */

/**
 * @internal
 */
const LogsResult = type$1({
  err: TransactionErrorResult,
  logs: array$7(string$9()),
  signature: string$9()
});

/**
 * Logs result.
 */

/**
 * Expected JSON RPC response for the "logsNotification" message.
 */
const LogsNotificationResult = type$1({
  result: notificationResultAndContext(LogsResult),
  subscription: number$6()
});

/**
 * Filter for log subscriptions.
 */

/**
 * Callback function for log notifications.
 */

/**
 * Signature result
 */

/**
 * Transaction error
 */

/**
 * Transaction confirmation status
 * <pre>
 *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node
 *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster
 *   'finalized': Transaction landed in a block which has been finalized by the cluster
 * </pre>
 */

/**
 * Signature status
 */

/**
 * A confirmed signature with its status
 */

/**
 * An object defining headers to be passed to the RPC server
 */

/**
 * The type of the JavaScript `fetch()` API
 */

/**
 * A callback used to augment the outgoing HTTP request
 */

/**
 * Configuration for instantiating a Connection
 */

/** @internal */
const COMMON_HTTP_HEADERS = {
  'solana-client': `js/${"1.0.0-maintenance"}`
};

/**
 * A connection to a fullnode JSON RPC endpoint
 */
class Connection {
  /**
   * Establish a JSON RPC connection
   *
   * @param endpoint URL to the fullnode JSON RPC endpoint
   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object
   */
  constructor(endpoint, _commitmentOrConfig) {
    /** @internal */
    this._commitment = void 0;
    /** @internal */
    this._confirmTransactionInitialTimeout = void 0;
    /** @internal */
    this._rpcEndpoint = void 0;
    /** @internal */
    this._rpcWsEndpoint = void 0;
    /** @internal */
    this._rpcClient = void 0;
    /** @internal */
    this._rpcRequest = void 0;
    /** @internal */
    this._rpcBatchRequest = void 0;
    /** @internal */
    this._rpcWebSocket = void 0;
    /** @internal */
    this._rpcWebSocketConnected = false;
    /** @internal */
    this._rpcWebSocketHeartbeat = null;
    /** @internal */
    this._rpcWebSocketIdleTimeout = null;
    /** @internal
     * A number that we increment every time an active connection closes.
     * Used to determine whether the same socket connection that was open
     * when an async operation started is the same one that's active when
     * its continuation fires.
     *
     */
    this._rpcWebSocketGeneration = 0;
    /** @internal */
    this._disableBlockhashCaching = false;
    /** @internal */
    this._pollingBlockhash = false;
    /** @internal */
    this._blockhashInfo = {
      latestBlockhash: null,
      lastFetch: 0,
      transactionSignatures: [],
      simulatedSignatures: []
    };
    /** @internal */
    this._nextClientSubscriptionId = 0;
    /** @internal */
    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};
    /** @internal */
    this._subscriptionHashByClientSubscriptionId = {};
    /** @internal */
    this._subscriptionStateChangeCallbacksByHash = {};
    /** @internal */
    this._subscriptionCallbacksByServerSubscriptionId = {};
    /** @internal */
    this._subscriptionsByHash = {};
    /**
     * Special case.
     * After a signature is processed, RPCs automatically dispose of the
     * subscription on the server side. We need to track which of these
     * subscriptions have been disposed in such a way, so that we know
     * whether the client is dealing with a not-yet-processed signature
     * (in which case we must tear down the server subscription) or an
     * already-processed signature (in which case the client can simply
     * clear out the subscription locally without telling the server).
     *
     * NOTE: There is a proposal to eliminate this special case, here:
     * https://github.com/solana-labs/solana/issues/18892
     */
    /** @internal */
    this._subscriptionsAutoDisposedByRpc = new Set();
    /*
     * Returns the current block height of the node
     */
    this.getBlockHeight = (() => {
      const requestPromises = {};
      return async commitmentOrConfig => {
        const {
          commitment,
          config
        } = extractCommitmentFromConfig(commitmentOrConfig);
        const args = this._buildArgs([], commitment, undefined /* encoding */, config);
        const requestHash = fastStableStringify(args);
        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {
          try {
            const unsafeRes = await this._rpcRequest('getBlockHeight', args);
            const res = create$1(unsafeRes, jsonRpcResult$1(number$6()));
            if ('error' in res) {
              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');
            }
            return res.result;
          } finally {
            delete requestPromises[requestHash];
          }
        })();
        return await requestPromises[requestHash];
      };
    })();
    let wsEndpoint;
    let httpHeaders;
    let fetch;
    let fetchMiddleware;
    let disableRetryOnRateLimit;
    let httpAgent;
    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {
      this._commitment = _commitmentOrConfig;
    } else if (_commitmentOrConfig) {
      this._commitment = _commitmentOrConfig.commitment;
      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;
      wsEndpoint = _commitmentOrConfig.wsEndpoint;
      httpHeaders = _commitmentOrConfig.httpHeaders;
      fetch = _commitmentOrConfig.fetch;
      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;
      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;
      httpAgent = _commitmentOrConfig.httpAgent;
    }
    this._rpcEndpoint = assertEndpointUrl(endpoint);
    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);
    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);
    this._rpcRequest = createRpcRequest(this._rpcClient);
    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);
    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {
      autoconnect: false,
      max_reconnects: Infinity
    });
    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));
    this._rpcWebSocket.on('error', this._wsOnError.bind(this));
    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));
    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));
    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));
    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));
    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));
    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));
    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));
    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));
  }

  /**
   * The default commitment used for requests
   */
  get commitment() {
    return this._commitment;
  }

  /**
   * The RPC endpoint
   */
  get rpcEndpoint() {
    return this._rpcEndpoint;
  }

  /**
   * Fetch the balance for the specified public key, return with context
   */
  async getBalanceAndContext(publicKey, commitmentOrConfig) {
    /** @internal */
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getBalance', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(number$6()));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);
    }
    return res.result;
  }

  /**
   * Fetch the balance for the specified public key
   */
  async getBalance(publicKey, commitmentOrConfig) {
    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {
      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);
    });
  }

  /**
   * Fetch the estimated production time of a block
   */
  async getBlockTime(slot) {
    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);
    const res = create$1(unsafeRes, jsonRpcResult$1(nullable$4(number$6())));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);
    }
    return res.result;
  }

  /**
   * Fetch the lowest slot that the node has information about in its ledger.
   * This value may increase over time if the node is configured to purge older ledger data
   */
  async getMinimumLedgerSlot() {
    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);
    const res = create$1(unsafeRes, jsonRpcResult$1(number$6()));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');
    }
    return res.result;
  }

  /**
   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger
   */
  async getFirstAvailableBlock() {
    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);
    const res = create$1(unsafeRes, SlotRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');
    }
    return res.result;
  }

  /**
   * Fetch information about the current supply
   */
  async getSupply(config) {
    let configArg = {};
    if (typeof config === 'string') {
      configArg = {
        commitment: config
      };
    } else if (config) {
      configArg = {
        ...config,
        commitment: config && config.commitment || this.commitment
      };
    } else {
      configArg = {
        commitment: this.commitment
      };
    }
    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);
    const res = create$1(unsafeRes, GetSupplyRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get supply');
    }
    return res.result;
  }

  /**
   * Fetch the current supply of a token mint
   */
  async getTokenSupply(tokenMintAddress, commitment) {
    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);
    const unsafeRes = await this._rpcRequest('getTokenSupply', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(TokenAmountResult));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');
    }
    return res.result;
  }

  /**
   * Fetch the current balance of a token account
   */
  async getTokenAccountBalance(tokenAddress, commitment) {
    const args = this._buildArgs([tokenAddress.toBase58()], commitment);
    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(TokenAmountResult));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');
    }
    return res.result;
  }

  /**
   * Fetch all the token accounts owned by the specified account
   *
   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}
   */
  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    let _args = [ownerAddress.toBase58()];
    if ('mint' in filter) {
      _args.push({
        mint: filter.mint.toBase58()
      });
    } else {
      _args.push({
        programId: filter.programId.toBase58()
      });
    }
    const args = this._buildArgs(_args, commitment, 'base64', config);
    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);
    const res = create$1(unsafeRes, GetTokenAccountsByOwner);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);
    }
    return res.result;
  }

  /**
   * Fetch parsed token accounts owned by the specified account
   *
   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}
   */
  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {
    let _args = [ownerAddress.toBase58()];
    if ('mint' in filter) {
      _args.push({
        mint: filter.mint.toBase58()
      });
    } else {
      _args.push({
        programId: filter.programId.toBase58()
      });
    }
    const args = this._buildArgs(_args, commitment, 'jsonParsed');
    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);
    const res = create$1(unsafeRes, GetParsedTokenAccountsByOwner);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);
    }
    return res.result;
  }

  /**
   * Fetch the 20 largest accounts with their current balances
   */
  async getLargestAccounts(config) {
    const arg = {
      ...config,
      commitment: config && config.commitment || this.commitment
    };
    const args = arg.filter || arg.commitment ? [arg] : [];
    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);
    const res = create$1(unsafeRes, GetLargestAccountsRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');
    }
    return res.result;
  }

  /**
   * Fetch the 20 largest token accounts with their current balances
   * for a given mint.
   */
  async getTokenLargestAccounts(mintAddress, commitment) {
    const args = this._buildArgs([mintAddress.toBase58()], commitment);
    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);
    const res = create$1(unsafeRes, GetTokenLargestAccountsResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');
    }
    return res.result;
  }

  /**
   * Fetch all the account info for the specified public key, return with context
   */
  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);
    const unsafeRes = await this._rpcRequest('getAccountInfo', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(nullable$4(AccountInfoResult)));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);
    }
    return res.result;
  }

  /**
   * Fetch parsed account info for the specified public key
   */
  async getParsedAccountInfo(publicKey, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);
    const unsafeRes = await this._rpcRequest('getAccountInfo', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(nullable$4(ParsedAccountInfoResult)));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);
    }
    return res.result;
  }

  /**
   * Fetch all the account info for the specified public key
   */
  async getAccountInfo(publicKey, commitmentOrConfig) {
    try {
      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);
      return res.value;
    } catch (e) {
      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);
    }
  }

  /**
   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
   */
  async getMultipleParsedAccounts(publicKeys, rawConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(rawConfig);
    const keys = publicKeys.map(key => key.toBase58());
    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);
    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(array$7(nullable$4(ParsedAccountInfoResult))));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);
    }
    return res.result;
  }

  /**
   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
   */
  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const keys = publicKeys.map(key => key.toBase58());
    const args = this._buildArgs([keys], commitment, 'base64', config);
    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(array$7(nullable$4(AccountInfoResult))));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);
    }
    return res.result;
  }

  /**
   * Fetch all the account info for multiple accounts specified by an array of public keys
   */
  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {
    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);
    return res.value;
  }

  /**
   * Returns epoch activation information for a stake account that has been delegated
   *
   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.
   */
  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {
      ...config,
      epoch: epoch != null ? epoch : config?.epoch
    });
    const unsafeRes = await this._rpcRequest('getStakeActivation', args);
    const res = create$1(unsafeRes, jsonRpcResult$1(StakeActivationResult));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);
    }
    return res.result;
  }

  /**
   * Fetch all the accounts owned by the specified program id
   *
   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}
   */

  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members
  async getProgramAccounts(programId, configOrCommitment) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(configOrCommitment);
    const {
      encoding,
      ...configWithoutEncoding
    } = config || {};
    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {
      ...configWithoutEncoding,
      ...(configWithoutEncoding.filters ? {
        filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)
      } : null)
    });
    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);
    const baseSchema = array$7(KeyedAccountInfoResult);
    const res = configWithoutEncoding.withContext === true ? create$1(unsafeRes, jsonRpcResultAndContext$1(baseSchema)) : create$1(unsafeRes, jsonRpcResult$1(baseSchema));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);
    }
    return res.result;
  }

  /**
   * Fetch and parse all the accounts owned by the specified program id
   *
   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}
   */
  async getParsedProgramAccounts(programId, configOrCommitment) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(configOrCommitment);
    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);
    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);
    const res = create$1(unsafeRes, jsonRpcResult$1(array$7(KeyedParsedAccountInfoResult)));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);
    }
    return res.result;
  }

  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */
  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members
  async confirmTransaction(strategy, commitment) {
    let rawSignature;
    if (typeof strategy == 'string') {
      rawSignature = strategy;
    } else {
      const config = strategy;
      if (config.abortSignal?.aborted) {
        return Promise.reject(config.abortSignal.reason);
      }
      rawSignature = config.signature;
    }
    let decodedSignature;
    try {
      decodedSignature = bs58$7.decode(rawSignature);
    } catch (err) {
      throw new Error('signature must be base58 encoded: ' + rawSignature);
    }
    assert$3(decodedSignature.length === 64, 'signature has invalid length');
    if (typeof strategy === 'string') {
      return await this.confirmTransactionUsingLegacyTimeoutStrategy({
        commitment: commitment || this.commitment,
        signature: rawSignature
      });
    } else if ('lastValidBlockHeight' in strategy) {
      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({
        commitment: commitment || this.commitment,
        strategy
      });
    } else {
      return await this.confirmTransactionUsingDurableNonceStrategy({
        commitment: commitment || this.commitment,
        strategy
      });
    }
  }
  getCancellationPromise(signal) {
    return new Promise((_, reject) => {
      if (signal == null) {
        return;
      }
      if (signal.aborted) {
        reject(signal.reason);
      } else {
        signal.addEventListener('abort', () => {
          reject(signal.reason);
        });
      }
    });
  }
  getTransactionConfirmationPromise({
    commitment,
    signature
  }) {
    let signatureSubscriptionId;
    let disposeSignatureSubscriptionStateChangeObserver;
    let done = false;
    const confirmationPromise = new Promise((resolve, reject) => {
      try {
        signatureSubscriptionId = this.onSignature(signature, (result, context) => {
          signatureSubscriptionId = undefined;
          const response = {
            context,
            value: result
          };
          resolve({
            __type: TransactionStatus.PROCESSED,
            response
          });
        }, commitment);
        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {
          if (signatureSubscriptionId == null) {
            resolveSubscriptionSetup();
          } else {
            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {
              if (nextState === 'subscribed') {
                resolveSubscriptionSetup();
              }
            });
          }
        });
        (async () => {
          await subscriptionSetupPromise;
          if (done) return;
          const response = await this.getSignatureStatus(signature);
          if (done) return;
          if (response == null) {
            return;
          }
          const {
            context,
            value
          } = response;
          if (value == null) {
            return;
          }
          if (value?.err) {
            reject(value.err);
          } else {
            switch (commitment) {
              case 'confirmed':
              case 'single':
              case 'singleGossip':
                {
                  if (value.confirmationStatus === 'processed') {
                    return;
                  }
                  break;
                }
              case 'finalized':
              case 'max':
              case 'root':
                {
                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {
                    return;
                  }
                  break;
                }
              // exhaust enums to ensure full coverage
              case 'processed':
              case 'recent':
            }
            done = true;
            resolve({
              __type: TransactionStatus.PROCESSED,
              response: {
                context,
                value
              }
            });
          }
        })();
      } catch (err) {
        reject(err);
      }
    });
    const abortConfirmation = () => {
      if (disposeSignatureSubscriptionStateChangeObserver) {
        disposeSignatureSubscriptionStateChangeObserver();
        disposeSignatureSubscriptionStateChangeObserver = undefined;
      }
      if (signatureSubscriptionId != null) {
        this.removeSignatureListener(signatureSubscriptionId);
        signatureSubscriptionId = undefined;
      }
    };
    return {
      abortConfirmation,
      confirmationPromise
    };
  }
  async confirmTransactionUsingBlockHeightExceedanceStrategy({
    commitment,
    strategy: {
      abortSignal,
      lastValidBlockHeight,
      signature
    }
  }) {
    let done = false;
    const expiryPromise = new Promise(resolve => {
      const checkBlockHeight = async () => {
        try {
          const blockHeight = await this.getBlockHeight(commitment);
          return blockHeight;
        } catch (_e) {
          return -1;
        }
      };
      (async () => {
        let currentBlockHeight = await checkBlockHeight();
        if (done) return;
        while (currentBlockHeight <= lastValidBlockHeight) {
          await sleep$1(1000);
          if (done) return;
          currentBlockHeight = await checkBlockHeight();
          if (done) return;
        }
        resolve({
          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED
        });
      })();
    });
    const {
      abortConfirmation,
      confirmationPromise
    } = this.getTransactionConfirmationPromise({
      commitment,
      signature
    });
    const cancellationPromise = this.getCancellationPromise(abortSignal);
    let result;
    try {
      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);
      if (outcome.__type === TransactionStatus.PROCESSED) {
        result = outcome.response;
      } else {
        throw new TransactionExpiredBlockheightExceededError(signature);
      }
    } finally {
      done = true;
      abortConfirmation();
    }
    return result;
  }
  async confirmTransactionUsingDurableNonceStrategy({
    commitment,
    strategy: {
      abortSignal,
      minContextSlot,
      nonceAccountPubkey,
      nonceValue,
      signature
    }
  }) {
    let done = false;
    const expiryPromise = new Promise(resolve => {
      let currentNonceValue = nonceValue;
      let lastCheckedSlot = null;
      const getCurrentNonceValue = async () => {
        try {
          const {
            context,
            value: nonceAccount
          } = await this.getNonceAndContext(nonceAccountPubkey, {
            commitment,
            minContextSlot
          });
          lastCheckedSlot = context.slot;
          return nonceAccount?.nonce;
        } catch (e) {
          // If for whatever reason we can't reach/read the nonce
          // account, just keep using the last-known value.
          return currentNonceValue;
        }
      };
      (async () => {
        currentNonceValue = await getCurrentNonceValue();
        if (done) return;
        while (true // eslint-disable-line no-constant-condition
        ) {
          if (nonceValue !== currentNonceValue) {
            resolve({
              __type: TransactionStatus.NONCE_INVALID,
              slotInWhichNonceDidAdvance: lastCheckedSlot
            });
            return;
          }
          await sleep$1(2000);
          if (done) return;
          currentNonceValue = await getCurrentNonceValue();
          if (done) return;
        }
      })();
    });
    const {
      abortConfirmation,
      confirmationPromise
    } = this.getTransactionConfirmationPromise({
      commitment,
      signature
    });
    const cancellationPromise = this.getCancellationPromise(abortSignal);
    let result;
    try {
      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);
      if (outcome.__type === TransactionStatus.PROCESSED) {
        result = outcome.response;
      } else {
        // Double check that the transaction is indeed unconfirmed.
        let signatureStatus;
        while (true // eslint-disable-line no-constant-condition
        ) {
          const status = await this.getSignatureStatus(signature);
          if (status == null) {
            break;
          }
          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {
            await sleep$1(400);
            continue;
          }
          signatureStatus = status;
          break;
        }
        if (signatureStatus?.value) {
          const commitmentForStatus = commitment || 'finalized';
          const {
            confirmationStatus
          } = signatureStatus.value;
          switch (commitmentForStatus) {
            case 'processed':
            case 'recent':
              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {
                throw new TransactionExpiredNonceInvalidError(signature);
              }
              break;
            case 'confirmed':
            case 'single':
            case 'singleGossip':
              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {
                throw new TransactionExpiredNonceInvalidError(signature);
              }
              break;
            case 'finalized':
            case 'max':
            case 'root':
              if (confirmationStatus !== 'finalized') {
                throw new TransactionExpiredNonceInvalidError(signature);
              }
              break;
            default:
              // Exhaustive switch.
              // eslint-disable-next-line @typescript-eslint/no-unused-vars
              (_ => {})(commitmentForStatus);
          }
          result = {
            context: signatureStatus.context,
            value: {
              err: signatureStatus.value.err
            }
          };
        } else {
          throw new TransactionExpiredNonceInvalidError(signature);
        }
      }
    } finally {
      done = true;
      abortConfirmation();
    }
    return result;
  }
  async confirmTransactionUsingLegacyTimeoutStrategy({
    commitment,
    signature
  }) {
    let timeoutId;
    const expiryPromise = new Promise(resolve => {
      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;
      switch (commitment) {
        case 'processed':
        case 'recent':
        case 'single':
        case 'confirmed':
        case 'singleGossip':
          {
            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;
            break;
          }
      }
      timeoutId = setTimeout(() => resolve({
        __type: TransactionStatus.TIMED_OUT,
        timeoutMs
      }), timeoutMs);
    });
    const {
      abortConfirmation,
      confirmationPromise
    } = this.getTransactionConfirmationPromise({
      commitment,
      signature
    });
    let result;
    try {
      const outcome = await Promise.race([confirmationPromise, expiryPromise]);
      if (outcome.__type === TransactionStatus.PROCESSED) {
        result = outcome.response;
      } else {
        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);
      }
    } finally {
      clearTimeout(timeoutId);
      abortConfirmation();
    }
    return result;
  }

  /**
   * Return the list of nodes that are currently participating in the cluster
   */
  async getClusterNodes() {
    const unsafeRes = await this._rpcRequest('getClusterNodes', []);
    const res = create$1(unsafeRes, jsonRpcResult$1(array$7(ContactInfoResult)));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');
    }
    return res.result;
  }

  /**
   * Return the list of nodes that are currently participating in the cluster
   */
  async getVoteAccounts(commitment) {
    const args = this._buildArgs([], commitment);
    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);
    const res = create$1(unsafeRes, GetVoteAccounts);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');
    }
    return res.result;
  }

  /**
   * Fetch the current slot that the node is processing
   */
  async getSlot(commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getSlot', args);
    const res = create$1(unsafeRes, jsonRpcResult$1(number$6()));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get slot');
    }
    return res.result;
  }

  /**
   * Fetch the current slot leader of the cluster
   */
  async getSlotLeader(commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getSlotLeader', args);
    const res = create$1(unsafeRes, jsonRpcResult$1(string$9()));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');
    }
    return res.result;
  }

  /**
   * Fetch `limit` number of slot leaders starting from `startSlot`
   *
   * @param startSlot fetch slot leaders starting from this slot
   * @param limit number of slot leaders to return
   */
  async getSlotLeaders(startSlot, limit) {
    const args = [startSlot, limit];
    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);
    const res = create$1(unsafeRes, jsonRpcResult$1(array$7(PublicKeyFromString)));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');
    }
    return res.result;
  }

  /**
   * Fetch the current status of a signature
   */
  async getSignatureStatus(signature, config) {
    const {
      context,
      value: values
    } = await this.getSignatureStatuses([signature], config);
    assert$3(values.length === 1);
    const value = values[0];
    return {
      context,
      value
    };
  }

  /**
   * Fetch the current statuses of a batch of signatures
   */
  async getSignatureStatuses(signatures, config) {
    const params = [signatures];
    if (config) {
      params.push(config);
    }
    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);
    const res = create$1(unsafeRes, GetSignatureStatusesRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');
    }
    return res.result;
  }

  /**
   * Fetch the current transaction count of the cluster
   */
  async getTransactionCount(commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getTransactionCount', args);
    const res = create$1(unsafeRes, jsonRpcResult$1(number$6()));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');
    }
    return res.result;
  }

  /**
   * Fetch the current total currency supply of the cluster in lamports
   *
   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.
   */
  async getTotalSupply(commitment) {
    const result = await this.getSupply({
      commitment,
      excludeNonCirculatingAccountsList: true
    });
    return result.value.total;
  }

  /**
   * Fetch the cluster InflationGovernor parameters
   */
  async getInflationGovernor(commitment) {
    const args = this._buildArgs([], commitment);
    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);
    const res = create$1(unsafeRes, GetInflationGovernorRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');
    }
    return res.result;
  }

  /**
   * Fetch the inflation reward for a list of addresses for an epoch
   */
  async getInflationReward(addresses, epoch, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {
      ...config,
      epoch: epoch != null ? epoch : config?.epoch
    });
    const unsafeRes = await this._rpcRequest('getInflationReward', args);
    const res = create$1(unsafeRes, GetInflationRewardResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');
    }
    return res.result;
  }

  /**
   * Fetch the specific inflation values for the current epoch
   */
  async getInflationRate() {
    const unsafeRes = await this._rpcRequest('getInflationRate', []);
    const res = create$1(unsafeRes, GetInflationRateRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');
    }
    return res.result;
  }

  /**
   * Fetch the Epoch Info parameters
   */
  async getEpochInfo(commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getEpochInfo', args);
    const res = create$1(unsafeRes, GetEpochInfoRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');
    }
    return res.result;
  }

  /**
   * Fetch the Epoch Schedule parameters
   */
  async getEpochSchedule() {
    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);
    const res = create$1(unsafeRes, GetEpochScheduleRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');
    }
    const epochSchedule = res.result;
    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);
  }

  /**
   * Fetch the leader schedule for the current epoch
   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}
   */
  async getLeaderSchedule() {
    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);
    const res = create$1(unsafeRes, GetLeaderScheduleRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');
    }
    return res.result;
  }

  /**
   * Fetch the minimum balance needed to exempt an account of `dataLength`
   * size from rent
   */
  async getMinimumBalanceForRentExemption(dataLength, commitment) {
    const args = this._buildArgs([dataLength], commitment);
    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);
    const res = create$1(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);
    if ('error' in res) {
      console.warn('Unable to fetch minimum balance for rent exemption');
      return 0;
    }
    return res.result;
  }

  /**
   * Fetch a recent blockhash from the cluster, return with context
   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}
   *
   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.
   */
  async getRecentBlockhashAndContext(commitment) {
    const {
      context,
      value: {
        blockhash
      }
    } = await this.getLatestBlockhashAndContext(commitment);
    const feeCalculator = {
      get lamportsPerSignature() {
        throw new Error('The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' + 'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' + 'for a given message.');
      },
      toJSON() {
        return {};
      }
    };
    return {
      context,
      value: {
        blockhash,
        feeCalculator
      }
    };
  }

  /**
   * Fetch recent performance samples
   * @return {Promise<Array<PerfSample>>}
   */
  async getRecentPerformanceSamples(limit) {
    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);
    const res = create$1(unsafeRes, GetRecentPerformanceSamplesRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');
    }
    return res.result;
  }

  /**
   * Fetch the fee calculator for a recent blockhash from the cluster, return with context
   *
   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.
   */
  async getFeeCalculatorForBlockhash(blockhash, commitment) {
    const args = this._buildArgs([blockhash], commitment);
    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);
    const res = create$1(unsafeRes, GetFeeCalculatorRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');
    }
    const {
      context,
      value
    } = res.result;
    return {
      context,
      value: value !== null ? value.feeCalculator : null
    };
  }

  /**
   * Fetch the fee for a message from the cluster, return with context
   */
  async getFeeForMessage(message, commitment) {
    const wireMessage = toBuffer(message.serialize()).toString('base64');
    const args = this._buildArgs([wireMessage], commitment);
    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(nullable$4(number$6())));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');
    }
    if (res.result === null) {
      throw new Error('invalid blockhash');
    }
    return res.result;
  }

  /**
   * Fetch a list of prioritization fees from recent blocks.
   */
  async getRecentPrioritizationFees(config) {
    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());
    const args = accounts?.length ? [accounts] : [];
    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);
    const res = create$1(unsafeRes, GetRecentPrioritizationFeesRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');
    }
    return res.result;
  }
  /**
   * Fetch a recent blockhash from the cluster
   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}
   *
   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.
   */
  async getRecentBlockhash(commitment) {
    try {
      const res = await this.getRecentBlockhashAndContext(commitment);
      return res.value;
    } catch (e) {
      throw new Error('failed to get recent blockhash: ' + e);
    }
  }

  /**
   * Fetch the latest blockhash from the cluster
   * @return {Promise<BlockhashWithExpiryBlockHeight>}
   */
  async getLatestBlockhash(commitmentOrConfig) {
    try {
      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);
      return res.value;
    } catch (e) {
      throw new Error('failed to get recent blockhash: ' + e);
    }
  }

  /**
   * Fetch the latest blockhash from the cluster
   * @return {Promise<BlockhashWithExpiryBlockHeight>}
   */
  async getLatestBlockhashAndContext(commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);
    const res = create$1(unsafeRes, GetLatestBlockhashRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');
    }
    return res.result;
  }

  /**
   * Returns whether a blockhash is still valid or not
   */
  async isBlockhashValid(blockhash, rawConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(rawConfig);
    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);
    const res = create$1(unsafeRes, IsBlockhashValidRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');
    }
    return res.result;
  }

  /**
   * Fetch the node version
   */
  async getVersion() {
    const unsafeRes = await this._rpcRequest('getVersion', []);
    const res = create$1(unsafeRes, jsonRpcResult$1(VersionResult));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get version');
    }
    return res.result;
  }

  /**
   * Fetch the genesis hash
   */
  async getGenesisHash() {
    const unsafeRes = await this._rpcRequest('getGenesisHash', []);
    const res = create$1(unsafeRes, jsonRpcResult$1(string$9()));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');
    }
    return res.result;
  }

  /**
   * Fetch a processed block from the cluster.
   *
   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
   * setting the `maxSupportedTransactionVersion` property.
   */

  /**
   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
   * setting the `maxSupportedTransactionVersion` property.
   */
  // eslint-disable-next-line no-dupe-class-members

  /**
   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
   * setting the `maxSupportedTransactionVersion` property.
   */
  // eslint-disable-next-line no-dupe-class-members

  /**
   * Fetch a processed block from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members

  /**
   * Fetch a processed block from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members
  async getBlock(slot, rawConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(rawConfig);
    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getBlock', args);
    try {
      switch (config?.transactionDetails) {
        case 'accounts':
          {
            const res = create$1(unsafeRes, GetAccountsModeBlockRpcResult);
            if ('error' in res) {
              throw res.error;
            }
            return res.result;
          }
        case 'none':
          {
            const res = create$1(unsafeRes, GetNoneModeBlockRpcResult);
            if ('error' in res) {
              throw res.error;
            }
            return res.result;
          }
        default:
          {
            const res = create$1(unsafeRes, GetBlockRpcResult);
            if ('error' in res) {
              throw res.error;
            }
            const {
              result
            } = res;
            return result ? {
              ...result,
              transactions: result.transactions.map(({
                transaction,
                meta,
                version
              }) => ({
                meta,
                transaction: {
                  ...transaction,
                  message: versionedMessageFromResponse(version, transaction.message)
                },
                version
              }))
            } : null;
          }
      }
    } catch (e) {
      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');
    }
  }

  /**
   * Fetch parsed transaction details for a confirmed or finalized block
   */

  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members
  async getParsedBlock(slot, rawConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(rawConfig);
    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);
    const unsafeRes = await this._rpcRequest('getBlock', args);
    try {
      switch (config?.transactionDetails) {
        case 'accounts':
          {
            const res = create$1(unsafeRes, GetParsedAccountsModeBlockRpcResult);
            if ('error' in res) {
              throw res.error;
            }
            return res.result;
          }
        case 'none':
          {
            const res = create$1(unsafeRes, GetParsedNoneModeBlockRpcResult);
            if ('error' in res) {
              throw res.error;
            }
            return res.result;
          }
        default:
          {
            const res = create$1(unsafeRes, GetParsedBlockRpcResult);
            if ('error' in res) {
              throw res.error;
            }
            return res.result;
          }
      }
    } catch (e) {
      throw new SolanaJSONRPCError(e, 'failed to get block');
    }
  }
  /*
   * Returns recent block production information from the current or previous epoch
   */
  async getBlockProduction(configOrCommitment) {
    let extra;
    let commitment;
    if (typeof configOrCommitment === 'string') {
      commitment = configOrCommitment;
    } else if (configOrCommitment) {
      const {
        commitment: c,
        ...rest
      } = configOrCommitment;
      commitment = c;
      extra = rest;
    }
    const args = this._buildArgs([], commitment, 'base64', extra);
    const unsafeRes = await this._rpcRequest('getBlockProduction', args);
    const res = create$1(unsafeRes, BlockProductionResponseStruct);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');
    }
    return res.result;
  }

  /**
   * Fetch a confirmed or finalized transaction from the cluster.
   *
   * @deprecated Instead, call `getTransaction` using a
   * `GetVersionedTransactionConfig` by setting the
   * `maxSupportedTransactionVersion` property.
   */

  /**
   * Fetch a confirmed or finalized transaction from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members

  /**
   * Fetch a confirmed or finalized transaction from the cluster.
   */
  // eslint-disable-next-line no-dupe-class-members
  async getTransaction(signature, rawConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(rawConfig);
    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);
    const unsafeRes = await this._rpcRequest('getTransaction', args);
    const res = create$1(unsafeRes, GetTransactionRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');
    }
    const result = res.result;
    if (!result) return result;
    return {
      ...result,
      transaction: {
        ...result.transaction,
        message: versionedMessageFromResponse(result.version, result.transaction.message)
      }
    };
  }

  /**
   * Fetch parsed transaction details for a confirmed or finalized transaction
   */
  async getParsedTransaction(signature, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);
    const unsafeRes = await this._rpcRequest('getTransaction', args);
    const res = create$1(unsafeRes, GetParsedTransactionRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');
    }
    return res.result;
  }

  /**
   * Fetch parsed transaction details for a batch of confirmed transactions
   */
  async getParsedTransactions(signatures, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const batch = signatures.map(signature => {
      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);
      return {
        methodName: 'getTransaction',
        args
      };
    });
    const unsafeRes = await this._rpcBatchRequest(batch);
    const res = unsafeRes.map(unsafeRes => {
      const res = create$1(unsafeRes, GetParsedTransactionRpcResult);
      if ('error' in res) {
        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');
      }
      return res.result;
    });
    return res;
  }

  /**
   * Fetch transaction details for a batch of confirmed transactions.
   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.
   *
   * @deprecated Instead, call `getTransactions` using a
   * `GetVersionedTransactionConfig` by setting the
   * `maxSupportedTransactionVersion` property.
   */

  /**
   * Fetch transaction details for a batch of confirmed transactions.
   * Similar to {@link getParsedTransactions} but returns a {@link
   * VersionedTransactionResponse}.
   */
  // eslint-disable-next-line no-dupe-class-members

  /**
   * Fetch transaction details for a batch of confirmed transactions.
   * Similar to {@link getParsedTransactions} but returns a {@link
   * VersionedTransactionResponse}.
   */
  // eslint-disable-next-line no-dupe-class-members
  async getTransactions(signatures, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const batch = signatures.map(signature => {
      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);
      return {
        methodName: 'getTransaction',
        args
      };
    });
    const unsafeRes = await this._rpcBatchRequest(batch);
    const res = unsafeRes.map(unsafeRes => {
      const res = create$1(unsafeRes, GetTransactionRpcResult);
      if ('error' in res) {
        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');
      }
      const result = res.result;
      if (!result) return result;
      return {
        ...result,
        transaction: {
          ...result.transaction,
          message: versionedMessageFromResponse(result.version, result.transaction.message)
        }
      };
    });
    return res;
  }

  /**
   * Fetch a list of Transactions and transaction statuses from the cluster
   * for a confirmed block.
   *
   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.
   */
  async getConfirmedBlock(slot, commitment) {
    const args = this._buildArgsAtLeastConfirmed([slot], commitment);
    const unsafeRes = await this._rpcRequest('getBlock', args);
    const res = create$1(unsafeRes, GetConfirmedBlockRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');
    }
    const result = res.result;
    if (!result) {
      throw new Error('Confirmed block ' + slot + ' not found');
    }
    const block = {
      ...result,
      transactions: result.transactions.map(({
        transaction,
        meta
      }) => {
        const message = new Message(transaction.message);
        return {
          meta,
          transaction: {
            ...transaction,
            message
          }
        };
      })
    };
    return {
      ...block,
      transactions: block.transactions.map(({
        transaction,
        meta
      }) => {
        return {
          meta,
          transaction: Transaction$3.populate(transaction.message, transaction.signatures)
        };
      })
    };
  }

  /**
   * Fetch confirmed blocks between two slots
   */
  async getBlocks(startSlot, endSlot, commitment) {
    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);
    const unsafeRes = await this._rpcRequest('getBlocks', args);
    const res = create$1(unsafeRes, jsonRpcResult$1(array$7(number$6())));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');
    }
    return res.result;
  }

  /**
   * Fetch a list of Signatures from the cluster for a block, excluding rewards
   */
  async getBlockSignatures(slot, commitment) {
    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {
      transactionDetails: 'signatures',
      rewards: false
    });
    const unsafeRes = await this._rpcRequest('getBlock', args);
    const res = create$1(unsafeRes, GetBlockSignaturesRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get block');
    }
    const result = res.result;
    if (!result) {
      throw new Error('Block ' + slot + ' not found');
    }
    return result;
  }

  /**
   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards
   *
   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.
   */
  async getConfirmedBlockSignatures(slot, commitment) {
    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {
      transactionDetails: 'signatures',
      rewards: false
    });
    const unsafeRes = await this._rpcRequest('getBlock', args);
    const res = create$1(unsafeRes, GetBlockSignaturesRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');
    }
    const result = res.result;
    if (!result) {
      throw new Error('Confirmed block ' + slot + ' not found');
    }
    return result;
  }

  /**
   * Fetch a transaction details for a confirmed transaction
   *
   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.
   */
  async getConfirmedTransaction(signature, commitment) {
    const args = this._buildArgsAtLeastConfirmed([signature], commitment);
    const unsafeRes = await this._rpcRequest('getTransaction', args);
    const res = create$1(unsafeRes, GetTransactionRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');
    }
    const result = res.result;
    if (!result) return result;
    const message = new Message(result.transaction.message);
    const signatures = result.transaction.signatures;
    return {
      ...result,
      transaction: Transaction$3.populate(message, signatures)
    };
  }

  /**
   * Fetch parsed transaction details for a confirmed transaction
   *
   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.
   */
  async getParsedConfirmedTransaction(signature, commitment) {
    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');
    const unsafeRes = await this._rpcRequest('getTransaction', args);
    const res = create$1(unsafeRes, GetParsedTransactionRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');
    }
    return res.result;
  }

  /**
   * Fetch parsed transaction details for a batch of confirmed transactions
   *
   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.
   */
  async getParsedConfirmedTransactions(signatures, commitment) {
    const batch = signatures.map(signature => {
      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');
      return {
        methodName: 'getTransaction',
        args
      };
    });
    const unsafeRes = await this._rpcBatchRequest(batch);
    const res = unsafeRes.map(unsafeRes => {
      const res = create$1(unsafeRes, GetParsedTransactionRpcResult);
      if ('error' in res) {
        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');
      }
      return res.result;
    });
    return res;
  }

  /**
   * Fetch a list of all the confirmed signatures for transactions involving an address
   * within a specified slot range. Max range allowed is 10,000 slots.
   *
   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.
   *
   * @param address queried address
   * @param startSlot start slot, inclusive
   * @param endSlot end slot, inclusive
   */
  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {
    let options = {};
    let firstAvailableBlock = await this.getFirstAvailableBlock();
    while (!('until' in options)) {
      startSlot--;
      if (startSlot <= 0 || startSlot < firstAvailableBlock) {
        break;
      }
      try {
        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');
        if (block.signatures.length > 0) {
          options.until = block.signatures[block.signatures.length - 1].toString();
        }
      } catch (err) {
        if (err instanceof Error && err.message.includes('skipped')) {
          continue;
        } else {
          throw err;
        }
      }
    }
    let highestConfirmedRoot = await this.getSlot('finalized');
    while (!('before' in options)) {
      endSlot++;
      if (endSlot > highestConfirmedRoot) {
        break;
      }
      try {
        const block = await this.getConfirmedBlockSignatures(endSlot);
        if (block.signatures.length > 0) {
          options.before = block.signatures[block.signatures.length - 1].toString();
        }
      } catch (err) {
        if (err instanceof Error && err.message.includes('skipped')) {
          continue;
        } else {
          throw err;
        }
      }
    }
    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);
    return confirmedSignatureInfo.map(info => info.signature);
  }

  /**
   * Returns confirmed signatures for transactions involving an
   * address backwards in time from the provided signature or most recent confirmed block
   *
   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.
   */
  async getConfirmedSignaturesForAddress2(address, options, commitment) {
    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);
    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);
    const res = create$1(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');
    }
    return res.result;
  }

  /**
   * Returns confirmed signatures for transactions involving an
   * address backwards in time from the provided signature or most recent confirmed block
   *
   *
   * @param address queried address
   * @param options
   */
  async getSignaturesForAddress(address, options, commitment) {
    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);
    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);
    const res = create$1(unsafeRes, GetSignaturesForAddressRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');
    }
    return res.result;
  }
  async getAddressLookupTable(accountKey, config) {
    const {
      context,
      value: accountInfo
    } = await this.getAccountInfoAndContext(accountKey, config);
    let value = null;
    if (accountInfo !== null) {
      value = new AddressLookupTableAccount({
        key: accountKey,
        state: AddressLookupTableAccount.deserialize(accountInfo.data)
      });
    }
    return {
      context,
      value
    };
  }

  /**
   * Fetch the contents of a Nonce account from the cluster, return with context
   */
  async getNonceAndContext(nonceAccount, commitmentOrConfig) {
    const {
      context,
      value: accountInfo
    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);
    let value = null;
    if (accountInfo !== null) {
      value = NonceAccount.fromAccountData(accountInfo.data);
    }
    return {
      context,
      value
    };
  }

  /**
   * Fetch the contents of a Nonce account from the cluster
   */
  async getNonce(nonceAccount, commitmentOrConfig) {
    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {
      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);
    });
  }

  /**
   * Request an allocation of lamports to the specified address
   *
   * ```typescript
   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
   *
   * (async () => {
   *   const connection = new Connection("https://api.testnet.solana.com", "confirmed");
   *   const myAddress = new PublicKey("2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM");
   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);
   *   await connection.confirmTransaction(signature);
   * })();
   * ```
   */
  async requestAirdrop(to, lamports) {
    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);
    const res = create$1(unsafeRes, RequestAirdropRpcResult);
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);
    }
    return res.result;
  }

  /**
   * @internal
   */
  async _blockhashWithExpiryBlockHeight(disableCache) {
    if (!disableCache) {
      // Wait for polling to finish
      while (this._pollingBlockhash) {
        await sleep$1(100);
      }
      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;
      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;
      if (this._blockhashInfo.latestBlockhash !== null && !expired) {
        return this._blockhashInfo.latestBlockhash;
      }
    }
    return await this._pollNewBlockhash();
  }

  /**
   * @internal
   */
  async _pollNewBlockhash() {
    this._pollingBlockhash = true;
    try {
      const startTime = Date.now();
      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;
      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;
      for (let i = 0; i < 50; i++) {
        const latestBlockhash = await this.getLatestBlockhash('finalized');
        if (cachedBlockhash !== latestBlockhash.blockhash) {
          this._blockhashInfo = {
            latestBlockhash,
            lastFetch: Date.now(),
            transactionSignatures: [],
            simulatedSignatures: []
          };
          return latestBlockhash;
        }

        // Sleep for approximately half a slot
        await sleep$1(MS_PER_SLOT / 2);
      }
      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);
    } finally {
      this._pollingBlockhash = false;
    }
  }

  /**
   * get the stake minimum delegation
   */
  async getStakeMinimumDelegation(config) {
    const {
      commitment,
      config: configArg
    } = extractCommitmentFromConfig(config);
    const args = this._buildArgs([], commitment, 'base64', configArg);
    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);
    const res = create$1(unsafeRes, jsonRpcResultAndContext$1(number$6()));
    if ('error' in res) {
      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);
    }
    return res.result;
  }

  /**
   * Simulate a transaction
   *
   * @deprecated Instead, call {@link simulateTransaction} with {@link
   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters
   */

  /**
   * Simulate a transaction
   */
  // eslint-disable-next-line no-dupe-class-members

  /**
   * Simulate a transaction
   */
  // eslint-disable-next-line no-dupe-class-members
  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {
    if ('message' in transactionOrMessage) {
      const versionedTx = transactionOrMessage;
      const wireTransaction = versionedTx.serialize();
      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');
      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {
        throw new Error('Invalid arguments');
      }
      const config = configOrSigners || {};
      config.encoding = 'base64';
      if (!('commitment' in config)) {
        config.commitment = this.commitment;
      }
      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {
        config.innerInstructions = configOrSigners.innerInstructions;
      }
      const args = [encodedTransaction, config];
      const unsafeRes = await this._rpcRequest('simulateTransaction', args);
      const res = create$1(unsafeRes, SimulatedTransactionResponseStruct$1);
      if ('error' in res) {
        throw new Error('failed to simulate transaction: ' + res.error.message);
      }
      return res.result;
    }
    let transaction;
    if (transactionOrMessage instanceof Transaction$3) {
      let originalTx = transactionOrMessage;
      transaction = new Transaction$3();
      transaction.feePayer = originalTx.feePayer;
      transaction.instructions = transactionOrMessage.instructions;
      transaction.nonceInfo = originalTx.nonceInfo;
      transaction.signatures = originalTx.signatures;
    } else {
      transaction = Transaction$3.populate(transactionOrMessage);
      // HACK: this function relies on mutating the populated transaction
      transaction._message = transaction._json = undefined;
    }
    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {
      throw new Error('Invalid arguments');
    }
    const signers = configOrSigners;
    if (transaction.nonceInfo && signers) {
      transaction.sign(...signers);
    } else {
      let disableCache = this._disableBlockhashCaching;
      for (;;) {
        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);
        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;
        transaction.recentBlockhash = latestBlockhash.blockhash;
        if (!signers) break;
        transaction.sign(...signers);
        if (!transaction.signature) {
          throw new Error('!signature'); // should never happen
        }
        const signature = transaction.signature.toString('base64');
        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {
          // The signature of this transaction has not been seen before with the
          // current recentBlockhash, all done. Let's break
          this._blockhashInfo.simulatedSignatures.push(signature);
          break;
        } else {
          // This transaction would be treated as duplicate (its derived signature
          // matched to one of already recorded signatures).
          // So, we must fetch a new blockhash for a different signature by disabling
          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).
          disableCache = true;
        }
      }
    }
    const message = transaction._compile();
    const signData = message.serialize();
    const wireTransaction = transaction._serialize(signData);
    const encodedTransaction = wireTransaction.toString('base64');
    const config = {
      encoding: 'base64',
      commitment: this.commitment
    };
    if (includeAccounts) {
      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());
      config['accounts'] = {
        encoding: 'base64',
        addresses
      };
    }
    if (signers) {
      config.sigVerify = true;
    }
    if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {
      config.innerInstructions = configOrSigners.innerInstructions;
    }
    const args = [encodedTransaction, config];
    const unsafeRes = await this._rpcRequest('simulateTransaction', args);
    const res = create$1(unsafeRes, SimulatedTransactionResponseStruct$1);
    if ('error' in res) {
      let logs;
      if ('data' in res.error) {
        logs = res.error.data.logs;
        if (logs && Array.isArray(logs)) {
          const traceIndent = '\n    ';
          const logTrace = traceIndent + logs.join(traceIndent);
          console.error(res.error.message, logTrace);
        }
      }
      throw new SendTransactionError({
        action: 'simulate',
        signature: '',
        transactionMessage: res.error.message,
        logs: logs
      });
    }
    return res.result;
  }

  /**
   * Sign and send a transaction
   *
   * @deprecated Instead, call {@link sendTransaction} with a {@link
   * VersionedTransaction}
   */

  /**
   * Send a signed transaction
   */
  // eslint-disable-next-line no-dupe-class-members

  /**
   * Sign and send a transaction
   */
  // eslint-disable-next-line no-dupe-class-members
  async sendTransaction(transaction, signersOrOptions, options) {
    if ('version' in transaction) {
      if (signersOrOptions && Array.isArray(signersOrOptions)) {
        throw new Error('Invalid arguments');
      }
      const wireTransaction = transaction.serialize();
      return await this.sendRawTransaction(wireTransaction, signersOrOptions);
    }
    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {
      throw new Error('Invalid arguments');
    }
    const signers = signersOrOptions;
    if (transaction.nonceInfo) {
      transaction.sign(...signers);
    } else {
      let disableCache = this._disableBlockhashCaching;
      for (;;) {
        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);
        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;
        transaction.recentBlockhash = latestBlockhash.blockhash;
        transaction.sign(...signers);
        if (!transaction.signature) {
          throw new Error('!signature'); // should never happen
        }
        const signature = transaction.signature.toString('base64');
        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {
          // The signature of this transaction has not been seen before with the
          // current recentBlockhash, all done. Let's break
          this._blockhashInfo.transactionSignatures.push(signature);
          break;
        } else {
          // This transaction would be treated as duplicate (its derived signature
          // matched to one of already recorded signatures).
          // So, we must fetch a new blockhash for a different signature by disabling
          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).
          disableCache = true;
        }
      }
    }
    const wireTransaction = transaction.serialize();
    return await this.sendRawTransaction(wireTransaction, options);
  }

  /**
   * Send a transaction that has already been signed and serialized into the
   * wire format
   */
  async sendRawTransaction(rawTransaction, options) {
    const encodedTransaction = toBuffer(rawTransaction).toString('base64');
    const result = await this.sendEncodedTransaction(encodedTransaction, options);
    return result;
  }

  /**
   * Send a transaction that has already been signed, serialized into the
   * wire format, and encoded as a base64 string
   */
  async sendEncodedTransaction(encodedTransaction, options) {
    const config = {
      encoding: 'base64'
    };
    const skipPreflight = options && options.skipPreflight;
    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.
    : options && options.preflightCommitment || this.commitment;
    if (options && options.maxRetries != null) {
      config.maxRetries = options.maxRetries;
    }
    if (options && options.minContextSlot != null) {
      config.minContextSlot = options.minContextSlot;
    }
    if (skipPreflight) {
      config.skipPreflight = skipPreflight;
    }
    if (preflightCommitment) {
      config.preflightCommitment = preflightCommitment;
    }
    const args = [encodedTransaction, config];
    const unsafeRes = await this._rpcRequest('sendTransaction', args);
    const res = create$1(unsafeRes, SendTransactionRpcResult);
    if ('error' in res) {
      let logs = undefined;
      if ('data' in res.error) {
        logs = res.error.data.logs;
      }
      throw new SendTransactionError({
        action: skipPreflight ? 'send' : 'simulate',
        signature: '',
        transactionMessage: res.error.message,
        logs: logs
      });
    }
    return res.result;
  }

  /**
   * @internal
   */
  _wsOnOpen() {
    this._rpcWebSocketConnected = true;
    this._rpcWebSocketHeartbeat = setInterval(() => {
      // Ping server every 5s to prevent idle timeouts
      (async () => {
        try {
          await this._rpcWebSocket.notify('ping');
          // eslint-disable-next-line no-empty
        } catch {}
      })();
    }, 5000);
    this._updateSubscriptions();
  }

  /**
   * @internal
   */
  _wsOnError(err) {
    this._rpcWebSocketConnected = false;
    console.error('ws error:', err.message);
  }

  /**
   * @internal
   */
  _wsOnClose(code) {
    this._rpcWebSocketConnected = false;
    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;
    if (this._rpcWebSocketIdleTimeout) {
      clearTimeout(this._rpcWebSocketIdleTimeout);
      this._rpcWebSocketIdleTimeout = null;
    }
    if (this._rpcWebSocketHeartbeat) {
      clearInterval(this._rpcWebSocketHeartbeat);
      this._rpcWebSocketHeartbeat = null;
    }
    if (code === 1000) {
      // explicit close, check if any subscriptions have been made since close
      this._updateSubscriptions();
      return;
    }

    // implicit close, prepare subscriptions for auto-reconnect
    this._subscriptionCallbacksByServerSubscriptionId = {};
    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {
      this._setSubscription(hash, {
        ...subscription,
        state: 'pending'
      });
    });
  }

  /**
   * @internal
   */
  _setSubscription(hash, nextSubscription) {
    const prevState = this._subscriptionsByHash[hash]?.state;
    this._subscriptionsByHash[hash] = nextSubscription;
    if (prevState !== nextSubscription.state) {
      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];
      if (stateChangeCallbacks) {
        stateChangeCallbacks.forEach(cb => {
          try {
            cb(nextSubscription.state);
            // eslint-disable-next-line no-empty
          } catch {}
        });
      }
    }
  }

  /**
   * @internal
   */
  _onSubscriptionStateChange(clientSubscriptionId, callback) {
    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];
    if (hash == null) {
      return () => {};
    }
    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();
    stateChangeCallbacks.add(callback);
    return () => {
      stateChangeCallbacks.delete(callback);
      if (stateChangeCallbacks.size === 0) {
        delete this._subscriptionStateChangeCallbacksByHash[hash];
      }
    };
  }

  /**
   * @internal
   */
  async _updateSubscriptions() {
    if (Object.keys(this._subscriptionsByHash).length === 0) {
      if (this._rpcWebSocketConnected) {
        this._rpcWebSocketConnected = false;
        this._rpcWebSocketIdleTimeout = setTimeout(() => {
          this._rpcWebSocketIdleTimeout = null;
          try {
            this._rpcWebSocket.close();
          } catch (err) {
            // swallow error if socket has already been closed.
            if (err instanceof Error) {
              console.log(`Error when closing socket connection: ${err.message}`);
            }
          }
        }, 500);
      }
      return;
    }
    if (this._rpcWebSocketIdleTimeout !== null) {
      clearTimeout(this._rpcWebSocketIdleTimeout);
      this._rpcWebSocketIdleTimeout = null;
      this._rpcWebSocketConnected = true;
    }
    if (!this._rpcWebSocketConnected) {
      this._rpcWebSocket.connect();
      return;
    }
    const activeWebSocketGeneration = this._rpcWebSocketGeneration;
    const isCurrentConnectionStillActive = () => {
      return activeWebSocketGeneration === this._rpcWebSocketGeneration;
    };
    await Promise.all(
    // Don't be tempted to change this to `Object.entries`. We call
    // `_updateSubscriptions` recursively when processing the state,
    // so it's important that we look up the *current* version of
    // each subscription, every time we process a hash.
    Object.keys(this._subscriptionsByHash).map(async hash => {
      const subscription = this._subscriptionsByHash[hash];
      if (subscription === undefined) {
        // This entry has since been deleted. Skip.
        return;
      }
      switch (subscription.state) {
        case 'pending':
        case 'unsubscribed':
          if (subscription.callbacks.size === 0) {
            /**
             * You can end up here when:
             *
             * - a subscription has recently unsubscribed
             *   without having new callbacks added to it
             *   while the unsubscribe was in flight, or
             * - when a pending subscription has its
             *   listeners removed before a request was
             *   sent to the server.
             *
             * Being that nobody is interested in this
             * subscription any longer, delete it.
             */
            delete this._subscriptionsByHash[hash];
            if (subscription.state === 'unsubscribed') {
              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];
            }
            await this._updateSubscriptions();
            return;
          }
          await (async () => {
            const {
              args,
              method
            } = subscription;
            try {
              this._setSubscription(hash, {
                ...subscription,
                state: 'subscribing'
              });
              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);
              this._setSubscription(hash, {
                ...subscription,
                serverSubscriptionId,
                state: 'subscribed'
              });
              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;
              await this._updateSubscriptions();
            } catch (e) {
              console.error(`Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \`${method}\``, {
                args,
                error: e
              });
              if (!isCurrentConnectionStillActive()) {
                return;
              }
              // TODO: Maybe add an 'errored' state or a retry limit?
              this._setSubscription(hash, {
                ...subscription,
                state: 'pending'
              });
              await this._updateSubscriptions();
            }
          })();
          break;
        case 'subscribed':
          if (subscription.callbacks.size === 0) {
            // By the time we successfully set up a subscription
            // with the server, the client stopped caring about it.
            // Tear it down now.
            await (async () => {
              const {
                serverSubscriptionId,
                unsubscribeMethod
              } = subscription;
              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {
                /**
                 * Special case.
                 * If we're dealing with a subscription that has been auto-
                 * disposed by the RPC, then we can skip the RPC call to
                 * tear down the subscription here.
                 *
                 * NOTE: There is a proposal to eliminate this special case, here:
                 * https://github.com/solana-labs/solana/issues/18892
                 */
                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);
              } else {
                this._setSubscription(hash, {
                  ...subscription,
                  state: 'unsubscribing'
                });
                this._setSubscription(hash, {
                  ...subscription,
                  state: 'unsubscribing'
                });
                try {
                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);
                } catch (e) {
                  if (e instanceof Error) {
                    console.error(`${unsubscribeMethod} error:`, e.message);
                  }
                  if (!isCurrentConnectionStillActive()) {
                    return;
                  }
                  // TODO: Maybe add an 'errored' state or a retry limit?
                  this._setSubscription(hash, {
                    ...subscription,
                    state: 'subscribed'
                  });
                  await this._updateSubscriptions();
                  return;
                }
              }
              this._setSubscription(hash, {
                ...subscription,
                state: 'unsubscribed'
              });
              await this._updateSubscriptions();
            })();
          }
          break;
      }
    }));
  }

  /**
   * @internal
   */
  _handleServerNotification(serverSubscriptionId, callbackArgs) {
    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];
    if (callbacks === undefined) {
      return;
    }
    callbacks.forEach(cb => {
      try {
        cb(
        // I failed to find a way to convince TypeScript that `cb` is of type
        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.
        // See https://github.com/microsoft/TypeScript/issues/47615
        // @ts-ignore
        ...callbackArgs);
      } catch (e) {
        console.error(e);
      }
    });
  }

  /**
   * @internal
   */
  _wsOnAccountNotification(notification) {
    const {
      result,
      subscription
    } = create$1(notification, AccountNotificationResult);
    this._handleServerNotification(subscription, [result.value, result.context]);
  }

  /**
   * @internal
   */
  _makeSubscription(subscriptionConfig,
  /**
   * When preparing `args` for a call to `_makeSubscription`, be sure
   * to carefully apply a default `commitment` property, if necessary.
   *
   * - If the user supplied a `commitment` use that.
   * - Otherwise, if the `Connection::commitment` is set, use that.
   * - Otherwise, set it to the RPC server default: `finalized`.
   *
   * This is extremely important to ensure that these two fundamentally
   * identical subscriptions produce the same identifying hash:
   *
   * - A subscription made without specifying a commitment.
   * - A subscription made where the commitment specified is the same
   *   as the default applied to the subscription above.
   *
   * Example; these two subscriptions must produce the same hash:
   *
   * - An `accountSubscribe` subscription for `'PUBKEY'`
   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment
   *   `'finalized'`.
   *
   * See the 'making a subscription with defaulted params omitted' test
   * in `connection-subscriptions.ts` for more.
   */
  args) {
    const clientSubscriptionId = this._nextClientSubscriptionId++;
    const hash = fastStableStringify([subscriptionConfig.method, args]);
    const existingSubscription = this._subscriptionsByHash[hash];
    if (existingSubscription === undefined) {
      this._subscriptionsByHash[hash] = {
        ...subscriptionConfig,
        args,
        callbacks: new Set([subscriptionConfig.callback]),
        state: 'pending'
      };
    } else {
      existingSubscription.callbacks.add(subscriptionConfig.callback);
    }
    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;
    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {
      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];
      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];
      const subscription = this._subscriptionsByHash[hash];
      assert$3(subscription !== undefined, `Could not find a \`Subscription\` when tearing down client subscription #${clientSubscriptionId}`);
      subscription.callbacks.delete(subscriptionConfig.callback);
      await this._updateSubscriptions();
    };
    this._updateSubscriptions();
    return clientSubscriptionId;
  }

  /**
   * Register a callback to be invoked whenever the specified account changes
   *
   * @param publicKey Public key of the account to monitor
   * @param callback Function to invoke whenever the account is changed
   * @param config
   * @return subscription id
   */

  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */
  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members
  onAccountChange(publicKey, callback, commitmentOrConfig) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',
    // Apply connection/server default.
    'base64', config);
    return this._makeSubscription({
      callback,
      method: 'accountSubscribe',
      unsubscribeMethod: 'accountUnsubscribe'
    }, args);
  }

  /**
   * Deregister an account notification callback
   *
   * @param clientSubscriptionId client subscription id to deregister
   */
  async removeAccountChangeListener(clientSubscriptionId) {
    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');
  }

  /**
   * @internal
   */
  _wsOnProgramAccountNotification(notification) {
    const {
      result,
      subscription
    } = create$1(notification, ProgramAccountNotificationResult);
    this._handleServerNotification(subscription, [{
      accountId: result.value.pubkey,
      accountInfo: result.value.account
    }, result.context]);
  }

  /**
   * Register a callback to be invoked whenever accounts owned by the
   * specified program change
   *
   * @param programId Public key of the program to monitor
   * @param callback Function to invoke whenever the account is changed
   * @param config
   * @return subscription id
   */

  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */
  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members
  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {
    const {
      commitment,
      config
    } = extractCommitmentFromConfig(commitmentOrConfig);
    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',
    // Apply connection/server default.
    'base64' /* encoding */, config ? config : maybeFilters ? {
      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)
    } : undefined /* extra */);
    return this._makeSubscription({
      callback,
      method: 'programSubscribe',
      unsubscribeMethod: 'programUnsubscribe'
    }, args);
  }

  /**
   * Deregister an account notification callback
   *
   * @param clientSubscriptionId client subscription id to deregister
   */
  async removeProgramAccountChangeListener(clientSubscriptionId) {
    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');
  }

  /**
   * Registers a callback to be invoked whenever logs are emitted.
   */
  onLogs(filter, callback, commitment) {
    const args = this._buildArgs([typeof filter === 'object' ? {
      mentions: [filter.toString()]
    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.
    );
    return this._makeSubscription({
      callback,
      method: 'logsSubscribe',
      unsubscribeMethod: 'logsUnsubscribe'
    }, args);
  }

  /**
   * Deregister a logs callback.
   *
   * @param clientSubscriptionId client subscription id to deregister.
   */
  async removeOnLogsListener(clientSubscriptionId) {
    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');
  }

  /**
   * @internal
   */
  _wsOnLogsNotification(notification) {
    const {
      result,
      subscription
    } = create$1(notification, LogsNotificationResult);
    this._handleServerNotification(subscription, [result.value, result.context]);
  }

  /**
   * @internal
   */
  _wsOnSlotNotification(notification) {
    const {
      result,
      subscription
    } = create$1(notification, SlotNotificationResult);
    this._handleServerNotification(subscription, [result]);
  }

  /**
   * Register a callback to be invoked upon slot changes
   *
   * @param callback Function to invoke whenever the slot changes
   * @return subscription id
   */
  onSlotChange(callback) {
    return this._makeSubscription({
      callback,
      method: 'slotSubscribe',
      unsubscribeMethod: 'slotUnsubscribe'
    }, [] /* args */);
  }

  /**
   * Deregister a slot notification callback
   *
   * @param clientSubscriptionId client subscription id to deregister
   */
  async removeSlotChangeListener(clientSubscriptionId) {
    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');
  }

  /**
   * @internal
   */
  _wsOnSlotUpdatesNotification(notification) {
    const {
      result,
      subscription
    } = create$1(notification, SlotUpdateNotificationResult);
    this._handleServerNotification(subscription, [result]);
  }

  /**
   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s
   * may be useful to track live progress of a cluster.
   *
   * @param callback Function to invoke whenever the slot updates
   * @return subscription id
   */
  onSlotUpdate(callback) {
    return this._makeSubscription({
      callback,
      method: 'slotsUpdatesSubscribe',
      unsubscribeMethod: 'slotsUpdatesUnsubscribe'
    }, [] /* args */);
  }

  /**
   * Deregister a slot update notification callback
   *
   * @param clientSubscriptionId client subscription id to deregister
   */
  async removeSlotUpdateListener(clientSubscriptionId) {
    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');
  }

  /**
   * @internal
   */

  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {
    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];
    if (dispose) {
      await dispose();
    } else {
      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\`${clientSubscriptionId}\` for '${subscriptionName}' events ` + 'could not be found.');
    }
  }
  _buildArgs(args, override, encoding, extra) {
    const commitment = override || this._commitment;
    if (commitment || encoding || extra) {
      let options = {};
      if (encoding) {
        options.encoding = encoding;
      }
      if (commitment) {
        options.commitment = commitment;
      }
      if (extra) {
        options = Object.assign(options, extra);
      }
      args.push(options);
    }
    return args;
  }

  /**
   * @internal
   */
  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {
    const commitment = override || this._commitment;
    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {
      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');
    }
    return this._buildArgs(args, override, encoding, extra);
  }

  /**
   * @internal
   */
  _wsOnSignatureNotification(notification) {
    const {
      result,
      subscription
    } = create$1(notification, SignatureNotificationResult);
    if (result.value !== 'receivedSignature') {
      /**
       * Special case.
       * After a signature is processed, RPCs automatically dispose of the
       * subscription on the server side. We need to track which of these
       * subscriptions have been disposed in such a way, so that we know
       * whether the client is dealing with a not-yet-processed signature
       * (in which case we must tear down the server subscription) or an
       * already-processed signature (in which case the client can simply
       * clear out the subscription locally without telling the server).
       *
       * NOTE: There is a proposal to eliminate this special case, here:
       * https://github.com/solana-labs/solana/issues/18892
       */
      this._subscriptionsAutoDisposedByRpc.add(subscription);
    }
    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{
      type: 'received'
    }, result.context] : [{
      type: 'status',
      result: result.value
    }, result.context]);
  }

  /**
   * Register a callback to be invoked upon signature updates
   *
   * @param signature Transaction signature string in base 58
   * @param callback Function to invoke on signature notifications
   * @param commitment Specify the commitment level signature must reach before notification
   * @return subscription id
   */
  onSignature(signature, callback, commitment) {
    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.
    );
    const clientSubscriptionId = this._makeSubscription({
      callback: (notification, context) => {
        if (notification.type === 'status') {
          callback(notification.result, context);
          // Signatures subscriptions are auto-removed by the RPC service
          // so no need to explicitly send an unsubscribe message.
          try {
            this.removeSignatureListener(clientSubscriptionId);
            // eslint-disable-next-line no-empty
          } catch (_err) {
            // Already removed.
          }
        }
      },
      method: 'signatureSubscribe',
      unsubscribeMethod: 'signatureUnsubscribe'
    }, args);
    return clientSubscriptionId;
  }

  /**
   * Register a callback to be invoked when a transaction is
   * received and/or processed.
   *
   * @param signature Transaction signature string in base 58
   * @param callback Function to invoke on signature notifications
   * @param options Enable received notifications and set the commitment
   *   level that signature must reach before notification
   * @return subscription id
   */
  onSignatureWithOptions(signature, callback, options) {
    const {
      commitment,
      ...extra
    } = {
      ...options,
      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.
    };
    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);
    const clientSubscriptionId = this._makeSubscription({
      callback: (notification, context) => {
        callback(notification, context);
        // Signatures subscriptions are auto-removed by the RPC service
        // so no need to explicitly send an unsubscribe message.
        try {
          this.removeSignatureListener(clientSubscriptionId);
          // eslint-disable-next-line no-empty
        } catch (_err) {
          // Already removed.
        }
      },
      method: 'signatureSubscribe',
      unsubscribeMethod: 'signatureUnsubscribe'
    }, args);
    return clientSubscriptionId;
  }

  /**
   * Deregister a signature notification callback
   *
   * @param clientSubscriptionId client subscription id to deregister
   */
  async removeSignatureListener(clientSubscriptionId) {
    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');
  }

  /**
   * @internal
   */
  _wsOnRootNotification(notification) {
    const {
      result,
      subscription
    } = create$1(notification, RootNotificationResult);
    this._handleServerNotification(subscription, [result]);
  }

  /**
   * Register a callback to be invoked upon root changes
   *
   * @param callback Function to invoke whenever the root changes
   * @return subscription id
   */
  onRootChange(callback) {
    return this._makeSubscription({
      callback,
      method: 'rootSubscribe',
      unsubscribeMethod: 'rootUnsubscribe'
    }, [] /* args */);
  }

  /**
   * Deregister a root notification callback
   *
   * @param clientSubscriptionId client subscription id to deregister
   */
  async removeRootChangeListener(clientSubscriptionId) {
    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');
  }
}

/**
 * Keypair signer interface
 */

/**
 * An account keypair used for signing transactions.
 */
let Keypair$2 = class Keypair {
  /**
   * Create a new keypair instance.
   * Generate random keypair if no {@link Ed25519Keypair} is provided.
   *
   * @param {Ed25519Keypair} keypair ed25519 keypair
   */
  constructor(keypair) {
    this._keypair = void 0;
    this._keypair = keypair ?? generateKeypair();
  }

  /**
   * Generate a new random keypair
   *
   * @returns {Keypair} Keypair
   */
  static generate() {
    return new Keypair(generateKeypair());
  }

  /**
   * Create a keypair from a raw secret key byte array.
   *
   * This method should only be used to recreate a keypair from a previously
   * generated secret key. Generating keypairs from a random seed should be done
   * with the {@link Keypair.fromSeed} method.
   *
   * @throws error if the provided secret key is invalid and validation is not skipped.
   *
   * @param secretKey secret key byte array
   * @param options skip secret key validation
   *
   * @returns {Keypair} Keypair
   */
  static fromSecretKey(secretKey, options) {
    if (secretKey.byteLength !== 64) {
      throw new Error('bad secret key size');
    }
    const publicKey = secretKey.slice(32, 64);
    if (!options || !options.skipValidation) {
      const privateScalar = secretKey.slice(0, 32);
      const computedPublicKey = getPublicKey(privateScalar);
      for (let ii = 0; ii < 32; ii++) {
        if (publicKey[ii] !== computedPublicKey[ii]) {
          throw new Error('provided secretKey is invalid');
        }
      }
    }
    return new Keypair({
      publicKey,
      secretKey
    });
  }

  /**
   * Generate a keypair from a 32 byte seed.
   *
   * @param seed seed byte array
   *
   * @returns {Keypair} Keypair
   */
  static fromSeed(seed) {
    const publicKey = getPublicKey(seed);
    const secretKey = new Uint8Array(64);
    secretKey.set(seed);
    secretKey.set(publicKey, 32);
    return new Keypair({
      publicKey,
      secretKey
    });
  }

  /**
   * The public key for this keypair
   *
   * @returns {PublicKey} PublicKey
   */
  get publicKey() {
    return new PublicKey(this._keypair.publicKey);
  }

  /**
   * The raw secret key for this keypair
   * @returns {Uint8Array} Secret key in an array of Uint8 bytes
   */
  get secretKey() {
    return new Uint8Array(this._keypair.secretKey);
  }
};

/**
 * An enumeration of valid LookupTableInstructionType's
 */

/**
 * An enumeration of valid address lookup table InstructionType's
 * @internal
 */
const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({
  CreateLookupTable: {
    index: 0,
    layout: struct$4([u32$4('instruction'), u64$5('recentSlot'), u8$4('bumpSeed')])
  },
  FreezeLookupTable: {
    index: 1,
    layout: struct$4([u32$4('instruction')])
  },
  ExtendLookupTable: {
    index: 2,
    layout: struct$4([u32$4('instruction'), u64$5(), seq(publicKey$7(), offset$1(u32$4(), -8), 'addresses')])
  },
  DeactivateLookupTable: {
    index: 3,
    layout: struct$4([u32$4('instruction')])
  },
  CloseLookupTable: {
    index: 4,
    layout: struct$4([u32$4('instruction')])
  }
});
class AddressLookupTableInstruction {
  /**
   * @internal
   */
  constructor() {}
  static decodeInstructionType(instruction) {
    this.checkProgramId(instruction.programId);
    const instructionTypeLayout = u32$4('instruction');
    const index = instructionTypeLayout.decode(instruction.data);
    let type;
    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {
      if (layout.index == index) {
        type = layoutType;
        break;
      }
    }
    if (!type) {
      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');
    }
    return type;
  }
  static decodeCreateLookupTable(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeysLength(instruction.keys, 4);
    const {
      recentSlot
    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);
    return {
      authority: instruction.keys[1].pubkey,
      payer: instruction.keys[2].pubkey,
      recentSlot: Number(recentSlot)
    };
  }
  static decodeExtendLookupTable(instruction) {
    this.checkProgramId(instruction.programId);
    if (instruction.keys.length < 2) {
      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);
    }
    const {
      addresses
    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);
    return {
      lookupTable: instruction.keys[0].pubkey,
      authority: instruction.keys[1].pubkey,
      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,
      addresses: addresses.map(buffer => new PublicKey(buffer))
    };
  }
  static decodeCloseLookupTable(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeysLength(instruction.keys, 3);
    return {
      lookupTable: instruction.keys[0].pubkey,
      authority: instruction.keys[1].pubkey,
      recipient: instruction.keys[2].pubkey
    };
  }
  static decodeFreezeLookupTable(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeysLength(instruction.keys, 2);
    return {
      lookupTable: instruction.keys[0].pubkey,
      authority: instruction.keys[1].pubkey
    };
  }
  static decodeDeactivateLookupTable(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeysLength(instruction.keys, 2);
    return {
      lookupTable: instruction.keys[0].pubkey,
      authority: instruction.keys[1].pubkey
    };
  }

  /**
   * @internal
   */
  static checkProgramId(programId) {
    if (!programId.equals(AddressLookupTableProgram.programId)) {
      throw new Error('invalid instruction; programId is not AddressLookupTable Program');
    }
  }
  /**
   * @internal
   */
  static checkKeysLength(keys, expectedLength) {
    if (keys.length < expectedLength) {
      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
    }
  }
}
class AddressLookupTableProgram {
  /**
   * @internal
   */
  constructor() {}
  static createLookupTable(params) {
    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE_1(BigInt(params.recentSlot), 8)], this.programId);
    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;
    const data = encodeData$1(type, {
      recentSlot: BigInt(params.recentSlot),
      bumpSeed: bumpSeed
    });
    const keys = [{
      pubkey: lookupTableAddress,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: params.authority,
      isSigner: true,
      isWritable: false
    }, {
      pubkey: params.payer,
      isSigner: true,
      isWritable: true
    }, {
      pubkey: SystemProgram.programId,
      isSigner: false,
      isWritable: false
    }];
    return [new TransactionInstruction({
      programId: this.programId,
      keys: keys,
      data: data
    }), lookupTableAddress];
  }
  static freezeLookupTable(params) {
    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;
    const data = encodeData$1(type);
    const keys = [{
      pubkey: params.lookupTable,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: params.authority,
      isSigner: true,
      isWritable: false
    }];
    return new TransactionInstruction({
      programId: this.programId,
      keys: keys,
      data: data
    });
  }
  static extendLookupTable(params) {
    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;
    const data = encodeData$1(type, {
      addresses: params.addresses.map(addr => addr.toBytes())
    });
    const keys = [{
      pubkey: params.lookupTable,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: params.authority,
      isSigner: true,
      isWritable: false
    }];
    if (params.payer) {
      keys.push({
        pubkey: params.payer,
        isSigner: true,
        isWritable: true
      }, {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false
      });
    }
    return new TransactionInstruction({
      programId: this.programId,
      keys: keys,
      data: data
    });
  }
  static deactivateLookupTable(params) {
    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;
    const data = encodeData$1(type);
    const keys = [{
      pubkey: params.lookupTable,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: params.authority,
      isSigner: true,
      isWritable: false
    }];
    return new TransactionInstruction({
      programId: this.programId,
      keys: keys,
      data: data
    });
  }
  static closeLookupTable(params) {
    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;
    const data = encodeData$1(type);
    const keys = [{
      pubkey: params.lookupTable,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: params.authority,
      isSigner: true,
      isWritable: false
    }, {
      pubkey: params.recipient,
      isSigner: false,
      isWritable: true
    }];
    return new TransactionInstruction({
      programId: this.programId,
      keys: keys,
      data: data
    });
  }
}
AddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');

/**
 * Compute Budget Instruction class
 */
class ComputeBudgetInstruction {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Decode a compute budget instruction and retrieve the instruction type.
   */
  static decodeInstructionType(instruction) {
    this.checkProgramId(instruction.programId);
    const instructionTypeLayout = u8$4('instruction');
    const typeIndex = instructionTypeLayout.decode(instruction.data);
    let type;
    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {
      if (layout.index == typeIndex) {
        type = ixType;
        break;
      }
    }
    if (!type) {
      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');
    }
    return type;
  }

  /**
   * Decode request units compute budget instruction and retrieve the instruction params.
   */
  static decodeRequestUnits(instruction) {
    this.checkProgramId(instruction.programId);
    const {
      units,
      additionalFee
    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);
    return {
      units,
      additionalFee
    };
  }

  /**
   * Decode request heap frame compute budget instruction and retrieve the instruction params.
   */
  static decodeRequestHeapFrame(instruction) {
    this.checkProgramId(instruction.programId);
    const {
      bytes
    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);
    return {
      bytes
    };
  }

  /**
   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.
   */
  static decodeSetComputeUnitLimit(instruction) {
    this.checkProgramId(instruction.programId);
    const {
      units
    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);
    return {
      units
    };
  }

  /**
   * Decode set compute unit price compute budget instruction and retrieve the instruction params.
   */
  static decodeSetComputeUnitPrice(instruction) {
    this.checkProgramId(instruction.programId);
    const {
      microLamports
    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);
    return {
      microLamports
    };
  }

  /**
   * @internal
   */
  static checkProgramId(programId) {
    if (!programId.equals(ComputeBudgetProgram.programId)) {
      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');
    }
  }
}

/**
 * An enumeration of valid ComputeBudgetInstructionType's
 */

/**
 * Request units instruction params
 */

/**
 * Request heap frame instruction params
 */

/**
 * Set compute unit limit instruction params
 */

/**
 * Set compute unit price instruction params
 */

/**
 * An enumeration of valid ComputeBudget InstructionType's
 * @internal
 */
const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({
  RequestUnits: {
    index: 0,
    layout: struct$4([u8$4('instruction'), u32$4('units'), u32$4('additionalFee')])
  },
  RequestHeapFrame: {
    index: 1,
    layout: struct$4([u8$4('instruction'), u32$4('bytes')])
  },
  SetComputeUnitLimit: {
    index: 2,
    layout: struct$4([u8$4('instruction'), u32$4('units')])
  },
  SetComputeUnitPrice: {
    index: 3,
    layout: struct$4([u8$4('instruction'), u64$5('microLamports')])
  }
});

/**
 * Factory class for transaction instructions to interact with the Compute Budget program
 */
class ComputeBudgetProgram {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Public key that identifies the Compute Budget program
   */

  /**
   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}
   */
  static requestUnits(params) {
    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;
    const data = encodeData$1(type, params);
    return new TransactionInstruction({
      keys: [],
      programId: this.programId,
      data
    });
  }
  static requestHeapFrame(params) {
    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;
    const data = encodeData$1(type, params);
    return new TransactionInstruction({
      keys: [],
      programId: this.programId,
      data
    });
  }
  static setComputeUnitLimit(params) {
    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;
    const data = encodeData$1(type, params);
    return new TransactionInstruction({
      keys: [],
      programId: this.programId,
      data
    });
  }
  static setComputeUnitPrice(params) {
    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;
    const data = encodeData$1(type, {
      microLamports: BigInt(params.microLamports)
    });
    return new TransactionInstruction({
      keys: [],
      programId: this.programId,
      data
    });
  }
}
ComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');

const PRIVATE_KEY_BYTES$1 = 64;
const PUBLIC_KEY_BYTES$1 = 32;
const SIGNATURE_BYTES = 64;

/**
 * Params for creating an ed25519 instruction using a public key
 */

/**
 * Params for creating an ed25519 instruction using a private key
 */

const ED25519_INSTRUCTION_LAYOUT = struct$4([u8$4('numSignatures'), u8$4('padding'), u16$3('signatureOffset'), u16$3('signatureInstructionIndex'), u16$3('publicKeyOffset'), u16$3('publicKeyInstructionIndex'), u16$3('messageDataOffset'), u16$3('messageDataSize'), u16$3('messageInstructionIndex')]);
class Ed25519Program {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Public key that identifies the ed25519 program
   */

  /**
   * Create an ed25519 instruction with a public key and signature. The
   * public key must be a buffer that is 32 bytes long, and the signature
   * must be a buffer of 64 bytes.
   */
  static createInstructionWithPublicKey(params) {
    const {
      publicKey,
      message,
      signature,
      instructionIndex
    } = params;
    assert$3(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);
    assert$3(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);
    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;
    const signatureOffset = publicKeyOffset + publicKey.length;
    const messageDataOffset = signatureOffset + signature.length;
    const numSignatures = 1;
    const instructionData = Buffer.alloc(messageDataOffset + message.length);
    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.
    : instructionIndex;
    ED25519_INSTRUCTION_LAYOUT.encode({
      numSignatures,
      padding: 0,
      signatureOffset,
      signatureInstructionIndex: index,
      publicKeyOffset,
      publicKeyInstructionIndex: index,
      messageDataOffset,
      messageDataSize: message.length,
      messageInstructionIndex: index
    }, instructionData);
    instructionData.fill(publicKey, publicKeyOffset);
    instructionData.fill(signature, signatureOffset);
    instructionData.fill(message, messageDataOffset);
    return new TransactionInstruction({
      keys: [],
      programId: Ed25519Program.programId,
      data: instructionData
    });
  }

  /**
   * Create an ed25519 instruction with a private key. The private key
   * must be a buffer that is 64 bytes long.
   */
  static createInstructionWithPrivateKey(params) {
    const {
      privateKey,
      message,
      instructionIndex
    } = params;
    assert$3(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);
    try {
      const keypair = Keypair$2.fromSecretKey(privateKey);
      const publicKey = keypair.publicKey.toBytes();
      const signature = sign(message, keypair.secretKey);
      return this.createInstructionWithPublicKey({
        publicKey,
        message,
        signature,
        instructionIndex
      });
    } catch (error) {
      throw new Error(`Error creating instruction; ${error}`);
    }
  }
}
Ed25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');

const ecdsaSign = (msgHash, privKey) => {
  const signature = secp256k1.sign(msgHash, privKey);
  return [signature.toCompactRawBytes(), signature.recovery];
};
secp256k1.utils.isValidPrivateKey;
const publicKeyCreate = secp256k1.getPublicKey;

const PRIVATE_KEY_BYTES = 32;
const ETHEREUM_ADDRESS_BYTES = 20;
const PUBLIC_KEY_BYTES = 64;
const SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;

/**
 * Params for creating an secp256k1 instruction using a public key
 */

/**
 * Params for creating an secp256k1 instruction using an Ethereum address
 */

/**
 * Params for creating an secp256k1 instruction using a private key
 */

const SECP256K1_INSTRUCTION_LAYOUT = struct$4([u8$4('numSignatures'), u16$3('signatureOffset'), u8$4('signatureInstructionIndex'), u16$3('ethAddressOffset'), u8$4('ethAddressInstructionIndex'), u16$3('messageDataOffset'), u16$3('messageDataSize'), u8$4('messageInstructionIndex'), blob$2(20, 'ethAddress'), blob$2(64, 'signature'), u8$4('recoveryId')]);
class Secp256k1Program {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Public key that identifies the secp256k1 program
   */

  /**
   * Construct an Ethereum address from a secp256k1 public key buffer.
   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer
   */
  static publicKeyToEthAddress(publicKey) {
    assert$3(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);
    try {
      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);
    } catch (error) {
      throw new Error(`Error constructing Ethereum address: ${error}`);
    }
  }

  /**
   * Create an secp256k1 instruction with a public key. The public key
   * must be a buffer that is 64 bytes long.
   */
  static createInstructionWithPublicKey(params) {
    const {
      publicKey,
      message,
      signature,
      recoveryId,
      instructionIndex
    } = params;
    return Secp256k1Program.createInstructionWithEthAddress({
      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),
      message,
      signature,
      recoveryId,
      instructionIndex
    });
  }

  /**
   * Create an secp256k1 instruction with an Ethereum address. The address
   * must be a hex string or a buffer that is 20 bytes long.
   */
  static createInstructionWithEthAddress(params) {
    const {
      ethAddress: rawAddress,
      message,
      signature,
      recoveryId,
      instructionIndex = 0
    } = params;
    let ethAddress;
    if (typeof rawAddress === 'string') {
      if (rawAddress.startsWith('0x')) {
        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');
      } else {
        ethAddress = Buffer.from(rawAddress, 'hex');
      }
    } else {
      ethAddress = rawAddress;
    }
    assert$3(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);
    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;
    const ethAddressOffset = dataStart;
    const signatureOffset = dataStart + ethAddress.length;
    const messageDataOffset = signatureOffset + signature.length + 1;
    const numSignatures = 1;
    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);
    SECP256K1_INSTRUCTION_LAYOUT.encode({
      numSignatures,
      signatureOffset,
      signatureInstructionIndex: instructionIndex,
      ethAddressOffset,
      ethAddressInstructionIndex: instructionIndex,
      messageDataOffset,
      messageDataSize: message.length,
      messageInstructionIndex: instructionIndex,
      signature: toBuffer(signature),
      ethAddress: toBuffer(ethAddress),
      recoveryId
    }, instructionData);
    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);
    return new TransactionInstruction({
      keys: [],
      programId: Secp256k1Program.programId,
      data: instructionData
    });
  }

  /**
   * Create an secp256k1 instruction with a private key. The private key
   * must be a buffer that is 32 bytes long.
   */
  static createInstructionWithPrivateKey(params) {
    const {
      privateKey: pkey,
      message,
      instructionIndex
    } = params;
    assert$3(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);
    try {
      const privateKey = toBuffer(pkey);
      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte
      const messageHash = Buffer.from(keccak_256(toBuffer(message)));
      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);
      return this.createInstructionWithPublicKey({
        publicKey,
        message,
        signature,
        recoveryId,
        instructionIndex
      });
    } catch (error) {
      throw new Error(`Error creating instruction; ${error}`);
    }
  }
}
Secp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');

var _Lockup;

/**
 * Address of the stake config account which configures the rate
 * of stake warmup and cooldown as well as the slashing penalty.
 */
const STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');

/**
 * Stake account authority info
 */
class Authorized {
  /**
   * Create a new Authorized object
   * @param staker the stake authority
   * @param withdrawer the withdraw authority
   */
  constructor(staker, withdrawer) {
    /** stake authority */
    this.staker = void 0;
    /** withdraw authority */
    this.withdrawer = void 0;
    this.staker = staker;
    this.withdrawer = withdrawer;
  }
}
/**
 * Stake account lockup info
 */
class Lockup {
  /**
   * Create a new Lockup object
   */
  constructor(unixTimestamp, epoch, custodian) {
    /** Unix timestamp of lockup expiration */
    this.unixTimestamp = void 0;
    /** Epoch of lockup expiration */
    this.epoch = void 0;
    /** Lockup custodian authority */
    this.custodian = void 0;
    this.unixTimestamp = unixTimestamp;
    this.epoch = epoch;
    this.custodian = custodian;
  }

  /**
   * Default, inactive Lockup value
   */
}
_Lockup = Lockup;
Lockup.default = new _Lockup(0, 0, PublicKey.default);
/**
 * Create stake account transaction params
 */
/**
 * Create stake account with seed transaction params
 */
/**
 * Initialize stake instruction params
 */
/**
 * Delegate stake instruction params
 */
/**
 * Authorize stake instruction params
 */
/**
 * Authorize stake instruction params using a derived key
 */
/**
 * Split stake instruction params
 */
/**
 * Split with seed transaction params
 */
/**
 * Withdraw stake instruction params
 */
/**
 * Deactivate stake instruction params
 */
/**
 * Merge stake instruction params
 */
/**
 * Stake Instruction class
 */
class StakeInstruction {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Decode a stake instruction and retrieve the instruction type.
   */
  static decodeInstructionType(instruction) {
    this.checkProgramId(instruction.programId);
    const instructionTypeLayout = u32$4('instruction');
    const typeIndex = instructionTypeLayout.decode(instruction.data);
    let type;
    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {
      if (layout.index == typeIndex) {
        type = ixType;
        break;
      }
    }
    if (!type) {
      throw new Error('Instruction type incorrect; not a StakeInstruction');
    }
    return type;
  }

  /**
   * Decode a initialize stake instruction and retrieve the instruction params.
   */
  static decodeInitialize(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 2);
    const {
      authorized,
      lockup
    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);
    return {
      stakePubkey: instruction.keys[0].pubkey,
      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),
      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))
    };
  }

  /**
   * Decode a delegate stake instruction and retrieve the instruction params.
   */
  static decodeDelegate(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 6);
    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);
    return {
      stakePubkey: instruction.keys[0].pubkey,
      votePubkey: instruction.keys[1].pubkey,
      authorizedPubkey: instruction.keys[5].pubkey
    };
  }

  /**
   * Decode an authorize stake instruction and retrieve the instruction params.
   */
  static decodeAuthorize(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    const {
      newAuthorized,
      stakeAuthorizationType
    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);
    const o = {
      stakePubkey: instruction.keys[0].pubkey,
      authorizedPubkey: instruction.keys[2].pubkey,
      newAuthorizedPubkey: new PublicKey(newAuthorized),
      stakeAuthorizationType: {
        index: stakeAuthorizationType
      }
    };
    if (instruction.keys.length > 3) {
      o.custodianPubkey = instruction.keys[3].pubkey;
    }
    return o;
  }

  /**
   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.
   */
  static decodeAuthorizeWithSeed(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 2);
    const {
      newAuthorized,
      stakeAuthorizationType,
      authoritySeed,
      authorityOwner
    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);
    const o = {
      stakePubkey: instruction.keys[0].pubkey,
      authorityBase: instruction.keys[1].pubkey,
      authoritySeed: authoritySeed,
      authorityOwner: new PublicKey(authorityOwner),
      newAuthorizedPubkey: new PublicKey(newAuthorized),
      stakeAuthorizationType: {
        index: stakeAuthorizationType
      }
    };
    if (instruction.keys.length > 3) {
      o.custodianPubkey = instruction.keys[3].pubkey;
    }
    return o;
  }

  /**
   * Decode a split stake instruction and retrieve the instruction params.
   */
  static decodeSplit(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    const {
      lamports
    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);
    return {
      stakePubkey: instruction.keys[0].pubkey,
      splitStakePubkey: instruction.keys[1].pubkey,
      authorizedPubkey: instruction.keys[2].pubkey,
      lamports
    };
  }

  /**
   * Decode a merge stake instruction and retrieve the instruction params.
   */
  static decodeMerge(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);
    return {
      stakePubkey: instruction.keys[0].pubkey,
      sourceStakePubKey: instruction.keys[1].pubkey,
      authorizedPubkey: instruction.keys[4].pubkey
    };
  }

  /**
   * Decode a withdraw stake instruction and retrieve the instruction params.
   */
  static decodeWithdraw(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 5);
    const {
      lamports
    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);
    const o = {
      stakePubkey: instruction.keys[0].pubkey,
      toPubkey: instruction.keys[1].pubkey,
      authorizedPubkey: instruction.keys[4].pubkey,
      lamports
    };
    if (instruction.keys.length > 5) {
      o.custodianPubkey = instruction.keys[5].pubkey;
    }
    return o;
  }

  /**
   * Decode a deactivate stake instruction and retrieve the instruction params.
   */
  static decodeDeactivate(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);
    return {
      stakePubkey: instruction.keys[0].pubkey,
      authorizedPubkey: instruction.keys[2].pubkey
    };
  }

  /**
   * @internal
   */
  static checkProgramId(programId) {
    if (!programId.equals(StakeProgram.programId)) {
      throw new Error('invalid instruction; programId is not StakeProgram');
    }
  }

  /**
   * @internal
   */
  static checkKeyLength(keys, expectedLength) {
    if (keys.length < expectedLength) {
      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
    }
  }
}

/**
 * An enumeration of valid StakeInstructionType's
 */

/**
 * An enumeration of valid stake InstructionType's
 * @internal
 */
const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({
  Initialize: {
    index: 0,
    layout: struct$4([u32$4('instruction'), authorized(), lockup()])
  },
  Authorize: {
    index: 1,
    layout: struct$4([u32$4('instruction'), publicKey$7('newAuthorized'), u32$4('stakeAuthorizationType')])
  },
  Delegate: {
    index: 2,
    layout: struct$4([u32$4('instruction')])
  },
  Split: {
    index: 3,
    layout: struct$4([u32$4('instruction'), ns64$1('lamports')])
  },
  Withdraw: {
    index: 4,
    layout: struct$4([u32$4('instruction'), ns64$1('lamports')])
  },
  Deactivate: {
    index: 5,
    layout: struct$4([u32$4('instruction')])
  },
  Merge: {
    index: 7,
    layout: struct$4([u32$4('instruction')])
  },
  AuthorizeWithSeed: {
    index: 8,
    layout: struct$4([u32$4('instruction'), publicKey$7('newAuthorized'), u32$4('stakeAuthorizationType'), rustString('authoritySeed'), publicKey$7('authorityOwner')])
  }
});

/**
 * Stake authorization type
 */

/**
 * An enumeration of valid StakeAuthorizationLayout's
 */
const StakeAuthorizationLayout = Object.freeze({
  Staker: {
    index: 0
  },
  Withdrawer: {
    index: 1
  }
});

/**
 * Factory class for transactions to interact with the Stake program
 */
class StakeProgram {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Public key that identifies the Stake program
   */

  /**
   * Generate an Initialize instruction to add to a Stake Create transaction
   */
  static initialize(params) {
    const {
      stakePubkey,
      authorized,
      lockup: maybeLockup
    } = params;
    const lockup = maybeLockup || Lockup.default;
    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;
    const data = encodeData$1(type, {
      authorized: {
        staker: toBuffer(authorized.staker.toBuffer()),
        withdrawer: toBuffer(authorized.withdrawer.toBuffer())
      },
      lockup: {
        unixTimestamp: lockup.unixTimestamp,
        epoch: lockup.epoch,
        custodian: toBuffer(lockup.custodian.toBuffer())
      }
    });
    const instructionData = {
      keys: [{
        pubkey: stakePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: false,
        isWritable: false
      }],
      programId: this.programId,
      data
    };
    return new TransactionInstruction(instructionData);
  }

  /**
   * Generate a Transaction that creates a new Stake account at
   *   an address generated with `from`, a seed, and the Stake programId
   */
  static createAccountWithSeed(params) {
    const transaction = new Transaction$3();
    transaction.add(SystemProgram.createAccountWithSeed({
      fromPubkey: params.fromPubkey,
      newAccountPubkey: params.stakePubkey,
      basePubkey: params.basePubkey,
      seed: params.seed,
      lamports: params.lamports,
      space: this.space,
      programId: this.programId
    }));
    const {
      stakePubkey,
      authorized,
      lockup
    } = params;
    return transaction.add(this.initialize({
      stakePubkey,
      authorized,
      lockup
    }));
  }

  /**
   * Generate a Transaction that creates a new Stake account
   */
  static createAccount(params) {
    const transaction = new Transaction$3();
    transaction.add(SystemProgram.createAccount({
      fromPubkey: params.fromPubkey,
      newAccountPubkey: params.stakePubkey,
      lamports: params.lamports,
      space: this.space,
      programId: this.programId
    }));
    const {
      stakePubkey,
      authorized,
      lockup
    } = params;
    return transaction.add(this.initialize({
      stakePubkey,
      authorized,
      lockup
    }));
  }

  /**
   * Generate a Transaction that delegates Stake tokens to a validator
   * Vote PublicKey. This transaction can also be used to redelegate Stake
   * to a new validator Vote PublicKey.
   */
  static delegate(params) {
    const {
      stakePubkey,
      authorizedPubkey,
      votePubkey
    } = params;
    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;
    const data = encodeData$1(type);
    return new Transaction$3().add({
      keys: [{
        pubkey: stakePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: votePubkey,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: SYSVAR_CLOCK_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: STAKE_CONFIG_ID,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: authorizedPubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a Transaction that authorizes a new PublicKey as Staker
   * or Withdrawer on the Stake account.
   */
  static authorize(params) {
    const {
      stakePubkey,
      authorizedPubkey,
      newAuthorizedPubkey,
      stakeAuthorizationType,
      custodianPubkey
    } = params;
    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;
    const data = encodeData$1(type, {
      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
      stakeAuthorizationType: stakeAuthorizationType.index
    });
    const keys = [{
      pubkey: stakePubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: SYSVAR_CLOCK_PUBKEY,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: authorizedPubkey,
      isSigner: true,
      isWritable: false
    }];
    if (custodianPubkey) {
      keys.push({
        pubkey: custodianPubkey,
        isSigner: true,
        isWritable: false
      });
    }
    return new Transaction$3().add({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a Transaction that authorizes a new PublicKey as Staker
   * or Withdrawer on the Stake account.
   */
  static authorizeWithSeed(params) {
    const {
      stakePubkey,
      authorityBase,
      authoritySeed,
      authorityOwner,
      newAuthorizedPubkey,
      stakeAuthorizationType,
      custodianPubkey
    } = params;
    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
    const data = encodeData$1(type, {
      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
      stakeAuthorizationType: stakeAuthorizationType.index,
      authoritySeed: authoritySeed,
      authorityOwner: toBuffer(authorityOwner.toBuffer())
    });
    const keys = [{
      pubkey: stakePubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: authorityBase,
      isSigner: true,
      isWritable: false
    }, {
      pubkey: SYSVAR_CLOCK_PUBKEY,
      isSigner: false,
      isWritable: false
    }];
    if (custodianPubkey) {
      keys.push({
        pubkey: custodianPubkey,
        isSigner: true,
        isWritable: false
      });
    }
    return new Transaction$3().add({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * @internal
   */
  static splitInstruction(params) {
    const {
      stakePubkey,
      authorizedPubkey,
      splitStakePubkey,
      lamports
    } = params;
    const type = STAKE_INSTRUCTION_LAYOUTS.Split;
    const data = encodeData$1(type, {
      lamports
    });
    return new TransactionInstruction({
      keys: [{
        pubkey: stakePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: splitStakePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: authorizedPubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a Transaction that splits Stake tokens into another stake account
   */
  static split(params,
  // Compute the cost of allocating the new stake account in lamports
  rentExemptReserve) {
    const transaction = new Transaction$3();
    transaction.add(SystemProgram.createAccount({
      fromPubkey: params.authorizedPubkey,
      newAccountPubkey: params.splitStakePubkey,
      lamports: rentExemptReserve,
      space: this.space,
      programId: this.programId
    }));
    return transaction.add(this.splitInstruction(params));
  }

  /**
   * Generate a Transaction that splits Stake tokens into another account
   * derived from a base public key and seed
   */
  static splitWithSeed(params,
  // If this stake account is new, compute the cost of allocating it in lamports
  rentExemptReserve) {
    const {
      stakePubkey,
      authorizedPubkey,
      splitStakePubkey,
      basePubkey,
      seed,
      lamports
    } = params;
    const transaction = new Transaction$3();
    transaction.add(SystemProgram.allocate({
      accountPubkey: splitStakePubkey,
      basePubkey,
      seed,
      space: this.space,
      programId: this.programId
    }));
    if (rentExemptReserve && rentExemptReserve > 0) {
      transaction.add(SystemProgram.transfer({
        fromPubkey: params.authorizedPubkey,
        toPubkey: splitStakePubkey,
        lamports: rentExemptReserve
      }));
    }
    return transaction.add(this.splitInstruction({
      stakePubkey,
      authorizedPubkey,
      splitStakePubkey,
      lamports
    }));
  }

  /**
   * Generate a Transaction that merges Stake accounts.
   */
  static merge(params) {
    const {
      stakePubkey,
      sourceStakePubKey,
      authorizedPubkey
    } = params;
    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;
    const data = encodeData$1(type);
    return new Transaction$3().add({
      keys: [{
        pubkey: stakePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: sourceStakePubKey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: SYSVAR_CLOCK_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: authorizedPubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a Transaction that withdraws deactivated Stake tokens.
   */
  static withdraw(params) {
    const {
      stakePubkey,
      authorizedPubkey,
      toPubkey,
      lamports,
      custodianPubkey
    } = params;
    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;
    const data = encodeData$1(type, {
      lamports
    });
    const keys = [{
      pubkey: stakePubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: toPubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: SYSVAR_CLOCK_PUBKEY,
      isSigner: false,
      isWritable: false
    }, {
      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
      isSigner: false,
      isWritable: false
    }, {
      pubkey: authorizedPubkey,
      isSigner: true,
      isWritable: false
    }];
    if (custodianPubkey) {
      keys.push({
        pubkey: custodianPubkey,
        isSigner: true,
        isWritable: false
      });
    }
    return new Transaction$3().add({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a Transaction that deactivates Stake tokens.
   */
  static deactivate(params) {
    const {
      stakePubkey,
      authorizedPubkey
    } = params;
    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;
    const data = encodeData$1(type);
    return new Transaction$3().add({
      keys: [{
        pubkey: stakePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: SYSVAR_CLOCK_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: authorizedPubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    });
  }
}
StakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');
/**
 * Max space of a Stake account
 *
 * This is generated from the solana-stake-program StakeState struct as
 * `StakeStateV2::size_of()`:
 * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html
 */
StakeProgram.space = 200;

/**
 * Vote account info
 */
class VoteInit {
  /** [0, 100] */

  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {
    this.nodePubkey = void 0;
    this.authorizedVoter = void 0;
    this.authorizedWithdrawer = void 0;
    this.commission = void 0;
    this.nodePubkey = nodePubkey;
    this.authorizedVoter = authorizedVoter;
    this.authorizedWithdrawer = authorizedWithdrawer;
    this.commission = commission;
  }
}

/**
 * Create vote account transaction params
 */

/**
 * InitializeAccount instruction params
 */

/**
 * Authorize instruction params
 */

/**
 * AuthorizeWithSeed instruction params
 */

/**
 * Withdraw from vote account transaction params
 */

/**
 * Update validator identity (node pubkey) vote account instruction params.
 */

/**
 * Vote Instruction class
 */
class VoteInstruction {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Decode a vote instruction and retrieve the instruction type.
   */
  static decodeInstructionType(instruction) {
    this.checkProgramId(instruction.programId);
    const instructionTypeLayout = u32$4('instruction');
    const typeIndex = instructionTypeLayout.decode(instruction.data);
    let type;
    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {
      if (layout.index == typeIndex) {
        type = ixType;
        break;
      }
    }
    if (!type) {
      throw new Error('Instruction type incorrect; not a VoteInstruction');
    }
    return type;
  }

  /**
   * Decode an initialize vote instruction and retrieve the instruction params.
   */
  static decodeInitializeAccount(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 4);
    const {
      voteInit
    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);
    return {
      votePubkey: instruction.keys[0].pubkey,
      nodePubkey: instruction.keys[3].pubkey,
      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)
    };
  }

  /**
   * Decode an authorize instruction and retrieve the instruction params.
   */
  static decodeAuthorize(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    const {
      newAuthorized,
      voteAuthorizationType
    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);
    return {
      votePubkey: instruction.keys[0].pubkey,
      authorizedPubkey: instruction.keys[2].pubkey,
      newAuthorizedPubkey: new PublicKey(newAuthorized),
      voteAuthorizationType: {
        index: voteAuthorizationType
      }
    };
  }

  /**
   * Decode an authorize instruction and retrieve the instruction params.
   */
  static decodeAuthorizeWithSeed(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    const {
      voteAuthorizeWithSeedArgs: {
        currentAuthorityDerivedKeyOwnerPubkey,
        currentAuthorityDerivedKeySeed,
        newAuthorized,
        voteAuthorizationType
      }
    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);
    return {
      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,
      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),
      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,
      newAuthorizedPubkey: new PublicKey(newAuthorized),
      voteAuthorizationType: {
        index: voteAuthorizationType
      },
      votePubkey: instruction.keys[0].pubkey
    };
  }

  /**
   * Decode a withdraw instruction and retrieve the instruction params.
   */
  static decodeWithdraw(instruction) {
    this.checkProgramId(instruction.programId);
    this.checkKeyLength(instruction.keys, 3);
    const {
      lamports
    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);
    return {
      votePubkey: instruction.keys[0].pubkey,
      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,
      lamports,
      toPubkey: instruction.keys[1].pubkey
    };
  }

  /**
   * @internal
   */
  static checkProgramId(programId) {
    if (!programId.equals(VoteProgram.programId)) {
      throw new Error('invalid instruction; programId is not VoteProgram');
    }
  }

  /**
   * @internal
   */
  static checkKeyLength(keys, expectedLength) {
    if (keys.length < expectedLength) {
      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);
    }
  }
}

/**
 * An enumeration of valid VoteInstructionType's
 */

/** @internal */

const VOTE_INSTRUCTION_LAYOUTS = Object.freeze({
  InitializeAccount: {
    index: 0,
    layout: struct$4([u32$4('instruction'), voteInit()])
  },
  Authorize: {
    index: 1,
    layout: struct$4([u32$4('instruction'), publicKey$7('newAuthorized'), u32$4('voteAuthorizationType')])
  },
  Withdraw: {
    index: 3,
    layout: struct$4([u32$4('instruction'), ns64$1('lamports')])
  },
  UpdateValidatorIdentity: {
    index: 4,
    layout: struct$4([u32$4('instruction')])
  },
  AuthorizeWithSeed: {
    index: 10,
    layout: struct$4([u32$4('instruction'), voteAuthorizeWithSeedArgs()])
  }
});

/**
 * VoteAuthorize type
 */

/**
 * An enumeration of valid VoteAuthorization layouts.
 */
const VoteAuthorizationLayout = Object.freeze({
  Voter: {
    index: 0
  },
  Withdrawer: {
    index: 1
  }
});

/**
 * Factory class for transactions to interact with the Vote program
 */
class VoteProgram {
  /**
   * @internal
   */
  constructor() {}

  /**
   * Public key that identifies the Vote program
   */

  /**
   * Generate an Initialize instruction.
   */
  static initializeAccount(params) {
    const {
      votePubkey,
      nodePubkey,
      voteInit
    } = params;
    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;
    const data = encodeData$1(type, {
      voteInit: {
        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),
        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),
        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),
        commission: voteInit.commission
      }
    });
    const instructionData = {
      keys: [{
        pubkey: votePubkey,
        isSigner: false,
        isWritable: true
      }, {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: SYSVAR_CLOCK_PUBKEY,
        isSigner: false,
        isWritable: false
      }, {
        pubkey: nodePubkey,
        isSigner: true,
        isWritable: false
      }],
      programId: this.programId,
      data
    };
    return new TransactionInstruction(instructionData);
  }

  /**
   * Generate a transaction that creates a new Vote account.
   */
  static createAccount(params) {
    const transaction = new Transaction$3();
    transaction.add(SystemProgram.createAccount({
      fromPubkey: params.fromPubkey,
      newAccountPubkey: params.votePubkey,
      lamports: params.lamports,
      space: this.space,
      programId: this.programId
    }));
    return transaction.add(this.initializeAccount({
      votePubkey: params.votePubkey,
      nodePubkey: params.voteInit.nodePubkey,
      voteInit: params.voteInit
    }));
  }

  /**
   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.
   */
  static authorize(params) {
    const {
      votePubkey,
      authorizedPubkey,
      newAuthorizedPubkey,
      voteAuthorizationType
    } = params;
    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;
    const data = encodeData$1(type, {
      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
      voteAuthorizationType: voteAuthorizationType.index
    });
    const keys = [{
      pubkey: votePubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: SYSVAR_CLOCK_PUBKEY,
      isSigner: false,
      isWritable: false
    }, {
      pubkey: authorizedPubkey,
      isSigner: true,
      isWritable: false
    }];
    return new Transaction$3().add({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account
   * where the current Voter or Withdrawer authority is a derived key.
   */
  static authorizeWithSeed(params) {
    const {
      currentAuthorityDerivedKeyBasePubkey,
      currentAuthorityDerivedKeyOwnerPubkey,
      currentAuthorityDerivedKeySeed,
      newAuthorizedPubkey,
      voteAuthorizationType,
      votePubkey
    } = params;
    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
    const data = encodeData$1(type, {
      voteAuthorizeWithSeedArgs: {
        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),
        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,
        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
        voteAuthorizationType: voteAuthorizationType.index
      }
    });
    const keys = [{
      pubkey: votePubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: SYSVAR_CLOCK_PUBKEY,
      isSigner: false,
      isWritable: false
    }, {
      pubkey: currentAuthorityDerivedKeyBasePubkey,
      isSigner: true,
      isWritable: false
    }];
    return new Transaction$3().add({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction to withdraw from a Vote account.
   */
  static withdraw(params) {
    const {
      votePubkey,
      authorizedWithdrawerPubkey,
      lamports,
      toPubkey
    } = params;
    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;
    const data = encodeData$1(type, {
      lamports
    });
    const keys = [{
      pubkey: votePubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: toPubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: authorizedWithdrawerPubkey,
      isSigner: true,
      isWritable: false
    }];
    return new Transaction$3().add({
      keys,
      programId: this.programId,
      data
    });
  }

  /**
   * Generate a transaction to withdraw safely from a Vote account.
   *
   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`
   * checks that the withdraw amount will not exceed the specified balance while leaving enough left
   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the
   * `withdraw` method directly.
   */
  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {
    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {
      throw new Error('Withdraw will leave vote account with insufficient funds.');
    }
    return VoteProgram.withdraw(params);
  }

  /**
   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.
   */
  static updateValidatorIdentity(params) {
    const {
      votePubkey,
      authorizedWithdrawerPubkey,
      nodePubkey
    } = params;
    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;
    const data = encodeData$1(type);
    const keys = [{
      pubkey: votePubkey,
      isSigner: false,
      isWritable: true
    }, {
      pubkey: nodePubkey,
      isSigner: true,
      isWritable: false
    }, {
      pubkey: authorizedWithdrawerPubkey,
      isSigner: true,
      isWritable: false
    }];
    return new Transaction$3().add({
      keys,
      programId: this.programId,
      data
    });
  }
}
VoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');
/**
 * Max space of a Vote account
 *
 * This is generated from the solana-vote-program VoteState struct as
 * `VoteState::size_of()`:
 * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of
 *
 * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342
 */
VoteProgram.space = 3762;

const VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');

/**
 * @internal
 */

/**
 * Info used to identity validators.
 */

const InfoString = type$1({
  name: string$9(),
  website: optional$1(string$9()),
  details: optional$1(string$9()),
  iconUrl: optional$1(string$9()),
  keybaseUsername: optional$1(string$9())
});

/**
 * ValidatorInfo class
 */
class ValidatorInfo {
  /**
   * Construct a valid ValidatorInfo
   *
   * @param key validator public key
   * @param info validator information
   */
  constructor(key, info) {
    /**
     * validator public key
     */
    this.key = void 0;
    /**
     * validator information
     */
    this.info = void 0;
    this.key = key;
    this.info = info;
  }

  /**
   * Deserialize ValidatorInfo from the config account data. Exactly two config
   * keys are required in the data.
   *
   * @param buffer config account data
   * @return null if info was not found
   */
  static fromConfigData(buffer) {
    let byteArray = [...buffer];
    const configKeyCount = decodeLength(byteArray);
    if (configKeyCount !== 2) return null;
    const configKeys = [];
    for (let i = 0; i < 2; i++) {
      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH$2));
      const isSigner = guardedShift(byteArray) === 1;
      configKeys.push({
        publicKey,
        isSigner
      });
    }
    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {
      if (configKeys[1].isSigner) {
        const rawInfo = rustString().decode(Buffer.from(byteArray));
        const info = JSON.parse(rawInfo);
        assert$4(info, InfoString);
        return new ValidatorInfo(configKeys[1].publicKey, info);
      }
    }
    return null;
  }
}

const VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');

/**
 * History of how many credits earned by the end of each epoch
 */

/**
 * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88
 *
 * @internal
 */
const VoteAccountLayout = struct$4([publicKey$7('nodePubkey'), publicKey$7('authorizedWithdrawer'), u8$4('commission'), nu64$1(),
// votes.length
seq(struct$4([nu64$1('slot'), u32$4('confirmationCount')]), offset$1(u32$4(), -8), 'votes'), u8$4('rootSlotValid'), nu64$1('rootSlot'), nu64$1(),
// authorizedVoters.length
seq(struct$4([nu64$1('epoch'), publicKey$7('authorizedVoter')]), offset$1(u32$4(), -8), 'authorizedVoters'), struct$4([seq(struct$4([publicKey$7('authorizedPubkey'), nu64$1('epochOfLastAuthorizedSwitch'), nu64$1('targetEpoch')]), 32, 'buf'), nu64$1('idx'), u8$4('isEmpty')], 'priorVoters'), nu64$1(),
// epochCredits.length
seq(struct$4([nu64$1('epoch'), nu64$1('credits'), nu64$1('prevCredits')]), offset$1(u32$4(), -8), 'epochCredits'), struct$4([nu64$1('slot'), nu64$1('timestamp')], 'lastTimestamp')]);
/**
 * VoteAccount class
 */
class VoteAccount {
  /**
   * @internal
   */
  constructor(args) {
    this.nodePubkey = void 0;
    this.authorizedWithdrawer = void 0;
    this.commission = void 0;
    this.rootSlot = void 0;
    this.votes = void 0;
    this.authorizedVoters = void 0;
    this.priorVoters = void 0;
    this.epochCredits = void 0;
    this.lastTimestamp = void 0;
    this.nodePubkey = args.nodePubkey;
    this.authorizedWithdrawer = args.authorizedWithdrawer;
    this.commission = args.commission;
    this.rootSlot = args.rootSlot;
    this.votes = args.votes;
    this.authorizedVoters = args.authorizedVoters;
    this.priorVoters = args.priorVoters;
    this.epochCredits = args.epochCredits;
    this.lastTimestamp = args.lastTimestamp;
  }

  /**
   * Deserialize VoteAccount from the account data.
   *
   * @param buffer account data
   * @return VoteAccount
   */
  static fromAccountData(buffer) {
    const versionOffset = 4;
    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);
    let rootSlot = va.rootSlot;
    if (!va.rootSlotValid) {
      rootSlot = null;
    }
    return new VoteAccount({
      nodePubkey: new PublicKey(va.nodePubkey),
      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),
      commission: va.commission,
      votes: va.votes,
      rootSlot,
      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),
      priorVoters: getPriorVoters(va.priorVoters),
      epochCredits: va.epochCredits,
      lastTimestamp: va.lastTimestamp
    });
  }
}
function parseAuthorizedVoter({
  authorizedVoter,
  epoch
}) {
  return {
    epoch,
    authorizedVoter: new PublicKey(authorizedVoter)
  };
}
function parsePriorVoters({
  authorizedPubkey,
  epochOfLastAuthorizedSwitch,
  targetEpoch
}) {
  return {
    authorizedPubkey: new PublicKey(authorizedPubkey),
    epochOfLastAuthorizedSwitch,
    targetEpoch
  };
}
function getPriorVoters({
  buf,
  idx,
  isEmpty
}) {
  if (isEmpty) {
    return [];
  }
  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];
}

const endpoint = {
  http: {
    devnet: 'http://api.devnet.solana.com',
    testnet: 'http://api.testnet.solana.com',
    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'
  },
  https: {
    devnet: 'https://api.devnet.solana.com',
    testnet: 'https://api.testnet.solana.com',
    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'
  }
};
/**
 * Retrieves the RPC API URL for the specified cluster
 * @param {Cluster} [cluster="devnet"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'
 * @param {boolean} [tls="http"] - Use TLS when connecting to cluster.
 *
 * @returns {string} URL string of the RPC endpoint
 */
function clusterApiUrl(cluster, tls) {
  const key = tls === false ? 'http' : 'https';
  if (!cluster) {
    return endpoint[key]['devnet'];
  }
  const url = endpoint[key][cluster];
  if (!url) {
    throw new Error(`Unknown ${key} cluster: ${cluster}`);
  }
  return url;
}

/**
 * Send and confirm a raw transaction
 *
 * If `commitment` option is not specified, defaults to 'max' commitment.
 *
 * @param {Connection} connection
 * @param {Buffer} rawTransaction
 * @param {TransactionConfirmationStrategy} confirmationStrategy
 * @param {ConfirmOptions} [options]
 * @returns {Promise<TransactionSignature>}
 */

/**
 * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`
 * is no longer supported and will be removed in a future version.
 */
// eslint-disable-next-line no-redeclare

// eslint-disable-next-line no-redeclare
async function sendAndConfirmRawTransaction$1(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {
  let confirmationStrategy;
  let options;
  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {
    confirmationStrategy = confirmationStrategyOrConfirmOptions;
    options = maybeConfirmOptions;
  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {
    confirmationStrategy = confirmationStrategyOrConfirmOptions;
    options = maybeConfirmOptions;
  } else {
    options = confirmationStrategyOrConfirmOptions;
  }
  const sendOptions = options && {
    skipPreflight: options.skipPreflight,
    preflightCommitment: options.preflightCommitment || options.commitment,
    minContextSlot: options.minContextSlot
  };
  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);
  const commitment = options && options.commitment;
  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);
  const status = (await confirmationPromise).value;
  if (status.err) {
    if (signature != null) {
      throw new SendTransactionError({
        action: sendOptions?.skipPreflight ? 'send' : 'simulate',
        signature: signature,
        transactionMessage: `Status: (${JSON.stringify(status)})`
      });
    }
    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);
  }
  return signature;
}

/**
 * There are 1-billion lamports in one SOL
 */
const LAMPORTS_PER_SOL = 1000000000;

var index_browser_esm = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Account: Account$1,
  AddressLookupTableAccount: AddressLookupTableAccount,
  AddressLookupTableInstruction: AddressLookupTableInstruction,
  AddressLookupTableProgram: AddressLookupTableProgram,
  Authorized: Authorized,
  BLOCKHASH_CACHE_TIMEOUT_MS: BLOCKHASH_CACHE_TIMEOUT_MS,
  BPF_LOADER_DEPRECATED_PROGRAM_ID: BPF_LOADER_DEPRECATED_PROGRAM_ID,
  BPF_LOADER_PROGRAM_ID: BPF_LOADER_PROGRAM_ID,
  BpfLoader: BpfLoader,
  COMPUTE_BUDGET_INSTRUCTION_LAYOUTS: COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,
  ComputeBudgetInstruction: ComputeBudgetInstruction,
  ComputeBudgetProgram: ComputeBudgetProgram,
  Connection: Connection,
  Ed25519Program: Ed25519Program,
  Enum: Enum,
  EpochSchedule: EpochSchedule,
  FeeCalculatorLayout: FeeCalculatorLayout,
  Keypair: Keypair$2,
  LAMPORTS_PER_SOL: LAMPORTS_PER_SOL,
  LOOKUP_TABLE_INSTRUCTION_LAYOUTS: LOOKUP_TABLE_INSTRUCTION_LAYOUTS,
  Loader: Loader,
  Lockup: Lockup,
  MAX_SEED_LENGTH: MAX_SEED_LENGTH,
  Message: Message,
  MessageAccountKeys: MessageAccountKeys,
  MessageV0: MessageV0,
  NONCE_ACCOUNT_LENGTH: NONCE_ACCOUNT_LENGTH,
  NonceAccount: NonceAccount,
  PACKET_DATA_SIZE: PACKET_DATA_SIZE,
  PUBLIC_KEY_LENGTH: PUBLIC_KEY_LENGTH$2,
  PublicKey: PublicKey,
  SIGNATURE_LENGTH_IN_BYTES: SIGNATURE_LENGTH_IN_BYTES,
  SOLANA_SCHEMA: SOLANA_SCHEMA,
  STAKE_CONFIG_ID: STAKE_CONFIG_ID,
  STAKE_INSTRUCTION_LAYOUTS: STAKE_INSTRUCTION_LAYOUTS,
  SYSTEM_INSTRUCTION_LAYOUTS: SYSTEM_INSTRUCTION_LAYOUTS,
  SYSVAR_CLOCK_PUBKEY: SYSVAR_CLOCK_PUBKEY,
  SYSVAR_EPOCH_SCHEDULE_PUBKEY: SYSVAR_EPOCH_SCHEDULE_PUBKEY,
  SYSVAR_INSTRUCTIONS_PUBKEY: SYSVAR_INSTRUCTIONS_PUBKEY,
  SYSVAR_RECENT_BLOCKHASHES_PUBKEY: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
  SYSVAR_RENT_PUBKEY: SYSVAR_RENT_PUBKEY,
  SYSVAR_REWARDS_PUBKEY: SYSVAR_REWARDS_PUBKEY,
  SYSVAR_SLOT_HASHES_PUBKEY: SYSVAR_SLOT_HASHES_PUBKEY,
  SYSVAR_SLOT_HISTORY_PUBKEY: SYSVAR_SLOT_HISTORY_PUBKEY,
  SYSVAR_STAKE_HISTORY_PUBKEY: SYSVAR_STAKE_HISTORY_PUBKEY,
  Secp256k1Program: Secp256k1Program,
  SendTransactionError: SendTransactionError,
  SolanaJSONRPCError: SolanaJSONRPCError,
  SolanaJSONRPCErrorCode: SolanaJSONRPCErrorCode,
  StakeAuthorizationLayout: StakeAuthorizationLayout,
  StakeInstruction: StakeInstruction,
  StakeProgram: StakeProgram,
  Struct: Struct$1,
  SystemInstruction: SystemInstruction,
  SystemProgram: SystemProgram,
  Transaction: Transaction$3,
  TransactionExpiredBlockheightExceededError: TransactionExpiredBlockheightExceededError,
  TransactionExpiredNonceInvalidError: TransactionExpiredNonceInvalidError,
  TransactionExpiredTimeoutError: TransactionExpiredTimeoutError,
  TransactionInstruction: TransactionInstruction,
  TransactionMessage: TransactionMessage,
  TransactionStatus: TransactionStatus,
  VALIDATOR_INFO_KEY: VALIDATOR_INFO_KEY,
  VERSION_PREFIX_MASK: VERSION_PREFIX_MASK,
  VOTE_PROGRAM_ID: VOTE_PROGRAM_ID,
  ValidatorInfo: ValidatorInfo,
  VersionedMessage: VersionedMessage,
  VersionedTransaction: VersionedTransaction,
  VoteAccount: VoteAccount,
  VoteAuthorizationLayout: VoteAuthorizationLayout,
  VoteInit: VoteInit,
  VoteInstruction: VoteInstruction,
  VoteProgram: VoteProgram,
  clusterApiUrl: clusterApiUrl,
  sendAndConfirmRawTransaction: sendAndConfirmRawTransaction$1,
  sendAndConfirmTransaction: sendAndConfirmTransaction
});

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
function base$2 (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256);
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
  function encode (source) {
    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
    var b58 = new Uint8Array(size);
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin];
            // Apply "b58 = b58 * 256 + ch".
      var i = 0;
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0;
        b58[it1] = (carry % BASE) >>> 0;
        carry = (carry / BASE) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      pbegin++;
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return new Uint8Array() }
    var psz = 0;
        // Skip and count leading '1's.
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size);
        // Process the characters.
    while (source[psz]) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)];
            // Invalid character
      if (carry === 255) { return }
      var i = 0;
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0;
        b256[it3] = (carry % 256) >>> 0;
        carry = (carry / 256) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      psz++;
    }
        // Skip leading zeroes in b256.
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size - it4));
    var j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string);
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
var src$3 = base$2;

const basex$1 = src$3;
const ALPHABET$2 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

var bs58$4 = basex$1(ALPHABET$2);

var base58$6 = /*@__PURE__*/getDefaultExportFromCjs$3(bs58$4);

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var naclFast = {exports: {}};

var _polyfillNode_crypto = {};

var _polyfillNode_crypto$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: _polyfillNode_crypto
});

var require$$0 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(_polyfillNode_crypto$1);

(function (module) {
	(function(nacl) {

	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	//
	// Implementation derived from TweetNaCl version 20140427.
	// See for details: http://tweetnacl.cr.yp.to/

	var gf = function(init) {
	  var i, r = new Float64Array(16);
	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	  return r;
	};

	//  Pluggable, initialized in high-level API below.
	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

	var _0 = new Uint8Array(16);
	var _9 = new Uint8Array(32); _9[0] = 9;

	var gf0 = gf(),
	    gf1 = gf([1]),
	    _121665 = gf([0xdb41, 1]),
	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

	function ts64(x, i, h, l) {
	  x[i]   = (h >> 24) & 0xff;
	  x[i+1] = (h >> 16) & 0xff;
	  x[i+2] = (h >>  8) & 0xff;
	  x[i+3] = h & 0xff;
	  x[i+4] = (l >> 24)  & 0xff;
	  x[i+5] = (l >> 16)  & 0xff;
	  x[i+6] = (l >>  8)  & 0xff;
	  x[i+7] = l & 0xff;
	}

	function vn(x, xi, y, yi, n) {
	  var i,d = 0;
	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
	  return (1 & ((d - 1) >>> 8)) - 1;
	}

	function crypto_verify_16(x, xi, y, yi) {
	  return vn(x,xi,y,yi,16);
	}

	function crypto_verify_32(x, xi, y, yi) {
	  return vn(x,xi,y,yi,32);
	}

	function core_salsa20(o, p, k, c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	   x0 =  x0 +  j0 | 0;
	   x1 =  x1 +  j1 | 0;
	   x2 =  x2 +  j2 | 0;
	   x3 =  x3 +  j3 | 0;
	   x4 =  x4 +  j4 | 0;
	   x5 =  x5 +  j5 | 0;
	   x6 =  x6 +  j6 | 0;
	   x7 =  x7 +  j7 | 0;
	   x8 =  x8 +  j8 | 0;
	   x9 =  x9 +  j9 | 0;
	  x10 = x10 + j10 | 0;
	  x11 = x11 + j11 | 0;
	  x12 = x12 + j12 | 0;
	  x13 = x13 + j13 | 0;
	  x14 = x14 + j14 | 0;
	  x15 = x15 + j15 | 0;

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x1 >>>  0 & 0xff;
	  o[ 5] = x1 >>>  8 & 0xff;
	  o[ 6] = x1 >>> 16 & 0xff;
	  o[ 7] = x1 >>> 24 & 0xff;

	  o[ 8] = x2 >>>  0 & 0xff;
	  o[ 9] = x2 >>>  8 & 0xff;
	  o[10] = x2 >>> 16 & 0xff;
	  o[11] = x2 >>> 24 & 0xff;

	  o[12] = x3 >>>  0 & 0xff;
	  o[13] = x3 >>>  8 & 0xff;
	  o[14] = x3 >>> 16 & 0xff;
	  o[15] = x3 >>> 24 & 0xff;

	  o[16] = x4 >>>  0 & 0xff;
	  o[17] = x4 >>>  8 & 0xff;
	  o[18] = x4 >>> 16 & 0xff;
	  o[19] = x4 >>> 24 & 0xff;

	  o[20] = x5 >>>  0 & 0xff;
	  o[21] = x5 >>>  8 & 0xff;
	  o[22] = x5 >>> 16 & 0xff;
	  o[23] = x5 >>> 24 & 0xff;

	  o[24] = x6 >>>  0 & 0xff;
	  o[25] = x6 >>>  8 & 0xff;
	  o[26] = x6 >>> 16 & 0xff;
	  o[27] = x6 >>> 24 & 0xff;

	  o[28] = x7 >>>  0 & 0xff;
	  o[29] = x7 >>>  8 & 0xff;
	  o[30] = x7 >>> 16 & 0xff;
	  o[31] = x7 >>> 24 & 0xff;

	  o[32] = x8 >>>  0 & 0xff;
	  o[33] = x8 >>>  8 & 0xff;
	  o[34] = x8 >>> 16 & 0xff;
	  o[35] = x8 >>> 24 & 0xff;

	  o[36] = x9 >>>  0 & 0xff;
	  o[37] = x9 >>>  8 & 0xff;
	  o[38] = x9 >>> 16 & 0xff;
	  o[39] = x9 >>> 24 & 0xff;

	  o[40] = x10 >>>  0 & 0xff;
	  o[41] = x10 >>>  8 & 0xff;
	  o[42] = x10 >>> 16 & 0xff;
	  o[43] = x10 >>> 24 & 0xff;

	  o[44] = x11 >>>  0 & 0xff;
	  o[45] = x11 >>>  8 & 0xff;
	  o[46] = x11 >>> 16 & 0xff;
	  o[47] = x11 >>> 24 & 0xff;

	  o[48] = x12 >>>  0 & 0xff;
	  o[49] = x12 >>>  8 & 0xff;
	  o[50] = x12 >>> 16 & 0xff;
	  o[51] = x12 >>> 24 & 0xff;

	  o[52] = x13 >>>  0 & 0xff;
	  o[53] = x13 >>>  8 & 0xff;
	  o[54] = x13 >>> 16 & 0xff;
	  o[55] = x13 >>> 24 & 0xff;

	  o[56] = x14 >>>  0 & 0xff;
	  o[57] = x14 >>>  8 & 0xff;
	  o[58] = x14 >>> 16 & 0xff;
	  o[59] = x14 >>> 24 & 0xff;

	  o[60] = x15 >>>  0 & 0xff;
	  o[61] = x15 >>>  8 & 0xff;
	  o[62] = x15 >>> 16 & 0xff;
	  o[63] = x15 >>> 24 & 0xff;
	}

	function core_hsalsa20(o,p,k,c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x5 >>>  0 & 0xff;
	  o[ 5] = x5 >>>  8 & 0xff;
	  o[ 6] = x5 >>> 16 & 0xff;
	  o[ 7] = x5 >>> 24 & 0xff;

	  o[ 8] = x10 >>>  0 & 0xff;
	  o[ 9] = x10 >>>  8 & 0xff;
	  o[10] = x10 >>> 16 & 0xff;
	  o[11] = x10 >>> 24 & 0xff;

	  o[12] = x15 >>>  0 & 0xff;
	  o[13] = x15 >>>  8 & 0xff;
	  o[14] = x15 >>> 16 & 0xff;
	  o[15] = x15 >>> 24 & 0xff;

	  o[16] = x6 >>>  0 & 0xff;
	  o[17] = x6 >>>  8 & 0xff;
	  o[18] = x6 >>> 16 & 0xff;
	  o[19] = x6 >>> 24 & 0xff;

	  o[20] = x7 >>>  0 & 0xff;
	  o[21] = x7 >>>  8 & 0xff;
	  o[22] = x7 >>> 16 & 0xff;
	  o[23] = x7 >>> 24 & 0xff;

	  o[24] = x8 >>>  0 & 0xff;
	  o[25] = x8 >>>  8 & 0xff;
	  o[26] = x8 >>> 16 & 0xff;
	  o[27] = x8 >>> 24 & 0xff;

	  o[28] = x9 >>>  0 & 0xff;
	  o[29] = x9 >>>  8 & 0xff;
	  o[30] = x9 >>> 16 & 0xff;
	  o[31] = x9 >>> 24 & 0xff;
	}

	function crypto_core_salsa20(out,inp,k,c) {
	  core_salsa20(out,inp,k,c);
	}

	function crypto_core_hsalsa20(out,inp,k,c) {
	  core_hsalsa20(out,inp,k,c);
	}

	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	            // "expand 32-byte k"

	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	    mpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	  }
	  return 0;
	}

	function crypto_stream_salsa20(c,cpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
	  }
	  return 0;
	}

	function crypto_stream(c,cpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20(c,cpos,d,sn,s);
	}

	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
	}

	/*
	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
	* https://github.com/floodyberry/poly1305-donna
	*/

	var poly1305 = function(key) {
	  this.buffer = new Uint8Array(16);
	  this.r = new Uint16Array(10);
	  this.h = new Uint16Array(10);
	  this.pad = new Uint16Array(8);
	  this.leftover = 0;
	  this.fin = 0;

	  var t0, t1, t2, t3, t4, t5, t6, t7;

	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	  this.r[9] = ((t7 >>>  5)) & 0x007f;

	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	};

	poly1305.prototype.blocks = function(m, mpos, bytes) {
	  var hibit = this.fin ? 0 : (1 << 11);
	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

	  var h0 = this.h[0],
	      h1 = this.h[1],
	      h2 = this.h[2],
	      h3 = this.h[3],
	      h4 = this.h[4],
	      h5 = this.h[5],
	      h6 = this.h[6],
	      h7 = this.h[7],
	      h8 = this.h[8],
	      h9 = this.h[9];

	  var r0 = this.r[0],
	      r1 = this.r[1],
	      r2 = this.r[2],
	      r3 = this.r[3],
	      r4 = this.r[4],
	      r5 = this.r[5],
	      r6 = this.r[6],
	      r7 = this.r[7],
	      r8 = this.r[8],
	      r9 = this.r[9];

	  while (bytes >= 16) {
	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
	    h5 += ((t4 >>>  1)) & 0x1fff;
	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	    h9 += ((t7 >>> 5)) | hibit;

	    c = 0;

	    d0 = c;
	    d0 += h0 * r0;
	    d0 += h1 * (5 * r9);
	    d0 += h2 * (5 * r8);
	    d0 += h3 * (5 * r7);
	    d0 += h4 * (5 * r6);
	    c = (d0 >>> 13); d0 &= 0x1fff;
	    d0 += h5 * (5 * r5);
	    d0 += h6 * (5 * r4);
	    d0 += h7 * (5 * r3);
	    d0 += h8 * (5 * r2);
	    d0 += h9 * (5 * r1);
	    c += (d0 >>> 13); d0 &= 0x1fff;

	    d1 = c;
	    d1 += h0 * r1;
	    d1 += h1 * r0;
	    d1 += h2 * (5 * r9);
	    d1 += h3 * (5 * r8);
	    d1 += h4 * (5 * r7);
	    c = (d1 >>> 13); d1 &= 0x1fff;
	    d1 += h5 * (5 * r6);
	    d1 += h6 * (5 * r5);
	    d1 += h7 * (5 * r4);
	    d1 += h8 * (5 * r3);
	    d1 += h9 * (5 * r2);
	    c += (d1 >>> 13); d1 &= 0x1fff;

	    d2 = c;
	    d2 += h0 * r2;
	    d2 += h1 * r1;
	    d2 += h2 * r0;
	    d2 += h3 * (5 * r9);
	    d2 += h4 * (5 * r8);
	    c = (d2 >>> 13); d2 &= 0x1fff;
	    d2 += h5 * (5 * r7);
	    d2 += h6 * (5 * r6);
	    d2 += h7 * (5 * r5);
	    d2 += h8 * (5 * r4);
	    d2 += h9 * (5 * r3);
	    c += (d2 >>> 13); d2 &= 0x1fff;

	    d3 = c;
	    d3 += h0 * r3;
	    d3 += h1 * r2;
	    d3 += h2 * r1;
	    d3 += h3 * r0;
	    d3 += h4 * (5 * r9);
	    c = (d3 >>> 13); d3 &= 0x1fff;
	    d3 += h5 * (5 * r8);
	    d3 += h6 * (5 * r7);
	    d3 += h7 * (5 * r6);
	    d3 += h8 * (5 * r5);
	    d3 += h9 * (5 * r4);
	    c += (d3 >>> 13); d3 &= 0x1fff;

	    d4 = c;
	    d4 += h0 * r4;
	    d4 += h1 * r3;
	    d4 += h2 * r2;
	    d4 += h3 * r1;
	    d4 += h4 * r0;
	    c = (d4 >>> 13); d4 &= 0x1fff;
	    d4 += h5 * (5 * r9);
	    d4 += h6 * (5 * r8);
	    d4 += h7 * (5 * r7);
	    d4 += h8 * (5 * r6);
	    d4 += h9 * (5 * r5);
	    c += (d4 >>> 13); d4 &= 0x1fff;

	    d5 = c;
	    d5 += h0 * r5;
	    d5 += h1 * r4;
	    d5 += h2 * r3;
	    d5 += h3 * r2;
	    d5 += h4 * r1;
	    c = (d5 >>> 13); d5 &= 0x1fff;
	    d5 += h5 * r0;
	    d5 += h6 * (5 * r9);
	    d5 += h7 * (5 * r8);
	    d5 += h8 * (5 * r7);
	    d5 += h9 * (5 * r6);
	    c += (d5 >>> 13); d5 &= 0x1fff;

	    d6 = c;
	    d6 += h0 * r6;
	    d6 += h1 * r5;
	    d6 += h2 * r4;
	    d6 += h3 * r3;
	    d6 += h4 * r2;
	    c = (d6 >>> 13); d6 &= 0x1fff;
	    d6 += h5 * r1;
	    d6 += h6 * r0;
	    d6 += h7 * (5 * r9);
	    d6 += h8 * (5 * r8);
	    d6 += h9 * (5 * r7);
	    c += (d6 >>> 13); d6 &= 0x1fff;

	    d7 = c;
	    d7 += h0 * r7;
	    d7 += h1 * r6;
	    d7 += h2 * r5;
	    d7 += h3 * r4;
	    d7 += h4 * r3;
	    c = (d7 >>> 13); d7 &= 0x1fff;
	    d7 += h5 * r2;
	    d7 += h6 * r1;
	    d7 += h7 * r0;
	    d7 += h8 * (5 * r9);
	    d7 += h9 * (5 * r8);
	    c += (d7 >>> 13); d7 &= 0x1fff;

	    d8 = c;
	    d8 += h0 * r8;
	    d8 += h1 * r7;
	    d8 += h2 * r6;
	    d8 += h3 * r5;
	    d8 += h4 * r4;
	    c = (d8 >>> 13); d8 &= 0x1fff;
	    d8 += h5 * r3;
	    d8 += h6 * r2;
	    d8 += h7 * r1;
	    d8 += h8 * r0;
	    d8 += h9 * (5 * r9);
	    c += (d8 >>> 13); d8 &= 0x1fff;

	    d9 = c;
	    d9 += h0 * r9;
	    d9 += h1 * r8;
	    d9 += h2 * r7;
	    d9 += h3 * r6;
	    d9 += h4 * r5;
	    c = (d9 >>> 13); d9 &= 0x1fff;
	    d9 += h5 * r4;
	    d9 += h6 * r3;
	    d9 += h7 * r2;
	    d9 += h8 * r1;
	    d9 += h9 * r0;
	    c += (d9 >>> 13); d9 &= 0x1fff;

	    c = (((c << 2) + c)) | 0;
	    c = (c + d0) | 0;
	    d0 = c & 0x1fff;
	    c = (c >>> 13);
	    d1 += c;

	    h0 = d0;
	    h1 = d1;
	    h2 = d2;
	    h3 = d3;
	    h4 = d4;
	    h5 = d5;
	    h6 = d6;
	    h7 = d7;
	    h8 = d8;
	    h9 = d9;

	    mpos += 16;
	    bytes -= 16;
	  }
	  this.h[0] = h0;
	  this.h[1] = h1;
	  this.h[2] = h2;
	  this.h[3] = h3;
	  this.h[4] = h4;
	  this.h[5] = h5;
	  this.h[6] = h6;
	  this.h[7] = h7;
	  this.h[8] = h8;
	  this.h[9] = h9;
	};

	poly1305.prototype.finish = function(mac, macpos) {
	  var g = new Uint16Array(10);
	  var c, mask, f, i;

	  if (this.leftover) {
	    i = this.leftover;
	    this.buffer[i++] = 1;
	    for (; i < 16; i++) this.buffer[i] = 0;
	    this.fin = 1;
	    this.blocks(this.buffer, 0, 16);
	  }

	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  for (i = 2; i < 10; i++) {
	    this.h[i] += c;
	    c = this.h[i] >>> 13;
	    this.h[i] &= 0x1fff;
	  }
	  this.h[0] += (c * 5);
	  c = this.h[0] >>> 13;
	  this.h[0] &= 0x1fff;
	  this.h[1] += c;
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  this.h[2] += c;

	  g[0] = this.h[0] + 5;
	  c = g[0] >>> 13;
	  g[0] &= 0x1fff;
	  for (i = 1; i < 10; i++) {
	    g[i] = this.h[i] + c;
	    c = g[i] >>> 13;
	    g[i] &= 0x1fff;
	  }
	  g[9] -= (1 << 13);

	  mask = (c ^ 1) - 1;
	  for (i = 0; i < 10; i++) g[i] &= mask;
	  mask = ~mask;
	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

	  f = this.h[0] + this.pad[0];
	  this.h[0] = f & 0xffff;
	  for (i = 1; i < 8; i++) {
	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
	    this.h[i] = f & 0xffff;
	  }

	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
	};

	poly1305.prototype.update = function(m, mpos, bytes) {
	  var i, want;

	  if (this.leftover) {
	    want = (16 - this.leftover);
	    if (want > bytes)
	      want = bytes;
	    for (i = 0; i < want; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    bytes -= want;
	    mpos += want;
	    this.leftover += want;
	    if (this.leftover < 16)
	      return;
	    this.blocks(this.buffer, 0, 16);
	    this.leftover = 0;
	  }

	  if (bytes >= 16) {
	    want = bytes - (bytes % 16);
	    this.blocks(m, mpos, want);
	    mpos += want;
	    bytes -= want;
	  }

	  if (bytes) {
	    for (i = 0; i < bytes; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    this.leftover += bytes;
	  }
	};

	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	  var s = new poly1305(k);
	  s.update(m, mpos, n);
	  s.finish(out, outpos);
	  return 0;
	}

	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	  var x = new Uint8Array(16);
	  crypto_onetimeauth(x,0,m,mpos,n,k);
	  return crypto_verify_16(h,hpos,x,0);
	}

	function crypto_secretbox(c,m,d,n,k) {
	  var i;
	  if (d < 32) return -1;
	  crypto_stream_xor(c,0,m,0,d,n,k);
	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	  for (i = 0; i < 16; i++) c[i] = 0;
	  return 0;
	}

	function crypto_secretbox_open(m,c,d,n,k) {
	  var i;
	  var x = new Uint8Array(32);
	  if (d < 32) return -1;
	  crypto_stream(x,0,32,n,k);
	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
	  crypto_stream_xor(m,0,c,0,d,n,k);
	  for (i = 0; i < 32; i++) m[i] = 0;
	  return 0;
	}

	function set25519(r, a) {
	  var i;
	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
	}

	function car25519(o) {
	  var i, v, c = 1;
	  for (i = 0; i < 16; i++) {
	    v = o[i] + c + 65535;
	    c = Math.floor(v / 65536);
	    o[i] = v - c * 65536;
	  }
	  o[0] += c-1 + 37 * (c-1);
	}

	function sel25519(p, q, b) {
	  var t, c = ~(b-1);
	  for (var i = 0; i < 16; i++) {
	    t = c & (p[i] ^ q[i]);
	    p[i] ^= t;
	    q[i] ^= t;
	  }
	}

	function pack25519(o, n) {
	  var i, j, b;
	  var m = gf(), t = gf();
	  for (i = 0; i < 16; i++) t[i] = n[i];
	  car25519(t);
	  car25519(t);
	  car25519(t);
	  for (j = 0; j < 2; j++) {
	    m[0] = t[0] - 0xffed;
	    for (i = 1; i < 15; i++) {
	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	      m[i-1] &= 0xffff;
	    }
	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	    b = (m[15]>>16) & 1;
	    m[14] &= 0xffff;
	    sel25519(t, m, 1-b);
	  }
	  for (i = 0; i < 16; i++) {
	    o[2*i] = t[i] & 0xff;
	    o[2*i+1] = t[i]>>8;
	  }
	}

	function neq25519(a, b) {
	  var c = new Uint8Array(32), d = new Uint8Array(32);
	  pack25519(c, a);
	  pack25519(d, b);
	  return crypto_verify_32(c, 0, d, 0);
	}

	function par25519(a) {
	  var d = new Uint8Array(32);
	  pack25519(d, a);
	  return d[0] & 1;
	}

	function unpack25519(o, n) {
	  var i;
	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	  o[15] &= 0x7fff;
	}

	function A(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
	}

	function Z(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
	}

	function M(o, a, b) {
	  var v, c,
	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
	    b0 = b[0],
	    b1 = b[1],
	    b2 = b[2],
	    b3 = b[3],
	    b4 = b[4],
	    b5 = b[5],
	    b6 = b[6],
	    b7 = b[7],
	    b8 = b[8],
	    b9 = b[9],
	    b10 = b[10],
	    b11 = b[11],
	    b12 = b[12],
	    b13 = b[13],
	    b14 = b[14],
	    b15 = b[15];

	  v = a[0];
	  t0 += v * b0;
	  t1 += v * b1;
	  t2 += v * b2;
	  t3 += v * b3;
	  t4 += v * b4;
	  t5 += v * b5;
	  t6 += v * b6;
	  t7 += v * b7;
	  t8 += v * b8;
	  t9 += v * b9;
	  t10 += v * b10;
	  t11 += v * b11;
	  t12 += v * b12;
	  t13 += v * b13;
	  t14 += v * b14;
	  t15 += v * b15;
	  v = a[1];
	  t1 += v * b0;
	  t2 += v * b1;
	  t3 += v * b2;
	  t4 += v * b3;
	  t5 += v * b4;
	  t6 += v * b5;
	  t7 += v * b6;
	  t8 += v * b7;
	  t9 += v * b8;
	  t10 += v * b9;
	  t11 += v * b10;
	  t12 += v * b11;
	  t13 += v * b12;
	  t14 += v * b13;
	  t15 += v * b14;
	  t16 += v * b15;
	  v = a[2];
	  t2 += v * b0;
	  t3 += v * b1;
	  t4 += v * b2;
	  t5 += v * b3;
	  t6 += v * b4;
	  t7 += v * b5;
	  t8 += v * b6;
	  t9 += v * b7;
	  t10 += v * b8;
	  t11 += v * b9;
	  t12 += v * b10;
	  t13 += v * b11;
	  t14 += v * b12;
	  t15 += v * b13;
	  t16 += v * b14;
	  t17 += v * b15;
	  v = a[3];
	  t3 += v * b0;
	  t4 += v * b1;
	  t5 += v * b2;
	  t6 += v * b3;
	  t7 += v * b4;
	  t8 += v * b5;
	  t9 += v * b6;
	  t10 += v * b7;
	  t11 += v * b8;
	  t12 += v * b9;
	  t13 += v * b10;
	  t14 += v * b11;
	  t15 += v * b12;
	  t16 += v * b13;
	  t17 += v * b14;
	  t18 += v * b15;
	  v = a[4];
	  t4 += v * b0;
	  t5 += v * b1;
	  t6 += v * b2;
	  t7 += v * b3;
	  t8 += v * b4;
	  t9 += v * b5;
	  t10 += v * b6;
	  t11 += v * b7;
	  t12 += v * b8;
	  t13 += v * b9;
	  t14 += v * b10;
	  t15 += v * b11;
	  t16 += v * b12;
	  t17 += v * b13;
	  t18 += v * b14;
	  t19 += v * b15;
	  v = a[5];
	  t5 += v * b0;
	  t6 += v * b1;
	  t7 += v * b2;
	  t8 += v * b3;
	  t9 += v * b4;
	  t10 += v * b5;
	  t11 += v * b6;
	  t12 += v * b7;
	  t13 += v * b8;
	  t14 += v * b9;
	  t15 += v * b10;
	  t16 += v * b11;
	  t17 += v * b12;
	  t18 += v * b13;
	  t19 += v * b14;
	  t20 += v * b15;
	  v = a[6];
	  t6 += v * b0;
	  t7 += v * b1;
	  t8 += v * b2;
	  t9 += v * b3;
	  t10 += v * b4;
	  t11 += v * b5;
	  t12 += v * b6;
	  t13 += v * b7;
	  t14 += v * b8;
	  t15 += v * b9;
	  t16 += v * b10;
	  t17 += v * b11;
	  t18 += v * b12;
	  t19 += v * b13;
	  t20 += v * b14;
	  t21 += v * b15;
	  v = a[7];
	  t7 += v * b0;
	  t8 += v * b1;
	  t9 += v * b2;
	  t10 += v * b3;
	  t11 += v * b4;
	  t12 += v * b5;
	  t13 += v * b6;
	  t14 += v * b7;
	  t15 += v * b8;
	  t16 += v * b9;
	  t17 += v * b10;
	  t18 += v * b11;
	  t19 += v * b12;
	  t20 += v * b13;
	  t21 += v * b14;
	  t22 += v * b15;
	  v = a[8];
	  t8 += v * b0;
	  t9 += v * b1;
	  t10 += v * b2;
	  t11 += v * b3;
	  t12 += v * b4;
	  t13 += v * b5;
	  t14 += v * b6;
	  t15 += v * b7;
	  t16 += v * b8;
	  t17 += v * b9;
	  t18 += v * b10;
	  t19 += v * b11;
	  t20 += v * b12;
	  t21 += v * b13;
	  t22 += v * b14;
	  t23 += v * b15;
	  v = a[9];
	  t9 += v * b0;
	  t10 += v * b1;
	  t11 += v * b2;
	  t12 += v * b3;
	  t13 += v * b4;
	  t14 += v * b5;
	  t15 += v * b6;
	  t16 += v * b7;
	  t17 += v * b8;
	  t18 += v * b9;
	  t19 += v * b10;
	  t20 += v * b11;
	  t21 += v * b12;
	  t22 += v * b13;
	  t23 += v * b14;
	  t24 += v * b15;
	  v = a[10];
	  t10 += v * b0;
	  t11 += v * b1;
	  t12 += v * b2;
	  t13 += v * b3;
	  t14 += v * b4;
	  t15 += v * b5;
	  t16 += v * b6;
	  t17 += v * b7;
	  t18 += v * b8;
	  t19 += v * b9;
	  t20 += v * b10;
	  t21 += v * b11;
	  t22 += v * b12;
	  t23 += v * b13;
	  t24 += v * b14;
	  t25 += v * b15;
	  v = a[11];
	  t11 += v * b0;
	  t12 += v * b1;
	  t13 += v * b2;
	  t14 += v * b3;
	  t15 += v * b4;
	  t16 += v * b5;
	  t17 += v * b6;
	  t18 += v * b7;
	  t19 += v * b8;
	  t20 += v * b9;
	  t21 += v * b10;
	  t22 += v * b11;
	  t23 += v * b12;
	  t24 += v * b13;
	  t25 += v * b14;
	  t26 += v * b15;
	  v = a[12];
	  t12 += v * b0;
	  t13 += v * b1;
	  t14 += v * b2;
	  t15 += v * b3;
	  t16 += v * b4;
	  t17 += v * b5;
	  t18 += v * b6;
	  t19 += v * b7;
	  t20 += v * b8;
	  t21 += v * b9;
	  t22 += v * b10;
	  t23 += v * b11;
	  t24 += v * b12;
	  t25 += v * b13;
	  t26 += v * b14;
	  t27 += v * b15;
	  v = a[13];
	  t13 += v * b0;
	  t14 += v * b1;
	  t15 += v * b2;
	  t16 += v * b3;
	  t17 += v * b4;
	  t18 += v * b5;
	  t19 += v * b6;
	  t20 += v * b7;
	  t21 += v * b8;
	  t22 += v * b9;
	  t23 += v * b10;
	  t24 += v * b11;
	  t25 += v * b12;
	  t26 += v * b13;
	  t27 += v * b14;
	  t28 += v * b15;
	  v = a[14];
	  t14 += v * b0;
	  t15 += v * b1;
	  t16 += v * b2;
	  t17 += v * b3;
	  t18 += v * b4;
	  t19 += v * b5;
	  t20 += v * b6;
	  t21 += v * b7;
	  t22 += v * b8;
	  t23 += v * b9;
	  t24 += v * b10;
	  t25 += v * b11;
	  t26 += v * b12;
	  t27 += v * b13;
	  t28 += v * b14;
	  t29 += v * b15;
	  v = a[15];
	  t15 += v * b0;
	  t16 += v * b1;
	  t17 += v * b2;
	  t18 += v * b3;
	  t19 += v * b4;
	  t20 += v * b5;
	  t21 += v * b6;
	  t22 += v * b7;
	  t23 += v * b8;
	  t24 += v * b9;
	  t25 += v * b10;
	  t26 += v * b11;
	  t27 += v * b12;
	  t28 += v * b13;
	  t29 += v * b14;
	  t30 += v * b15;

	  t0  += 38 * t16;
	  t1  += 38 * t17;
	  t2  += 38 * t18;
	  t3  += 38 * t19;
	  t4  += 38 * t20;
	  t5  += 38 * t21;
	  t6  += 38 * t22;
	  t7  += 38 * t23;
	  t8  += 38 * t24;
	  t9  += 38 * t25;
	  t10 += 38 * t26;
	  t11 += 38 * t27;
	  t12 += 38 * t28;
	  t13 += 38 * t29;
	  t14 += 38 * t30;
	  // t15 left as is

	  // first car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  // second car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  o[ 0] = t0;
	  o[ 1] = t1;
	  o[ 2] = t2;
	  o[ 3] = t3;
	  o[ 4] = t4;
	  o[ 5] = t5;
	  o[ 6] = t6;
	  o[ 7] = t7;
	  o[ 8] = t8;
	  o[ 9] = t9;
	  o[10] = t10;
	  o[11] = t11;
	  o[12] = t12;
	  o[13] = t13;
	  o[14] = t14;
	  o[15] = t15;
	}

	function S(o, a) {
	  M(o, a, a);
	}

	function inv25519(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 253; a >= 0; a--) {
	    S(c, c);
	    if(a !== 2 && a !== 4) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function pow2523(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if(a !== 1) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function crypto_scalarmult(q, n, p) {
	  var z = new Uint8Array(32);
	  var x = new Float64Array(80), r, i;
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf();
	  for (i = 0; i < 31; i++) z[i] = n[i];
	  z[31]=(n[31]&127)|64;
	  z[0]&=248;
	  unpack25519(x,p);
	  for (i = 0; i < 16; i++) {
	    b[i]=x[i];
	    d[i]=a[i]=c[i]=0;
	  }
	  a[0]=d[0]=1;
	  for (i=254; i>=0; --i) {
	    r=(z[i>>>3]>>>(i&7))&1;
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	    A(e,a,c);
	    Z(a,a,c);
	    A(c,b,d);
	    Z(b,b,d);
	    S(d,e);
	    S(f,a);
	    M(a,c,a);
	    M(c,b,e);
	    A(e,a,c);
	    Z(a,a,c);
	    S(b,a);
	    Z(c,d,f);
	    M(a,c,_121665);
	    A(a,a,d);
	    M(c,c,a);
	    M(a,d,f);
	    M(d,b,x);
	    S(b,e);
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	  }
	  for (i = 0; i < 16; i++) {
	    x[i+16]=a[i];
	    x[i+32]=c[i];
	    x[i+48]=b[i];
	    x[i+64]=d[i];
	  }
	  var x32 = x.subarray(32);
	  var x16 = x.subarray(16);
	  inv25519(x32,x32);
	  M(x16,x16,x32);
	  pack25519(q,x16);
	  return 0;
	}

	function crypto_scalarmult_base(q, n) {
	  return crypto_scalarmult(q, n, _9);
	}

	function crypto_box_keypair(y, x) {
	  randombytes(x, 32);
	  return crypto_scalarmult_base(y, x);
	}

	function crypto_box_beforenm(k, y, x) {
	  var s = new Uint8Array(32);
	  crypto_scalarmult(s, x, y);
	  return crypto_core_hsalsa20(k, _0, s, sigma);
	}

	var crypto_box_afternm = crypto_secretbox;
	var crypto_box_open_afternm = crypto_secretbox_open;

	function crypto_box(c, m, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_afternm(c, m, d, n, k);
	}

	function crypto_box_open(m, c, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_open_afternm(m, c, d, n, k);
	}

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function crypto_hashblocks_hl(hh, hl, m, n) {
	  var wh = new Int32Array(16), wl = new Int32Array(16),
	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
	      th, tl, i, j, h, l, a, b, c, d;

	  var ah0 = hh[0],
	      ah1 = hh[1],
	      ah2 = hh[2],
	      ah3 = hh[3],
	      ah4 = hh[4],
	      ah5 = hh[5],
	      ah6 = hh[6],
	      ah7 = hh[7],

	      al0 = hl[0],
	      al1 = hl[1],
	      al2 = hl[2],
	      al3 = hl[3],
	      al4 = hl[4],
	      al5 = hl[5],
	      al6 = hl[6],
	      al7 = hl[7];

	  var pos = 0;
	  while (n >= 128) {
	    for (i = 0; i < 16; i++) {
	      j = 8 * i + pos;
	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
	    }
	    for (i = 0; i < 80; i++) {
	      bh0 = ah0;
	      bh1 = ah1;
	      bh2 = ah2;
	      bh3 = ah3;
	      bh4 = ah4;
	      bh5 = ah5;
	      bh6 = ah6;
	      bh7 = ah7;

	      bl0 = al0;
	      bl1 = al1;
	      bl2 = al2;
	      bl3 = al3;
	      bl4 = al4;
	      bl5 = al5;
	      bl6 = al6;
	      bl7 = al7;

	      // add
	      h = ah7;
	      l = al7;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma1
	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Ch
	      h = (ah4 & ah5) ^ (~ah4 & ah6);
	      l = (al4 & al5) ^ (~al4 & al6);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // K
	      h = K[i*2];
	      l = K[i*2+1];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // w
	      h = wh[i%16];
	      l = wl[i%16];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      th = c & 0xffff | d << 16;
	      tl = a & 0xffff | b << 16;

	      // add
	      h = th;
	      l = tl;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma0
	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Maj
	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh7 = (c & 0xffff) | (d << 16);
	      bl7 = (a & 0xffff) | (b << 16);

	      // add
	      h = bh3;
	      l = bl3;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      h = th;
	      l = tl;

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh3 = (c & 0xffff) | (d << 16);
	      bl3 = (a & 0xffff) | (b << 16);

	      ah1 = bh0;
	      ah2 = bh1;
	      ah3 = bh2;
	      ah4 = bh3;
	      ah5 = bh4;
	      ah6 = bh5;
	      ah7 = bh6;
	      ah0 = bh7;

	      al1 = bl0;
	      al2 = bl1;
	      al3 = bl2;
	      al4 = bl3;
	      al5 = bl4;
	      al6 = bl5;
	      al7 = bl6;
	      al0 = bl7;

	      if (i%16 === 15) {
	        for (j = 0; j < 16; j++) {
	          // add
	          h = wh[j];
	          l = wl[j];

	          a = l & 0xffff; b = l >>> 16;
	          c = h & 0xffff; d = h >>> 16;

	          h = wh[(j+9)%16];
	          l = wl[(j+9)%16];

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma0
	          th = wh[(j+1)%16];
	          tl = wl[(j+1)%16];
	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma1
	          th = wh[(j+14)%16];
	          tl = wl[(j+14)%16];
	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          b += a >>> 16;
	          c += b >>> 16;
	          d += c >>> 16;

	          wh[j] = (c & 0xffff) | (d << 16);
	          wl[j] = (a & 0xffff) | (b << 16);
	        }
	      }
	    }

	    // add
	    h = ah0;
	    l = al0;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[0];
	    l = hl[0];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
	    hl[0] = al0 = (a & 0xffff) | (b << 16);

	    h = ah1;
	    l = al1;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[1];
	    l = hl[1];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
	    hl[1] = al1 = (a & 0xffff) | (b << 16);

	    h = ah2;
	    l = al2;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[2];
	    l = hl[2];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
	    hl[2] = al2 = (a & 0xffff) | (b << 16);

	    h = ah3;
	    l = al3;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[3];
	    l = hl[3];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
	    hl[3] = al3 = (a & 0xffff) | (b << 16);

	    h = ah4;
	    l = al4;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[4];
	    l = hl[4];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
	    hl[4] = al4 = (a & 0xffff) | (b << 16);

	    h = ah5;
	    l = al5;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[5];
	    l = hl[5];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
	    hl[5] = al5 = (a & 0xffff) | (b << 16);

	    h = ah6;
	    l = al6;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[6];
	    l = hl[6];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
	    hl[6] = al6 = (a & 0xffff) | (b << 16);

	    h = ah7;
	    l = al7;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[7];
	    l = hl[7];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
	    hl[7] = al7 = (a & 0xffff) | (b << 16);

	    pos += 128;
	    n -= 128;
	  }

	  return n;
	}

	function crypto_hash(out, m, n) {
	  var hh = new Int32Array(8),
	      hl = new Int32Array(8),
	      x = new Uint8Array(256),
	      i, b = n;

	  hh[0] = 0x6a09e667;
	  hh[1] = 0xbb67ae85;
	  hh[2] = 0x3c6ef372;
	  hh[3] = 0xa54ff53a;
	  hh[4] = 0x510e527f;
	  hh[5] = 0x9b05688c;
	  hh[6] = 0x1f83d9ab;
	  hh[7] = 0x5be0cd19;

	  hl[0] = 0xf3bcc908;
	  hl[1] = 0x84caa73b;
	  hl[2] = 0xfe94f82b;
	  hl[3] = 0x5f1d36f1;
	  hl[4] = 0xade682d1;
	  hl[5] = 0x2b3e6c1f;
	  hl[6] = 0xfb41bd6b;
	  hl[7] = 0x137e2179;

	  crypto_hashblocks_hl(hh, hl, m, n);
	  n %= 128;

	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
	  x[n] = 128;

	  n = 256-128*(n<112?1:0);
	  x[n-9] = 0;
	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
	  crypto_hashblocks_hl(hh, hl, x, n);

	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

	  return 0;
	}

	function add(p, q) {
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf(),
	      g = gf(), h = gf(), t = gf();

	  Z(a, p[1], p[0]);
	  Z(t, q[1], q[0]);
	  M(a, a, t);
	  A(b, p[0], p[1]);
	  A(t, q[0], q[1]);
	  M(b, b, t);
	  M(c, p[3], q[3]);
	  M(c, c, D2);
	  M(d, p[2], q[2]);
	  A(d, d, d);
	  Z(e, b, a);
	  Z(f, d, c);
	  A(g, d, c);
	  A(h, b, a);

	  M(p[0], e, f);
	  M(p[1], h, g);
	  M(p[2], g, f);
	  M(p[3], e, h);
	}

	function cswap(p, q, b) {
	  var i;
	  for (i = 0; i < 4; i++) {
	    sel25519(p[i], q[i], b);
	  }
	}

	function pack(r, p) {
	  var tx = gf(), ty = gf(), zi = gf();
	  inv25519(zi, p[2]);
	  M(tx, p[0], zi);
	  M(ty, p[1], zi);
	  pack25519(r, ty);
	  r[31] ^= par25519(tx) << 7;
	}

	function scalarmult(p, q, s) {
	  var b, i;
	  set25519(p[0], gf0);
	  set25519(p[1], gf1);
	  set25519(p[2], gf1);
	  set25519(p[3], gf0);
	  for (i = 255; i >= 0; --i) {
	    b = (s[(i/8)|0] >> (i&7)) & 1;
	    cswap(p, q, b);
	    add(q, p);
	    add(p, p);
	    cswap(p, q, b);
	  }
	}

	function scalarbase(p, s) {
	  var q = [gf(), gf(), gf(), gf()];
	  set25519(q[0], X);
	  set25519(q[1], Y);
	  set25519(q[2], gf1);
	  M(q[3], X, Y);
	  scalarmult(p, q, s);
	}

	function crypto_sign_keypair(pk, sk, seeded) {
	  var d = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	  var i;

	  if (!seeded) randombytes(sk, 32);
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  scalarbase(p, d);
	  pack(pk, p);

	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
	  return 0;
	}

	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

	function modL(r, x) {
	  var carry, i, j, k;
	  for (i = 63; i >= 32; --i) {
	    carry = 0;
	    for (j = i - 32, k = i - 12; j < k; ++j) {
	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	      carry = Math.floor((x[j] + 128) / 256);
	      x[j] -= carry * 256;
	    }
	    x[j] += carry;
	    x[i] = 0;
	  }
	  carry = 0;
	  for (j = 0; j < 32; j++) {
	    x[j] += carry - (x[31] >> 4) * L[j];
	    carry = x[j] >> 8;
	    x[j] &= 255;
	  }
	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
	  for (i = 0; i < 32; i++) {
	    x[i+1] += x[i] >> 8;
	    r[i] = x[i] & 255;
	  }
	}

	function reduce(r) {
	  var x = new Float64Array(64), i;
	  for (i = 0; i < 64; i++) x[i] = r[i];
	  for (i = 0; i < 64; i++) r[i] = 0;
	  modL(r, x);
	}

	// Note: difference from C - smlen returned, not passed as argument.
	function crypto_sign(sm, m, n, sk) {
	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
	  var i, j, x = new Float64Array(64);
	  var p = [gf(), gf(), gf(), gf()];

	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  var smlen = n + 64;
	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

	  crypto_hash(r, sm.subarray(32), n+32);
	  reduce(r);
	  scalarbase(p, r);
	  pack(sm, p);

	  for (i = 32; i < 64; i++) sm[i] = sk[i];
	  crypto_hash(h, sm, n + 64);
	  reduce(h);

	  for (i = 0; i < 64; i++) x[i] = 0;
	  for (i = 0; i < 32; i++) x[i] = r[i];
	  for (i = 0; i < 32; i++) {
	    for (j = 0; j < 32; j++) {
	      x[i+j] += h[i] * d[j];
	    }
	  }

	  modL(sm.subarray(32), x);
	  return smlen;
	}

	function unpackneg(r, p) {
	  var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();

	  set25519(r[2], gf1);
	  unpack25519(r[1], p);
	  S(num, r[1]);
	  M(den, num, D);
	  Z(num, num, r[2]);
	  A(den, r[2], den);

	  S(den2, den);
	  S(den4, den2);
	  M(den6, den4, den2);
	  M(t, den6, num);
	  M(t, t, den);

	  pow2523(t, t);
	  M(t, t, num);
	  M(t, t, den);
	  M(t, t, den);
	  M(r[0], t, den);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) M(r[0], r[0], I);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) return -1;

	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

	  M(r[3], r[0], r[1]);
	  return 0;
	}

	function crypto_sign_open(m, sm, n, pk) {
	  var i;
	  var t = new Uint8Array(32), h = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()],
	      q = [gf(), gf(), gf(), gf()];

	  if (n < 64) return -1;

	  if (unpackneg(q, pk)) return -1;

	  for (i = 0; i < n; i++) m[i] = sm[i];
	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
	  crypto_hash(h, m, n);
	  reduce(h);
	  scalarmult(p, q, h);

	  scalarbase(q, sm.subarray(32));
	  add(p, q);
	  pack(t, p);

	  n -= 64;
	  if (crypto_verify_32(sm, 0, t, 0)) {
	    for (i = 0; i < n; i++) m[i] = 0;
	    return -1;
	  }

	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
	  return n;
	}

	var crypto_secretbox_KEYBYTES = 32,
	    crypto_secretbox_NONCEBYTES = 24,
	    crypto_secretbox_ZEROBYTES = 32,
	    crypto_secretbox_BOXZEROBYTES = 16,
	    crypto_scalarmult_BYTES = 32,
	    crypto_scalarmult_SCALARBYTES = 32,
	    crypto_box_PUBLICKEYBYTES = 32,
	    crypto_box_SECRETKEYBYTES = 32,
	    crypto_box_BEFORENMBYTES = 32,
	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	    crypto_sign_BYTES = 64,
	    crypto_sign_PUBLICKEYBYTES = 32,
	    crypto_sign_SECRETKEYBYTES = 64,
	    crypto_sign_SEEDBYTES = 32,
	    crypto_hash_BYTES = 64;

	nacl.lowlevel = {
	  crypto_core_hsalsa20: crypto_core_hsalsa20,
	  crypto_stream_xor: crypto_stream_xor,
	  crypto_stream: crypto_stream,
	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	  crypto_stream_salsa20: crypto_stream_salsa20,
	  crypto_onetimeauth: crypto_onetimeauth,
	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	  crypto_verify_16: crypto_verify_16,
	  crypto_verify_32: crypto_verify_32,
	  crypto_secretbox: crypto_secretbox,
	  crypto_secretbox_open: crypto_secretbox_open,
	  crypto_scalarmult: crypto_scalarmult,
	  crypto_scalarmult_base: crypto_scalarmult_base,
	  crypto_box_beforenm: crypto_box_beforenm,
	  crypto_box_afternm: crypto_box_afternm,
	  crypto_box: crypto_box,
	  crypto_box_open: crypto_box_open,
	  crypto_box_keypair: crypto_box_keypair,
	  crypto_hash: crypto_hash,
	  crypto_sign: crypto_sign,
	  crypto_sign_keypair: crypto_sign_keypair,
	  crypto_sign_open: crypto_sign_open,

	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	  crypto_sign_BYTES: crypto_sign_BYTES,
	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	  crypto_hash_BYTES: crypto_hash_BYTES,

	  gf: gf,
	  D: D,
	  L: L,
	  pack25519: pack25519,
	  unpack25519: unpack25519,
	  M: M,
	  A: A,
	  S: S,
	  Z: Z,
	  pow2523: pow2523,
	  add: add,
	  set25519: set25519,
	  modL: modL,
	  scalarmult: scalarmult,
	  scalarbase: scalarbase,
	};

	/* High-level API */

	function checkLengths(k, n) {
	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	}

	function checkBoxLengths(pk, sk) {
	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	}

	function checkArrayTypes() {
	  for (var i = 0; i < arguments.length; i++) {
	    if (!(arguments[i] instanceof Uint8Array))
	      throw new TypeError('unexpected type, use Uint8Array');
	  }
	}

	function cleanup(arr) {
	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
	}

	nacl.randomBytes = function(n) {
	  var b = new Uint8Array(n);
	  randombytes(b, n);
	  return b;
	};

	nacl.secretbox = function(msg, nonce, key) {
	  checkArrayTypes(msg, nonce, key);
	  checkLengths(key, nonce);
	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	  var c = new Uint8Array(m.length);
	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
	  crypto_secretbox(c, m, m.length, nonce, key);
	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
	};

	nacl.secretbox.open = function(box, nonce, key) {
	  checkArrayTypes(box, nonce, key);
	  checkLengths(key, nonce);
	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	  var m = new Uint8Array(c.length);
	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
	  if (c.length < 32) return null;
	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
	  return m.subarray(crypto_secretbox_ZEROBYTES);
	};

	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

	nacl.scalarMult = function(n, p) {
	  checkArrayTypes(n, p);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult(q, n, p);
	  return q;
	};

	nacl.scalarMult.base = function(n) {
	  checkArrayTypes(n);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult_base(q, n);
	  return q;
	};

	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

	nacl.box = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox(msg, nonce, k);
	};

	nacl.box.before = function(publicKey, secretKey) {
	  checkArrayTypes(publicKey, secretKey);
	  checkBoxLengths(publicKey, secretKey);
	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	  crypto_box_beforenm(k, publicKey, secretKey);
	  return k;
	};

	nacl.box.after = nacl.secretbox;

	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox.open(msg, nonce, k);
	};

	nacl.box.open.after = nacl.secretbox.open;

	nacl.box.keyPair = function() {
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	  crypto_box_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.box.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  crypto_scalarmult_base(pk, secretKey);
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	nacl.box.nonceLength = crypto_box_NONCEBYTES;
	nacl.box.overheadLength = nacl.secretbox.overheadLength;

	nacl.sign = function(msg, secretKey) {
	  checkArrayTypes(msg, secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
	  crypto_sign(signedMsg, msg, msg.length, secretKey);
	  return signedMsg;
	};

	nacl.sign.open = function(signedMsg, publicKey) {
	  checkArrayTypes(signedMsg, publicKey);
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var tmp = new Uint8Array(signedMsg.length);
	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	  if (mlen < 0) return null;
	  var m = new Uint8Array(mlen);
	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
	  return m;
	};

	nacl.sign.detached = function(msg, secretKey) {
	  var signedMsg = nacl.sign(msg, secretKey);
	  var sig = new Uint8Array(crypto_sign_BYTES);
	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
	  return sig;
	};

	nacl.sign.detached.verify = function(msg, sig, publicKey) {
	  checkArrayTypes(msg, sig, publicKey);
	  if (sig.length !== crypto_sign_BYTES)
	    throw new Error('bad signature size');
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var i;
	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
	};

	nacl.sign.keyPair = function() {
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  crypto_sign_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.sign.keyPair.fromSeed = function(seed) {
	  checkArrayTypes(seed);
	  if (seed.length !== crypto_sign_SEEDBYTES)
	    throw new Error('bad seed size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
	  crypto_sign_keypair(pk, sk, true);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	nacl.sign.signatureLength = crypto_sign_BYTES;

	nacl.hash = function(msg) {
	  checkArrayTypes(msg);
	  var h = new Uint8Array(crypto_hash_BYTES);
	  crypto_hash(h, msg, msg.length);
	  return h;
	};

	nacl.hash.hashLength = crypto_hash_BYTES;

	nacl.verify = function(x, y) {
	  checkArrayTypes(x, y);
	  // Zero length arguments are considered not equal.
	  if (x.length === 0 || y.length === 0) return false;
	  if (x.length !== y.length) return false;
	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
	};

	nacl.setPRNG = function(fn) {
	  randombytes = fn;
	};

	(function() {
	  // Initialize PRNG if environment provides CSPRNG.
	  // If not, methods calling randombytes will throw.
	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
	  if (crypto && crypto.getRandomValues) {
	    // Browsers.
	    var QUOTA = 65536;
	    nacl.setPRNG(function(x, n) {
	      var i, v = new Uint8Array(n);
	      for (i = 0; i < n; i += QUOTA) {
	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	      }
	      for (i = 0; i < n; i++) x[i] = v[i];
	      cleanup(v);
	    });
	  } else if (typeof commonjsRequire !== 'undefined') {
	    // Node.js.
	    crypto = require$$0;
	    if (crypto && crypto.randomBytes) {
	      nacl.setPRNG(function(x, n) {
	        var i, v = crypto.randomBytes(n);
	        for (i = 0; i < n; i++) x[i] = v[i];
	        cleanup(v);
	      });
	    }
	  }
	})();

	})(module.exports ? module.exports : (self.nacl = self.nacl || {})); 
} (naclFast));

var naclFastExports = naclFast.exports;
var nacl = /*@__PURE__*/getDefaultExportFromCjs$3(naclFastExports);

var naclUtil = {exports: {}};

(function (module) {
	// Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	(function(root, f) {
	  if (module.exports) module.exports = f();
	  else if (root.nacl) root.nacl.util = f();
	  else {
	    root.nacl = {};
	    root.nacl.util = f();
	  }
	}(commonjsGlobal$1, function() {

	  var util = {};

	  function validateBase64(s) {
	    if (!(/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s))) {
	      throw new TypeError('invalid encoding');
	    }
	  }

	  util.decodeUTF8 = function(s) {
	    if (typeof s !== 'string') throw new TypeError('expected string');
	    var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);
	    for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
	    return b;
	  };

	  util.encodeUTF8 = function(arr) {
	    var i, s = [];
	    for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));
	    return decodeURIComponent(escape(s.join('')));
	  };

	  if (typeof atob === 'undefined') {
	    // Node.js

	    if (typeof Buffer.from !== 'undefined') {
	       // Node v6 and later
	      util.encodeBase64 = function (arr) { // v6 and later
	          return Buffer.from(arr).toString('base64');
	      };

	      util.decodeBase64 = function (s) {
	        validateBase64(s);
	        return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));
	      };

	    } else {
	      // Node earlier than v6
	      util.encodeBase64 = function (arr) { // v6 and later
	        return (new Buffer(arr)).toString('base64');
	      };

	      util.decodeBase64 = function(s) {
	        validateBase64(s);
	        return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));
	      };
	    }

	  } else {
	    // Browsers

	    util.encodeBase64 = function(arr) {
	      var i, s = [], len = arr.length;
	      for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));
	      return btoa(s.join(''));
	    };

	    util.decodeBase64 = function(s) {
	      validateBase64(s);
	      var i, d = atob(s), b = new Uint8Array(d.length);
	      for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
	      return b;
	    };

	  }

	  return util;

	})); 
} (naclUtil));

var naclUtilExports = naclUtil.exports;
var tweetnaclutil = /*@__PURE__*/getDefaultExportFromCjs$3(naclUtilExports);

var bytes$7 = {};

var hex$1 = {};

Object.defineProperty(hex$1, "__esModule", { value: true });
hex$1.decode = hex$1.encode = void 0;
const buffer_1$1 = require$$0$1;
function encode$a(data) {
    return data.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "0x");
}
hex$1.encode = encode$a;
function decode$8(data) {
    if (data.indexOf("0x") === 0) {
        data = data.substr(2);
    }
    if (data.length % 2 === 1) {
        data = "0" + data;
    }
    let key = data.match(/.{2}/g);
    if (key === null) {
        return buffer_1$1.Buffer.from([]);
    }
    return buffer_1$1.Buffer.from(key.map((byte) => parseInt(byte, 16)));
}
hex$1.decode = decode$8;

var utf8$9 = {};

var common$9 = {};

var _a;
Object.defineProperty(common$9, "__esModule", { value: true });
common$9.isVersionedTransaction = common$9.chunks = common$9.isBrowser = void 0;
/**
 * Returns true if being run inside a web browser,
 * false if in a Node process or electron app.
 */
common$9.isBrowser = browser$1$1.env.ANCHOR_BROWSER ||
    (typeof window !== "undefined" && !((_a = window.process) === null || _a === void 0 ? void 0 : _a.hasOwnProperty("type")));
/**
 * Splits an array into chunks
 *
 * @param array Array of objects to chunk.
 * @param size The max size of a chunk.
 * @returns A two dimensional array where each T[] length is < the provided size.
 */
function chunks$1(array, size) {
    return Array.apply(0, new Array(Math.ceil(array.length / size))).map((_, index) => array.slice(index * size, (index + 1) * size));
}
common$9.chunks = chunks$1;
/**
 * Check if a transaction object is a VersionedTransaction or not
 *
 * @param tx
 * @returns bool
 */
const isVersionedTransaction$2 = (tx) => {
    return "version" in tx;
};
common$9.isVersionedTransaction = isVersionedTransaction$2;

var inherits$1;
if (typeof Object.create === 'function'){
  inherits$1 = function inherits(ctor, superCtor) {
    // implementation from standard node.js 'util' module
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits$1 = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var inherits$2 = inherits$1;

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
function format(f) {
  if (!isString$1(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject$2(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
}

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
function deprecate(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined$1(global$1.process)) {
    return function() {
      return deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (browser$1$1.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (browser$1$1.throwDeprecation) {
        throw new Error(msg);
      } else if (browser$1$1.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

var debugs = {};
var debugEnviron;
function debuglog(set) {
  if (isUndefined$1(debugEnviron))
    debugEnviron = browser$1$1.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = 0;
      debugs[set] = function() {
        var msg = format.apply(null, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
}

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean$1(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  }
  // set default options
  if (isUndefined$1(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined$1(ctx.depth)) ctx.depth = 2;
  if (isUndefined$1(ctx.colors)) ctx.colors = false;
  if (isUndefined$1(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction$2(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString$1(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction$2(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp$1(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate$1(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray$1(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction$2(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp$1(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate$1(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp$1(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined$1(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString$1(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber$1(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean$1(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty$1(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty$1(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined$1(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray$1(ar) {
  return Array.isArray(ar);
}

function isBoolean$1(arg) {
  return typeof arg === 'boolean';
}

function isNull(arg) {
  return arg === null;
}

function isNullOrUndefined(arg) {
  return arg == null;
}

function isNumber$1(arg) {
  return typeof arg === 'number';
}

function isString$1(arg) {
  return typeof arg === 'string';
}

function isSymbol(arg) {
  return typeof arg === 'symbol';
}

function isUndefined$1(arg) {
  return arg === void 0;
}

function isRegExp$1(re) {
  return isObject$2(re) && objectToString(re) === '[object RegExp]';
}

function isObject$2(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isDate$1(d) {
  return isObject$2(d) && objectToString(d) === '[object Date]';
}

function isError(e) {
  return isObject$2(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isFunction$2(arg) {
  return typeof arg === 'function';
}

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}

function isBuffer$1(maybeBuf) {
  return Buffer.isBuffer(maybeBuf);
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
function log() {
  console.log('%s - %s', timestamp(), format.apply(null, arguments));
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject$2(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}
function hasOwnProperty$1(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { browser$1$1.nextTick(cb.bind(null, null, ret)); },
        function(rej) { browser$1$1.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

var _polyfillNode_util = {
  inherits: inherits$2,
  _extend: _extend,
  log: log,
  isBuffer: isBuffer$1,
  isPrimitive: isPrimitive,
  isFunction: isFunction$2,
  isError: isError,
  isDate: isDate$1,
  isObject: isObject$2,
  isRegExp: isRegExp$1,
  isUndefined: isUndefined$1,
  isSymbol: isSymbol,
  isString: isString$1,
  isNumber: isNumber$1,
  isNullOrUndefined: isNullOrUndefined,
  isNull: isNull,
  isBoolean: isBoolean$1,
  isArray: isArray$1,
  inspect: inspect,
  deprecate: deprecate,
  format: format,
  debuglog: debuglog,
  promisify: promisify,
  callbackify: callbackify,
};

var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  _extend: _extend,
  callbackify: callbackify,
  debuglog: debuglog,
  default: _polyfillNode_util,
  deprecate: deprecate,
  format: format,
  inherits: inherits$2,
  inspect: inspect,
  isArray: isArray$1,
  isBoolean: isBoolean$1,
  isBuffer: isBuffer$1,
  isDate: isDate$1,
  isError: isError,
  isFunction: isFunction$2,
  isNull: isNull,
  isNullOrUndefined: isNullOrUndefined,
  isNumber: isNumber$1,
  isObject: isObject$2,
  isPrimitive: isPrimitive,
  isRegExp: isRegExp$1,
  isString: isString$1,
  isSymbol: isSymbol,
  isUndefined: isUndefined$1,
  log: log,
  promisify: promisify
});

var require$$1 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(_polyfillNode_util$1);

Object.defineProperty(utf8$9, "__esModule", { value: true });
utf8$9.encode = utf8$9.decode = void 0;
const common_1 = common$9;
function decode$7(array) {
    const decoder = common_1.isBrowser
        ? new TextDecoder("utf-8") // Browser https://caniuse.com/textencoder.
        : new (require$$1.TextDecoder)("utf-8"); // Node.
    return decoder.decode(array);
}
utf8$9.decode = decode$7;
function encode$9(input) {
    const encoder = common_1.isBrowser
        ? new TextEncoder() // Browser.
        : new (require$$1.TextEncoder)("utf-8"); // Node.
    return encoder.encode(input);
}
utf8$9.encode = encode$9;

var bs58$3 = {};

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
var _Buffer = safeBufferExports.Buffer;
function base$1 (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256);
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
  function encode (source) {
    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
    var b58 = new Uint8Array(size);
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin];
            // Apply "b58 = b58 * 256 + ch".
      var i = 0;
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0;
        b58[it1] = (carry % BASE) >>> 0;
        carry = (carry / BASE) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      pbegin++;
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return _Buffer.alloc(0) }
    var psz = 0;
        // Skip and count leading '1's.
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size);
        // Process the characters.
    while (psz < source.length) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)];
            // Invalid character
      if (carry === 255) { return }
      var i = 0;
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0;
        b256[it3] = (carry % 256) >>> 0;
        carry = (carry / 256) >>> 0;
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i;
      psz++;
    }
        // Skip leading zeroes in b256.
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
    vch.fill(0x00, 0, zeroes);
    var j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string);
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
var src$2 = base$1;

var basex = src$2;
var ALPHABET$1 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

var bs58$2 = basex(ALPHABET$1);

var bs58$1$1 = /*@__PURE__*/getDefaultExportFromCjs$3(bs58$2);

var __importDefault = (commonjsGlobal$1 && commonjsGlobal$1.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(bs58$3, "__esModule", { value: true });
bs58$3.decode = bs58$3.encode = void 0;
const bs58_1 = __importDefault(bs58$2);
function encode$8(data) {
    return bs58_1.default.encode(data);
}
bs58$3.encode = encode$8;
function decode$6(data) {
    return bs58_1.default.decode(data);
}
bs58$3.decode = decode$6;

var base64$6 = {};

var base64Js = {};

base64Js.byteLength = byteLength;
var toByteArray_1 = base64Js.toByteArray = toByteArray;
var fromByteArray_1 = base64Js.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens (b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4);

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen;

  var i;
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = (tmp >> 16) & 0xFF;
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    );
  }

  return parts.join('')
}

var __createBinding$1 = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$1 = (commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$1 = (commonjsGlobal$1 && commonjsGlobal$1.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
    __setModuleDefault$1(result, mod);
    return result;
};
Object.defineProperty(base64$6, "__esModule", { value: true });
base64$6.decode = base64$6.encode = void 0;
const buffer_1 = require$$0$1;
const base64$5 = __importStar$1(base64Js);
function encode$7(data) {
    return base64$5.fromByteArray(data);
}
base64$6.encode = encode$7;
function decode$5(data) {
    return buffer_1.Buffer.from(base64$5.toByteArray(data));
}
base64$6.decode = decode$5;

var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (commonjsGlobal$1 && commonjsGlobal$1.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(bytes$7, "__esModule", { value: true });
bytes$7.base64 = bs58$1 = bytes$7.bs58 = utf8$8 = bytes$7.utf8 = bytes$7.hex = void 0;
bytes$7.hex = __importStar(hex$1);
var utf8$8 = bytes$7.utf8 = __importStar(utf8$9);
var bs58$1 = bytes$7.bs58 = __importStar(bs58$3);
bytes$7.base64 = __importStar(base64$6);

function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// utils is a library of generic helper functions non-specific to axios

const {toString: toString$2} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString$2.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
};

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction$1 = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject$1 = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData$1 = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction$1(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction$1(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

const [isReadableStream, isRequest, isResponse, isHeaders$1] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global$1)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction$1(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction$1(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction$1(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
};

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  };

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
};

const noop = () => {};

const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};

const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0];
  }

  return str;
};

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction$1(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject$1(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  };

  return visit(obj, 0);
};

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }

  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({source, data}) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);

    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    }
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === 'function',
  isFunction$1(_global.postMessage)
);

const asap = typeof queueMicrotask !== 'undefined' ?
  queueMicrotask.bind(_global) : ( typeof browser$1$1 !== 'undefined' && browser$1$1.nextTick || _setImmediate);

// *********************

var utils$n = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData: isFormData$1,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject: isObject$1,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders: isHeaders$1,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError$1(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}

utils$n.inherits(AxiosError$1, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$n.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});

const prototype$1 = AxiosError$1.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError$1, descriptors);
Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError$1.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);

  utils$n.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError$1.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

// eslint-disable-next-line strict
var httpAdapter = null;

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils$n.isPlainObject(thing) || utils$n.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils$n.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils$n.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils$n.toFlatObject(utils$n, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData$1(obj, formData, options) {
  if (!utils$n.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils$n.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils$n.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils$n.isSpecCompliantForm(formData);

  if (!utils$n.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils$n.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils$n.isBlob(value)) {
      throw new AxiosError$1('Blob is not supported. Use a Buffer instead.');
    }

    if (utils$n.isArrayBuffer(value) || utils$n.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils$n.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils$n.isArray(value) && isFlatArray(value)) ||
        ((utils$n.isFileList(value) || utils$n.endsWith(key, '[]')) && (arr = utils$n.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils$n.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils$n.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils$n.forEach(value, function each(el, key) {
      const result = !(utils$n.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils$n.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils$n.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode$6(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && toFormData$1(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$6);
  } : encode$6;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode$5(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?(object|Function)} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode$5;

  if (utils$n.isFunction(options)) {
    options = {
      serialize: options
    };
  } 

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$n.isURLSearchParams(params) ?
      params.toString() :
      new AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$n.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

var InterceptorManager$1 = InterceptorManager;

var transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

var FormData$2 = typeof FormData !== 'undefined' ? FormData : null;

var Blob$3 = typeof Blob !== 'undefined' ? Blob : null;

var platform$1 = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$2,
    Blob: Blob$3
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
};

const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

const _navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = hasBrowserEnv &&
  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const origin = hasBrowserEnv && window.location.href || 'http://localhost';

var utils$m = /*#__PURE__*/Object.freeze({
  __proto__: null,
  hasBrowserEnv: hasBrowserEnv,
  hasStandardBrowserEnv: hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
  navigator: _navigator,
  origin: origin
});

var platform = {
  ...utils$m,
  ...platform$1
};

function toURLEncodedForm(data, options) {
  return toFormData$1(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$n.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils$n.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$n.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils$n.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils$n.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils$n.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils$n.isFormData(formData) && utils$n.isFunction(formData.entries)) {
    const obj = {};

    utils$n.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils$n.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$n.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: transitionalDefaults,

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils$n.isObject(data);

    if (isObjectPayload && utils$n.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils$n.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }

    if (utils$n.isArrayBuffer(data) ||
      utils$n.isBuffer(data) ||
      utils$n.isStream(data) ||
      utils$n.isFile(data) ||
      utils$n.isBlob(data) ||
      utils$n.isReadableStream(data)
    ) {
      return data;
    }
    if (utils$n.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$n.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils$n.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return toFormData$1(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (utils$n.isResponse(data) || utils$n.isReadableStream(data)) {
      return data;
    }

    if (data && utils$n.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils$n.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

var defaults$1 = defaults;

// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils$n.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils$n.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils$n.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils$n.isString(value)) return;

  if (utils$n.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils$n.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils$n.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

let AxiosHeaders$1 = class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils$n.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils$n.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils$n.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if(utils$n.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils$n.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$n.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils$n.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils$n.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$n.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils$n.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils$n.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils$n.forEach(this, (value, header) => {
      const key = utils$n.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils$n.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$n.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils$n.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
};

AxiosHeaders$1.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils$n.reduceDescriptors(AxiosHeaders$1.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils$n.freezeMethods(AxiosHeaders$1);

var AxiosHeaders$2 = AxiosHeaders$1;

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || defaults$1;
  const context = response || config;
  const headers = AxiosHeaders$2.from(context.headers);
  let data = context.data;

  utils$n.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

function isCancel$1(value) {
  return !!(value && value.__CANCEL__);
}

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError$1(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError$1.call(this, message == null ? 'canceled' : message, AxiosError$1.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils$n.inherits(CanceledError$1, AxiosError$1, {
  __CANCEL__: true
});

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError$1(
      'Request failed with status code ' + response.status,
      [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;

  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };

  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if ( passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };

  const flush = () => lastArgs && invoke(lastArgs);

  return [throttled, flush];
}

const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);

  return throttle(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };

    listener(data);
  }, freq);
};

const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;

  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};

const asyncDecorator = (fn) => (...args) => utils$n.asap(() => fn(...args));

var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {
  url = new URL(url, platform.origin);

  return (
    origin.protocol === url.protocol &&
    origin.host === url.host &&
    (isMSIE || origin.port === url.port)
  );
})(
  new URL(platform.origin),
  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
) : () => true;

var cookies = platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils$n.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils$n.isString(path) && cookie.push('path=' + path);

      utils$n.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  };

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

const headersToObject = (thing) => thing instanceof AxiosHeaders$2 ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig$1(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, prop, caseless) {
    if (utils$n.isPlainObject(target) && utils$n.isPlainObject(source)) {
      return utils$n.merge.call({caseless}, target, source);
    } else if (utils$n.isPlainObject(source)) {
      return utils$n.merge({}, source);
    } else if (utils$n.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, prop , caseless) {
    if (!utils$n.isUndefined(b)) {
      return getMergedValue(a, b, prop , caseless);
    } else if (!utils$n.isUndefined(a)) {
      return getMergedValue(undefined, a, prop , caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils$n.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils$n.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils$n.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)
  };

  utils$n.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils$n.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

var resolveConfig = (config) => {
  const newConfig = mergeConfig$1({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = AxiosHeaders$2.from(headers);

  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (utils$n.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils$n.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
};

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

var xhrAdapter = isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders$2.from(_config.headers).normalize();
    let {responseType, onUploadProgress, onDownloadProgress} = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;

    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = AxiosHeaders$2.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || transitionalDefaults;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError$1(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$n.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils$n.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

      request.upload.addEventListener('progress', uploadThrottled);

      request.upload.addEventListener('loadend', flushUpload);
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError$1(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(_config.url);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError$1('Unsupported protocol ' + protocol + ':', AxiosError$1.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
};

const composeSignals = (signals, timeout) => {
  const {length} = (signals = signals ? signals.filter(Boolean) : []);

  if (timeout || length) {
    let controller = new AbortController();

    let aborted;

    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
      }
    };

    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
    }, timeout);

    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    };

    signals.forEach((signal) => signal.addEventListener('abort', onabort));

    const {signal} = controller;

    signal.unsubscribe = () => utils$n.asap(unsubscribe);

    return signal;
  }
};

var composeSignals$1 = composeSignals;

const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};

const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};

const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }

  const reader = stream.getReader();
  try {
    for (;;) {
      const {done, value} = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};

const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);

  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };

  return new ReadableStream({
    async pull(controller) {
      try {
        const {done, value} = await iterator.next();

        if (done) {
         _onFinish();
          controller.close();
          return;
        }

        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
};

const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false
  }
};

const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;

  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
});

const DEFAULT_CHUNK_SIZE = 64 * 1024;

const supportsResponseStream = isReadableStreamSupported &&
  test(() => utils$n.isReadableStream(new Response('').body));


const resolvers$2 = {
  stream: supportsResponseStream && ((res) => res.body)
};

isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers$2[type] && (resolvers$2[type] = utils$n.isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config);
      });
  });
})(new Response));

const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(utils$n.isBlob(body)) {
    return body.size;
  }

  if(utils$n.isSpecCompliantForm(body)) {
    const _request = new Request(platform.origin, {
      method: 'POST',
      body,
    });
    return (await _request.arrayBuffer()).byteLength;
  }

  if(utils$n.isArrayBufferView(body) || utils$n.isArrayBuffer(body)) {
    return body.byteLength;
  }

  if(utils$n.isURLSearchParams(body)) {
    body = body + '';
  }

  if(utils$n.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};

const resolveBodyLength = async (headers, body) => {
  const length = utils$n.toFiniteNumber(headers.getContentLength());

  return length == null ? getBodyLength(body) : length;
};

var fetchAdapter = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = resolveConfig(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

  let request;

  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
  });

  let requestContentLength;

  try {
    if (
      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (utils$n.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader);
      }

      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );

        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }

    if (!utils$n.isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });

    let response = await fetch(request);

    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = utils$n.toFiniteNumber(response.headers.get('content-length'));

      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];

      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await resolvers$2[utils$n.findKey(resolvers$2, responseType) || 'text'](response, config);

    !isStreamResponse && unsubscribe && unsubscribe();

    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders$2.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    })
  } catch (err) {
    unsubscribe && unsubscribe();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw AxiosError$1.from(err, err && err.code, config, request);
  }
});

const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter,
  fetch: fetchAdapter
};

utils$n.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils$n.isFunction(adapter) || adapter === null || adapter === false;

var adapters = {
  getAdapter: (adapters) => {
    adapters = utils$n.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new AxiosError$1(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new AxiosError$1(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
};

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError$1(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = AxiosHeaders$2.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = AxiosHeaders$2.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel$1(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$2.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

const VERSION$1 = "1.7.9";

const validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError$1(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError$1.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

validators$1.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    // eslint-disable-next-line no-console
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  }
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError$1('option ' + opt + ' must be ' + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION);
    }
  }
}

var validator = {
  assertOptions,
  validators: validators$1
};

const validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
let Axios$1 = class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager$1(),
      response: new InterceptorManager$1()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};

        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack;
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig$1(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils$n.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    validator.assertOptions(config, {
      baseUrl: validators.spelling('baseURL'),
      withXsrfToken: validators.spelling('withXSRFToken')
    }, true);

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils$n.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils$n.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = AxiosHeaders$2.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};

// Provide aliases for supported request methods
utils$n.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios$1.prototype[method] = function(url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils$n.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig$1(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios$1.prototype[method] = generateHTTPMethod();

  Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
});

var Axios$2 = Axios$1;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
let CancelToken$1 = class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new CanceledError$1(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  toAbortSignal() {
    const controller = new AbortController();

    const abort = (err) => {
      controller.abort(err);
    };

    this.subscribe(abort);

    controller.signal.unsubscribe = () => this.unsubscribe(abort);

    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};

var CancelToken$2 = CancelToken$1;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread$1(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError$1(payload) {
  return utils$n.isObject(payload) && (payload.isAxiosError === true);
}

const HttpStatusCode$1 = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
  HttpStatusCode$1[value] = key;
});

var HttpStatusCode$2 = HttpStatusCode$1;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios$2(defaultConfig);
  const instance = bind(Axios$2.prototype.request, context);

  // Copy axios.prototype to instance
  utils$n.extend(instance, Axios$2.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils$n.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(defaults$1);

// Expose Axios class to allow class inheritance
axios.Axios = Axios$2;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError$1;
axios.CancelToken = CancelToken$2;
axios.isCancel = isCancel$1;
axios.VERSION = VERSION$1;
axios.toFormData = toFormData$1;

// Expose AxiosError class
axios.AxiosError = AxiosError$1;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread$1;

// Expose isAxiosError
axios.isAxiosError = isAxiosError$1;

// Expose mergeConfig
axios.mergeConfig = mergeConfig$1;

axios.AxiosHeaders = AxiosHeaders$2;

axios.formToJSON = thing => formDataToJSON(utils$n.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = HttpStatusCode$2;

axios.default = axios;

// this module should only have a default export
var axios$1 = axios;

// This module is intended to unwrap Axios default export as named.
// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
const {
  Axios,
  AxiosError,
  CanceledError,
  isCancel,
  CancelToken,
  VERSION,
  all,
  Cancel,
  isAxiosError,
  spread,
  toFormData,
  AxiosHeaders,
  HttpStatusCode,
  formToJSON,
  getAdapter,
  mergeConfig
} = axios$1;

const solanaConfigPreset = {
    mainnet: {
        network: 'https://rpc.ironforge.network/mainnet?apiKey=01J4RYMAWZC65B6CND9DTZZ5BK',
        jobs_address: 'nosJhNRqr2bc9g1nfGDcXXTXvYUmxD4cVwy2pMWhrYM',
        nos_address: 'nosXBVoaCTtYdLvKY6Csb4AC8JCdQKKAaWYtx2ZMoo7',
        market_address: '7nxXoihx65yRGZiGzWZsFMz8D7qwxFePNKvDBWZnxc41',
        rewards_address: 'nosRB8DUV67oLNrL45bo2pFLrmsWPiewe2Lk2DRNYCp',
        nodes_address: 'nosNeZR64wiEhQc5j251bsP4WqDabT6hmz4PHyoHLGD',
        stake_address: 'nosScmHY2uR24Zh751PmGj9ww9QRNHewh9H59AfrTJE',
        pools_address: 'nosPdZrfDzND1LAR28FLMDEATUPK53K8xbRBXAirevD',
        pool_address: 'Djy1xNoPnuUdHUTCkzEDQkxo3EpPJxXU7GbXEHXJfcEB',
        priority_fee: 10000,
    },
    devnet: {
        network: 'devnet',
        jobs_address: 'nosJTmGQxvwXy23vng5UjkTbfv91Bzf9jEuro78dAGR',
        nos_address: 'devr1BGQndEW5k5zfvG5FsLyZv1Ap73vNgAHcQ9sUVP',
        market_address: '7nxXoihx65yRGZiGzWZsFMz8D7qwxFePNKvDBWZnxc41',
        rewards_address: 'nosRB8DUV67oLNrL45bo2pFLrmsWPiewe2Lk2DRNYCp',
        nodes_address: 'nosNeZR64wiEhQc5j251bsP4WqDabT6hmz4PHyoHLGD',
        stake_address: 'nosScmHY2uR24Zh751PmGj9ww9QRNHewh9H59AfrTJE',
        pools_address: 'nosPdZrfDzND1LAR28FLMDEATUPK53K8xbRBXAirevD',
        pool_address: 'miF9saGY5WS747oia48WR3CMFZMAGG8xt6ajB7rdV3e',
    },
};
const secretsConfigPreset = {
    mainnet: {
        manager: 'https://secrets.k8s.prd.nos.ci/',
    },
    devnet: {
        manager: 'https://secrets.k8s.dev.nos.ci/',
    },
};
const IPFSConfigPreset = {
    mainnet: {
        api: 'https://api.pinata.cloud',
        jwt: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiJmZDUwODE1NS1jZDJhLTRlMzYtYWI4MC0wNmMxNjRmZWY1MTkiLCJlbWFpbCI6Implc3NlQG5vc2FuYS5pbyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaW5fcG9saWN5Ijp7InJlZ2lvbnMiOlt7ImlkIjoiRlJBMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfV0sInZlcnNpb24iOjF9LCJtZmFfZW5hYmxlZCI6ZmFsc2UsInN0YXR1cyI6IkFDVElWRSJ9LCJhdXRoZW50aWNhdGlvblR5cGUiOiJzY29wZWRLZXkiLCJzY29wZWRLZXlLZXkiOiI1YzVhNWM2N2RlYWU2YzNhNzEwOCIsInNjb3BlZEtleVNlY3JldCI6ImYxOWFjZDUyZDk4ZTczNjU5MmEyY2IzZjQwYWUxNGE2ZmYyYTkxNDJjZTRiN2EzZGQ5OTYyOTliMmJkN2IzYzEiLCJpYXQiOjE2ODY3NzE5Nzl9.r4_pWCCT79Jis6L3eegjdBdAt5MpVd1ymDkBuNE25g8',
        gateway: 'https://nosana.mypinata.cloud/ipfs/',
    },
    devnet: {
        api: 'https://api.pinata.cloud',
        jwt: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiJmZDUwODE1NS1jZDJhLTRlMzYtYWI4MC0wNmMxNjRmZWY1MTkiLCJlbWFpbCI6Implc3NlQG5vc2FuYS5pbyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaW5fcG9saWN5Ijp7InJlZ2lvbnMiOlt7ImlkIjoiRlJBMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfV0sInZlcnNpb24iOjF9LCJtZmFfZW5hYmxlZCI6ZmFsc2UsInN0YXR1cyI6IkFDVElWRSJ9LCJhdXRoZW50aWNhdGlvblR5cGUiOiJzY29wZWRLZXkiLCJzY29wZWRLZXlLZXkiOiI1YzVhNWM2N2RlYWU2YzNhNzEwOCIsInNjb3BlZEtleVNlY3JldCI6ImYxOWFjZDUyZDk4ZTczNjU5MmEyY2IzZjQwYWUxNGE2ZmYyYTkxNDJjZTRiN2EzZGQ5OTYyOTliMmJkN2IzYzEiLCJpYXQiOjE2ODY3NzE5Nzl9.r4_pWCCT79Jis6L3eegjdBdAt5MpVd1ymDkBuNE25g8',
        gateway: 'https://nosana.mypinata.cloud/ipfs/',
    },
};

var fs = {};

/* eslint-env browser */

var browser$1 = typeof self == 'object' ? self.FormData : window.FormData;

var FormData$1 = /*@__PURE__*/getDefaultExportFromCjs$3(browser$1);

/**
 * Class to interact with Pinata Cloud
 * https://www.pinata.cloud/
 */
class IPFS {
    constructor(environment = 'devnet', config) {
        this.config = IPFSConfigPreset[environment];
        Object.assign(this.config, config);
        const headers = new AxiosHeaders();
        if (this.config.jwt) {
            headers.set('Authorization', `Bearer ${this.config.jwt}`);
        }
        this.api = axios$1.create({
            baseURL: this.config.api,
            headers,
        });
    }
    /**
     * Convert the ipfs bytes from a solana job to a CID
     * It prepends the 0x1220 (18,32) to make it 34 bytes and Base58 encodes it.
     * This result is IPFS addressable.
     */
    static solHashToIpfsHash(hashArray) {
        if (hashArray.length === 32) {
            hashArray.unshift(18, 32);
        }
        return base58$6.encode(Buffer.from(hashArray));
    }
    /**
     * Converts IPFS hash to byte array needed to submit results
     * @param hash IPFS hash
     * @returns Array<number>
     */
    IpfsHashToByteArray(hash) {
        return [...base58$6.decode(hash).subarray(2)];
    }
    async retrieve(hash, options = {}) {
        if (typeof hash !== 'string')
            hash = IPFS.solHashToIpfsHash(hash);
        const response = await axios$1.get(this.config.gateway + hash, options);
        return response.data;
    }
    /**
     * Function to pin data into Pinata Cloud
     * @param data Object to pin into IPFS as JSON
     */
    async pin(data) {
        const response = await this.api.post('/pinning/pinJSONToIPFS', data);
        return response.data.IpfsHash;
    }
    /**
     * Function to pin data into Pinata Cloud
     * @param data Object to pin into IPFS as JSON
     */
    async pinFile(filePath) {
        let data = new FormData$1();
        // const file = new Blob([await readFile(filePath)], {
        //   type: lookup(filePath) ? (lookup(filePath) as string) : undefined,
        // });
        // data.set('file', file, filePath.split('/').pop());
        data.append('file', fs.createReadStream(filePath));
        const response = await this.api.post('/pinning/pinFileToIPFS', data, {
            headers: {
                'Content-Type': `multipart/form-data; boundary=${data.getBoundary()}`,
                Authorization: `Bearer ${this.config.jwt}`,
            },
        });
        return response.data.IpfsHash;
    }
}

const excludedJobs = [
    'Af6vBZSM3eLfJHvfMXKUa3CCeP4b8VEFbBaRhMsJHvtb',
    'DhZJphpRXFVH1sGqYEiiPyeXQr2LEv4FvFnUuCvi3eQF',
    '4vkKcBAs3DuFYK9ZLxzcfmHvwtgaYMJMuv7gnMya8qam',
    'ERgvm546BuSLfHzWegKweGUjecDVtiSui7Pgwnpwo8r3',
    '4pndLabGeRzLtFMdpi34fZCS9u6t9z5jcWT26sf5qbeL',
    'AFPUhb1yaJyhhQ7yyKraTHb4xYgN3zmN6z9oG7qJZ3qe',
];
const jobStateMapping = {
    0: 'QUEUED',
    1: 'RUNNING',
    2: 'COMPLETED',
    3: 'STOPPED',
};
const isVersionedTransaction$1 = (tx) => {
    return 'version' in tx;
};
/**
 * Method to pause the process
 * @param seconds Number of seconds to pause
 */
const sleep = (seconds) => new Promise((res) => setTimeout(res, seconds * 1e3));
/**
 * Method to easily get a universal timestamp
 */
const now$1 = () => Math.floor(Date.now() / 1e3);
class KeyWallet {
    constructor(payer) {
        this.payer = payer;
    }
    async signTransaction(tx) {
        if (isVersionedTransaction$1(tx)) {
            tx.sign([this.payer]);
        }
        else {
            tx.partialSign(this.payer);
        }
        return tx;
    }
    async signAllTransactions(txs) {
        return txs.map((t) => {
            if (isVersionedTransaction$1(t)) {
                t.sign([this.payer]);
            }
            else {
                t.partialSign(this.payer);
            }
            return t;
        });
    }
    get publicKey() {
        return this.payer.publicKey;
    }
    get privateKey() {
        return this.payer.secretKey;
    }
}
const mapJob = (job) => {
    job.state = Number.isInteger(job.state)
        ? jobStateMapping[job.state]
        : job.state;
    job.timeStart = job.timeStart ? parseInt(job.timeStart) : job.timeStart;
    job.timeEnd = job.timeEnd ? parseInt(job.timeEnd) : job.timeEnd;
    job.ipfsJob = IPFS.solHashToIpfsHash(job.ipfsJob);
    job.ipfsResult = IPFS.solHashToIpfsHash(job.ipfsResult);
    job.timeout = job.timeout;
    return job;
};
const polyfill = () => {
    // polyfill buffer for browser
    if (typeof window !== 'undefined') {
        window.Buffer = Buffer;
    }
};
const getWallet = (wallet) => {
    if (typeof wallet === 'string' || Array.isArray(wallet)) {
        let key = wallet;
        if (typeof key === 'string') {
            if (key[0] === '[') {
                key = JSON.parse(key);
            }
            else {
                key = Buffer.from(bs58$1.decode(key)).toJSON().data;
                // key = Buffer.from(key).toJSON().data;
            }
        }
        wallet = Keypair$2.fromSecretKey(new Uint8Array(key));
    }
    // If .signTransaction exists, it's already type Wallet
    // @ts-ignore
    if (!wallet.signTransaction) {
        wallet = new KeyWallet(wallet);
    }
    return wallet;
};
const pda$1 = (seeds, programId) => PublicKey.findProgramAddressSync(seeds, programId)[0];

class AuthorizationManager {
    constructor(wallet) {
        this.wallet = getWallet(wallet);
    }
    generate(message, options) {
        const { includeTime, seperator } = {
            includeTime: false,
            seperator: ':',
            ...options,
        };
        const messageBytes = tweetnaclutil.decodeUTF8(message);
        const signature = nacl.sign.detached(messageBytes, this.wallet.payer.secretKey);
        return `${message}${seperator}${base58$6.encode(signature)}${includeTime ? seperator + new Date().getTime() : ''}`;
    }
    validate(validationString, options) {
        const { expiry, publicKey, seperator } = {
            expiry: 300,
            publicKey: this.wallet.publicKey,
            seperator: ':',
            ...options,
        };
        const [message, signatureB64, date] = validationString.split(seperator);
        if (!message || !signatureB64) {
            throw new Error('Invalid signature.');
        }
        if (date) {
            if ((new Date().getTime() - new Date(parseInt(date)).getTime()) / 1000 >=
                expiry) {
                throw new Error('Authorization has expired.');
            }
        }
        return nacl.sign.detached.verify(Buffer.from(message), base58$6.decode(signatureB64), publicKey.toBytes());
    }
    generateHeader(message, options) {
        const { key, includeTime } = {
            key: 'Authorization',
            includeTime: false,
            ...options,
        };
        const headers = new Headers();
        const authorizationString = this.generate(message, { includeTime });
        headers.append(key, authorizationString);
        return headers;
    }
    validateHeader(headers, options) {
        const { key, expiry, seperator, publicKey } = {
            key: 'authorization',
            expiry: 300,
            seperator: ':',
            publicKey: this.wallet.publicKey,
            ...options,
        };
        const validationHeader = headers[key];
        if (!validationHeader) {
            throw new Error(`Header not found with key ${key}.`);
        }
        if (typeof validationHeader !== 'string') {
            throw new Error('Header has invalid type.');
        }
        return this.validate(validationHeader, { expiry, seperator, publicKey });
    }
}

var camelcase = {exports: {}};

const UPPERCASE = /[\p{Lu}]/u;
const LOWERCASE = /[\p{Ll}]/u;
const LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
const IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
const SEPARATORS = /[_.\- ]+/;

const LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);
const SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');
const NUMBERS_AND_IDENTIFIER = new RegExp('\\d+' + IDENTIFIER.source, 'gu');

const preserveCamelCase = (string, toLowerCase, toUpperCase) => {
	let isLastCharLower = false;
	let isLastCharUpper = false;
	let isLastLastCharUpper = false;

	for (let i = 0; i < string.length; i++) {
		const character = string[i];

		if (isLastCharLower && UPPERCASE.test(character)) {
			string = string.slice(0, i) + '-' + string.slice(i);
			isLastCharLower = false;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = true;
			i++;
		} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
			string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = false;
			isLastCharLower = true;
		} else {
			isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
		}
	}

	return string;
};

const preserveConsecutiveUppercase = (input, toLowerCase) => {
	LEADING_CAPITAL.lastIndex = 0;

	return input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));
};

const postProcess = (input, toUpperCase) => {
	SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
	NUMBERS_AND_IDENTIFIER.lastIndex = 0;

	return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))
		.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));
};

const camelCase = (input, options) => {
	if (!(typeof input === 'string' || Array.isArray(input))) {
		throw new TypeError('Expected the input to be `string | string[]`');
	}

	options = {
		pascalCase: false,
		preserveConsecutiveUppercase: false,
		...options
	};

	if (Array.isArray(input)) {
		input = input.map(x => x.trim())
			.filter(x => x.length)
			.join('-');
	} else {
		input = input.trim();
	}

	if (input.length === 0) {
		return '';
	}

	const toLowerCase = options.locale === false ?
		string => string.toLowerCase() :
		string => string.toLocaleLowerCase(options.locale);
	const toUpperCase = options.locale === false ?
		string => string.toUpperCase() :
		string => string.toLocaleUpperCase(options.locale);

	if (input.length === 1) {
		return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
	}

	const hasUpperCase = input !== toLowerCase(input);

	if (hasUpperCase) {
		input = preserveCamelCase(input, toLowerCase, toUpperCase);
	}

	input = input.replace(LEADING_SEPARATORS, '');

	if (options.preserveConsecutiveUppercase) {
		input = preserveConsecutiveUppercase(input, toLowerCase);
	} else {
		input = toLowerCase(input);
	}

	if (options.pascalCase) {
		input = toUpperCase(input.charAt(0)) + input.slice(1);
	}

	return postProcess(input, toUpperCase);
};

camelcase.exports = camelCase;
// TODO: Remove this for the next major release
camelcase.exports.default = camelCase;

var camelcaseExports = camelcase.exports;
var camelCase$1 = /*@__PURE__*/getDefaultExportFromCjs$3(camelcaseExports);

var dist = {};

var Layout$2 = {};

/**
 * Base class for layout objects.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support the {@link
 * Layout#encode|encode} or {@link Layout#decode|decode} functions.
 *
 * @param {Number} span - Initializer for {@link Layout#span|span}.  The
 * parameter must be an integer; a negative value signifies that the
 * span is {@link Layout#getSpan|value-specific}.
 *
 * @param {string} [property] - Initializer for {@link
 * Layout#property|property}.
 *
 * @abstract
 */
let Layout$1 = class Layout {
  constructor(span, property) {
    if (!Number.isInteger(span)) {
      throw new TypeError('span must be an integer');
    }

    /** The span of the layout in bytes.
     *
     * Positive values are generally expected.
     *
     * Zero will only appear in {@link Constant}s and in {@link
     * Sequence}s where the {@link Sequence#count|count} is zero.
     *
     * A negative value indicates that the span is value-specific, and
     * must be obtained using {@link Layout#getSpan|getSpan}. */
    this.span = span;

    /** The property name used when this layout is represented in an
     * Object.
     *
     * Used only for layouts that {@link Layout#decode|decode} to Object
     * instances.  If left undefined the span of the unnamed layout will
     * be treated as padding: it will not be mutated by {@link
     * Layout#encode|encode} nor represented as a property in the
     * decoded Object. */
    this.property = property;
  }

  /** Function to create an Object into which decoded properties will
   * be written.
   *
   * Used only for layouts that {@link Layout#decode|decode} to Object
   * instances, which means:
   * * {@link Structure}
   * * {@link Union}
   * * {@link VariantLayout}
   * * {@link BitStructure}
   *
   * If left undefined the JavaScript representation of these layouts
   * will be Object instances.
   *
   * See {@link bindConstructorLayout}.
   */
  makeDestinationObject() {
    return {};
  }

  /**
   * Decode from a Buffer into an JavaScript value.
   *
   * @param {Buffer} b - the buffer from which encoded data is read.
   *
   * @param {Number} [offset] - the offset at which the encoded data
   * starts.  If absent a zero offset is inferred.
   *
   * @returns {(Number|Array|Object)} - the value of the decoded data.
   *
   * @abstract
   */
  decode(b, offset) {
    throw new Error('Layout is abstract');
  }

  /**
   * Encode a JavaScript value into a Buffer.
   *
   * @param {(Number|Array|Object)} src - the value to be encoded into
   * the buffer.  The type accepted depends on the (sub-)type of {@link
   * Layout}.
   *
   * @param {Buffer} b - the buffer into which encoded data will be
   * written.
   *
   * @param {Number} [offset] - the offset at which the encoded data
   * starts.  If absent a zero offset is inferred.
   *
   * @returns {Number} - the number of bytes encoded, including the
   * space skipped for internal padding, but excluding data such as
   * {@link Sequence#count|lengths} when stored {@link
   * ExternalLayout|externally}.  This is the adjustment to `offset`
   * producing the offset where data for the next layout would be
   * written.
   *
   * @abstract
   */
  encode(src, b, offset) {
    throw new Error('Layout is abstract');
  }

  /**
   * Calculate the span of a specific instance of a layout.
   *
   * @param {Buffer} b - the buffer that contains an encoded instance.
   *
   * @param {Number} [offset] - the offset at which the encoded instance
   * starts.  If absent a zero offset is inferred.
   *
   * @return {Number} - the number of bytes covered by the layout
   * instance.  If this method is not overridden in a subclass the
   * definition-time constant {@link Layout#span|span} will be
   * returned.
   *
   * @throws {RangeError} - if the length of the value cannot be
   * determined.
   */
  getSpan(b, offset) {
    if (0 > this.span) {
      throw new RangeError('indeterminate span');
    }
    return this.span;
  }

  /**
   * Replicate the layout using a new property.
   *
   * This function must be used to get a structurally-equivalent layout
   * with a different name since all {@link Layout} instances are
   * immutable.
   *
   * **NOTE** This is a shallow copy.  All fields except {@link
   * Layout#property|property} are strictly equal to the origin layout.
   *
   * @param {String} property - the value for {@link
   * Layout#property|property} in the replica.
   *
   * @returns {Layout} - the copy with {@link Layout#property|property}
   * set to `property`.
   */
  replicate(property) {
    const rv = Object.create(this.constructor.prototype);
    Object.assign(rv, this);
    rv.property = property;
    return rv;
  }

  /**
   * Create an object from layout properties and an array of values.
   *
   * **NOTE** This function returns `undefined` if invoked on a layout
   * that does not return its value as an Object.  Objects are
   * returned for things that are a {@link Structure}, which includes
   * {@link VariantLayout|variant layouts} if they are structures, and
   * excludes {@link Union}s.  If you want this feature for a union
   * you must use {@link Union.getVariant|getVariant} to select the
   * desired layout.
   *
   * @param {Array} values - an array of values that correspond to the
   * default order for properties.  As with {@link Layout#decode|decode}
   * layout elements that have no property name are skipped when
   * iterating over the array values.  Only the top-level properties are
   * assigned; arguments are not assigned to properties of contained
   * layouts.  Any unused values are ignored.
   *
   * @return {(Object|undefined)}
   */
  fromArray(values) {
    return undefined;
  }
};
Layout$2.Layout = Layout$1;

/* Provide text that carries a name (such as for a function that will
 * be throwing an error) annotated with the property of a given layout
 * (such as one for which the value was unacceptable).
 *
 * @ignore */
function nameWithProperty$1(name, lo) {
  if (lo.property) {
    return name + '[' + lo.property + ']';
  }
  return name;
}
Layout$2.nameWithProperty = nameWithProperty$1;

/**
 * Augment a class so that instances can be encoded/decoded using a
 * given layout.
 *
 * Calling this function couples `Class` with `layout` in several ways:
 *
 * * `Class.layout_` becomes a static member property equal to `layout`;
 * * `layout.boundConstructor_` becomes a static member property equal
 *    to `Class`;
 * * The {@link Layout#makeDestinationObject|makeDestinationObject()}
 *   property of `layout` is set to a function that returns a `new
 *   Class()`;
 * * `Class.decode(b, offset)` becomes a static member function that
 *   delegates to {@link Layout#decode|layout.decode}.  The
 *   synthesized function may be captured and extended.
 * * `Class.prototype.encode(b, offset)` provides an instance member
 *   function that delegates to {@link Layout#encode|layout.encode}
 *   with `src` set to `this`.  The synthesized function may be
 *   captured and extended, but when the extension is invoked `this`
 *   must be explicitly bound to the instance.
 *
 * @param {class} Class - a JavaScript class with a nullary
 * constructor.
 *
 * @param {Layout} layout - the {@link Layout} instance used to encode
 * instances of `Class`.
 */
function bindConstructorLayout(Class, layout) {
  if ('function' !== typeof Class) {
    throw new TypeError('Class must be constructor');
  }
  if (Class.hasOwnProperty('layout_')) {
    throw new Error('Class is already bound to a layout');
  }
  if (!(layout && (layout instanceof Layout$1))) {
    throw new TypeError('layout must be a Layout');
  }
  if (layout.hasOwnProperty('boundConstructor_')) {
    throw new Error('layout is already bound to a constructor');
  }
  Class.layout_ = layout;
  layout.boundConstructor_ = Class;
  layout.makeDestinationObject = (() => new Class());
  Object.defineProperty(Class.prototype, 'encode', {
    value: function(b, offset) {
      return layout.encode(this, b, offset);
    },
    writable: true,
  });
  Object.defineProperty(Class, 'decode', {
    value: function(b, offset) {
      return layout.decode(b, offset);
    },
    writable: true,
  });
}
Layout$2.bindConstructorLayout = bindConstructorLayout;

/**
 * An object that behaves like a layout but does not consume space
 * within its containing layout.
 *
 * This is primarily used to obtain metadata about a member, such as a
 * {@link OffsetLayout} that can provide data about a {@link
 * Layout#getSpan|value-specific span}.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support {@link
 * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @abstract
 * @augments {Layout}
 */
let ExternalLayout$1 = class ExternalLayout extends Layout$1 {
  /**
   * Return `true` iff the external layout decodes to an unsigned
   * integer layout.
   *
   * In that case it can be used as the source of {@link
   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
   * or as {@link UnionLayoutDiscriminator#layout|external union
   * discriminators}.
   *
   * @abstract
   */
  isCount() {
    throw new Error('ExternalLayout is abstract');
  }
};

/**
 * An {@link ExternalLayout} that determines its {@link
 * Layout#decode|value} based on offset into and length of the buffer
 * on which it is invoked.
 *
 * *Factory*: {@link module:Layout.greedy|greedy}
 *
 * @param {Number} [elementSpan] - initializer for {@link
 * GreedyCount#elementSpan|elementSpan}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {ExternalLayout}
 */
class GreedyCount extends ExternalLayout$1 {
  constructor(elementSpan, property) {
    if (undefined === elementSpan) {
      elementSpan = 1;
    }
    if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {
      throw new TypeError('elementSpan must be a (positive) integer');
    }
    super(-1, property);

    /** The layout for individual elements of the sequence.  The value
     * must be a positive integer.  If not provided, the value will be
     * 1. */
    this.elementSpan = elementSpan;
  }

  /** @override */
  isCount() {
    return true;
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const rem = b.length - offset;
    return Math.floor(rem / this.elementSpan);
  }

  /** @override */
  encode(src, b, offset) {
    return 0;
  }
}

/**
 * An {@link ExternalLayout} that supports accessing a {@link Layout}
 * at a fixed offset from the start of another Layout.  The offset may
 * be before, within, or after the base layout.
 *
 * *Factory*: {@link module:Layout.offset|offset}
 *
 * @param {Layout} layout - initializer for {@link
 * OffsetLayout#layout|layout}, modulo `property`.
 *
 * @param {Number} [offset] - Initializes {@link
 * OffsetLayout#offset|offset}.  Defaults to zero.
 *
 * @param {string} [property] - Optional new property name for a
 * {@link Layout#replicate| replica} of `layout` to be used as {@link
 * OffsetLayout#layout|layout}.  If not provided the `layout` is used
 * unchanged.
 *
 * @augments {Layout}
 */
let OffsetLayout$1 = class OffsetLayout extends ExternalLayout$1 {
  constructor(layout, offset, property) {
    if (!(layout instanceof Layout$1)) {
      throw new TypeError('layout must be a Layout');
    }

    if (undefined === offset) {
      offset = 0;
    } else if (!Number.isInteger(offset)) {
      throw new TypeError('offset must be integer or undefined');
    }

    super(layout.span, property || layout.property);

    /** The subordinated layout. */
    this.layout = layout;

    /** The location of {@link OffsetLayout#layout} relative to the
     * start of another layout.
     *
     * The value may be positive or negative, but an error will thrown
     * if at the point of use it goes outside the span of the Buffer
     * being accessed.  */
    this.offset = offset;
  }

  /** @override */
  isCount() {
    return ((this.layout instanceof UInt$1)
            || (this.layout instanceof UIntBE$1));
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return this.layout.decode(b, offset + this.offset);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return this.layout.encode(src, b, offset + this.offset);
  }
};

/**
 * Represent an unsigned integer in little-endian format.
 *
 * *Factory*: {@link module:Layout.u8|u8}, {@link
 *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
 *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
 *  module:Layout.u48|u48}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let UInt$1 = class UInt extends Layout$1 {
  constructor(span, property) {
    super(span, property);
    if (6 < this.span) {
      throw new RangeError('span must not exceed 6 bytes');
    }
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readUIntLE(offset, this.span);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeUIntLE(src, offset, this.span);
    return this.span;
  }
};

/**
 * Represent an unsigned integer in big-endian format.
 *
 * *Factory*: {@link module:Layout.u8be|u8be}, {@link
 * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},
 * {@link module:Layout.u32be|u32be}, {@link
 * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let UIntBE$1 = class UIntBE extends Layout$1 {
  constructor(span, property) {
    super( span, property);
    if (6 < this.span) {
      throw new RangeError('span must not exceed 6 bytes');
    }
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readUIntBE(offset, this.span);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeUIntBE(src, offset, this.span);
    return this.span;
  }
};

/**
 * Represent a signed integer in little-endian format.
 *
 * *Factory*: {@link module:Layout.s8|s8}, {@link
 *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link
 *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link
 *  module:Layout.s48|s48}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class Int extends Layout$1 {
  constructor(span, property) {
    super(span, property);
    if (6 < this.span) {
      throw new RangeError('span must not exceed 6 bytes');
    }
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readIntLE(offset, this.span);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeIntLE(src, offset, this.span);
    return this.span;
  }
}

/**
 * Represent a signed integer in big-endian format.
 *
 * *Factory*: {@link module:Layout.s8be|s8be}, {@link
 * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},
 * {@link module:Layout.s32be|s32be}, {@link
 * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class IntBE extends Layout$1 {
  constructor(span, property) {
    super(span, property);
    if (6 < this.span) {
      throw new RangeError('span must not exceed 6 bytes');
    }
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readIntBE(offset, this.span);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeIntBE(src, offset, this.span);
    return this.span;
  }
}

const V2E32$1 = Math.pow(2, 32);

/* True modulus high and low 32-bit words, where low word is always
 * non-negative. */
function divmodInt64$1(src) {
  const hi32 = Math.floor(src / V2E32$1);
  const lo32 = src - (hi32 * V2E32$1);
  return {hi32, lo32};
}
/* Reconstruct Number from quotient and non-negative remainder */
function roundedInt64$1(hi32, lo32) {
  return hi32 * V2E32$1 + lo32;
}

/**
 * Represent an unsigned 64-bit integer in little-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.nu64|nu64}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
let NearUInt64$1 = class NearUInt64 extends Layout$1 {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const lo32 = b.readUInt32LE(offset);
    const hi32 = b.readUInt32LE(offset + 4);
    return roundedInt64$1(hi32, lo32);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const split = divmodInt64$1(src);
    b.writeUInt32LE(split.lo32, offset);
    b.writeUInt32LE(split.hi32, offset + 4);
    return 8;
  }
};

/**
 * Represent an unsigned 64-bit integer in big-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.nu64be|nu64be}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
class NearUInt64BE extends Layout$1 {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const hi32 = b.readUInt32BE(offset);
    const lo32 = b.readUInt32BE(offset + 4);
    return roundedInt64$1(hi32, lo32);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const split = divmodInt64$1(src);
    b.writeUInt32BE(split.hi32, offset);
    b.writeUInt32BE(split.lo32, offset + 4);
    return 8;
  }
}

/**
 * Represent a signed 64-bit integer in little-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.ns64|ns64}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
let NearInt64$1 = class NearInt64 extends Layout$1 {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const lo32 = b.readUInt32LE(offset);
    const hi32 = b.readInt32LE(offset + 4);
    return roundedInt64$1(hi32, lo32);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const split = divmodInt64$1(src);
    b.writeUInt32LE(split.lo32, offset);
    b.writeInt32LE(split.hi32, offset + 4);
    return 8;
  }
};

/**
 * Represent a signed 64-bit integer in big-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.ns64be|ns64be}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
class NearInt64BE extends Layout$1 {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const hi32 = b.readInt32BE(offset);
    const lo32 = b.readUInt32BE(offset + 4);
    return roundedInt64$1(hi32, lo32);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const split = divmodInt64$1(src);
    b.writeInt32BE(split.hi32, offset);
    b.writeUInt32BE(split.lo32, offset + 4);
    return 8;
  }
}

/**
 * Represent a 32-bit floating point number in little-endian format.
 *
 * *Factory*: {@link module:Layout.f32|f32}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class Float extends Layout$1 {
  constructor(property) {
    super(4, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readFloatLE(offset);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeFloatLE(src, offset);
    return 4;
  }
}

/**
 * Represent a 32-bit floating point number in big-endian format.
 *
 * *Factory*: {@link module:Layout.f32be|f32be}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class FloatBE extends Layout$1 {
  constructor(property) {
    super(4, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readFloatBE(offset);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeFloatBE(src, offset);
    return 4;
  }
}

/**
 * Represent a 64-bit floating point number in little-endian format.
 *
 * *Factory*: {@link module:Layout.f64|f64}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class Double extends Layout$1 {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readDoubleLE(offset);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeDoubleLE(src, offset);
    return 8;
  }
}

/**
 * Represent a 64-bit floating point number in big-endian format.
 *
 * *Factory*: {@link module:Layout.f64be|f64be}
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class DoubleBE extends Layout$1 {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readDoubleBE(offset);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeDoubleBE(src, offset);
    return 8;
  }
}

/**
 * Represent a contiguous sequence of a specific layout as an Array.
 *
 * *Factory*: {@link module:Layout.seq|seq}
 *
 * @param {Layout} elementLayout - initializer for {@link
 * Sequence#elementLayout|elementLayout}.
 *
 * @param {(Number|ExternalLayout)} count - initializer for {@link
 * Sequence#count|count}.  The parameter must be either a positive
 * integer or an instance of {@link ExternalLayout}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class Sequence extends Layout$1 {
  constructor(elementLayout, count, property) {
    if (!(elementLayout instanceof Layout$1)) {
      throw new TypeError('elementLayout must be a Layout');
    }
    if (!(((count instanceof ExternalLayout$1) && count.isCount())
          || (Number.isInteger(count) && (0 <= count)))) {
      throw new TypeError('count must be non-negative integer '
                          + 'or an unsigned integer ExternalLayout');
    }
    let span = -1;
    if ((!(count instanceof ExternalLayout$1))
        && (0 < elementLayout.span)) {
      span = count * elementLayout.span;
    }

    super(span, property);

    /** The layout for individual elements of the sequence. */
    this.elementLayout = elementLayout;

    /** The number of elements in the sequence.
     *
     * This will be either a non-negative integer or an instance of
     * {@link ExternalLayout} for which {@link
     * ExternalLayout#isCount|isCount()} is `true`. */
    this.count = count;
  }

  /** @override */
  getSpan(b, offset) {
    if (0 <= this.span) {
      return this.span;
    }
    if (undefined === offset) {
      offset = 0;
    }
    let span = 0;
    let count = this.count;
    if (count instanceof ExternalLayout$1) {
      count = count.decode(b, offset);
    }
    if (0 < this.elementLayout.span) {
      span = count * this.elementLayout.span;
    } else {
      let idx = 0;
      while (idx < count) {
        span += this.elementLayout.getSpan(b, offset + span);
        ++idx;
      }
    }
    return span;
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const rv = [];
    let i = 0;
    let count = this.count;
    if (count instanceof ExternalLayout$1) {
      count = count.decode(b, offset);
    }
    while (i < count) {
      rv.push(this.elementLayout.decode(b, offset));
      offset += this.elementLayout.getSpan(b, offset);
      i += 1;
    }
    return rv;
  }

  /** Implement {@link Layout#encode|encode} for {@link Sequence}.
   *
   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
   * the unused space in the buffer is left unchanged.  If `src` is
   * longer than {@link Sequence#count|count} the unneeded elements are
   * ignored.
   *
   * **NOTE** If {@link Layout#count|count} is an instance of {@link
   * ExternalLayout} then the length of `src` will be encoded as the
   * count after `src` is encoded. */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const elo = this.elementLayout;
    const span = src.reduce((span, v) => {
      return span + elo.encode(v, b, offset + span);
    }, 0);
    if (this.count instanceof ExternalLayout$1) {
      this.count.encode(src.length, b, offset);
    }
    return span;
  }
}

/**
 * Represent a contiguous sequence of arbitrary layout elements as an
 * Object.
 *
 * *Factory*: {@link module:Layout.struct|struct}
 *
 * **NOTE** The {@link Layout#span|span} of the structure is variable
 * if any layout in {@link Structure#fields|fields} has a variable
 * span.  When {@link Layout#encode|encoding} we must have a value for
 * all variable-length fields, or we wouldn't be able to figure out
 * how much space to use for storage.  We can only identify the value
 * for a field when it has a {@link Layout#property|property}.  As
 * such, although a structure may contain both unnamed fields and
 * variable-length fields, it cannot contain an unnamed
 * variable-length field.
 *
 * @param {Layout[]} fields - initializer for {@link
 * Structure#fields|fields}.  An error is raised if this contains a
 * variable-length field for which a {@link Layout#property|property}
 * is not defined.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @param {Boolean} [decodePrefixes] - initializer for {@link
 * Structure#decodePrefixes|property}.
 *
 * @throws {Error} - if `fields` contains an unnamed variable-length
 * layout.
 *
 * @augments {Layout}
 */
let Structure$1 = class Structure extends Layout$1 {
  constructor(fields, property, decodePrefixes) {
    if (!(Array.isArray(fields)
          && fields.reduce((acc, v) => acc && (v instanceof Layout$1), true))) {
      throw new TypeError('fields must be array of Layout instances');
    }
    if (('boolean' === typeof property)
        && (undefined === decodePrefixes)) {
      decodePrefixes = property;
      property = undefined;
    }

    /* Verify absence of unnamed variable-length fields. */
    for (const fd of fields) {
      if ((0 > fd.span)
          && (undefined === fd.property)) {
        throw new Error('fields cannot contain unnamed variable-length layout');
      }
    }

    let span = -1;
    try {
      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);
    } catch (e) {
    }
    super(span, property);

    /** The sequence of {@link Layout} values that comprise the
     * structure.
     *
     * The individual elements need not be the same type, and may be
     * either scalar or aggregate layouts.  If a member layout leaves
     * its {@link Layout#property|property} undefined the
     * corresponding region of the buffer associated with the element
     * will not be mutated.
     *
     * @type {Layout[]} */
    this.fields = fields;

    /** Control behavior of {@link Layout#decode|decode()} given short
     * buffers.
     *
     * In some situations a structure many be extended with additional
     * fields over time, with older installations providing only a
     * prefix of the full structure.  If this property is `true`
     * decoding will accept those buffers and leave subsequent fields
     * undefined, as long as the buffer ends at a field boundary.
     * Defaults to `false`. */
    this.decodePrefixes = !!decodePrefixes;
  }

  /** @override */
  getSpan(b, offset) {
    if (0 <= this.span) {
      return this.span;
    }
    if (undefined === offset) {
      offset = 0;
    }
    let span = 0;
    try {
      span = this.fields.reduce((span, fd) => {
        const fsp = fd.getSpan(b, offset);
        offset += fsp;
        return span + fsp;
      }, 0);
    } catch (e) {
      throw new RangeError('indeterminate span');
    }
    return span;
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const dest = this.makeDestinationObject();
    for (const fd of this.fields) {
      if (undefined !== fd.property) {
        dest[fd.property] = fd.decode(b, offset);
      }
      offset += fd.getSpan(b, offset);
      if (this.decodePrefixes
          && (b.length === offset)) {
        break;
      }
    }
    return dest;
  }

  /** Implement {@link Layout#encode|encode} for {@link Structure}.
   *
   * If `src` is missing a property for a member with a defined {@link
   * Layout#property|property} the corresponding region of the buffer is
   * left unmodified. */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const firstOffset = offset;
    let lastOffset = 0;
    let lastWrote = 0;
    for (const fd of this.fields) {
      let span = fd.span;
      lastWrote = (0 < span) ? span : 0;
      if (undefined !== fd.property) {
        const fv = src[fd.property];
        if (undefined !== fv) {
          lastWrote = fd.encode(fv, b, offset);
          if (0 > span) {
            /* Read the as-encoded span, which is not necessarily the
             * same as what we wrote. */
            span = fd.getSpan(b, offset);
          }
        }
      }
      lastOffset = offset;
      offset += span;
    }
    /* Use (lastOffset + lastWrote) instead of offset because the last
     * item may have had a dynamic length and we don't want to include
     * the padding between it and the end of the space reserved for
     * it. */
    return (lastOffset + lastWrote) - firstOffset;
  }

  /** @override */
  fromArray(values) {
    const dest = this.makeDestinationObject();
    for (const fd of this.fields) {
      if ((undefined !== fd.property)
          && (0 < values.length)) {
        dest[fd.property] = values.shift();
      }
    }
    return dest;
  }

  /**
   * Get access to the layout of a given property.
   *
   * @param {String} property - the structure member of interest.
   *
   * @return {Layout} - the layout associated with `property`, or
   * undefined if there is no such property.
   */
  layoutFor(property) {
    if ('string' !== typeof property) {
      throw new TypeError('property must be string');
    }
    for (const fd of this.fields) {
      if (fd.property === property) {
        return fd;
      }
    }
  }

  /**
   * Get the offset of a structure member.
   *
   * @param {String} property - the structure member of interest.
   *
   * @return {Number} - the offset in bytes to the start of `property`
   * within the structure, or undefined if `property` is not a field
   * within the structure.  If the property is a member but follows a
   * variable-length structure member a negative number will be
   * returned.
   */
  offsetOf(property) {
    if ('string' !== typeof property) {
      throw new TypeError('property must be string');
    }
    let offset = 0;
    for (const fd of this.fields) {
      if (fd.property === property) {
        return offset;
      }
      if (0 > fd.span) {
        offset = -1;
      } else if (0 <= offset) {
        offset += fd.span;
      }
    }
  }
};

/**
 * An object that can provide a {@link
 * Union#discriminator|discriminator} API for {@link Union}.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support the {@link
 * UnionDiscriminator#encode|encode} or {@link
 * UnionDiscriminator#decode|decode} functions.
 *
 * @param {string} [property] - Default for {@link
 * UnionDiscriminator#property|property}.
 *
 * @abstract
 */
let UnionDiscriminator$1 = class UnionDiscriminator {
  constructor(property) {
    /** The {@link Layout#property|property} to be used when the
     * discriminator is referenced in isolation (generally when {@link
     * Union#decode|Union decode} cannot delegate to a specific
     * variant). */
    this.property = property;
  }

  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
   *
   * The implementation of this method need not reference the buffer if
   * variant information is available through other means. */
  decode() {
    throw new Error('UnionDiscriminator is abstract');
  }

  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
   *
   * The implementation of this method need not store the value if
   * variant information is maintained through other means. */
  encode() {
    throw new Error('UnionDiscriminator is abstract');
  }
};

/**
 * An object that can provide a {@link
 * UnionDiscriminator|discriminator API} for {@link Union} using an
 * unsigned integral {@link Layout} instance located either inside or
 * outside the union.
 *
 * @param {ExternalLayout} layout - initializes {@link
 * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link
 * ExternalLayout#isCount|isCount()}.
 *
 * @param {string} [property] - Default for {@link
 * UnionDiscriminator#property|property}, superseding the property
 * from `layout`, but defaulting to `variant` if neither `property`
 * nor layout provide a property name.
 *
 * @augments {UnionDiscriminator}
 */
let UnionLayoutDiscriminator$1 = class UnionLayoutDiscriminator extends UnionDiscriminator$1 {
  constructor(layout, property) {
    if (!((layout instanceof ExternalLayout$1)
          && layout.isCount())) {
      throw new TypeError('layout must be an unsigned integer ExternalLayout');
    }

    super(property || layout.property || 'variant');

    /** The {@link ExternalLayout} used to access the discriminator
     * value. */
    this.layout = layout;
  }

  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
  decode(b, offset) {
    return this.layout.decode(b, offset);
  }

  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
  encode(src, b, offset) {
    return this.layout.encode(src, b, offset);
  }
};

/**
 * Represent any number of span-compatible layouts.
 *
 * *Factory*: {@link module:Layout.union|union}
 *
 * If the union has a {@link Union#defaultLayout|default layout} that
 * layout must have a non-negative {@link Layout#span|span}.  The span
 * of a fixed-span union includes its {@link
 * Union#discriminator|discriminator} if the variant is a {@link
 * Union#usesPrefixDiscriminator|prefix of the union}, plus the span
 * of its {@link Union#defaultLayout|default layout}.
 *
 * If the union does not have a default layout then the encoded span
 * of the union depends on the encoded span of its variant (which may
 * be fixed or variable).
 *
 * {@link VariantLayout#layout|Variant layout}s are added through
 * {@link Union#addVariant|addVariant}.  If the union has a default
 * layout, the span of the {@link VariantLayout#layout|layout
 * contained by the variant} must not exceed the span of the {@link
 * Union#defaultLayout|default layout} (minus the span of a {@link
 * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The
 * span of the variant will equal the span of the union itself.
 *
 * The variant for a buffer can only be identified from the {@link
 * Union#discriminator|discriminator} {@link
 * UnionDiscriminator#property|property} (in the case of the {@link
 * Union#defaultLayout|default layout}), or by using {@link
 * Union#getVariant|getVariant} and examining the resulting {@link
 * VariantLayout} instance.
 *
 * A variant compatible with a JavaScript object can be identified
 * using {@link Union#getSourceVariant|getSourceVariant}.
 *
 * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to
 * identify the layout used to interpret the union contents.  The
 * parameter must be an instance of {@link UnionDiscriminator}, an
 * {@link ExternalLayout} that satisfies {@link
 * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link
 * UIntBE}).  When a non-external layout element is passed the layout
 * appears at the start of the union.  In all cases the (synthesized)
 * {@link UnionDiscriminator} instance is recorded as {@link
 * Union#discriminator|discriminator}.
 *
 * @param {(Layout|null)} defaultLayout - initializer for {@link
 * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.
 * If `null` there is no default layout: the union has data-dependent
 * length and attempts to decode or encode unrecognized variants will
 * throw an exception.  A {@link Layout} instance must have a
 * non-negative {@link Layout#span|span}, and if it lacks a {@link
 * Layout#property|property} the {@link
 * Union#defaultLayout|defaultLayout} will be a {@link
 * Layout#replicate|replica} with property `content`.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Union$1 = class Union extends Layout$1 {
  constructor(discr, defaultLayout, property) {
    const upv = ((discr instanceof UInt$1)
               || (discr instanceof UIntBE$1));
    if (upv) {
      discr = new UnionLayoutDiscriminator$1(new OffsetLayout$1(discr));
    } else if ((discr instanceof ExternalLayout$1)
               && discr.isCount()) {
      discr = new UnionLayoutDiscriminator$1(discr);
    } else if (!(discr instanceof UnionDiscriminator$1)) {
      throw new TypeError('discr must be a UnionDiscriminator '
                          + 'or an unsigned integer layout');
    }
    if (undefined === defaultLayout) {
      defaultLayout = null;
    }
    if (!((null === defaultLayout)
          || (defaultLayout instanceof Layout$1))) {
      throw new TypeError('defaultLayout must be null or a Layout');
    }
    if (null !== defaultLayout) {
      if (0 > defaultLayout.span) {
        throw new Error('defaultLayout must have constant span');
      }
      if (undefined === defaultLayout.property) {
        defaultLayout = defaultLayout.replicate('content');
      }
    }

    /* The union span can be estimated only if there's a default
     * layout.  The union spans its default layout, plus any prefix
     * variant layout.  By construction both layouts, if present, have
     * non-negative span. */
    let span = -1;
    if (defaultLayout) {
      span = defaultLayout.span;
      if ((0 <= span) && upv) {
        span += discr.layout.span;
      }
    }
    super(span, property);

    /** The interface for the discriminator value in isolation.
     *
     * This a {@link UnionDiscriminator} either passed to the
     * constructor or synthesized from the `discr` constructor
     * argument.  {@link
     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be
     * `true` iff the `discr` parameter was a non-offset {@link
     * Layout} instance. */
    this.discriminator = discr;

    /** `true` if the {@link Union#discriminator|discriminator} is the
     * first field in the union.
     *
     * If `false` the discriminator is obtained from somewhere
     * else. */
    this.usesPrefixDiscriminator = upv;

    /** The layout for non-discriminator content when the value of the
     * discriminator is not recognized.
     *
     * This is the value passed to the constructor.  It is
     * structurally equivalent to the second component of {@link
     * Union#layout|layout} but may have a different property
     * name. */
    this.defaultLayout = defaultLayout;

    /** A registry of allowed variants.
     *
     * The keys are unsigned integers which should be compatible with
     * {@link Union.discriminator|discriminator}.  The property value
     * is the corresponding {@link VariantLayout} instances assigned
     * to this union by {@link Union#addVariant|addVariant}.
     *
     * **NOTE** The registry remains mutable so that variants can be
     * {@link Union#addVariant|added} at any time.  Users should not
     * manipulate the content of this property. */
    this.registry = {};

    /* Private variable used when invoking getSourceVariant */
    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);

    /** Function to infer the variant selected by a source object.
     *
     * Defaults to {@link
     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may
     * be overridden using {@link
     * Union#configGetSourceVariant|configGetSourceVariant}.
     *
     * @param {Object} src - as with {@link
     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
     *
     * @returns {(undefined|VariantLayout)} The default variant
     * (`undefined`) or first registered variant that uses a property
     * available in `src`. */
    this.getSourceVariant = function(src) {
      return boundGetSourceVariant(src);
    };

    /** Function to override the implementation of {@link
     * Union#getSourceVariant|getSourceVariant}.
     *
     * Use this if the desired variant cannot be identified using the
     * algorithm of {@link
     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
     *
     * **NOTE** The provided function will be invoked bound to this
     * Union instance, providing local access to {@link
     * Union#registry|registry}.
     *
     * @param {Function} gsv - a function that follows the API of
     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */
    this.configGetSourceVariant = function(gsv) {
      boundGetSourceVariant = gsv.bind(this);
    };
  }

  /** @override */
  getSpan(b, offset) {
    if (0 <= this.span) {
      return this.span;
    }
    if (undefined === offset) {
      offset = 0;
    }
    /* Default layouts always have non-negative span, so we don't have
     * one and we have to recognize the variant which will in turn
     * determine the span. */
    const vlo = this.getVariant(b, offset);
    if (!vlo) {
      throw new Error('unable to determine span for unrecognized variant');
    }
    return vlo.getSpan(b, offset);
  }

  /**
   * Method to infer a registered Union variant compatible with `src`.
   *
   * The first satisified rule in the following sequence defines the
   * return value:
   * * If `src` has properties matching the Union discriminator and
   *   the default layout, `undefined` is returned regardless of the
   *   value of the discriminator property (this ensures the default
   *   layout will be used);
   * * If `src` has a property matching the Union discriminator, the
   *   value of the discriminator identifies a registered variant, and
   *   either (a) the variant has no layout, or (b) `src` has the
   *   variant's property, then the variant is returned (because the
   *   source satisfies the constraints of the variant it identifies);
   * * If `src` does not have a property matching the Union
   *   discriminator, but does have a property matching a registered
   *   variant, then the variant is returned (because the source
   *   matches a variant without an explicit conflict);
   * * An error is thrown (because we either can't identify a variant,
   *   or we were explicitly told the variant but can't satisfy it).
   *
   * @param {Object} src - an object presumed to be compatible with
   * the content of the Union.
   *
   * @return {(undefined|VariantLayout)} - as described above.
   *
   * @throws {Error} - if `src` cannot be associated with a default or
   * registered variant.
   */
  defaultGetSourceVariant(src) {
    if (src.hasOwnProperty(this.discriminator.property)) {
      if (this.defaultLayout
          && src.hasOwnProperty(this.defaultLayout.property)) {
        return undefined;
      }
      const vlo = this.registry[src[this.discriminator.property]];
      if (vlo
          && ((!vlo.layout)
              || src.hasOwnProperty(vlo.property))) {
        return vlo;
      }
    } else {
      for (const tag in this.registry) {
        const vlo = this.registry[tag];
        if (src.hasOwnProperty(vlo.property)) {
          return vlo;
        }
      }
    }
    throw new Error('unable to infer src variant');
  }

  /** Implement {@link Layout#decode|decode} for {@link Union}.
   *
   * If the variant is {@link Union#addVariant|registered} the return
   * value is an instance of that variant, with no explicit
   * discriminator.  Otherwise the {@link Union#defaultLayout|default
   * layout} is used to decode the content. */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    let dest;
    const dlo = this.discriminator;
    const discr = dlo.decode(b, offset);
    let clo = this.registry[discr];
    if (undefined === clo) {
      let contentOffset = 0;
      clo = this.defaultLayout;
      if (this.usesPrefixDiscriminator) {
        contentOffset = dlo.layout.span;
      }
      dest = this.makeDestinationObject();
      dest[dlo.property] = discr;
      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);
    } else {
      dest = clo.decode(b, offset);
    }
    return dest;
  }

  /** Implement {@link Layout#encode|encode} for {@link Union}.
   *
   * This API assumes the `src` object is consistent with the union's
   * {@link Union#defaultLayout|default layout}.  To encode variants
   * use the appropriate variant-specific {@link VariantLayout#encode}
   * method. */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const vlo = this.getSourceVariant(src);
    if (undefined === vlo) {
      const dlo = this.discriminator;
      const clo = this.defaultLayout;
      let contentOffset = 0;
      if (this.usesPrefixDiscriminator) {
        contentOffset = dlo.layout.span;
      }
      dlo.encode(src[dlo.property], b, offset);
      return contentOffset + clo.encode(src[clo.property], b,
                                        offset + contentOffset);
    }
    return vlo.encode(src, b, offset);
  }

  /** Register a new variant structure within a union.  The newly
   * created variant is returned.
   *
   * @param {Number} variant - initializer for {@link
   * VariantLayout#variant|variant}.
   *
   * @param {Layout} layout - initializer for {@link
   * VariantLayout#layout|layout}.
   *
   * @param {String} property - initializer for {@link
   * Layout#property|property}.
   *
   * @return {VariantLayout} */
  addVariant(variant, layout, property) {
    const rv = new VariantLayout$1(this, variant, layout, property);
    this.registry[variant] = rv;
    return rv;
  }

  /**
   * Get the layout associated with a registered variant.
   *
   * If `vb` does not produce a registered variant the function returns
   * `undefined`.
   *
   * @param {(Number|Buffer)} vb - either the variant number, or a
   * buffer from which the discriminator is to be read.
   *
   * @param {Number} offset - offset into `vb` for the start of the
   * union.  Used only when `vb` is an instance of {Buffer}.
   *
   * @return {({VariantLayout}|undefined)}
   */
  getVariant(vb, offset) {
    let variant = vb;
    if (Buffer.isBuffer(vb)) {
      if (undefined === offset) {
        offset = 0;
      }
      variant = this.discriminator.decode(vb, offset);
    }
    return this.registry[variant];
  }
};

/**
 * Represent a specific variant within a containing union.
 *
 * **NOTE** The {@link Layout#span|span} of the variant may include
 * the span of the {@link Union#discriminator|discriminator} used to
 * identify it, but values read and written using the variant strictly
 * conform to the content of {@link VariantLayout#layout|layout}.
 *
 * **NOTE** User code should not invoke this constructor directly.  Use
 * the union {@link Union#addVariant|addVariant} helper method.
 *
 * @param {Union} union - initializer for {@link
 * VariantLayout#union|union}.
 *
 * @param {Number} variant - initializer for {@link
 * VariantLayout#variant|variant}.
 *
 * @param {Layout} [layout] - initializer for {@link
 * VariantLayout#layout|layout}.  If absent the variant carries no
 * data.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.  Unlike many other layouts, variant
 * layouts normally include a property name so they can be identified
 * within their containing {@link Union}.  The property identifier may
 * be absent only if `layout` is is absent.
 *
 * @augments {Layout}
 */
let VariantLayout$1 = class VariantLayout extends Layout$1 {
  constructor(union, variant, layout, property) {
    if (!(union instanceof Union$1)) {
      throw new TypeError('union must be a Union');
    }
    if ((!Number.isInteger(variant)) || (0 > variant)) {
      throw new TypeError('variant must be a (non-negative) integer');
    }
    if (('string' === typeof layout)
        && (undefined === property)) {
      property = layout;
      layout = null;
    }
    if (layout) {
      if (!(layout instanceof Layout$1)) {
        throw new TypeError('layout must be a Layout');
      }
      if ((null !== union.defaultLayout)
          && (0 <= layout.span)
          && (layout.span > union.defaultLayout.span)) {
        throw new Error('variant span exceeds span of containing union');
      }
      if ('string' !== typeof property) {
        throw new TypeError('variant must have a String property');
      }
    }
    let span = union.span;
    if (0 > union.span) {
      span = layout ? layout.span : 0;
      if ((0 <= span) && union.usesPrefixDiscriminator) {
        span += union.discriminator.layout.span;
      }
    }
    super(span, property);

    /** The {@link Union} to which this variant belongs. */
    this.union = union;

    /** The unsigned integral value identifying this variant within
     * the {@link Union#discriminator|discriminator} of the containing
     * union. */
    this.variant = variant;

    /** The {@link Layout} to be used when reading/writing the
     * non-discriminator part of the {@link
     * VariantLayout#union|union}.  If `null` the variant carries no
     * data. */
    this.layout = layout || null;
  }

  /** @override */
  getSpan(b, offset) {
    if (0 <= this.span) {
      /* Will be equal to the containing union span if that is not
       * variable. */
      return this.span;
    }
    if (undefined === offset) {
      offset = 0;
    }
    let contentOffset = 0;
    if (this.union.usesPrefixDiscriminator) {
      contentOffset = this.union.discriminator.layout.span;
    }
    /* Span is defined solely by the variant (and prefix discriminator) */
    return contentOffset + this.layout.getSpan(b, offset + contentOffset);
  }

  /** @override */
  decode(b, offset) {
    const dest = this.makeDestinationObject();
    if (undefined === offset) {
      offset = 0;
    }
    if (this !== this.union.getVariant(b, offset)) {
      throw new Error('variant mismatch');
    }
    let contentOffset = 0;
    if (this.union.usesPrefixDiscriminator) {
      contentOffset = this.union.discriminator.layout.span;
    }
    if (this.layout) {
      dest[this.property] = this.layout.decode(b, offset + contentOffset);
    } else if (this.property) {
      dest[this.property] = true;
    } else if (this.union.usesPrefixDiscriminator) {
      dest[this.union.discriminator.property] = this.variant;
    }
    return dest;
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    let contentOffset = 0;
    if (this.union.usesPrefixDiscriminator) {
      contentOffset = this.union.discriminator.layout.span;
    }
    if (this.layout
        && (!src.hasOwnProperty(this.property))) {
      throw new TypeError('variant lacks property ' + this.property);
    }
    this.union.discriminator.encode(this.variant, b, offset);
    let span = contentOffset;
    if (this.layout) {
      this.layout.encode(src[this.property], b, offset + contentOffset);
      span += this.layout.getSpan(b, offset + contentOffset);
      if ((0 <= this.union.span)
          && (span > this.union.span)) {
        throw new Error('encoded variant overruns containing union');
      }
    }
    return span;
  }

  /** Delegate {@link Layout#fromArray|fromArray} to {@link
   * VariantLayout#layout|layout}. */
  fromArray(values) {
    if (this.layout) {
      return this.layout.fromArray(values);
    }
  }
};

/** JavaScript chose to define bitwise operations as operating on
 * signed 32-bit values in 2's complement form, meaning any integer
 * with bit 31 set is going to look negative.  For right shifts that's
 * not a problem, because `>>>` is a logical shift, but for every
 * other bitwise operator we have to compensate for possible negative
 * results. */
function fixBitwiseResult(v) {
  if (0 > v) {
    v += 0x100000000;
  }
  return v;
}

/**
 * Contain a sequence of bit fields as an unsigned integer.
 *
 * *Factory*: {@link module:Layout.bits|bits}
 *
 * This is a container element; within it there are {@link BitField}
 * instances that provide the extracted properties.  The container
 * simply defines the aggregate representation and its bit ordering.
 * The representation is an object containing properties with numeric
 * or {@link Boolean} values.
 *
 * {@link BitField}s are added with the {@link
 * BitStructure#addField|addField} and {@link
 * BitStructure#addBoolean|addBoolean} methods.

 * @param {Layout} word - initializer for {@link
 * BitStructure#word|word}.  The parameter must be an instance of
 * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.
 *
 * @param {bool} [msb] - `true` if the bit numbering starts at the
 * most significant bit of the containing word; `false` (default) if
 * it starts at the least significant bit of the containing word.  If
 * the parameter at this position is a string and `property` is
 * `undefined` the value of this argument will instead be used as the
 * value of `property`.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class BitStructure extends Layout$1 {
  constructor(word, msb, property) {
    if (!((word instanceof UInt$1)
          || (word instanceof UIntBE$1))) {
      throw new TypeError('word must be a UInt or UIntBE layout');
    }
    if (('string' === typeof msb)
        && (undefined === property)) {
      property = msb;
      msb = undefined;
    }
    if (4 < word.span) {
      throw new RangeError('word cannot exceed 32 bits');
    }
    super(word.span, property);

    /** The layout used for the packed value.  {@link BitField}
     * instances are packed sequentially depending on {@link
     * BitStructure#msb|msb}. */
    this.word = word;

    /** Whether the bit sequences are packed starting at the most
     * significant bit growing down (`true`), or the least significant
     * bit growing up (`false`).
     *
     * **NOTE** Regardless of this value, the least significant bit of
     * any {@link BitField} value is the least significant bit of the
     * corresponding section of the packed value. */
    this.msb = !!msb;

    /** The sequence of {@link BitField} layouts that comprise the
     * packed structure.
     *
     * **NOTE** The array remains mutable to allow fields to be {@link
     * BitStructure#addField|added} after construction.  Users should
     * not manipulate the content of this property.*/
    this.fields = [];

    /* Storage for the value.  Capture a variable instead of using an
     * instance property because we don't want anything to change the
     * value without going through the mutator. */
    let value = 0;
    this._packedSetValue = function(v) {
      value = fixBitwiseResult(v);
      return this;
    };
    this._packedGetValue = function() {
      return value;
    };
  }

  /** @override */
  decode(b, offset) {
    const dest = this.makeDestinationObject();
    if (undefined === offset) {
      offset = 0;
    }
    const value = this.word.decode(b, offset);
    this._packedSetValue(value);
    for (const fd of this.fields) {
      if (undefined !== fd.property) {
        dest[fd.property] = fd.decode(value);
      }
    }
    return dest;
  }

  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
   *
   * If `src` is missing a property for a member with a defined {@link
   * Layout#property|property} the corresponding region of the packed
   * value is left unmodified.  Unused bits are also left unmodified. */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const value = this.word.decode(b, offset);
    this._packedSetValue(value);
    for (const fd of this.fields) {
      if (undefined !== fd.property) {
        const fv = src[fd.property];
        if (undefined !== fv) {
          fd.encode(fv);
        }
      }
    }
    return this.word.encode(this._packedGetValue(), b, offset);
  }

  /** Register a new bitfield with a containing bit structure.  The
   * resulting bitfield is returned.
   *
   * @param {Number} bits - initializer for {@link BitField#bits|bits}.
   *
   * @param {string} property - initializer for {@link
   * Layout#property|property}.
   *
   * @return {BitField} */
  addField(bits, property) {
    const bf = new BitField(this, bits, property);
    this.fields.push(bf);
    return bf;
  }

  /** As with {@link BitStructure#addField|addField} for single-bit
   * fields with `boolean` value representation.
   *
   * @param {string} property - initializer for {@link
   * Layout#property|property}.
   *
   * @return {Boolean} */
  addBoolean(property) {
    // This is my Boolean, not the Javascript one.
    // eslint-disable-next-line no-new-wrappers
    const bf = new Boolean$1(this, property);
    this.fields.push(bf);
    return bf;
  }

  /**
   * Get access to the bit field for a given property.
   *
   * @param {String} property - the bit field of interest.
   *
   * @return {BitField} - the field associated with `property`, or
   * undefined if there is no such property.
   */
  fieldFor(property) {
    if ('string' !== typeof property) {
      throw new TypeError('property must be string');
    }
    for (const fd of this.fields) {
      if (fd.property === property) {
        return fd;
      }
    }
  }
}

/**
 * Represent a sequence of bits within a {@link BitStructure}.
 *
 * All bit field values are represented as unsigned integers.
 *
 * **NOTE** User code should not invoke this constructor directly.
 * Use the container {@link BitStructure#addField|addField} helper
 * method.
 *
 * **NOTE** BitField instances are not instances of {@link Layout}
 * since {@link Layout#span|span} measures 8-bit units.
 *
 * @param {BitStructure} container - initializer for {@link
 * BitField#container|container}.
 *
 * @param {Number} bits - initializer for {@link BitField#bits|bits}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 */
class BitField {
  constructor(container, bits, property) {
    if (!(container instanceof BitStructure)) {
      throw new TypeError('container must be a BitStructure');
    }
    if ((!Number.isInteger(bits)) || (0 >= bits)) {
      throw new TypeError('bits must be positive integer');
    }
    const totalBits = 8 * container.span;
    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);
    if ((bits + usedBits) > totalBits) {
      throw new Error('bits too long for span remainder ('
                      + (totalBits - usedBits) + ' of '
                      + totalBits + ' remain)');
    }

    /** The {@link BitStructure} instance to which this bit field
     * belongs. */
    this.container = container;

    /** The span of this value in bits. */
    this.bits = bits;

    /** A mask of {@link BitField#bits|bits} bits isolating value bits
     * that fit within the field.
     *
     * That is, it masks a value that has not yet been shifted into
     * position within its containing packed integer. */
    this.valueMask = (1 << bits) - 1;
    if (32 === bits) { // shifted value out of range
      this.valueMask = 0xFFFFFFFF;
    }

    /** The offset of the value within the containing packed unsigned
     * integer.  The least significant bit of the packed value is at
     * offset zero, regardless of bit ordering used. */
    this.start = usedBits;
    if (this.container.msb) {
      this.start = totalBits - usedBits - bits;
    }

    /** A mask of {@link BitField#bits|bits} isolating the field value
     * within the containing packed unsigned integer. */
    this.wordMask = fixBitwiseResult(this.valueMask << this.start);

    /** The property name used when this bitfield is represented in an
     * Object.
     *
     * Intended to be functionally equivalent to {@link
     * Layout#property}.
     *
     * If left undefined the corresponding span of bits will be
     * treated as padding: it will not be mutated by {@link
     * Layout#encode|encode} nor represented as a property in the
     * decoded Object. */
    this.property = property;
  }

  /** Store a value into the corresponding subsequence of the containing
   * bit field. */
  decode() {
    const word = this.container._packedGetValue();
    const wordValue = fixBitwiseResult(word & this.wordMask);
    const value = wordValue >>> this.start;
    return value;
  }

  /** Store a value into the corresponding subsequence of the containing
   * bit field.
   *
   * **NOTE** This is not a specialization of {@link
   * Layout#encode|Layout.encode} and there is no return value. */
  encode(value) {
    if ((!Number.isInteger(value))
        || (value !== fixBitwiseResult(value & this.valueMask))) {
      throw new TypeError(nameWithProperty$1('BitField.encode', this)
                          + ' value must be integer not exceeding ' + this.valueMask);
    }
    const word = this.container._packedGetValue();
    const wordValue = fixBitwiseResult(value << this.start);
    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)
                                   | wordValue);
  };
}

/**
 * Represent a single bit within a {@link BitStructure} as a
 * JavaScript boolean.
 *
 * **NOTE** User code should not invoke this constructor directly.
 * Use the container {@link BitStructure#addBoolean|addBoolean} helper
 * method.
 *
 * @param {BitStructure} container - initializer for {@link
 * BitField#container|container}.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {BitField}
 */
/* eslint-disable no-extend-native */
let Boolean$1 = class Boolean extends BitField {
  constructor(container, property) {
    super(container, 1, property);
  }

  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
   *
   * @returns {boolean} */
  decode(b, offset) {
    return !!BitField.prototype.decode.call(this, b, offset);
  }

  /** @override */
  encode(value) {
    if ('boolean' === typeof value) {
      // BitField requires integer values
      value = +value;
    }
    return BitField.prototype.encode.call(this, value);
  }
};
/* eslint-enable no-extend-native */

/**
 * Contain a fixed-length block of arbitrary data, represented as a
 * Buffer.
 *
 * *Factory*: {@link module:Layout.blob|blob}
 *
 * @param {(Number|ExternalLayout)} length - initializes {@link
 * Blob#length|length}.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
let Blob$2 = class Blob extends Layout$1 {
  constructor(length, property) {
    if (!(((length instanceof ExternalLayout$1) && length.isCount())
          || (Number.isInteger(length) && (0 <= length)))) {
      throw new TypeError('length must be positive integer '
                          + 'or an unsigned integer ExternalLayout');
    }

    let span = -1;
    if (!(length instanceof ExternalLayout$1)) {
      span = length;
    }
    super(span, property);

    /** The number of bytes in the blob.
     *
     * This may be a non-negative integer, or an instance of {@link
     * ExternalLayout} that satisfies {@link
     * ExternalLayout#isCount|isCount()}. */
    this.length = length;
  }

  /** @override */
  getSpan(b, offset) {
    let span = this.span;
    if (0 > span) {
      span = this.length.decode(b, offset);
    }
    return span;
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    let span = this.span;
    if (0 > span) {
      span = this.length.decode(b, offset);
    }
    return b.slice(offset, offset + span);
  }

  /** Implement {@link Layout#encode|encode} for {@link Blob}.
   *
   * **NOTE** If {@link Layout#count|count} is an instance of {@link
   * ExternalLayout} then the length of `src` will be encoded as the
   * count after `src` is encoded. */
  encode(src, b, offset) {
    let span = this.length;
    if (this.length instanceof ExternalLayout$1) {
      span = src.length;
    }
    if (!(Buffer.isBuffer(src)
          && (span === src.length))) {
      throw new TypeError(nameWithProperty$1('Blob.encode', this)
                          + ' requires (length ' + span + ') Buffer as src');
    }
    if ((offset + span) > b.length) {
      throw new RangeError('encoding overruns Buffer');
    }
    b.write(src.toString('hex'), offset, span, 'hex');
    if (this.length instanceof ExternalLayout$1) {
      this.length.encode(span, b, offset);
    }
    return span;
  }
};

/**
 * Contain a `NUL`-terminated UTF8 string.
 *
 * *Factory*: {@link module:Layout.cstr|cstr}
 *
 * **NOTE** Any UTF8 string that incorporates a zero-valued byte will
 * not be correctly decoded by this layout.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class CString extends Layout$1 {
  constructor(property) {
    super(-1, property);
  }

  /** @override */
  getSpan(b, offset) {
    if (!Buffer.isBuffer(b)) {
      throw new TypeError('b must be a Buffer');
    }
    if (undefined === offset) {
      offset = 0;
    }
    let idx = offset;
    while ((idx < b.length) && (0 !== b[idx])) {
      idx += 1;
    }
    return 1 + idx - offset;
  }

  /** @override */
  decode(b, offset, dest) {
    if (undefined === offset) {
      offset = 0;
    }
    let span = this.getSpan(b, offset);
    return b.slice(offset, offset + span - 1).toString('utf-8');
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    /* Must force this to a string, lest it be a number and the
     * "utf8-encoding" below actually allocate a buffer of length
     * src */
    if ('string' !== typeof src) {
      src = src.toString();
    }
    const srcb = new Buffer(src, 'utf8');
    const span = srcb.length;
    if ((offset + span) > b.length) {
      throw new RangeError('encoding overruns Buffer');
    }
    srcb.copy(b, offset);
    b[offset + span] = 0;
    return span + 1;
  }
}

/**
 * Contain a UTF8 string with implicit length.
 *
 * *Factory*: {@link module:Layout.utf8|utf8}
 *
 * **NOTE** Because the length is implicit in the size of the buffer
 * this layout should be used only in isolation, or in a situation
 * where the length can be expressed by operating on a slice of the
 * containing buffer.
 *
 * @param {Number} [maxSpan] - the maximum length allowed for encoded
 * string content.  If not provided there is no bound on the allowed
 * content.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class UTF8 extends Layout$1 {
  constructor(maxSpan, property) {
    if (('string' === typeof maxSpan)
        && (undefined === property)) {
      property = maxSpan;
      maxSpan = undefined;
    }
    if (undefined === maxSpan) {
      maxSpan = -1;
    } else if (!Number.isInteger(maxSpan)) {
      throw new TypeError('maxSpan must be an integer');
    }

    super(-1, property);

    /** The maximum span of the layout in bytes.
     *
     * Positive values are generally expected.  Zero is abnormal.
     * Attempts to encode or decode a value that exceeds this length
     * will throw a `RangeError`.
     *
     * A negative value indicates that there is no bound on the length
     * of the content. */
    this.maxSpan = maxSpan;
  }

  /** @override */
  getSpan(b, offset) {
    if (!Buffer.isBuffer(b)) {
      throw new TypeError('b must be a Buffer');
    }
    if (undefined === offset) {
      offset = 0;
    }
    return b.length - offset;
  }

  /** @override */
  decode(b, offset, dest) {
    if (undefined === offset) {
      offset = 0;
    }
    let span = this.getSpan(b, offset);
    if ((0 <= this.maxSpan)
        && (this.maxSpan < span)) {
      throw new RangeError('text length exceeds maxSpan');
    }
    return b.slice(offset, offset + span).toString('utf-8');
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    /* Must force this to a string, lest it be a number and the
     * "utf8-encoding" below actually allocate a buffer of length
     * src */
    if ('string' !== typeof src) {
      src = src.toString();
    }
    const srcb = new Buffer(src, 'utf8');
    const span = srcb.length;
    if ((0 <= this.maxSpan)
        && (this.maxSpan < span)) {
      throw new RangeError('text length exceeds maxSpan');
    }
    if ((offset + span) > b.length) {
      throw new RangeError('encoding overruns Buffer');
    }
    srcb.copy(b, offset);
    return span;
  }
}

/**
 * Contain a constant value.
 *
 * This layout may be used in cases where a JavaScript value can be
 * inferred without an expression in the binary encoding.  An example
 * would be a {@link VariantLayout|variant layout} where the content
 * is implied by the union {@link Union#discriminator|discriminator}.
 *
 * @param {Object|Number|String} value - initializer for {@link
 * Constant#value|value}.  If the value is an object (or array) and
 * the application intends the object to remain unchanged regardless
 * of what is done to values decoded by this layout, the value should
 * be frozen prior passing it to this constructor.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class Constant extends Layout$1 {
  constructor(value, property) {
    super(0, property);

    /** The value produced by this constant when the layout is {@link
     * Constant#decode|decoded}.
     *
     * Any JavaScript value including `null` and `undefined` is
     * permitted.
     *
     * **WARNING** If `value` passed in the constructor was not
     * frozen, it is possible for users of decoded values to change
     * the content of the value. */
    this.value = value;
  }

  /** @override */
  decode(b, offset, dest) {
    return this.value;
  }

  /** @override */
  encode(src, b, offset) {
    /* Constants take no space */
    return 0;
  }
}

Layout$2.ExternalLayout = ExternalLayout$1;
Layout$2.GreedyCount = GreedyCount;
Layout$2.OffsetLayout = OffsetLayout$1;
Layout$2.UInt = UInt$1;
Layout$2.UIntBE = UIntBE$1;
Layout$2.Int = Int;
Layout$2.IntBE = IntBE;
Layout$2.Float = Float;
Layout$2.FloatBE = FloatBE;
Layout$2.Double = Double;
Layout$2.DoubleBE = DoubleBE;
Layout$2.Sequence = Sequence;
Layout$2.Structure = Structure$1;
Layout$2.UnionDiscriminator = UnionDiscriminator$1;
Layout$2.UnionLayoutDiscriminator = UnionLayoutDiscriminator$1;
Layout$2.Union = Union$1;
Layout$2.VariantLayout = VariantLayout$1;
Layout$2.BitStructure = BitStructure;
Layout$2.BitField = BitField;
Layout$2.Boolean = Boolean$1;
Layout$2.Blob = Blob$2;
Layout$2.CString = CString;
Layout$2.UTF8 = UTF8;
Layout$2.Constant = Constant;

/** Factory for {@link GreedyCount}. */
Layout$2.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));

/** Factory for {@link OffsetLayout}. */
Layout$2.offset = ((layout, offset, property) => new OffsetLayout$1(layout, offset, property));

/** Factory for {@link UInt|unsigned int layouts} spanning one
 * byte. */
Layout$2.u8 = (property => new UInt$1(1, property));

/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning two bytes. */
Layout$2.u16 = (property => new UInt$1(2, property));

/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning three bytes. */
Layout$2.u24 = (property => new UInt$1(3, property));

/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning four bytes. */
Layout$2.u32 = (property => new UInt$1(4, property));

/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning five bytes. */
Layout$2.u40 = (property => new UInt$1(5, property));

/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning six bytes. */
Layout$2.u48 = (property => new UInt$1(6, property));

/** Factory for {@link NearUInt64|little-endian unsigned int
 * layouts} interpreted as Numbers. */
Layout$2.nu64 = (property => new NearUInt64$1(property));

/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning two bytes. */
Layout$2.u16be = (property => new UIntBE$1(2, property));

/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning three bytes. */
Layout$2.u24be = (property => new UIntBE$1(3, property));

/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning four bytes. */
Layout$2.u32be = (property => new UIntBE$1(4, property));

/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning five bytes. */
Layout$2.u40be = (property => new UIntBE$1(5, property));

/** Factory for {@link UInt|big-endian unsigned int layouts}
 * spanning six bytes. */
Layout$2.u48be = (property => new UIntBE$1(6, property));

/** Factory for {@link NearUInt64BE|big-endian unsigned int
 * layouts} interpreted as Numbers. */
Layout$2.nu64be = (property => new NearUInt64BE(property));

/** Factory for {@link Int|signed int layouts} spanning one
 * byte. */
Layout$2.s8 = (property => new Int(1, property));

/** Factory for {@link Int|little-endian signed int layouts}
 * spanning two bytes. */
Layout$2.s16 = (property => new Int(2, property));

/** Factory for {@link Int|little-endian signed int layouts}
 * spanning three bytes. */
Layout$2.s24 = (property => new Int(3, property));

/** Factory for {@link Int|little-endian signed int layouts}
 * spanning four bytes. */
Layout$2.s32 = (property => new Int(4, property));

/** Factory for {@link Int|little-endian signed int layouts}
 * spanning five bytes. */
Layout$2.s40 = (property => new Int(5, property));

/** Factory for {@link Int|little-endian signed int layouts}
 * spanning six bytes. */
Layout$2.s48 = (property => new Int(6, property));

/** Factory for {@link NearInt64|little-endian signed int layouts}
 * interpreted as Numbers. */
Layout$2.ns64 = (property => new NearInt64$1(property));

/** Factory for {@link Int|big-endian signed int layouts}
 * spanning two bytes. */
Layout$2.s16be = (property => new IntBE(2, property));

/** Factory for {@link Int|big-endian signed int layouts}
 * spanning three bytes. */
Layout$2.s24be = (property => new IntBE(3, property));

/** Factory for {@link Int|big-endian signed int layouts}
 * spanning four bytes. */
Layout$2.s32be = (property => new IntBE(4, property));

/** Factory for {@link Int|big-endian signed int layouts}
 * spanning five bytes. */
Layout$2.s40be = (property => new IntBE(5, property));

/** Factory for {@link Int|big-endian signed int layouts}
 * spanning six bytes. */
Layout$2.s48be = (property => new IntBE(6, property));

/** Factory for {@link NearInt64BE|big-endian signed int layouts}
 * interpreted as Numbers. */
Layout$2.ns64be = (property => new NearInt64BE(property));

/** Factory for {@link Float|little-endian 32-bit floating point} values. */
Layout$2.f32 = (property => new Float(property));

/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */
Layout$2.f32be = (property => new FloatBE(property));

/** Factory for {@link Double|little-endian 64-bit floating point} values. */
Layout$2.f64 = (property => new Double(property));

/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */
Layout$2.f64be = (property => new DoubleBE(property));

/** Factory for {@link Structure} values. */
Layout$2.struct = ((fields, property, decodePrefixes) => new Structure$1(fields, property, decodePrefixes));

/** Factory for {@link BitStructure} values. */
Layout$2.bits = ((word, msb, property) => new BitStructure(word, msb, property));

/** Factory for {@link Sequence} values. */
Layout$2.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));

/** Factory for {@link Union} values. */
Layout$2.union = ((discr, defaultLayout, property) => new Union$1(discr, defaultLayout, property));

/** Factory for {@link UnionLayoutDiscriminator} values. */
Layout$2.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator$1(layout, property));

/** Factory for {@link Blob} values. */
Layout$2.blob = ((length, property) => new Blob$2(length, property));

/** Factory for {@link CString} values. */
Layout$2.cstr = (property => new CString(property));

/** Factory for {@link UTF8} values. */
Layout$2.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));

/** Factory for {@link Constant} values. */
Layout$2.const = ((value, property) => new Constant(value, property));

(function (exports) {
	var __importDefault = (commonjsGlobal$1 && commonjsGlobal$1.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.map = exports.array = exports.rustEnum = exports.str = exports.vecU8 = exports.tagged = exports.vec = exports.bool = exports.option = exports.publicKey = exports.i256 = exports.u256 = exports.i128 = exports.u128 = exports.i64 = exports.u64 = exports.struct = exports.f64 = exports.f32 = exports.i32 = exports.u32 = exports.i16 = exports.u16 = exports.i8 = exports.u8 = void 0;
	const buffer_layout_1 = Layout$2;
	const web3_js_1 = index_browser_esm;
	const bn_js_1 = __importDefault(bnExports);
	var buffer_layout_2 = Layout$2;
	Object.defineProperty(exports, "u8", { enumerable: true, get: function () { return buffer_layout_2.u8; } });
	Object.defineProperty(exports, "i8", { enumerable: true, get: function () { return buffer_layout_2.s8; } });
	Object.defineProperty(exports, "u16", { enumerable: true, get: function () { return buffer_layout_2.u16; } });
	Object.defineProperty(exports, "i16", { enumerable: true, get: function () { return buffer_layout_2.s16; } });
	Object.defineProperty(exports, "u32", { enumerable: true, get: function () { return buffer_layout_2.u32; } });
	Object.defineProperty(exports, "i32", { enumerable: true, get: function () { return buffer_layout_2.s32; } });
	Object.defineProperty(exports, "f32", { enumerable: true, get: function () { return buffer_layout_2.f32; } });
	Object.defineProperty(exports, "f64", { enumerable: true, get: function () { return buffer_layout_2.f64; } });
	Object.defineProperty(exports, "struct", { enumerable: true, get: function () { return buffer_layout_2.struct; } });
	class BNLayout extends buffer_layout_1.Layout {
	    constructor(span, signed, property) {
	        super(span, property);
	        this.blob = (0, buffer_layout_1.blob)(span);
	        this.signed = signed;
	    }
	    decode(b, offset = 0) {
	        const num = new bn_js_1.default(this.blob.decode(b, offset), 10, "le");
	        if (this.signed) {
	            return num.fromTwos(this.span * 8).clone();
	        }
	        return num;
	    }
	    encode(src, b, offset = 0) {
	        if (this.signed) {
	            src = src.toTwos(this.span * 8);
	        }
	        return this.blob.encode(src.toArrayLike(Buffer, "le", this.span), b, offset);
	    }
	}
	function u64(property) {
	    return new BNLayout(8, false, property);
	}
	exports.u64 = u64;
	function i64(property) {
	    return new BNLayout(8, true, property);
	}
	exports.i64 = i64;
	function u128(property) {
	    return new BNLayout(16, false, property);
	}
	exports.u128 = u128;
	function i128(property) {
	    return new BNLayout(16, true, property);
	}
	exports.i128 = i128;
	function u256(property) {
	    return new BNLayout(32, false, property);
	}
	exports.u256 = u256;
	function i256(property) {
	    return new BNLayout(32, true, property);
	}
	exports.i256 = i256;
	class WrappedLayout extends buffer_layout_1.Layout {
	    constructor(layout, decoder, encoder, property) {
	        super(layout.span, property);
	        this.layout = layout;
	        this.decoder = decoder;
	        this.encoder = encoder;
	    }
	    decode(b, offset) {
	        return this.decoder(this.layout.decode(b, offset));
	    }
	    encode(src, b, offset) {
	        return this.layout.encode(this.encoder(src), b, offset);
	    }
	    getSpan(b, offset) {
	        return this.layout.getSpan(b, offset);
	    }
	}
	function publicKey(property) {
	    return new WrappedLayout((0, buffer_layout_1.blob)(32), (b) => new web3_js_1.PublicKey(b), (key) => key.toBuffer(), property);
	}
	exports.publicKey = publicKey;
	class OptionLayout extends buffer_layout_1.Layout {
	    constructor(layout, property) {
	        super(-1, property);
	        this.layout = layout;
	        this.discriminator = (0, buffer_layout_1.u8)();
	    }
	    encode(src, b, offset = 0) {
	        if (src === null || src === undefined) {
	            return this.discriminator.encode(0, b, offset);
	        }
	        this.discriminator.encode(1, b, offset);
	        return this.layout.encode(src, b, offset + 1) + 1;
	    }
	    decode(b, offset = 0) {
	        const discriminator = this.discriminator.decode(b, offset);
	        if (discriminator === 0) {
	            return null;
	        }
	        else if (discriminator === 1) {
	            return this.layout.decode(b, offset + 1);
	        }
	        throw new Error("Invalid option " + this.property);
	    }
	    getSpan(b, offset = 0) {
	        const discriminator = this.discriminator.decode(b, offset);
	        if (discriminator === 0) {
	            return 1;
	        }
	        else if (discriminator === 1) {
	            return this.layout.getSpan(b, offset + 1) + 1;
	        }
	        throw new Error("Invalid option " + this.property);
	    }
	}
	function option(layout, property) {
	    return new OptionLayout(layout, property);
	}
	exports.option = option;
	function bool(property) {
	    return new WrappedLayout((0, buffer_layout_1.u8)(), decodeBool, encodeBool, property);
	}
	exports.bool = bool;
	function decodeBool(value) {
	    if (value === 0) {
	        return false;
	    }
	    else if (value === 1) {
	        return true;
	    }
	    throw new Error("Invalid bool: " + value);
	}
	function encodeBool(value) {
	    return value ? 1 : 0;
	}
	function vec(elementLayout, property) {
	    const length = (0, buffer_layout_1.u32)("length");
	    const layout = (0, buffer_layout_1.struct)([
	        length,
	        (0, buffer_layout_1.seq)(elementLayout, (0, buffer_layout_1.offset)(length, -length.span), "values"),
	    ]);
	    return new WrappedLayout(layout, ({ values }) => values, (values) => ({ values }), property);
	}
	exports.vec = vec;
	function tagged(tag, layout, property) {
	    const wrappedLayout = (0, buffer_layout_1.struct)([
	        u64("tag"),
	        layout.replicate("data"),
	    ]);
	    function decodeTag({ tag: receivedTag, data }) {
	        if (!receivedTag.eq(tag)) {
	            throw new Error("Invalid tag, expected: " +
	                tag.toString("hex") +
	                ", got: " +
	                receivedTag.toString("hex"));
	        }
	        return data;
	    }
	    return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);
	}
	exports.tagged = tagged;
	function vecU8(property) {
	    const length = (0, buffer_layout_1.u32)("length");
	    const layout = (0, buffer_layout_1.struct)([
	        length,
	        (0, buffer_layout_1.blob)((0, buffer_layout_1.offset)(length, -length.span), "data"),
	    ]);
	    return new WrappedLayout(layout, ({ data }) => data, (data) => ({ data }), property);
	}
	exports.vecU8 = vecU8;
	function str(property) {
	    return new WrappedLayout(vecU8(), (data) => data.toString("utf-8"), (s) => Buffer.from(s, "utf-8"), property);
	}
	exports.str = str;
	function rustEnum(variants, property, discriminant) {
	    const unionLayout = (0, buffer_layout_1.union)(discriminant !== null && discriminant !== void 0 ? discriminant : (0, buffer_layout_1.u8)(), property);
	    variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));
	    return unionLayout;
	}
	exports.rustEnum = rustEnum;
	function array(elementLayout, length, property) {
	    const layout = (0, buffer_layout_1.struct)([
	        (0, buffer_layout_1.seq)(elementLayout, length, "values"),
	    ]);
	    return new WrappedLayout(layout, ({ values }) => values, (values) => ({ values }), property);
	}
	exports.array = array;
	class MapEntryLayout extends buffer_layout_1.Layout {
	    constructor(keyLayout, valueLayout, property) {
	        super(keyLayout.span + valueLayout.span, property);
	        this.keyLayout = keyLayout;
	        this.valueLayout = valueLayout;
	    }
	    decode(b, offset) {
	        offset = offset || 0;
	        const key = this.keyLayout.decode(b, offset);
	        const value = this.valueLayout.decode(b, offset + this.keyLayout.getSpan(b, offset));
	        return [key, value];
	    }
	    encode(src, b, offset) {
	        offset = offset || 0;
	        const keyBytes = this.keyLayout.encode(src[0], b, offset);
	        const valueBytes = this.valueLayout.encode(src[1], b, offset + keyBytes);
	        return keyBytes + valueBytes;
	    }
	    getSpan(b, offset) {
	        return (this.keyLayout.getSpan(b, offset) + this.valueLayout.getSpan(b, offset));
	    }
	}
	function map(keyLayout, valueLayout, property) {
	    const length = (0, buffer_layout_1.u32)("length");
	    const layout = (0, buffer_layout_1.struct)([
	        length,
	        (0, buffer_layout_1.seq)(new MapEntryLayout(keyLayout, valueLayout), (0, buffer_layout_1.offset)(length, -length.span), "values"),
	    ]);
	    return new WrappedLayout(layout, ({ values }) => new Map(values), (values) => ({ values: Array.from(values.entries()) }), property);
	}
	exports.map = map;
	
} (dist));

/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED$1               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN$1             = 2;

/*============================================================================*/


function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH$1    = 3;
const MAX_MATCH$1    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES$1  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS$1      = 256;
/* number of literal bytes 0..255 */

const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES$1       = 30;
/* number of distance codes */

const BL_CODES$1      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
/* maximum heap size */

const MAX_BITS$1      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES$1);
zero$1(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES$1);
zero$1(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */

  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Tracev((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) => {
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */

  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    code = (code + bl_count[bits - 1]) << 1;
    next_code[bits] = code;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) => {
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */

  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) => {
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */

  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let sx = 0;         /* running index in sym_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and sym_buf is ok: */
      //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

    } while (sx < s.sym_next);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */

  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) => {
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */

  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let block_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("block-listed") bytes. */
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("allow-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init$1 = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block$1 = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  bi_windup(s);        /* align on byte boundary */
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align$1 = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */
const _tr_flush_block$1 = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->sym_next / 3));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block$1(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally$1 = (s, dist, lc) => {
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

  return (s.sym_next === s.sym_end);
};

var _tr_init_1  = _tr_init$1;
var _tr_stored_block_1 = _tr_stored_block$1;
var _tr_flush_block_1  = _tr_flush_block$1;
var _tr_tally_1 = _tr_tally$1;
var _tr_align_1 = _tr_align$1;

var trees = {
	_tr_init: _tr_init_1,
	_tr_stored_block: _tr_stored_block_1,
	_tr_flush_block: _tr_flush_block_1,
	_tr_tally: _tr_tally_1,
	_tr_align: _tr_align_1
};

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


var adler32_1 = adler32;

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


var crc32_1 = crc32;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants$2 = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_MEM_ERROR:       -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;




/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_UNKNOWN,
  Z_DEFLATED: Z_DEFLATED$2
} = constants$2;

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS$1 = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS      = 256;
/* number of literal bytes 0..255 */
const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES       = 30;
/* number of distance codes */
const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
const MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

const PRESET_DICT = 0x20;

const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
//#ifdef GZIP
const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
//#endif
const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
const FINISH_STATE  = 666;    /* stream complete */

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) * 2) - ((f) > 4 ? 9 : 0);
};

const zero = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};

/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */
const slide_hash = (s) => {
  let n, m;
  let p;
  let wsize = s.w_size;

  n = s.hash_size;
  p = n;
  do {
    m = s.head[--p];
    s.head[p] = (m >= wsize ? m - wsize : 0);
  } while (--n);
  n = wsize;
//#ifndef FASTEST
  p = n;
  do {
    m = s.prev[--p];
    s.prev[p] = (m >= wsize ? m - wsize : 0);
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */
  } while (--n);
//#endif
};

/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out  += len;
  s.pending_out  += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending      -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let n, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */
const deflate_stored = (s, flush) => {

  /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

  /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */
    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    if (s.strm.avail_out < have) {         /* need room for header */
      break;
    }
      /* maximum stored block length that will fit in avail_out: */
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;  /* bytes left in window */
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;   /* limit len to the input */
    }
    if (len > have) {
      len = have;             /* limit len to the output */
    }

    /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */
    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||
                        flush === Z_NO_FLUSH$2 ||
                        len !== left + s.strm.avail_in)) {
      break;
    }

    /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */
    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);

    /* Replace the lengths in the dummy stored block with len. */
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;

    /* Write the stored block header bytes. */
    flush_pending(s.strm);

//#ifdef ZLIB_DEBUG
//    /* Update debugging counts for the data about to be copied. */
//    s->compressed_len += len << 3;
//    s->bits_sent += len << 3;
//#endif

    /* Copy uncompressed bytes from the window to next_out. */
    if (left) {
      if (left > len) {
        left = len;
      }
      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }

    /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);

  /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */
  used -= s.strm.avail_in;    /* number of input bytes directly copied */
  if (used) {
    /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */
    if (used >= s.w_size) {  /* supplant the previous history */
      s.matches = 2;     /* clear hash */
      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    }
    else {
      if (s.window_size - s.strstart <= used) {
        /* Slide the window down. */
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;   /* add a pending slide_hash() */
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* If the last block was written to next_out, then done. */
  if (last) {
    return BS_FINISH_DONE;
  }

  /* If flushing and all input has been consumed, then done. */
  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&
    s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }

  /* Fill the window with any remaining input. */
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    /* Slide the window down. */
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    //zmemcpy(s->window, s->window + s->w_size, s->strstart);
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;       /* add a pending slide_hash() */
    }
    have += s.w_size;      /* more space now */
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */
  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    /* maximum stored block length that will fit in pending: */
  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block ||
     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&
     s.strm.avail_in === 0 && left <= have)) {
    len = left > have ? have : left;
    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&
         len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }

  /* We've done all we can with the available input and output. */
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};


/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED$2; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.sym_buf = 0;        /* buffer for distances and literals/lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.sym_next = 0;      /* running index in sym_buf */
  this.sym_end = 0;       /* symbol table full when sym_next reaches this */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */
const deflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
//#ifdef GZIP
                                s.status !== GZIP_STATE &&
//#endif
                                s.status !== EXTRA_STATE &&
                                s.status !== NAME_STATE &&
                                s.status !== COMMENT_STATE &&
                                s.status !== HCRC_STATE &&
                                s.status !== BUSY_STATE &&
                                s.status !== FINISH_STATE)) {
    return 1;
  }
  return 0;
};


const deflateResetKeep = (strm) => {

  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR$2);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status =
//#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE :
//#endif
    s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK$3;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK$3) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$2;
  }
  strm.state.gzhead = head;
  return Z_OK$3;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR$2;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION$1) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
    return err(strm, Z_STREAM_ERROR$2);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;     /* to pass state test in deflateReset() */

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->sym_buf = s->pending_buf + s->lit_bufsize;
  s.sym_buf = s.lit_bufsize;

  //s->sym_end = (s->lit_bufsize - 1) * 3;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
};


/* ========================================================================= */
const deflate$2 = (strm, flush) => {

  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
  }

  const s = strm.state;

  if (!strm.output ||
      (strm.avail_in !== 0 && !strm.input) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
  }

  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK$3;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH$3) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* Write the header */
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    /* zlib header */
    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
    let level_flags = -1;

    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= (level_flags << 6);
    if (s.strstart !== 0) { header |= PRESET_DICT; }
    header += 31 - (header % 31);

    putShortMSB(s, header);

    /* Save the adler32 of the preset dictionary: */
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }
    strm.adler = 1; // adler32(0L, Z_NULL, 0);
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
//#ifdef GZIP
  if (s.status === GZIP_STATE) {
    /* gzip header */
    strm.adler = 0;  //crc32(0L, Z_NULL, 0);
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) { // s->gzhead == Z_NULL
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
    else {
      put_byte(s, (s.gzhead.text ? 1 : 0) +
                  (s.gzhead.hcrc ? 2 : 0) +
                  (!s.gzhead.extra ? 0 : 4) +
                  (!s.gzhead.name ? 0 : 8) +
                  (!s.gzhead.comment ? 0 : 16)
      );
      put_byte(s, s.gzhead.time & 0xff);
      put_byte(s, (s.gzhead.time >> 8) & 0xff);
      put_byte(s, (s.gzhead.time >> 16) & 0xff);
      put_byte(s, (s.gzhead.time >> 24) & 0xff);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, s.gzhead.os & 0xff);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 0xff);
        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy = s.pending_buf_size - s.pending;
        // zmemcpy(s.pending_buf + s.pending,
        //    s.gzhead.extra + s.gzindex, copy);
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
        s.pending = s.pending_buf_size;
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex += copy;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
        beg = 0;
        left -= copy;
      }
      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      // zmemcpy(s->pending_buf + s->pending,
      //     s->gzhead->extra + s->gzindex, left);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
    }
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
//#endif

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) :
                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                 s.strategy === Z_RLE ? deflate_rle(s, flush) :
                 configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK$3;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      }
      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH$1) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK$3;
      }
    }
  }

  if (flush !== Z_FINISH$3) { return Z_OK$3; }
  if (s.wrap <= 0) { return Z_STREAM_END$3; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
};


const deflateEnd = (strm) => {

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }

  const status = strm.state.status;

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR$2;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$3;
};


var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$2;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/

var deflate_1$2 = {
	deflateInit: deflateInit_1,
	deflateInit2: deflateInit2_1,
	deflateReset: deflateReset_1,
	deflateResetKeep: deflateResetKeep_1,
	deflateSetHeader: deflateSetHeader_1,
	deflate: deflate_2$1,
	deflateEnd: deflateEnd_1,
	deflateSetDictionary: deflateSetDictionary_1,
	deflateInfo: deflateInfo
};

const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

var assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
var flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};

var common$8 = {
	assign: assign,
	flattenChunks: flattenChunks
};

// String encode/decode helpers


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
var string2buf = (str) => {
  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }

  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
var buf2string = (buf, max) => {
  const len = max || buf.length;

  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }

  let i, out;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

var strings = {
	string2buf: string2buf,
	buf2string: buf2string,
	utf8border: utf8border
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

var zstream = ZStream;

const toString$1 = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED: Z_DEFLATED$1
} = constants$2;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate$1(options) {
  this.options = common$8.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  let status = deflate_1$2.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK$2) {
    throw new Error(messages[status]);
  }

  if (opt.header) {
    deflate_1$2.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = deflate_1$2.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate$1.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString$1.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = deflate_1$2.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END$2) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1$2.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$2;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate$1.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate$1.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$2) {
    this.result = common$8.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
const BAD$1 = 16209;       /* got a data error -- remain here until reset */
const TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
var inffast = function inflate_fast(strm, start) {
  let _in;                    /* local strm.input */
  let last;                   /* have enough input while in < last */
  let _out;                   /* local strm.output */
  let beg;                    /* inflate()'s initial strm.output */
  let end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  let dmax;                   /* maximum distance from zlib header */
//#endif
  let wsize;                  /* window size or zero if not using window */
  let whave;                  /* valid bytes in the window */
  let wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  let s_window;               /* allocated sliding window, if wsize != 0 */
  let hold;                   /* local strm.hold */
  let bits;                   /* local strm.bits */
  let lcode;                  /* local strm.lencode */
  let dcode;                  /* local strm.distcode */
  let lmask;                  /* mask for first level of length codes */
  let dmask;                  /* mask for first level of distance codes */
  let here;                   /* retrieved table entry */
  let op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  let len;                    /* match length, unused bytes */
  let dist;                   /* match distance */
  let from;                   /* where to copy match from */
  let from_source;


  let input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  const state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE$1;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const MAXBITS = 15;
const ENOUGH_LENS$1 = 852;
const ENOUGH_DISTS$1 = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

const CODES$1 = 0;
const LENS$1 = 1;
const DISTS$1 = 2;

const lbase = new Uint16Array([ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
]);

const lext = new Uint8Array([ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
]);

const dbase = new Uint16Array([ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
]);

const dext = new Uint8Array([ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
]);

const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
{
  const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  let len = 0;               /* a code's length in bits */
  let sym = 0;               /* index of code symbols */
  let min = 0, max = 0;          /* minimum and maximum code lengths */
  let root = 0;              /* number of index bits for root table */
  let curr = 0;              /* number of index bits for current table */
  let drop = 0;              /* code bits to drop for sub-table */
  let left = 0;                   /* number of prefix codes available */
  let used = 0;              /* code entries in table used */
  let huff = 0;              /* Huffman code */
  let incr;              /* for incrementing code, index */
  let fill;              /* index for replicating entries */
  let low;               /* low bits for current root entry */
  let mask;              /* mask for low root bits */
  let next;             /* next available space in table */
  let base = null;     /* base value table to use */
//  let shoextra;    /* extra bits table to use */
  let match;                  /* use base and extra for symbol >= match */
  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  let extra = null;

  let here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES$1) {
    base = extra = work;    /* dummy value--not used */
    match = 20;

  } else if (type === LENS$1) {
    base = lbase;
    extra = lext;
    match = 257;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    match = 0;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base[work[sym] - match];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


var inftrees = inflate_table;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.






const CODES = 0;
const LENS = 1;
const DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,
  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,
  Z_DEFLATED
} = constants$2;


/* STATES ====================================================================*/
/* ===========================================================================*/


const    HEAD = 16180;       /* i: waiting for magic header */
const    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */
const    TIME = 16182;       /* i: waiting for modification time (gzip) */
const    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */
const    EXLEN = 16184;      /* i: waiting for extra length (gzip) */
const    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */
const    NAME = 16186;       /* i: waiting for end of file name (gzip) */
const    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */
const    HCRC = 16188;       /* i: waiting for header crc (gzip) */
const    DICTID = 16189;    /* i: waiting for dictionary check value */
const    DICT = 16190;      /* waiting for inflateSetDictionary() call */
const        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */
const        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */
const        STORED = 16193;    /* i: waiting for stored size (length and complement) */
const        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */
const        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */
const        TABLE = 16196;     /* i: waiting for dynamic block table lengths */
const        LENLENS = 16197;   /* i: waiting for code length code lengths */
const        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */
const            LEN_ = 16199;      /* i: same as LEN below, but only first time in */
const            LEN = 16200;       /* i: waiting for length/lit/eob code */
const            LENEXT = 16201;    /* i: waiting for length extra bits */
const            DIST = 16202;      /* i: waiting for distance code */
const            DISTEXT = 16203;   /* i: waiting for distance extra bits */
const            MATCH = 16204;     /* o: waiting for output space to copy string */
const            LIT = 16205;       /* o: waiting for output space to write literal */
const    CHECK = 16206;     /* i: waiting for 32-bit check value */
const    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */
const    DONE = 16208;      /* finished check, done -- remain here until reset */
const    BAD = 16209;       /* got a data error -- remain here until reset */
const    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */
const    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_WBITS = MAX_WBITS;


const zswap32 = (q) => {

  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
};


function InflateState() {
  this.strm = null;           /* pointer back to this zlib stream */
  this.mode = 0;              /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}


const inflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm ||
    state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};


const inflateResetKeep = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK$1;
};


const inflateReset = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

};


const inflateReset2 = (strm, windowBits) => {
  let wrap;

  /* get the state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};


const inflateInit2 = (strm, windowBits) => {

  if (!strm) { return Z_STREAM_ERROR$1; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  const state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.strm = strm;
  state.window = null/*Z_NULL*/;
  state.mode = HEAD;     /* to pass state test in inflateReset2() */
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$1) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
};


const inflateInit = (strm) => {

  return inflateInit2(strm, DEF_WBITS);
};


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
let virgin = true;

let lenfix, distfix; // We have no pointers in JS, so keep tables separate


const fixedtables = (state) => {

  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    let sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
const updatewindow = (strm, src, end, copy) => {

  let dist;
  const state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
};


const inflate$2 = (strm, flush) => {

  let state;
  let input, output;          // input/output buffers
  let next;                   /* next input INDEX */
  let put;                    /* next output INDEX */
  let have, left;             /* available input and output */
  let hold;                   /* bit buffer */
  let bits;                   /* bits in bit buffer */
  let _in, _out;              /* save starting available input and output */
  let copy;                   /* number of stored or match bytes to copy */
  let from;                   /* where to copy match bytes from */
  let from_source;
  let here = 0;               /* current decoding table entry */
  let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //let last;                   /* parent table entry */
  let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  let len;                    /* length to copy for repeats, bits to drop */
  let ret;                    /* return code */
  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  let opts;

  let n; // temporary variable for NEED_BITS

  const order = /* permutation of code lengths */
    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


  if (inflateStateCheck(strm) || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR$1;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK$1;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          if (state.wbits === 0) {
            state.wbits = 15;
          }
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        if (len > 15 || len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }

        // !!! pako patch. Force use `options.windowBits` if passed.
        // Required to always use max window size by default.
        state.dmax = 1 << state.wbits;
        //state.dmax = 1 << len;

        state.flags = 0;               /* indicate zlib header */
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32_1(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Uint8Array(state.head.extra_len);
              }
              state.head.extra.set(
                input.subarray(
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  next + copy
                ),
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT$1;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          output.set(input.subarray(next, next + copy), put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inffast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if ((state.wrap & 4) && _out) {
            strm.adler = state.check =
                /*UPDATE_CHECK(state.check, put - _out, _out);*/
                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END$1;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR$1;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR$1;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR$1;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH$1))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if ((state.wrap & 4) && _out) {
    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};


const inflateEnd = (strm) => {

  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }

  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$1;
};


const inflateGetHeader = (strm, head) => {

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK$1;
};


const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;

  let state;
  let dictid;
  let ret;

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR$1;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK$1;
};


var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2$1 = inflate$2;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/

var inflate_1$2 = {
	inflateReset: inflateReset_1,
	inflateReset2: inflateReset2_1,
	inflateResetKeep: inflateResetKeep_1,
	inflateInit: inflateInit_1,
	inflateInit2: inflateInit2_1,
	inflate: inflate_2$1,
	inflateEnd: inflateEnd_1,
	inflateGetHeader: inflateGetHeader_1,
	inflateSetDictionary: inflateSetDictionary_1,
	inflateInfo: inflateInfo
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

var gzheader = GZheader;

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
} = constants$2;

/* ===========================================================================*/


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate$1(options) {
  this.options = common$8.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ''
  }, options || {});

  const opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new zstream();
  this.strm.avail_out = 0;

  let status  = inflate_1$2.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK) {
    throw new Error(messages[status]);
  }

  this.header = new gzheader();

  inflate_1$2.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(messages[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate$1.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;

  if (this.ended) return false;

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate_1$2.inflate(strm, _flush_mode);

    if (status === Z_NEED_DICT && dictionary) {
      status = inflate_1$2.inflateSetDictionary(strm, dictionary);

      if (status === Z_OK) {
        status = inflate_1$2.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        // Replace code with more verbose
        status = Z_NEED_DICT;
      }
    }

    // Skip snyc markers if more data follows and not raw mode
    while (strm.avail_in > 0 &&
           status === Z_STREAM_END &&
           strm.state.wrap > 0 &&
           data[strm.next_in] !== 0)
    {
      inflate_1$2.inflateReset(strm);
      status = inflate_1$2.inflate(strm, _flush_mode);
    }

    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }

    // Remember real `avail_out` value, because we may patch out buffer content
    // to align utf8 strings boundaries.
    last_avail_out = strm.avail_out;

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {

        if (this.options.to === 'string') {

          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail & realign counters
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

          this.onData(utf8str);

        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }

    // Must repeat iteration if out buffer is full
    if (status === Z_OK && last_avail_out === 0) continue;

    // Finalize if end of stream reached.
    if (status === Z_STREAM_END) {
      status = inflate_1$2.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate$1.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate$1.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = common$8.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/
function inflate$1(input, options) {
  const inflator = new Inflate$1(options);

  inflator.push(input);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) throw inflator.msg || messages[inflator.err];

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


var Inflate_1$1 = Inflate$1;
var inflate_2 = inflate$1;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip$1 = inflate$1;
var constants = constants$2;

var inflate_1$1 = {
	Inflate: Inflate_1$1,
	inflate: inflate_2,
	inflateRaw: inflateRaw_1$1,
	ungzip: ungzip$1,
	constants: constants
};

const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
var inflate_1 = inflate;

var eventemitter3 = {exports: {}};

(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	} 
} (eventemitter3));

var eventemitter3Exports = eventemitter3.exports;
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs$3(eventemitter3Exports);

/**
 * Splits an array into chunks
 *
 * @param array Array of objects to chunk.
 * @param size The max size of a chunk.
 * @returns A two dimensional array where each T[] length is < the provided size.
 */
function chunks(array, size) {
    return Array.apply(0, new Array(Math.ceil(array.length / size))).map((_, index) => array.slice(index * size, (index + 1) * size));
}
/**
 * Check if a transaction object is a VersionedTransaction or not
 *
 * @param tx
 * @returns bool
 */
const isVersionedTransaction = (tx) => {
    return "version" in tx;
};

function encode$3(data) {
    return data.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "0x");
}
function decode$3(data) {
    if (data.indexOf("0x") === 0) {
        data = data.substr(2);
    }
    if (data.length % 2 === 1) {
        data = "0" + data;
    }
    let key = data.match(/.{2}/g);
    if (key === null) {
        return Buffer.from([]);
    }
    return Buffer.from(key.map((byte) => parseInt(byte, 16)));
}

var hex = /*#__PURE__*/Object.freeze({
    __proto__: null,
    encode: encode$3,
    decode: decode$3
});

function decode$2(array) {
    const decoder = new TextDecoder("utf-8") // Browser https://caniuse.com/textencoder.
        ; // Node.
    return decoder.decode(array);
}
function encode$2(input) {
    const encoder = new TextEncoder() // Browser.
        ; // Node.
    return encoder.encode(input);
}

var utf8$7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    decode: decode$2,
    encode: encode$2
});

function encode$1$1(data) {
    return bs58$1$1.encode(data);
}
function decode$1$1(data) {
    return bs58$1$1.decode(data);
}

var bs58 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    encode: encode$1$1,
    decode: decode$1$1
});

function encode$4(data) {
    return fromByteArray_1(data);
}
function decode$4(data) {
    return Buffer.from(toByteArray_1(data));
}

var base64$4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    encode: encode$4,
    decode: decode$4
});

var index$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hex: hex,
    utf8: utf8$7,
    bs58: bs58,
    base64: base64$4
});

function parseIdlErrors(idl) {
    const errors = new Map();
    if (idl.errors) {
        idl.errors.forEach((e) => {
            var _a;
            let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;
            errors.set(e.code, msg);
        });
    }
    return errors;
}
// Allow either IdLInstruction or IdlStateMethod since the types share fields.
function toInstruction(idlIx, ...args) {
    if (idlIx.args.length != args.length) {
        throw new Error("Invalid argument length");
    }
    const ix = {};
    let idx = 0;
    idlIx.args.forEach((ixArg) => {
        ix[ixArg.name] = args[idx];
        idx += 1;
    });
    return ix;
}
// Throws error if any account required for the `ix` is not given.
function validateAccounts(ixAccounts, accounts = {}) {
    ixAccounts.forEach((acc) => {
        if ("accounts" in acc) {
            validateAccounts(acc.accounts, accounts[acc.name]);
        }
        else {
            if (accounts[acc.name] === undefined) {
                throw new Error(`Invalid arguments: ${acc.name} not provided.`);
            }
        }
    });
}
// Translates an address to a Pubkey.
function translateAddress(address) {
    return address instanceof PublicKey ? address : new PublicKey(address);
}

/**
 * A `StructFailure` represents a single specific failure in validation.
 */

/**
 * `StructError` objects are thrown (or returned) when validation fails.
 *
 * Validation logic is design to exit early for maximum performance. The error
 * represents the first error encountered during validation. For more detail,
 * the `error.failures` property is a generator function that can be run to
 * continue validation and receive all the failures in the data.
 */
class StructError extends TypeError {
  constructor(failure, failures) {
    let cached;
    const {
      message,
      ...rest
    } = failure;
    const {
      path
    } = failure;
    const msg = path.length === 0 ? message : "At path: " + path.join('.') + " -- " + message;
    super(msg);
    this.value = void 0;
    this.key = void 0;
    this.type = void 0;
    this.refinement = void 0;
    this.path = void 0;
    this.branch = void 0;
    this.failures = void 0;
    Object.assign(this, rest);
    this.name = this.constructor.name;

    this.failures = () => {
      var _cached;

      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];
    };
  }

}

/**
 * Check if a value is an iterator.
 */
function isIterable(x) {
  return isObject(x) && typeof x[Symbol.iterator] === 'function';
}
/**
 * Check if a value is a plain object.
 */


function isObject(x) {
  return typeof x === 'object' && x != null;
}
/**
 * Return a value as a printable string.
 */

function print(value) {
  return typeof value === 'string' ? JSON.stringify(value) : "" + value;
}
/**
 * Shifts (removes and returns) the first value from the `input` iterator.
 * Like `Array.prototype.shift()` but for an `Iterator`.
 */

function shiftIterator(input) {
  const {
    done,
    value
  } = input.next();
  return done ? undefined : value;
}
/**
 * Convert a single validation result to a failure.
 */

function toFailure(result, context, struct, value) {
  if (result === true) {
    return;
  } else if (result === false) {
    result = {};
  } else if (typeof result === 'string') {
    result = {
      message: result
    };
  }

  const {
    path,
    branch
  } = context;
  const {
    type
  } = struct;
  const {
    refinement,
    message = "Expected a value of type `" + type + "`" + (refinement ? " with refinement `" + refinement + "`" : '') + ", but received: `" + print(value) + "`"
  } = result;
  return {
    value,
    type,
    refinement,
    key: path[path.length - 1],
    path,
    branch,
    ...result,
    message
  };
}
/**
 * Convert a validation result to an iterable of failures.
 */

function* toFailures(result, context, struct, value) {
  if (!isIterable(result)) {
    result = [result];
  }

  for (const r of result) {
    const failure = toFailure(r, context, struct, value);

    if (failure) {
      yield failure;
    }
  }
}
/**
 * Check a value against a struct, traversing deeply into nested values, and
 * returning an iterator of failures or success.
 */

function* run(value, struct, options) {
  if (options === void 0) {
    options = {};
  }

  const {
    path = [],
    branch = [value],
    coerce = false,
    mask = false
  } = options;
  const ctx = {
    path,
    branch
  };

  if (coerce) {
    value = struct.coercer(value, ctx);

    if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {
      for (const key in value) {
        if (struct.schema[key] === undefined) {
          delete value[key];
        }
      }
    }
  }

  let valid = true;

  for (const failure of struct.validator(value, ctx)) {
    valid = false;
    yield [failure, undefined];
  }

  for (let [k, v, s] of struct.entries(value, ctx)) {
    const ts = run(v, s, {
      path: k === undefined ? path : [...path, k],
      branch: k === undefined ? branch : [...branch, v],
      coerce,
      mask
    });

    for (const t of ts) {
      if (t[0]) {
        valid = false;
        yield [t[0], undefined];
      } else if (coerce) {
        v = t[1];

        if (k === undefined) {
          value = v;
        } else if (value instanceof Map) {
          value.set(k, v);
        } else if (value instanceof Set) {
          value.add(v);
        } else if (isObject(value)) {
          value[k] = v;
        }
      }
    }
  }

  if (valid) {
    for (const failure of struct.refiner(value, ctx)) {
      valid = false;
      yield [failure, undefined];
    }
  }

  if (valid) {
    yield [undefined, value];
  }
}

/**
 * `Struct` objects encapsulate the validation logic for a specific type of
 * values. Once constructed, you use the `assert`, `is` or `validate` helpers to
 * validate unknown input data against the struct.
 */

class Struct {
  constructor(props) {
    this.TYPE = void 0;
    this.type = void 0;
    this.schema = void 0;
    this.coercer = void 0;
    this.validator = void 0;
    this.refiner = void 0;
    this.entries = void 0;
    const {
      type,
      schema,
      validator,
      refiner,
      coercer = value => value,
      entries = function* () {}
    } = props;
    this.type = type;
    this.schema = schema;
    this.entries = entries;
    this.coercer = coercer;

    if (validator) {
      this.validator = (value, context) => {
        const result = validator(value, context);
        return toFailures(result, context, this, value);
      };
    } else {
      this.validator = () => [];
    }

    if (refiner) {
      this.refiner = (value, context) => {
        const result = refiner(value, context);
        return toFailures(result, context, this, value);
      };
    } else {
      this.refiner = () => [];
    }
  }
  /**
   * Assert that a value passes the struct's validation, throwing if it doesn't.
   */


  assert(value) {
    return assert$2(value, this);
  }
  /**
   * Create a value with the struct's coercion logic, then validate it.
   */


  create(value) {
    return create(value, this);
  }
  /**
   * Check if a value passes the struct's validation.
   */


  is(value) {
    return is$2(value, this);
  }
  /**
   * Mask a value, coercing and validating it, but returning only the subset of
   * properties defined by the struct's schema.
   */


  mask(value) {
    return mask(value, this);
  }
  /**
   * Validate a value with the struct's validation logic, returning a tuple
   * representing the result.
   *
   * You may optionally pass `true` for the `withCoercion` argument to coerce
   * the value before attempting to validate it. If you do, the result will
   * contain the coerced result when successful.
   */


  validate(value, options) {
    if (options === void 0) {
      options = {};
    }

    return validate$2(value, this, options);
  }

}
/**
 * Assert that a value passes a struct, throwing if it doesn't.
 */

function assert$2(value, struct) {
  const result = validate$2(value, struct);

  if (result[0]) {
    throw result[0];
  }
}
/**
 * Create a value with the coercion logic of struct and validate it.
 */

function create(value, struct) {
  const result = validate$2(value, struct, {
    coerce: true
  });

  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
/**
 * Mask a value, returning only the subset of properties defined by a struct.
 */

function mask(value, struct) {
  const result = validate$2(value, struct, {
    coerce: true,
    mask: true
  });

  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
/**
 * Check if a value passes a struct.
 */

function is$2(value, struct) {
  const result = validate$2(value, struct);
  return !result[0];
}
/**
 * Validate a value against a struct, returning an error if invalid, or the
 * value (with potential coercion) if valid.
 */

function validate$2(value, struct, options) {
  if (options === void 0) {
    options = {};
  }

  const tuples = run(value, struct, options);
  const tuple = shiftIterator(tuples);

  if (tuple[0]) {
    const error = new StructError(tuple[0], function* () {
      for (const t of tuples) {
        if (t[0]) {
          yield t[0];
        }
      }
    });
    return [error, undefined];
  } else {
    const v = tuple[1];
    return [undefined, v];
  }
}
/**
 * Define a new struct type with a custom validation function.
 */

function define(name, validator) {
  return new Struct({
    type: name,
    schema: null,
    validator
  });
}

/**
 * Ensure that any value passes validation.
 */

function any() {
  return define('any', () => true);
}
function array$6(Element) {
  return new Struct({
    type: 'array',
    schema: Element,

    *entries(value) {
      if (Element && Array.isArray(value)) {
        for (const [i, v] of value.entries()) {
          yield [i, v, Element];
        }
      }
    },

    coercer(value) {
      return Array.isArray(value) ? value.slice() : value;
    },

    validator(value) {
      return Array.isArray(value) || "Expected an array value, but received: " + print(value);
    }

  });
}
/**
 * Ensure that a value is a boolean.
 */

function boolean$5() {
  return define('boolean', value => {
    return typeof value === 'boolean';
  });
}
function literal(constant) {
  const description = print(constant);
  const t = typeof constant;
  return new Struct({
    type: 'literal',
    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,

    validator(value) {
      return value === constant || "Expected the literal `" + description + "`, but received: " + print(value);
    }

  });
}
/**
 * Augment an existing struct to allow `null` values.
 */

function nullable$3(struct) {
  return new Struct({ ...struct,
    validator: (value, ctx) => value === null || struct.validator(value, ctx),
    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)
  });
}
/**
 * Ensure that a value is a number.
 */

function number$5() {
  return define('number', value => {
    return typeof value === 'number' && !isNaN(value) || "Expected a number, but received: " + print(value);
  });
}
/**
 * Augment a struct to allow `undefined` values.
 */

function optional(struct) {
  return new Struct({ ...struct,
    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),
    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)
  });
}
/**
 * Ensure that a value is a string.
 */

function string$8() {
  return define('string', value => {
    return typeof value === 'string' || "Expected a string, but received: " + print(value);
  });
}
/**
 * Ensure that a value has a set of known properties of specific types.
 *
 * Note: Unrecognized properties are allowed and untouched. This is similar to
 * how TypeScript's structural typing works.
 */

function type(schema) {
  const keys = Object.keys(schema);
  return new Struct({
    type: 'type',
    schema,

    *entries(value) {
      if (isObject(value)) {
        for (const k of keys) {
          yield [k, value[k], schema[k]];
        }
      }
    },

    validator(value) {
      return isObject(value) || "Expected an object, but received: " + print(value);
    }

  });
}
/**
 * Ensure that a value matches one of a set of types.
 */

function union$1(Structs) {
  const description = Structs.map(s => s.type).join(' | ');
  return new Struct({
    type: 'union',
    schema: null,

    coercer(value, ctx) {
      const firstMatch = Structs.find(s => {
        const [e] = s.validate(value, {
          coerce: true
        });
        return !e;
      }) || unknown();
      return firstMatch.coercer(value, ctx);
    },

    validator(value, ctx) {
      const failures = [];

      for (const S of Structs) {
        const [...tuples] = run(value, S, ctx);
        const [first] = tuples;

        if (!first[0]) {
          return [];
        } else {
          for (const [failure] of tuples) {
            if (failure) {
              failures.push(failure);
            }
          }
        }
      }

      return ["Expected the value to satisfy a union of `" + description + "`, but received: " + print(value), ...failures];
    }

  });
}
/**
 * Ensure that any value passes validation, without widening its type to `any`.
 */

function unknown() {
  return define('unknown', () => true);
}

/**
 * Augment a `Struct` to add an additional coercion step to its input.
 *
 * This allows you to transform input data before validating it, to increase the
 * likelihood that it passes validation—for example for default values, parsing
 * different formats, etc.
 *
 * Note: You must use `create(value, Struct)` on the value to have the coercion
 * take effect! Using simply `assert()` or `is()` will not use coercion.
 */

function coerce(struct, condition, coercer) {
  return new Struct({ ...struct,
    coercer: (value, ctx) => {
      return is$2(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);
    }
  });
}

/**
 * Sends a transaction to a program with the given accounts and instruction
 * data.
 */
async function invoke(programId, accounts, data, provider) {
    programId = translateAddress(programId);
    if (!provider) {
        provider = getProvider();
    }
    const tx = new Transaction$3();
    tx.add(new TransactionInstruction({
        programId,
        keys: accounts !== null && accounts !== void 0 ? accounts : [],
        data,
    }));
    if (provider.sendAndConfirm === undefined) {
        throw new Error("This function requires 'Provider.sendAndConfirm' to be implemented.");
    }
    return await provider.sendAndConfirm(tx, []);
}
const GET_MULTIPLE_ACCOUNTS_LIMIT = 99;
async function getMultipleAccounts(connection, publicKeys, commitment) {
    const results = await getMultipleAccountsAndContext(connection, publicKeys, commitment);
    return results.map((result) => {
        return result
            ? { publicKey: result.publicKey, account: result.account }
            : null;
    });
}
async function getMultipleAccountsAndContext(connection, publicKeys, commitment) {
    if (publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {
        return await getMultipleAccountsAndContextCore(connection, publicKeys, commitment);
    }
    else {
        const batches = chunks(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);
        const results = await Promise.all(batches.map((batch) => getMultipleAccountsAndContextCore(connection, batch, commitment)));
        return results.flat();
    }
}
async function getMultipleAccountsAndContextCore(connection, publicKeys, commitmentOverride) {
    const commitment = commitmentOverride !== null && commitmentOverride !== void 0 ? commitmentOverride : connection.commitment;
    const { value: accountInfos, context } = await connection.getMultipleAccountsInfoAndContext(publicKeys, commitment);
    const accounts = accountInfos.map((account, idx) => {
        if (account === null) {
            return null;
        }
        return {
            publicKey: publicKeys[idx],
            account,
            context,
        };
    });
    return accounts;
}
// copy from @solana/web3.js that has a commitment param
async function simulateTransaction(connection, transaction, signers, commitment, includeAccounts) {
    var _a;
    if (signers && signers.length > 0) {
        transaction.sign(...signers);
    }
    // @ts-expect-error
    const message = transaction._compile();
    const signData = message.serialize();
    // @ts-expect-error
    const wireTransaction = transaction._serialize(signData);
    const encodedTransaction = wireTransaction.toString("base64");
    const config = {
        encoding: "base64",
        commitment: commitment !== null && commitment !== void 0 ? commitment : connection.commitment,
    };
    if (includeAccounts) {
        const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map((key) => key.toBase58());
        config["accounts"] = {
            encoding: "base64",
            addresses,
        };
    }
    if (signers) {
        config.sigVerify = true;
    }
    const args = [encodedTransaction, config];
    // @ts-expect-error
    const unsafeRes = await connection._rpcRequest("simulateTransaction", args);
    const res = create(unsafeRes, SimulatedTransactionResponseStruct);
    if ("error" in res) {
        let logs;
        if ("data" in res.error) {
            logs = (_a = res.error.data) === null || _a === void 0 ? void 0 : _a.logs;
            if (logs && Array.isArray(logs)) {
                const traceIndent = "\n    ";
                const logTrace = traceIndent + logs.join(traceIndent);
                console.error(res.error.message, logTrace);
            }
        }
        throw new SendTransactionError("failed to simulate transaction: " + res.error.message, logs);
    }
    return res.result;
}
// copy from @solana/web3.js
function jsonRpcResult(schema) {
    return coerce(createRpcResult(schema), UnknownRpcResult, (value) => {
        if ("error" in value) {
            return value;
        }
        else {
            return {
                ...value,
                result: create(value.result, schema),
            };
        }
    });
}
// copy from @solana/web3.js
const UnknownRpcResult = createRpcResult(unknown());
// copy from @solana/web3.js
function createRpcResult(result) {
    return union$1([
        type({
            jsonrpc: literal("2.0"),
            id: string$8(),
            result,
        }),
        type({
            jsonrpc: literal("2.0"),
            id: string$8(),
            error: type({
                code: unknown(),
                message: string$8(),
                data: optional(any()),
            }),
        }),
    ]);
}
// copy from @solana/web3.js
function jsonRpcResultAndContext(value) {
    return jsonRpcResult(type({
        context: type({
            slot: number$5(),
        }),
        value,
    }));
}
// copy from @solana/web3.js
const SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({
    err: nullable$3(union$1([type({}), string$8()])),
    logs: nullable$3(array$6(string$8())),
    accounts: optional(nullable$3(array$6(nullable$3(type({
        executable: boolean$5(),
        owner: string$8(),
        lamports: number$5(),
        data: array$6(string$8()),
        rentEpoch: optional(number$5()),
    }))))),
    unitsConsumed: optional(number$5()),
}));

var rpc = /*#__PURE__*/Object.freeze({
    __proto__: null,
    invoke: invoke,
    getMultipleAccounts: getMultipleAccounts,
    getMultipleAccountsAndContext: getMultipleAccountsAndContext,
    simulateTransaction: simulateTransaction
});

/**
 * The network and wallet context used to send transactions paid for and signed
 * by the provider.
 */
class AnchorProvider {
    /**
     * @param connection The cluster connection where the program is deployed.
     * @param wallet     The wallet used to pay for and sign all transactions.
     * @param opts       Transaction confirmation options to use by default.
     */
    constructor(connection, wallet, opts) {
        this.connection = connection;
        this.wallet = wallet;
        this.opts = opts;
        this.publicKey = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey;
    }
    static defaultOptions() {
        return {
            preflightCommitment: "processed",
            commitment: "processed",
        };
    }
    /**
     * Returns a `Provider` with a wallet read from the local filesystem.
     *
     * @param url  The network cluster url.
     * @param opts The default transaction confirmation options.
     *
     * (This api is for Node only.)
     */
    static local(url, opts) {
        {
            throw new Error(`Provider local is not available on browser.`);
        }
    }
    /**
     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment
     * variable
     *
     * (This api is for Node only.)
     */
    static env() {
        {
            throw new Error(`Provider env is not available on browser.`);
        }
    }
    /**
     * Sends the given transaction, paid for and signed by the provider's wallet.
     *
     * @param tx      The transaction to send.
     * @param signers The signers of the transaction.
     * @param opts    Transaction confirmation options.
     */
    async sendAndConfirm(tx, signers, opts) {
        var _a, _b, _c, _d;
        if (opts === undefined) {
            opts = this.opts;
        }
        if (isVersionedTransaction(tx)) {
            if (signers) {
                tx.sign(signers);
            }
        }
        else {
            tx.feePayer = (_a = tx.feePayer) !== null && _a !== void 0 ? _a : this.wallet.publicKey;
            tx.recentBlockhash = (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash;
            if (signers) {
                for (const signer of signers) {
                    tx.partialSign(signer);
                }
            }
        }
        tx = await this.wallet.signTransaction(tx);
        const rawTx = tx.serialize();
        try {
            return await sendAndConfirmRawTransaction(this.connection, rawTx, opts);
        }
        catch (err) {
            // thrown if the underlying 'confirmTransaction' encounters a failed tx
            // the 'confirmTransaction' error does not return logs so we make another rpc call to get them
            if (err instanceof ConfirmError) {
                // choose the shortest available commitment for 'getTransaction'
                // (the json RPC does not support any shorter than "confirmed" for 'getTransaction')
                // because that will see the tx sent with `sendAndConfirmRawTransaction` no matter which
                // commitment `sendAndConfirmRawTransaction` used
                const txSig = encode$1$1(isVersionedTransaction(tx)
                    ? ((_b = tx.signatures) === null || _b === void 0 ? void 0 : _b[0]) || new Uint8Array()
                    : (_c = tx.signature) !== null && _c !== void 0 ? _c : new Uint8Array());
                const failedTx = await this.connection.getTransaction(txSig, {
                    commitment: "confirmed",
                });
                if (!failedTx) {
                    throw err;
                }
                else {
                    const logs = (_d = failedTx.meta) === null || _d === void 0 ? void 0 : _d.logMessages;
                    throw !logs ? err : new SendTransactionError(err.message, logs);
                }
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Similar to `send`, but for an array of transactions and signers.
     * All transactions need to be of the same type, it doesn't support a mix of `VersionedTransaction`s and `Transaction`s.
     *
     * @param txWithSigners Array of transactions and signers.
     * @param opts          Transaction confirmation options.
     */
    async sendAll(txWithSigners, opts) {
        var _a, _b, _c;
        if (opts === undefined) {
            opts = this.opts;
        }
        const recentBlockhash = (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash;
        let txs = txWithSigners.map((r) => {
            var _a, _b;
            if (isVersionedTransaction(r.tx)) {
                let tx = r.tx;
                if (r.signers) {
                    tx.sign(r.signers);
                }
                return tx;
            }
            else {
                let tx = r.tx;
                let signers = (_a = r.signers) !== null && _a !== void 0 ? _a : [];
                tx.feePayer = (_b = tx.feePayer) !== null && _b !== void 0 ? _b : this.wallet.publicKey;
                tx.recentBlockhash = recentBlockhash;
                signers.forEach((kp) => {
                    tx.partialSign(kp);
                });
                return tx;
            }
        });
        const signedTxs = await this.wallet.signAllTransactions(txs);
        const sigs = [];
        for (let k = 0; k < txs.length; k += 1) {
            const tx = signedTxs[k];
            const rawTx = tx.serialize();
            try {
                sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));
            }
            catch (err) {
                // thrown if the underlying 'confirmTransaction' encounters a failed tx
                // the 'confirmTransaction' error does not return logs so we make another rpc call to get them
                if (err instanceof ConfirmError) {
                    // choose the shortest available commitment for 'getTransaction'
                    // (the json RPC does not support any shorter than "confirmed" for 'getTransaction')
                    // because that will see the tx sent with `sendAndConfirmRawTransaction` no matter which
                    // commitment `sendAndConfirmRawTransaction` used
                    const txSig = encode$1$1(isVersionedTransaction(tx)
                        ? ((_a = tx.signatures) === null || _a === void 0 ? void 0 : _a[0]) || new Uint8Array()
                        : (_b = tx.signature) !== null && _b !== void 0 ? _b : new Uint8Array());
                    const failedTx = await this.connection.getTransaction(txSig, {
                        commitment: "confirmed",
                    });
                    if (!failedTx) {
                        throw err;
                    }
                    else {
                        const logs = (_c = failedTx.meta) === null || _c === void 0 ? void 0 : _c.logMessages;
                        throw !logs ? err : new SendTransactionError(err.message, logs);
                    }
                }
                else {
                    throw err;
                }
            }
        }
        return sigs;
    }
    /**
     * Simulates the given transaction, returning emitted logs from execution.
     *
     * @param tx      The transaction to send.
     * @param signers The signers of the transaction. If unset, the transaction
     *                will be simulated with the "sigVerify: false" option. This
     *                allows for simulation of transactions without asking the
     *                wallet for a signature.
     * @param opts    Transaction confirmation options.
     */
    async simulate(tx, signers, commitment, includeAccounts) {
        let recentBlockhash = (await this.connection.getLatestBlockhash(commitment !== null && commitment !== void 0 ? commitment : this.connection.commitment)).blockhash;
        let result;
        if (isVersionedTransaction(tx)) {
            if (signers) {
                tx.sign(signers);
                tx = await this.wallet.signTransaction(tx);
            }
            // Doesn't support includeAccounts which has been changed to something
            // else in later versions of this function.
            result = await this.connection.simulateTransaction(tx, { commitment });
        }
        else {
            tx.feePayer = tx.feePayer || this.wallet.publicKey;
            tx.recentBlockhash = recentBlockhash;
            if (signers) {
                tx = await this.wallet.signTransaction(tx);
            }
            result = await simulateTransaction(this.connection, tx, signers, commitment, includeAccounts);
        }
        if (result.value.err) {
            throw new SimulateError(result.value);
        }
        return result.value;
    }
}
class SimulateError extends Error {
    constructor(simulationResponse, message) {
        super(message);
        this.simulationResponse = simulationResponse;
    }
}
// Copy of Connection.sendAndConfirmRawTransaction that throws
// a better error if 'confirmTransaction` returns an error status
async function sendAndConfirmRawTransaction(connection, rawTransaction, options) {
    const sendOptions = options && {
        skipPreflight: options.skipPreflight,
        preflightCommitment: options.preflightCommitment || options.commitment,
    };
    const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);
    const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;
    if (status.err) {
        throw new ConfirmError(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);
    }
    return signature;
}
class ConfirmError extends Error {
    constructor(message) {
        super(message);
    }
}
/**
 * Sets the default provider on the client.
 */
function setProvider(provider) {
    _provider = provider;
}
/**
 * Returns the default provider being used by the client.
 */
function getProvider() {
    if (_provider === null) {
        return AnchorProvider.local();
    }
    return _provider;
}
// Global provider used as the default when a provider is not given.
let _provider = null;

const _AVAILABLE_FEATURES = new Set(["anchor-deprecated-state", "debug-logs"]);
const _FEATURES = new Map();
function set$3(key) {
    if (!_AVAILABLE_FEATURES.has(key)) {
        throw new Error("Invalid feature");
    }
    _FEATURES.set(key, true);
}
function isSet(key) {
    return _FEATURES.get(key) !== undefined;
}

var features = /*#__PURE__*/Object.freeze({
    __proto__: null,
    set: set$3,
    isSet: isSet
});

class IdlError extends Error {
    constructor(message) {
        super(message);
        this.name = "IdlError";
    }
}
class ProgramErrorStack {
    constructor(stack) {
        this.stack = stack;
    }
    static parse(logs) {
        var _a;
        const programKeyRegex = /^Program (\w*) invoke/;
        const successRegex = /^Program \w* success/;
        const programStack = [];
        for (let i = 0; i < logs.length; i++) {
            if (successRegex.exec(logs[i])) {
                programStack.pop();
                continue;
            }
            const programKey = (_a = programKeyRegex.exec(logs[i])) === null || _a === void 0 ? void 0 : _a[1];
            if (!programKey) {
                continue;
            }
            programStack.push(new PublicKey(programKey));
        }
        return new ProgramErrorStack(programStack);
    }
}
class AnchorError extends Error {
    constructor(errorCode, errorMessage, errorLogs, logs, origin, comparedValues) {
        super(errorLogs.join("\n").replace("Program log: ", ""));
        this.errorLogs = errorLogs;
        this.logs = logs;
        this.error = { errorCode, errorMessage, comparedValues, origin };
        this._programErrorStack = ProgramErrorStack.parse(logs);
    }
    static parse(logs) {
        if (!logs) {
            return null;
        }
        const anchorErrorLogIndex = logs.findIndex((log) => log.startsWith("Program log: AnchorError"));
        if (anchorErrorLogIndex === -1) {
            return null;
        }
        const anchorErrorLog = logs[anchorErrorLogIndex];
        const errorLogs = [anchorErrorLog];
        let comparedValues;
        if (anchorErrorLogIndex + 1 < logs.length) {
            // This catches the comparedValues where the following is logged
            // <AnchorError>
            // Left:
            // <Pubkey>
            // Right:
            // <Pubkey>
            if (logs[anchorErrorLogIndex + 1] === "Program log: Left:") {
                const pubkeyRegex = /^Program log: (.*)$/;
                const leftPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 2])[1];
                const rightPubkey = pubkeyRegex.exec(logs[anchorErrorLogIndex + 4])[1];
                comparedValues = [
                    new PublicKey(leftPubkey),
                    new PublicKey(rightPubkey),
                ];
                errorLogs.push(...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 5));
            }
            // This catches the comparedValues where the following is logged
            // <AnchorError>
            // Left: <value>
            // Right: <value>
            else if (logs[anchorErrorLogIndex + 1].startsWith("Program log: Left:")) {
                const valueRegex = /^Program log: (Left|Right): (.*)$/;
                const leftValue = valueRegex.exec(logs[anchorErrorLogIndex + 1])[2];
                const rightValue = valueRegex.exec(logs[anchorErrorLogIndex + 2])[2];
                errorLogs.push(...logs.slice(anchorErrorLogIndex + 1, anchorErrorLogIndex + 3));
                comparedValues = [leftValue, rightValue];
            }
        }
        const regexNoInfo = /^Program log: AnchorError occurred\. Error Code: (.*)\. Error Number: (\d*)\. Error Message: (.*)\./;
        const noInfoAnchorErrorLog = regexNoInfo.exec(anchorErrorLog);
        const regexFileLine = /^Program log: AnchorError thrown in (.*):(\d*)\. Error Code: (.*)\. Error Number: (\d*)\. Error Message: (.*)\./;
        const fileLineAnchorErrorLog = regexFileLine.exec(anchorErrorLog);
        const regexAccountName = /^Program log: AnchorError caused by account: (.*)\. Error Code: (.*)\. Error Number: (\d*)\. Error Message: (.*)\./;
        const accountNameAnchorErrorLog = regexAccountName.exec(anchorErrorLog);
        if (noInfoAnchorErrorLog) {
            const [errorCodeString, errorNumber, errorMessage] = noInfoAnchorErrorLog.slice(1, 4);
            const errorCode = {
                code: errorCodeString,
                number: parseInt(errorNumber),
            };
            return new AnchorError(errorCode, errorMessage, errorLogs, logs, undefined, comparedValues);
        }
        else if (fileLineAnchorErrorLog) {
            const [file, line, errorCodeString, errorNumber, errorMessage] = fileLineAnchorErrorLog.slice(1, 6);
            const errorCode = {
                code: errorCodeString,
                number: parseInt(errorNumber),
            };
            const fileLine = { file, line: parseInt(line) };
            return new AnchorError(errorCode, errorMessage, errorLogs, logs, fileLine, comparedValues);
        }
        else if (accountNameAnchorErrorLog) {
            const [accountName, errorCodeString, errorNumber, errorMessage] = accountNameAnchorErrorLog.slice(1, 5);
            const origin = accountName;
            const errorCode = {
                code: errorCodeString,
                number: parseInt(errorNumber),
            };
            return new AnchorError(errorCode, errorMessage, errorLogs, logs, origin, comparedValues);
        }
        else {
            return null;
        }
    }
    get program() {
        return this._programErrorStack.stack[this._programErrorStack.stack.length - 1];
    }
    get programErrorStack() {
        return this._programErrorStack.stack;
    }
    toString() {
        return this.message;
    }
}
// An error from a user defined program.
let ProgramError$3 = class ProgramError extends Error {
    constructor(code, msg, logs) {
        super();
        this.code = code;
        this.msg = msg;
        this.logs = logs;
        if (logs) {
            this._programErrorStack = ProgramErrorStack.parse(logs);
        }
    }
    static parse(err, idlErrors) {
        const errString = err.toString();
        // TODO: don't rely on the error string. web3.js should preserve the error
        //       code information instead of giving us an untyped string.
        let unparsedErrorCode;
        if (errString.includes("custom program error:")) {
            let components = errString.split("custom program error: ");
            if (components.length !== 2) {
                return null;
            }
            else {
                unparsedErrorCode = components[1];
            }
        }
        else {
            const matches = errString.match(/"Custom":([0-9]+)}/g);
            if (!matches || matches.length > 1) {
                return null;
            }
            unparsedErrorCode = matches[0].match(/([0-9]+)/g)[0];
        }
        let errorCode;
        try {
            errorCode = parseInt(unparsedErrorCode);
        }
        catch (parseErr) {
            return null;
        }
        // Parse user error.
        let errorMsg = idlErrors.get(errorCode);
        if (errorMsg !== undefined) {
            return new ProgramError(errorCode, errorMsg, err.logs);
        }
        // Parse framework internal error.
        errorMsg = LangErrorMessage.get(errorCode);
        if (errorMsg !== undefined) {
            return new ProgramError(errorCode, errorMsg, err.logs);
        }
        // Unable to parse the error. Just return the untranslated error.
        return null;
    }
    get program() {
        var _a;
        return (_a = this._programErrorStack) === null || _a === void 0 ? void 0 : _a.stack[this._programErrorStack.stack.length - 1];
    }
    get programErrorStack() {
        var _a;
        return (_a = this._programErrorStack) === null || _a === void 0 ? void 0 : _a.stack;
    }
    toString() {
        return this.msg;
    }
};
function translateError(err, idlErrors) {
    if (isSet("debug-logs")) {
        console.log("Translating error:", err);
    }
    const anchorError = AnchorError.parse(err.logs);
    if (anchorError) {
        return anchorError;
    }
    const programError = ProgramError$3.parse(err, idlErrors);
    if (programError) {
        return programError;
    }
    if (err.logs) {
        const handler = {
            get: function (target, prop) {
                if (prop === "programErrorStack") {
                    return target.programErrorStack.stack;
                }
                else if (prop === "program") {
                    return target.programErrorStack.stack[err.programErrorStack.stack.length - 1];
                }
                else {
                    // this is the normal way to return all other props
                    // without modifying them.
                    // @ts-expect-error
                    return Reflect.get(...arguments);
                }
            },
        };
        err.programErrorStack = ProgramErrorStack.parse(err.logs);
        return new Proxy(err, handler);
    }
    return err;
}
const LangErrorCode = {
    // Instructions.
    InstructionMissing: 100,
    InstructionFallbackNotFound: 101,
    InstructionDidNotDeserialize: 102,
    InstructionDidNotSerialize: 103,
    // IDL instructions.
    IdlInstructionStub: 1000,
    IdlInstructionInvalidProgram: 1001,
    // Constraints.
    ConstraintMut: 2000,
    ConstraintHasOne: 2001,
    ConstraintSigner: 2002,
    ConstraintRaw: 2003,
    ConstraintOwner: 2004,
    ConstraintRentExempt: 2005,
    ConstraintSeeds: 2006,
    ConstraintExecutable: 2007,
    ConstraintState: 2008,
    ConstraintAssociated: 2009,
    ConstraintAssociatedInit: 2010,
    ConstraintClose: 2011,
    ConstraintAddress: 2012,
    ConstraintZero: 2013,
    ConstraintTokenMint: 2014,
    ConstraintTokenOwner: 2015,
    ConstraintMintMintAuthority: 2016,
    ConstraintMintFreezeAuthority: 2017,
    ConstraintMintDecimals: 2018,
    ConstraintSpace: 2019,
    ConstraintAccountIsNone: 2020,
    // Require.
    RequireViolated: 2500,
    RequireEqViolated: 2501,
    RequireKeysEqViolated: 2502,
    RequireNeqViolated: 2503,
    RequireKeysNeqViolated: 2504,
    RequireGtViolated: 2505,
    RequireGteViolated: 2506,
    // Accounts.
    AccountDiscriminatorAlreadySet: 3000,
    AccountDiscriminatorNotFound: 3001,
    AccountDiscriminatorMismatch: 3002,
    AccountDidNotDeserialize: 3003,
    AccountDidNotSerialize: 3004,
    AccountNotEnoughKeys: 3005,
    AccountNotMutable: 3006,
    AccountOwnedByWrongProgram: 3007,
    InvalidProgramId: 3008,
    InvalidProgramExecutable: 3009,
    AccountNotSigner: 3010,
    AccountNotSystemOwned: 3011,
    AccountNotInitialized: 3012,
    AccountNotProgramData: 3013,
    AccountNotAssociatedTokenAccount: 3014,
    AccountSysvarMismatch: 3015,
    AccountReallocExceedsLimit: 3016,
    AccountDuplicateReallocs: 3017,
    // Miscellaneous
    DeclaredProgramIdMismatch: 4100,
    // Used for APIs that shouldn't be used anymore.
    Deprecated: 5000,
};
const LangErrorMessage = new Map([
    // Instructions.
    [
        LangErrorCode.InstructionMissing,
        "8 byte instruction identifier not provided",
    ],
    [
        LangErrorCode.InstructionFallbackNotFound,
        "Fallback functions are not supported",
    ],
    [
        LangErrorCode.InstructionDidNotDeserialize,
        "The program could not deserialize the given instruction",
    ],
    [
        LangErrorCode.InstructionDidNotSerialize,
        "The program could not serialize the given instruction",
    ],
    // Idl instructions.
    [
        LangErrorCode.IdlInstructionStub,
        "The program was compiled without idl instructions",
    ],
    [
        LangErrorCode.IdlInstructionInvalidProgram,
        "The transaction was given an invalid program for the IDL instruction",
    ],
    // Constraints.
    [LangErrorCode.ConstraintMut, "A mut constraint was violated"],
    [LangErrorCode.ConstraintHasOne, "A has one constraint was violated"],
    [LangErrorCode.ConstraintSigner, "A signer constraint was violated"],
    [LangErrorCode.ConstraintRaw, "A raw constraint was violated"],
    [LangErrorCode.ConstraintOwner, "An owner constraint was violated"],
    [
        LangErrorCode.ConstraintRentExempt,
        "A rent exemption constraint was violated",
    ],
    [LangErrorCode.ConstraintSeeds, "A seeds constraint was violated"],
    [LangErrorCode.ConstraintExecutable, "An executable constraint was violated"],
    [
        LangErrorCode.ConstraintState,
        "Deprecated Error, feel free to replace with something else",
    ],
    [LangErrorCode.ConstraintAssociated, "An associated constraint was violated"],
    [
        LangErrorCode.ConstraintAssociatedInit,
        "An associated init constraint was violated",
    ],
    [LangErrorCode.ConstraintClose, "A close constraint was violated"],
    [LangErrorCode.ConstraintAddress, "An address constraint was violated"],
    [LangErrorCode.ConstraintZero, "Expected zero account discriminant"],
    [LangErrorCode.ConstraintTokenMint, "A token mint constraint was violated"],
    [LangErrorCode.ConstraintTokenOwner, "A token owner constraint was violated"],
    [
        LangErrorCode.ConstraintMintMintAuthority,
        "A mint mint authority constraint was violated",
    ],
    [
        LangErrorCode.ConstraintMintFreezeAuthority,
        "A mint freeze authority constraint was violated",
    ],
    [
        LangErrorCode.ConstraintMintDecimals,
        "A mint decimals constraint was violated",
    ],
    [LangErrorCode.ConstraintSpace, "A space constraint was violated"],
    [
        LangErrorCode.ConstraintAccountIsNone,
        "A required account for the constraint is None",
    ],
    // Require.
    [LangErrorCode.RequireViolated, "A require expression was violated"],
    [LangErrorCode.RequireEqViolated, "A require_eq expression was violated"],
    [
        LangErrorCode.RequireKeysEqViolated,
        "A require_keys_eq expression was violated",
    ],
    [LangErrorCode.RequireNeqViolated, "A require_neq expression was violated"],
    [
        LangErrorCode.RequireKeysNeqViolated,
        "A require_keys_neq expression was violated",
    ],
    [LangErrorCode.RequireGtViolated, "A require_gt expression was violated"],
    [LangErrorCode.RequireGteViolated, "A require_gte expression was violated"],
    // Accounts.
    [
        LangErrorCode.AccountDiscriminatorAlreadySet,
        "The account discriminator was already set on this account",
    ],
    [
        LangErrorCode.AccountDiscriminatorNotFound,
        "No 8 byte discriminator was found on the account",
    ],
    [
        LangErrorCode.AccountDiscriminatorMismatch,
        "8 byte discriminator did not match what was expected",
    ],
    [LangErrorCode.AccountDidNotDeserialize, "Failed to deserialize the account"],
    [LangErrorCode.AccountDidNotSerialize, "Failed to serialize the account"],
    [
        LangErrorCode.AccountNotEnoughKeys,
        "Not enough account keys given to the instruction",
    ],
    [LangErrorCode.AccountNotMutable, "The given account is not mutable"],
    [
        LangErrorCode.AccountOwnedByWrongProgram,
        "The given account is owned by a different program than expected",
    ],
    [LangErrorCode.InvalidProgramId, "Program ID was not as expected"],
    [LangErrorCode.InvalidProgramExecutable, "Program account is not executable"],
    [LangErrorCode.AccountNotSigner, "The given account did not sign"],
    [
        LangErrorCode.AccountNotSystemOwned,
        "The given account is not owned by the system program",
    ],
    [
        LangErrorCode.AccountNotInitialized,
        "The program expected this account to be already initialized",
    ],
    [
        LangErrorCode.AccountNotProgramData,
        "The given account is not a program data account",
    ],
    [
        LangErrorCode.AccountNotAssociatedTokenAccount,
        "The given account is not the associated token account",
    ],
    [
        LangErrorCode.AccountSysvarMismatch,
        "The given public key does not match the required sysvar",
    ],
    [
        LangErrorCode.AccountReallocExceedsLimit,
        "The account reallocation exceeds the MAX_PERMITTED_DATA_INCREASE limit",
    ],
    [
        LangErrorCode.AccountDuplicateReallocs,
        "The account was duplicated for more than one reallocation",
    ],
    // Miscellaneous
    [
        LangErrorCode.DeclaredProgramIdMismatch,
        "The declared program id does not match the actual program id",
    ],
    // Deprecated
    [
        LangErrorCode.Deprecated,
        "The API being used is deprecated and should no longer be used",
    ],
]);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign$1 = function() {
    __assign$1 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 */
/**
 * Lower case as a function.
 */
function lowerCase(str) {
    return str.toLowerCase();
}

// Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
// Remove all non-word characters.
var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
/**
 * Normalize the string into something other libraries can manipulate easier.
 */
function noCase(input, options) {
    if (options === void 0) { options = {}; }
    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
    var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
    var start = 0;
    var end = result.length;
    // Trim the delimiter from around the output string.
    while (result.charAt(start) === "\0")
        start++;
    while (result.charAt(end - 1) === "\0")
        end--;
    // Transform each token independently.
    return result.slice(start, end).split("\0").map(transform).join(delimiter);
}
/**
 * Replace `re` in the input string with the replacement value.
 */
function replace(input, re, value) {
    if (re instanceof RegExp)
        return input.replace(re, value);
    return re.reduce(function (input, re) { return input.replace(re, value); }, input);
}

function dotCase(input, options) {
    if (options === void 0) { options = {}; }
    return noCase(input, __assign({ delimiter: "." }, options));
}

function snakeCase(input, options) {
    if (options === void 0) { options = {}; }
    return dotCase(input, __assign$1({ delimiter: "_" }, options));
}

class IdlCoder {
    static fieldLayout(field, types) {
        const fieldName = field.name !== undefined ? camelCase$1(field.name) : undefined;
        switch (field.type) {
            case "bool": {
                return dist.bool(fieldName);
            }
            case "u8": {
                return dist.u8(fieldName);
            }
            case "i8": {
                return dist.i8(fieldName);
            }
            case "u16": {
                return dist.u16(fieldName);
            }
            case "i16": {
                return dist.i16(fieldName);
            }
            case "u32": {
                return dist.u32(fieldName);
            }
            case "i32": {
                return dist.i32(fieldName);
            }
            case "f32": {
                return dist.f32(fieldName);
            }
            case "u64": {
                return dist.u64(fieldName);
            }
            case "i64": {
                return dist.i64(fieldName);
            }
            case "f64": {
                return dist.f64(fieldName);
            }
            case "u128": {
                return dist.u128(fieldName);
            }
            case "i128": {
                return dist.i128(fieldName);
            }
            case "u256": {
                return dist.u256(fieldName);
            }
            case "i256": {
                return dist.i256(fieldName);
            }
            case "bytes": {
                return dist.vecU8(fieldName);
            }
            case "string": {
                return dist.str(fieldName);
            }
            case "publicKey": {
                return dist.publicKey(fieldName);
            }
            default: {
                if ("vec" in field.type) {
                    return dist.vec(IdlCoder.fieldLayout({
                        name: undefined,
                        type: field.type.vec,
                    }, types), fieldName);
                }
                else if ("option" in field.type) {
                    return dist.option(IdlCoder.fieldLayout({
                        name: undefined,
                        type: field.type.option,
                    }, types), fieldName);
                }
                else if ("defined" in field.type) {
                    const defined = field.type.defined;
                    // User defined type.
                    if (types === undefined) {
                        throw new IdlError("User defined types not provided");
                    }
                    const filtered = types.filter((t) => t.name === defined);
                    if (filtered.length !== 1) {
                        throw new IdlError(`Type not found: ${JSON.stringify(field)}`);
                    }
                    return IdlCoder.typeDefLayout(filtered[0], types, fieldName);
                }
                else if ("array" in field.type) {
                    let arrayTy = field.type.array[0];
                    let arrayLen = field.type.array[1];
                    let innerLayout = IdlCoder.fieldLayout({
                        name: undefined,
                        type: arrayTy,
                    }, types);
                    return dist.array(innerLayout, arrayLen, fieldName);
                }
                else {
                    throw new Error(`Not yet implemented: ${field}`);
                }
            }
        }
    }
    static typeDefLayout(typeDef, types = [], name) {
        if (typeDef.type.kind === "struct") {
            const fieldLayouts = typeDef.type.fields.map((field) => {
                const x = IdlCoder.fieldLayout(field, types);
                return x;
            });
            return dist.struct(fieldLayouts, name);
        }
        else if (typeDef.type.kind === "enum") {
            let variants = typeDef.type.variants.map((variant) => {
                const name = camelCase$1(variant.name);
                if (variant.fields === undefined) {
                    return dist.struct([], name);
                }
                const fieldLayouts = variant.fields.map((f, i) => {
                    if (!f.hasOwnProperty("name")) {
                        return IdlCoder.fieldLayout({ type: f, name: i.toString() }, types);
                    }
                    // this typescript conversion is ok
                    // because if f were of type IdlType
                    // (that does not have a name property)
                    // the check before would've errored
                    return IdlCoder.fieldLayout(f, types);
                });
                return dist.struct(fieldLayouts, name);
            });
            if (name !== undefined) {
                // Buffer-layout lib requires the name to be null (on construction)
                // when used as a field.
                return dist.rustEnum(variants).replicate(name);
            }
            return dist.rustEnum(variants, name);
        }
        else {
            throw new Error(`Unknown type kint: ${typeDef}`);
        }
    }
}

/**
 * Namespace for global instruction function signatures (i.e. functions
 * that aren't namespaced by the state or any of its trait implementations).
 */
const SIGHASH_GLOBAL_NAMESPACE = "global";
/**
 * Encodes and decodes program instructions.
 */
class BorshInstructionCoder {
    constructor(idl) {
        this.idl = idl;
        this.ixLayout = BorshInstructionCoder.parseIxLayout(idl);
        const sighashLayouts = new Map();
        idl.instructions.forEach((ix) => {
            const sh = sighash(SIGHASH_GLOBAL_NAMESPACE, ix.name);
            sighashLayouts.set(bs58$1$1.encode(sh), {
                layout: this.ixLayout.get(ix.name),
                name: ix.name,
            });
        });
        this.sighashLayouts = sighashLayouts;
    }
    /**
     * Encodes a program instruction.
     */
    encode(ixName, ix) {
        return this._encode(SIGHASH_GLOBAL_NAMESPACE, ixName, ix);
    }
    _encode(nameSpace, ixName, ix) {
        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
        const methodName = camelCase$1(ixName);
        const layout = this.ixLayout.get(methodName);
        if (!layout) {
            throw new Error(`Unknown method: ${methodName}`);
        }
        const len = layout.encode(ix, buffer);
        const data = buffer.slice(0, len);
        return Buffer.concat([sighash(nameSpace, ixName), data]);
    }
    static parseIxLayout(idl) {
        const ixLayouts = idl.instructions.map((ix) => {
            let fieldLayouts = ix.args.map((arg) => {
                var _a, _b;
                return IdlCoder.fieldLayout(arg, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));
            });
            const name = camelCase$1(ix.name);
            return [name, dist.struct(fieldLayouts, name)];
        });
        return new Map(ixLayouts);
    }
    /**
     * Decodes a program instruction.
     */
    decode(ix, encoding = "hex") {
        if (typeof ix === "string") {
            ix = encoding === "hex" ? Buffer.from(ix, "hex") : bs58$1$1.decode(ix);
        }
        let sighash = bs58$1$1.encode(ix.slice(0, 8));
        let data = ix.slice(8);
        const decoder = this.sighashLayouts.get(sighash);
        if (!decoder) {
            return null;
        }
        return {
            data: decoder.layout.decode(data),
            name: decoder.name,
        };
    }
    /**
     * Returns a formatted table of all the fields in the given instruction data.
     */
    format(ix, accountMetas) {
        return InstructionFormatter.format(ix, accountMetas, this.idl);
    }
}
class InstructionFormatter {
    static format(ix, accountMetas, idl) {
        const idlIx = idl.instructions.filter((i) => ix.name === i.name)[0];
        if (idlIx === undefined) {
            console.error("Invalid instruction given");
            return null;
        }
        const args = idlIx.args.map((idlField) => {
            return {
                name: idlField.name,
                type: InstructionFormatter.formatIdlType(idlField.type),
                data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types),
            };
        });
        const flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);
        const accounts = accountMetas.map((meta, idx) => {
            if (idx < flatIdlAccounts.length) {
                return {
                    name: flatIdlAccounts[idx].name,
                    ...meta,
                };
            }
            // "Remaining accounts" are unnamed in Anchor.
            else {
                return {
                    name: undefined,
                    ...meta,
                };
            }
        });
        return {
            args,
            accounts,
        };
    }
    static formatIdlType(idlType) {
        if (typeof idlType === "string") {
            return idlType;
        }
        if ("vec" in idlType) {
            return `Vec<${this.formatIdlType(idlType.vec)}>`;
        }
        if ("option" in idlType) {
            return `Option<${this.formatIdlType(idlType.option)}>`;
        }
        if ("defined" in idlType) {
            return idlType.defined;
        }
        if ("array" in idlType) {
            return `Array<${idlType.array[0]}; ${idlType.array[1]}>`;
        }
        throw new Error(`Unknown IDL type: ${idlType}`);
    }
    static formatIdlData(idlField, data, types) {
        if (typeof idlField.type === "string") {
            return data.toString();
        }
        if (idlField.type.hasOwnProperty("vec")) {
            return ("[" +
                data
                    .map((d) => this.formatIdlData({ name: "", type: idlField.type.vec }, d))
                    .join(", ") +
                "]");
        }
        if (idlField.type.hasOwnProperty("option")) {
            return data === null
                ? "null"
                : this.formatIdlData({ name: "", type: idlField.type.option }, data, types);
        }
        if (idlField.type.hasOwnProperty("defined")) {
            if (types === undefined) {
                throw new Error("User defined types not provided");
            }
            const filtered = types.filter((t) => t.name === idlField.type.defined);
            if (filtered.length !== 1) {
                throw new Error(`Type not found: ${idlField.type.defined}`);
            }
            return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);
        }
        return "unknown";
    }
    static formatIdlDataDefined(typeDef, data, types) {
        if (typeDef.type.kind === "struct") {
            const struct = typeDef.type;
            const fields = Object.keys(data)
                .map((k) => {
                const f = struct.fields.filter((f) => f.name === k)[0];
                if (f === undefined) {
                    throw new Error("Unable to find type");
                }
                return (k + ": " + InstructionFormatter.formatIdlData(f, data[k], types));
            })
                .join(", ");
            return "{ " + fields + " }";
        }
        else {
            if (typeDef.type.variants.length === 0) {
                return "{}";
            }
            // Struct enum.
            if (typeDef.type.variants[0].name) {
                const variants = typeDef.type.variants;
                const variant = Object.keys(data)[0];
                const enumType = data[variant];
                const namedFields = Object.keys(enumType)
                    .map((f) => {
                    var _a;
                    const fieldData = enumType[f];
                    const idlField = (_a = variants[variant]) === null || _a === void 0 ? void 0 : _a.filter((v) => v.name === f)[0];
                    if (idlField === undefined) {
                        throw new Error("Unable to find variant");
                    }
                    return (f +
                        ": " +
                        InstructionFormatter.formatIdlData(idlField, fieldData, types));
                })
                    .join(", ");
                const variantName = camelCase$1(variant, { pascalCase: true });
                if (namedFields.length === 0) {
                    return variantName;
                }
                return `${variantName} { ${namedFields} }`;
            }
            // Tuple enum.
            else {
                // TODO.
                return "Tuple formatting not yet implemented";
            }
        }
    }
    static flattenIdlAccounts(accounts, prefix) {
        return accounts
            .map((account) => {
            const accName = sentenceCase(account.name);
            if (account.hasOwnProperty("accounts")) {
                const newPrefix = prefix ? `${prefix} > ${accName}` : accName;
                return InstructionFormatter.flattenIdlAccounts(account.accounts, newPrefix);
            }
            else {
                return {
                    ...account,
                    name: prefix ? `${prefix} > ${accName}` : accName,
                };
            }
        })
            .flat();
    }
}
function sentenceCase(field) {
    const result = field.replace(/([A-Z])/g, " $1");
    return result.charAt(0).toUpperCase() + result.slice(1);
}
// Not technically sighash, since we don't include the arguments, as Rust
// doesn't allow function overloading.
function sighash(nameSpace, ixName) {
    let name = snakeCase(ixName);
    let preimage = `${nameSpace}:${name}`;
    return Buffer.from(sha256$2(preimage).slice(0, 8));
}

function accountSize(idl, idlAccount) {
    if (idlAccount.type.kind === "enum") {
        const variantSizes = idlAccount.type.variants.map((variant) => {
            if (!variant.fields) {
                return 0;
            }
            return variant.fields
                .map((f) => {
                // Unnamed enum variant
                if (!(typeof f === "object" && "name" in f)) {
                    return typeSize(idl, f);
                }
                // Named enum variant
                return typeSize(idl, f.type);
            })
                .reduce((acc, size) => acc + size, 0);
        });
        return Math.max(...variantSizes) + 1;
    }
    return idlAccount.type.fields
        .map((f) => typeSize(idl, f.type))
        .reduce((acc, size) => acc + size, 0);
}
// Returns the size of the type in bytes. For variable length types, just return
// 1. Users should override this value in such cases.
function typeSize(idl, ty) {
    var _a, _b;
    switch (ty) {
        case "bool":
            return 1;
        case "u8":
            return 1;
        case "i8":
            return 1;
        case "i16":
            return 2;
        case "u16":
            return 2;
        case "u32":
            return 4;
        case "i32":
            return 4;
        case "f32":
            return 4;
        case "u64":
            return 8;
        case "i64":
            return 8;
        case "f64":
            return 8;
        case "u128":
            return 16;
        case "i128":
            return 16;
        case "u256":
            return 32;
        case "i256":
            return 32;
        case "bytes":
            return 1;
        case "string":
            return 1;
        case "publicKey":
            return 32;
        default:
            if ("vec" in ty) {
                return 1;
            }
            if ("option" in ty) {
                return 1 + typeSize(idl, ty.option);
            }
            if ("coption" in ty) {
                return 4 + typeSize(idl, ty.coption);
            }
            if ("defined" in ty) {
                const filtered = (_b = (_a = idl.types) === null || _a === void 0 ? void 0 : _a.filter((t) => t.name === ty.defined)) !== null && _b !== void 0 ? _b : [];
                if (filtered.length !== 1) {
                    throw new IdlError(`Type not found: ${JSON.stringify(ty)}`);
                }
                let typeDef = filtered[0];
                return accountSize(idl, typeDef);
            }
            if ("array" in ty) {
                let arrayTy = ty.array[0];
                let arraySize = ty.array[1];
                return typeSize(idl, arrayTy) * arraySize;
            }
            throw new Error(`Invalid type ${JSON.stringify(ty)}`);
    }
}

/**
 * Number of bytes in anchor discriminators
 */
const DISCRIMINATOR_SIZE = 8;
function discriminator(preimage) {
    return Buffer.from(sha256$2(preimage).slice(0, DISCRIMINATOR_SIZE));
}

/**
 * Encodes and decodes account objects.
 */
class BorshAccountsCoder {
    constructor(idl) {
        if (idl.accounts === undefined) {
            this.accountLayouts = new Map();
            return;
        }
        const layouts = idl.accounts.map((acc) => {
            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];
        });
        this.accountLayouts = new Map(layouts);
        this.idl = idl;
    }
    async encode(accountName, account) {
        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
        const layout = this.accountLayouts.get(accountName);
        if (!layout) {
            throw new Error(`Unknown account: ${accountName}`);
        }
        const len = layout.encode(account, buffer);
        let accountData = buffer.slice(0, len);
        let discriminator = BorshAccountsCoder.accountDiscriminator(accountName);
        return Buffer.concat([discriminator, accountData]);
    }
    decode(accountName, data) {
        // Assert the account discriminator is correct.
        const discriminator = BorshAccountsCoder.accountDiscriminator(accountName);
        if (discriminator.compare(data.slice(0, 8))) {
            throw new Error("Invalid account discriminator");
        }
        return this.decodeUnchecked(accountName, data);
    }
    decodeAny(data) {
        const accountDescriminator = data.slice(0, 8);
        const accountName = Array.from(this.accountLayouts.keys()).find((key) => BorshAccountsCoder.accountDiscriminator(key).equals(accountDescriminator));
        if (!accountName) {
            throw new Error("Account descriminator not found");
        }
        return this.decodeUnchecked(accountName, data);
    }
    decodeUnchecked(accountName, ix) {
        // Chop off the discriminator before decoding.
        const data = ix.subarray(DISCRIMINATOR_SIZE);
        const layout = this.accountLayouts.get(accountName);
        if (!layout) {
            throw new Error(`Unknown account: ${accountName}`);
        }
        return layout.decode(data);
    }
    memcmp(accountName, appendData) {
        const discriminator = BorshAccountsCoder.accountDiscriminator(accountName);
        return {
            offset: 0,
            bytes: bs58$1$1.encode(appendData ? Buffer.concat([discriminator, appendData]) : discriminator),
        };
    }
    size(idlAccount) {
        var _a;
        return DISCRIMINATOR_SIZE + ((_a = accountSize(this.idl, idlAccount)) !== null && _a !== void 0 ? _a : 0);
    }
    /**
     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.
     *
     * @param name The name of the account to calculate the discriminator.
     */
    static accountDiscriminator(name) {
        const discriminatorPreimage = `account:${camelCase$1(name, {
            pascalCase: true,
            preserveConsecutiveUppercase: true,
        })}`;
        return discriminator(discriminatorPreimage);
    }
}

class BorshEventCoder {
    constructor(idl) {
        if (idl.events === undefined) {
            this.layouts = new Map();
            return;
        }
        const layouts = idl.events.map((event) => {
            let eventTypeDef = {
                name: event.name,
                type: {
                    kind: "struct",
                    fields: event.fields.map((f) => {
                        return { name: f.name, type: f.type };
                    }),
                },
            };
            return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];
        });
        this.layouts = new Map(layouts);
        this.discriminators = new Map(idl.events === undefined
            ? []
            : idl.events.map((e) => [
                fromByteArray_1(eventDiscriminator(e.name)),
                e.name,
            ]));
    }
    decode(log) {
        let logArr;
        // This will throw if log length is not a multiple of 4.
        try {
            logArr = Buffer.from(toByteArray_1(log));
        }
        catch (e) {
            return null;
        }
        const disc = fromByteArray_1(logArr.slice(0, 8));
        // Only deserialize if the discriminator implies a proper event.
        const eventName = this.discriminators.get(disc);
        if (eventName === undefined) {
            return null;
        }
        const layout = this.layouts.get(eventName);
        if (!layout) {
            throw new Error(`Unknown event: ${eventName}`);
        }
        const data = layout.decode(logArr.slice(8));
        return { data, name: eventName };
    }
}
function eventDiscriminator(name) {
    return discriminator(`event:${name}`);
}

/**
 * Encodes and decodes user-defined types.
 */
class BorshTypesCoder {
    constructor(idl) {
        if (idl.types === undefined) {
            this.typeLayouts = new Map();
            return;
        }
        const layouts = idl.types.map((acc) => {
            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];
        });
        this.typeLayouts = new Map(layouts);
        this.idl = idl;
    }
    encode(typeName, type) {
        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.
        const layout = this.typeLayouts.get(typeName);
        if (!layout) {
            throw new Error(`Unknown type: ${typeName}`);
        }
        const len = layout.encode(type, buffer);
        return buffer.slice(0, len);
    }
    decode(typeName, typeData) {
        const layout = this.typeLayouts.get(typeName);
        if (!layout) {
            throw new Error(`Unknown type: ${typeName}`);
        }
        return layout.decode(typeData);
    }
}

/**
 * BorshCoder is the default Coder for Anchor programs implementing the
 * borsh based serialization interface.
 */
class BorshCoder {
    constructor(idl) {
        this.instruction = new BorshInstructionCoder(idl);
        this.accounts = new BorshAccountsCoder(idl);
        this.events = new BorshEventCoder(idl);
        this.types = new BorshTypesCoder(idl);
    }
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs$1 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

/* The MIT License (MIT)
 *
 * Copyright 2015-2018 Peter A. Bigot
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Base class for layout objects.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support the {@link
 * Layout#encode|encode} or {@link Layout#decode|decode} functions.
 *
 * @param {Number} span - Initializer for {@link Layout#span|span}.  The
 * parameter must be an integer; a negative value signifies that the
 * span is {@link Layout#getSpan|value-specific}.
 *
 * @param {string} [property] - Initializer for {@link
 * Layout#property|property}.
 *
 * @abstract
 */
class Layout {
  constructor(span, property) {
    if (!Number.isInteger(span)) {
      throw new TypeError('span must be an integer');
    }

    /** The span of the layout in bytes.
     *
     * Positive values are generally expected.
     *
     * Zero will only appear in {@link Constant}s and in {@link
     * Sequence}s where the {@link Sequence#count|count} is zero.
     *
     * A negative value indicates that the span is value-specific, and
     * must be obtained using {@link Layout#getSpan|getSpan}. */
    this.span = span;

    /** The property name used when this layout is represented in an
     * Object.
     *
     * Used only for layouts that {@link Layout#decode|decode} to Object
     * instances.  If left undefined the span of the unnamed layout will
     * be treated as padding: it will not be mutated by {@link
     * Layout#encode|encode} nor represented as a property in the
     * decoded Object. */
    this.property = property;
  }

  /** Function to create an Object into which decoded properties will
   * be written.
   *
   * Used only for layouts that {@link Layout#decode|decode} to Object
   * instances, which means:
   * * {@link Structure}
   * * {@link Union}
   * * {@link VariantLayout}
   * * {@link BitStructure}
   *
   * If left undefined the JavaScript representation of these layouts
   * will be Object instances.
   *
   * See {@link bindConstructorLayout}.
   */
  makeDestinationObject() {
    return {};
  }

  /**
   * Decode from a Buffer into an JavaScript value.
   *
   * @param {Buffer} b - the buffer from which encoded data is read.
   *
   * @param {Number} [offset] - the offset at which the encoded data
   * starts.  If absent a zero offset is inferred.
   *
   * @returns {(Number|Array|Object)} - the value of the decoded data.
   *
   * @abstract
   */
  decode(b, offset) {
    throw new Error('Layout is abstract');
  }

  /**
   * Encode a JavaScript value into a Buffer.
   *
   * @param {(Number|Array|Object)} src - the value to be encoded into
   * the buffer.  The type accepted depends on the (sub-)type of {@link
   * Layout}.
   *
   * @param {Buffer} b - the buffer into which encoded data will be
   * written.
   *
   * @param {Number} [offset] - the offset at which the encoded data
   * starts.  If absent a zero offset is inferred.
   *
   * @returns {Number} - the number of bytes encoded, including the
   * space skipped for internal padding, but excluding data such as
   * {@link Sequence#count|lengths} when stored {@link
   * ExternalLayout|externally}.  This is the adjustment to `offset`
   * producing the offset where data for the next layout would be
   * written.
   *
   * @abstract
   */
  encode(src, b, offset) {
    throw new Error('Layout is abstract');
  }

  /**
   * Calculate the span of a specific instance of a layout.
   *
   * @param {Buffer} b - the buffer that contains an encoded instance.
   *
   * @param {Number} [offset] - the offset at which the encoded instance
   * starts.  If absent a zero offset is inferred.
   *
   * @return {Number} - the number of bytes covered by the layout
   * instance.  If this method is not overridden in a subclass the
   * definition-time constant {@link Layout#span|span} will be
   * returned.
   *
   * @throws {RangeError} - if the length of the value cannot be
   * determined.
   */
  getSpan(b, offset) {
    if (0 > this.span) {
      throw new RangeError('indeterminate span');
    }
    return this.span;
  }

  /**
   * Replicate the layout using a new property.
   *
   * This function must be used to get a structurally-equivalent layout
   * with a different name since all {@link Layout} instances are
   * immutable.
   *
   * **NOTE** This is a shallow copy.  All fields except {@link
   * Layout#property|property} are strictly equal to the origin layout.
   *
   * @param {String} property - the value for {@link
   * Layout#property|property} in the replica.
   *
   * @returns {Layout} - the copy with {@link Layout#property|property}
   * set to `property`.
   */
  replicate(property) {
    const rv = Object.create(this.constructor.prototype);
    Object.assign(rv, this);
    rv.property = property;
    return rv;
  }

  /**
   * Create an object from layout properties and an array of values.
   *
   * **NOTE** This function returns `undefined` if invoked on a layout
   * that does not return its value as an Object.  Objects are
   * returned for things that are a {@link Structure}, which includes
   * {@link VariantLayout|variant layouts} if they are structures, and
   * excludes {@link Union}s.  If you want this feature for a union
   * you must use {@link Union.getVariant|getVariant} to select the
   * desired layout.
   *
   * @param {Array} values - an array of values that correspond to the
   * default order for properties.  As with {@link Layout#decode|decode}
   * layout elements that have no property name are skipped when
   * iterating over the array values.  Only the top-level properties are
   * assigned; arguments are not assigned to properties of contained
   * layouts.  Any unused values are ignored.
   *
   * @return {(Object|undefined)}
   */
  fromArray(values) {
    return undefined;
  }
}
var Layout_2 = Layout;

/* Provide text that carries a name (such as for a function that will
 * be throwing an error) annotated with the property of a given layout
 * (such as one for which the value was unacceptable).
 *
 * @ignore */
function nameWithProperty(name, lo) {
  if (lo.property) {
    return name + '[' + lo.property + ']';
  }
  return name;
}

/**
 * An object that behaves like a layout but does not consume space
 * within its containing layout.
 *
 * This is primarily used to obtain metadata about a member, such as a
 * {@link OffsetLayout} that can provide data about a {@link
 * Layout#getSpan|value-specific span}.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support {@link
 * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @abstract
 * @augments {Layout}
 */
class ExternalLayout extends Layout {
  /**
   * Return `true` iff the external layout decodes to an unsigned
   * integer layout.
   *
   * In that case it can be used as the source of {@link
   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
   * or as {@link UnionLayoutDiscriminator#layout|external union
   * discriminators}.
   *
   * @abstract
   */
  isCount() {
    throw new Error('ExternalLayout is abstract');
  }
}

/**
 * An {@link ExternalLayout} that supports accessing a {@link Layout}
 * at a fixed offset from the start of another Layout.  The offset may
 * be before, within, or after the base layout.
 *
 * *Factory*: {@link module:Layout.offset|offset}
 *
 * @param {Layout} layout - initializer for {@link
 * OffsetLayout#layout|layout}, modulo `property`.
 *
 * @param {Number} [offset] - Initializes {@link
 * OffsetLayout#offset|offset}.  Defaults to zero.
 *
 * @param {string} [property] - Optional new property name for a
 * {@link Layout#replicate| replica} of `layout` to be used as {@link
 * OffsetLayout#layout|layout}.  If not provided the `layout` is used
 * unchanged.
 *
 * @augments {Layout}
 */
class OffsetLayout extends ExternalLayout {
  constructor(layout, offset, property) {
    if (!(layout instanceof Layout)) {
      throw new TypeError('layout must be a Layout');
    }

    if (undefined === offset) {
      offset = 0;
    } else if (!Number.isInteger(offset)) {
      throw new TypeError('offset must be integer or undefined');
    }

    super(layout.span, property || layout.property);

    /** The subordinated layout. */
    this.layout = layout;

    /** The location of {@link OffsetLayout#layout} relative to the
     * start of another layout.
     *
     * The value may be positive or negative, but an error will thrown
     * if at the point of use it goes outside the span of the Buffer
     * being accessed.  */
    this.offset = offset;
  }

  /** @override */
  isCount() {
    return ((this.layout instanceof UInt)
            || (this.layout instanceof UIntBE));
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return this.layout.decode(b, offset + this.offset);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return this.layout.encode(src, b, offset + this.offset);
  }
}

/**
 * Represent an unsigned integer in little-endian format.
 *
 * *Factory*: {@link module:Layout.u8|u8}, {@link
 *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
 *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
 *  module:Layout.u48|u48}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class UInt extends Layout {
  constructor(span, property) {
    super(span, property);
    if (6 < this.span) {
      throw new RangeError('span must not exceed 6 bytes');
    }
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readUIntLE(offset, this.span);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeUIntLE(src, offset, this.span);
    return this.span;
  }
}

/**
 * Represent an unsigned integer in big-endian format.
 *
 * *Factory*: {@link module:Layout.u8be|u8be}, {@link
 * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},
 * {@link module:Layout.u32be|u32be}, {@link
 * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}
 *
 * @param {Number} span - initializer for {@link Layout#span|span}.
 * The parameter can range from 1 through 6.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class UIntBE extends Layout {
  constructor(span, property) {
    super( span, property);
    if (6 < this.span) {
      throw new RangeError('span must not exceed 6 bytes');
    }
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    return b.readUIntBE(offset, this.span);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    b.writeUIntBE(src, offset, this.span);
    return this.span;
  }
}

const V2E32 = Math.pow(2, 32);

/* True modulus high and low 32-bit words, where low word is always
 * non-negative. */
function divmodInt64(src) {
  const hi32 = Math.floor(src / V2E32);
  const lo32 = src - (hi32 * V2E32);
  return {hi32, lo32};
}
/* Reconstruct Number from quotient and non-negative remainder */
function roundedInt64(hi32, lo32) {
  return hi32 * V2E32 + lo32;
}

/**
 * Represent an unsigned 64-bit integer in little-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.nu64|nu64}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
class NearUInt64 extends Layout {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const lo32 = b.readUInt32LE(offset);
    const hi32 = b.readUInt32LE(offset + 4);
    return roundedInt64(hi32, lo32);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const split = divmodInt64(src);
    b.writeUInt32LE(split.lo32, offset);
    b.writeUInt32LE(split.hi32, offset + 4);
    return 8;
  }
}

/**
 * Represent a signed 64-bit integer in little-endian format when
 * encoded and as a near integral JavaScript Number when decoded.
 *
 * *Factory*: {@link module:Layout.ns64|ns64}
 *
 * **NOTE** Values with magnitude greater than 2^52 may not decode to
 * the exact value of the encoded representation.
 *
 * @augments {Layout}
 */
class NearInt64 extends Layout {
  constructor(property) {
    super(8, property);
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const lo32 = b.readUInt32LE(offset);
    const hi32 = b.readInt32LE(offset + 4);
    return roundedInt64(hi32, lo32);
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const split = divmodInt64(src);
    b.writeUInt32LE(split.lo32, offset);
    b.writeInt32LE(split.hi32, offset + 4);
    return 8;
  }
}

/**
 * Represent a contiguous sequence of arbitrary layout elements as an
 * Object.
 *
 * *Factory*: {@link module:Layout.struct|struct}
 *
 * **NOTE** The {@link Layout#span|span} of the structure is variable
 * if any layout in {@link Structure#fields|fields} has a variable
 * span.  When {@link Layout#encode|encoding} we must have a value for
 * all variable-length fields, or we wouldn't be able to figure out
 * how much space to use for storage.  We can only identify the value
 * for a field when it has a {@link Layout#property|property}.  As
 * such, although a structure may contain both unnamed fields and
 * variable-length fields, it cannot contain an unnamed
 * variable-length field.
 *
 * @param {Layout[]} fields - initializer for {@link
 * Structure#fields|fields}.  An error is raised if this contains a
 * variable-length field for which a {@link Layout#property|property}
 * is not defined.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @param {Boolean} [decodePrefixes] - initializer for {@link
 * Structure#decodePrefixes|property}.
 *
 * @throws {Error} - if `fields` contains an unnamed variable-length
 * layout.
 *
 * @augments {Layout}
 */
class Structure extends Layout {
  constructor(fields, property, decodePrefixes) {
    if (!(Array.isArray(fields)
          && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {
      throw new TypeError('fields must be array of Layout instances');
    }
    if (('boolean' === typeof property)
        && (undefined === decodePrefixes)) {
      decodePrefixes = property;
      property = undefined;
    }

    /* Verify absence of unnamed variable-length fields. */
    for (const fd of fields) {
      if ((0 > fd.span)
          && (undefined === fd.property)) {
        throw new Error('fields cannot contain unnamed variable-length layout');
      }
    }

    let span = -1;
    try {
      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);
    } catch (e) {
    }
    super(span, property);

    /** The sequence of {@link Layout} values that comprise the
     * structure.
     *
     * The individual elements need not be the same type, and may be
     * either scalar or aggregate layouts.  If a member layout leaves
     * its {@link Layout#property|property} undefined the
     * corresponding region of the buffer associated with the element
     * will not be mutated.
     *
     * @type {Layout[]} */
    this.fields = fields;

    /** Control behavior of {@link Layout#decode|decode()} given short
     * buffers.
     *
     * In some situations a structure many be extended with additional
     * fields over time, with older installations providing only a
     * prefix of the full structure.  If this property is `true`
     * decoding will accept those buffers and leave subsequent fields
     * undefined, as long as the buffer ends at a field boundary.
     * Defaults to `false`. */
    this.decodePrefixes = !!decodePrefixes;
  }

  /** @override */
  getSpan(b, offset) {
    if (0 <= this.span) {
      return this.span;
    }
    if (undefined === offset) {
      offset = 0;
    }
    let span = 0;
    try {
      span = this.fields.reduce((span, fd) => {
        const fsp = fd.getSpan(b, offset);
        offset += fsp;
        return span + fsp;
      }, 0);
    } catch (e) {
      throw new RangeError('indeterminate span');
    }
    return span;
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const dest = this.makeDestinationObject();
    for (const fd of this.fields) {
      if (undefined !== fd.property) {
        dest[fd.property] = fd.decode(b, offset);
      }
      offset += fd.getSpan(b, offset);
      if (this.decodePrefixes
          && (b.length === offset)) {
        break;
      }
    }
    return dest;
  }

  /** Implement {@link Layout#encode|encode} for {@link Structure}.
   *
   * If `src` is missing a property for a member with a defined {@link
   * Layout#property|property} the corresponding region of the buffer is
   * left unmodified. */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const firstOffset = offset;
    let lastOffset = 0;
    let lastWrote = 0;
    for (const fd of this.fields) {
      let span = fd.span;
      lastWrote = (0 < span) ? span : 0;
      if (undefined !== fd.property) {
        const fv = src[fd.property];
        if (undefined !== fv) {
          lastWrote = fd.encode(fv, b, offset);
          if (0 > span) {
            /* Read the as-encoded span, which is not necessarily the
             * same as what we wrote. */
            span = fd.getSpan(b, offset);
          }
        }
      }
      lastOffset = offset;
      offset += span;
    }
    /* Use (lastOffset + lastWrote) instead of offset because the last
     * item may have had a dynamic length and we don't want to include
     * the padding between it and the end of the space reserved for
     * it. */
    return (lastOffset + lastWrote) - firstOffset;
  }

  /** @override */
  fromArray(values) {
    const dest = this.makeDestinationObject();
    for (const fd of this.fields) {
      if ((undefined !== fd.property)
          && (0 < values.length)) {
        dest[fd.property] = values.shift();
      }
    }
    return dest;
  }

  /**
   * Get access to the layout of a given property.
   *
   * @param {String} property - the structure member of interest.
   *
   * @return {Layout} - the layout associated with `property`, or
   * undefined if there is no such property.
   */
  layoutFor(property) {
    if ('string' !== typeof property) {
      throw new TypeError('property must be string');
    }
    for (const fd of this.fields) {
      if (fd.property === property) {
        return fd;
      }
    }
  }

  /**
   * Get the offset of a structure member.
   *
   * @param {String} property - the structure member of interest.
   *
   * @return {Number} - the offset in bytes to the start of `property`
   * within the structure, or undefined if `property` is not a field
   * within the structure.  If the property is a member but follows a
   * variable-length structure member a negative number will be
   * returned.
   */
  offsetOf(property) {
    if ('string' !== typeof property) {
      throw new TypeError('property must be string');
    }
    let offset = 0;
    for (const fd of this.fields) {
      if (fd.property === property) {
        return offset;
      }
      if (0 > fd.span) {
        offset = -1;
      } else if (0 <= offset) {
        offset += fd.span;
      }
    }
  }
}

/**
 * An object that can provide a {@link
 * Union#discriminator|discriminator} API for {@link Union}.
 *
 * **NOTE** This is an abstract base class; you can create instances
 * if it amuses you, but they won't support the {@link
 * UnionDiscriminator#encode|encode} or {@link
 * UnionDiscriminator#decode|decode} functions.
 *
 * @param {string} [property] - Default for {@link
 * UnionDiscriminator#property|property}.
 *
 * @abstract
 */
class UnionDiscriminator {
  constructor(property) {
    /** The {@link Layout#property|property} to be used when the
     * discriminator is referenced in isolation (generally when {@link
     * Union#decode|Union decode} cannot delegate to a specific
     * variant). */
    this.property = property;
  }

  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
   *
   * The implementation of this method need not reference the buffer if
   * variant information is available through other means. */
  decode() {
    throw new Error('UnionDiscriminator is abstract');
  }

  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
   *
   * The implementation of this method need not store the value if
   * variant information is maintained through other means. */
  encode() {
    throw new Error('UnionDiscriminator is abstract');
  }
}

/**
 * An object that can provide a {@link
 * UnionDiscriminator|discriminator API} for {@link Union} using an
 * unsigned integral {@link Layout} instance located either inside or
 * outside the union.
 *
 * @param {ExternalLayout} layout - initializes {@link
 * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link
 * ExternalLayout#isCount|isCount()}.
 *
 * @param {string} [property] - Default for {@link
 * UnionDiscriminator#property|property}, superseding the property
 * from `layout`, but defaulting to `variant` if neither `property`
 * nor layout provide a property name.
 *
 * @augments {UnionDiscriminator}
 */
class UnionLayoutDiscriminator extends UnionDiscriminator {
  constructor(layout, property) {
    if (!((layout instanceof ExternalLayout)
          && layout.isCount())) {
      throw new TypeError('layout must be an unsigned integer ExternalLayout');
    }

    super(property || layout.property || 'variant');

    /** The {@link ExternalLayout} used to access the discriminator
     * value. */
    this.layout = layout;
  }

  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
  decode(b, offset) {
    return this.layout.decode(b, offset);
  }

  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
  encode(src, b, offset) {
    return this.layout.encode(src, b, offset);
  }
}

/**
 * Represent any number of span-compatible layouts.
 *
 * *Factory*: {@link module:Layout.union|union}
 *
 * If the union has a {@link Union#defaultLayout|default layout} that
 * layout must have a non-negative {@link Layout#span|span}.  The span
 * of a fixed-span union includes its {@link
 * Union#discriminator|discriminator} if the variant is a {@link
 * Union#usesPrefixDiscriminator|prefix of the union}, plus the span
 * of its {@link Union#defaultLayout|default layout}.
 *
 * If the union does not have a default layout then the encoded span
 * of the union depends on the encoded span of its variant (which may
 * be fixed or variable).
 *
 * {@link VariantLayout#layout|Variant layout}s are added through
 * {@link Union#addVariant|addVariant}.  If the union has a default
 * layout, the span of the {@link VariantLayout#layout|layout
 * contained by the variant} must not exceed the span of the {@link
 * Union#defaultLayout|default layout} (minus the span of a {@link
 * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The
 * span of the variant will equal the span of the union itself.
 *
 * The variant for a buffer can only be identified from the {@link
 * Union#discriminator|discriminator} {@link
 * UnionDiscriminator#property|property} (in the case of the {@link
 * Union#defaultLayout|default layout}), or by using {@link
 * Union#getVariant|getVariant} and examining the resulting {@link
 * VariantLayout} instance.
 *
 * A variant compatible with a JavaScript object can be identified
 * using {@link Union#getSourceVariant|getSourceVariant}.
 *
 * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to
 * identify the layout used to interpret the union contents.  The
 * parameter must be an instance of {@link UnionDiscriminator}, an
 * {@link ExternalLayout} that satisfies {@link
 * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link
 * UIntBE}).  When a non-external layout element is passed the layout
 * appears at the start of the union.  In all cases the (synthesized)
 * {@link UnionDiscriminator} instance is recorded as {@link
 * Union#discriminator|discriminator}.
 *
 * @param {(Layout|null)} defaultLayout - initializer for {@link
 * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.
 * If `null` there is no default layout: the union has data-dependent
 * length and attempts to decode or encode unrecognized variants will
 * throw an exception.  A {@link Layout} instance must have a
 * non-negative {@link Layout#span|span}, and if it lacks a {@link
 * Layout#property|property} the {@link
 * Union#defaultLayout|defaultLayout} will be a {@link
 * Layout#replicate|replica} with property `content`.
 *
 * @param {string} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class Union extends Layout {
  constructor(discr, defaultLayout, property) {
    const upv = ((discr instanceof UInt)
               || (discr instanceof UIntBE));
    if (upv) {
      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));
    } else if ((discr instanceof ExternalLayout)
               && discr.isCount()) {
      discr = new UnionLayoutDiscriminator(discr);
    } else if (!(discr instanceof UnionDiscriminator)) {
      throw new TypeError('discr must be a UnionDiscriminator '
                          + 'or an unsigned integer layout');
    }
    if (undefined === defaultLayout) {
      defaultLayout = null;
    }
    if (!((null === defaultLayout)
          || (defaultLayout instanceof Layout))) {
      throw new TypeError('defaultLayout must be null or a Layout');
    }
    if (null !== defaultLayout) {
      if (0 > defaultLayout.span) {
        throw new Error('defaultLayout must have constant span');
      }
      if (undefined === defaultLayout.property) {
        defaultLayout = defaultLayout.replicate('content');
      }
    }

    /* The union span can be estimated only if there's a default
     * layout.  The union spans its default layout, plus any prefix
     * variant layout.  By construction both layouts, if present, have
     * non-negative span. */
    let span = -1;
    if (defaultLayout) {
      span = defaultLayout.span;
      if ((0 <= span) && upv) {
        span += discr.layout.span;
      }
    }
    super(span, property);

    /** The interface for the discriminator value in isolation.
     *
     * This a {@link UnionDiscriminator} either passed to the
     * constructor or synthesized from the `discr` constructor
     * argument.  {@link
     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be
     * `true` iff the `discr` parameter was a non-offset {@link
     * Layout} instance. */
    this.discriminator = discr;

    /** `true` if the {@link Union#discriminator|discriminator} is the
     * first field in the union.
     *
     * If `false` the discriminator is obtained from somewhere
     * else. */
    this.usesPrefixDiscriminator = upv;

    /** The layout for non-discriminator content when the value of the
     * discriminator is not recognized.
     *
     * This is the value passed to the constructor.  It is
     * structurally equivalent to the second component of {@link
     * Union#layout|layout} but may have a different property
     * name. */
    this.defaultLayout = defaultLayout;

    /** A registry of allowed variants.
     *
     * The keys are unsigned integers which should be compatible with
     * {@link Union.discriminator|discriminator}.  The property value
     * is the corresponding {@link VariantLayout} instances assigned
     * to this union by {@link Union#addVariant|addVariant}.
     *
     * **NOTE** The registry remains mutable so that variants can be
     * {@link Union#addVariant|added} at any time.  Users should not
     * manipulate the content of this property. */
    this.registry = {};

    /* Private variable used when invoking getSourceVariant */
    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);

    /** Function to infer the variant selected by a source object.
     *
     * Defaults to {@link
     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may
     * be overridden using {@link
     * Union#configGetSourceVariant|configGetSourceVariant}.
     *
     * @param {Object} src - as with {@link
     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
     *
     * @returns {(undefined|VariantLayout)} The default variant
     * (`undefined`) or first registered variant that uses a property
     * available in `src`. */
    this.getSourceVariant = function(src) {
      return boundGetSourceVariant(src);
    };

    /** Function to override the implementation of {@link
     * Union#getSourceVariant|getSourceVariant}.
     *
     * Use this if the desired variant cannot be identified using the
     * algorithm of {@link
     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
     *
     * **NOTE** The provided function will be invoked bound to this
     * Union instance, providing local access to {@link
     * Union#registry|registry}.
     *
     * @param {Function} gsv - a function that follows the API of
     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */
    this.configGetSourceVariant = function(gsv) {
      boundGetSourceVariant = gsv.bind(this);
    };
  }

  /** @override */
  getSpan(b, offset) {
    if (0 <= this.span) {
      return this.span;
    }
    if (undefined === offset) {
      offset = 0;
    }
    /* Default layouts always have non-negative span, so we don't have
     * one and we have to recognize the variant which will in turn
     * determine the span. */
    const vlo = this.getVariant(b, offset);
    if (!vlo) {
      throw new Error('unable to determine span for unrecognized variant');
    }
    return vlo.getSpan(b, offset);
  }

  /**
   * Method to infer a registered Union variant compatible with `src`.
   *
   * The first satisified rule in the following sequence defines the
   * return value:
   * * If `src` has properties matching the Union discriminator and
   *   the default layout, `undefined` is returned regardless of the
   *   value of the discriminator property (this ensures the default
   *   layout will be used);
   * * If `src` has a property matching the Union discriminator, the
   *   value of the discriminator identifies a registered variant, and
   *   either (a) the variant has no layout, or (b) `src` has the
   *   variant's property, then the variant is returned (because the
   *   source satisfies the constraints of the variant it identifies);
   * * If `src` does not have a property matching the Union
   *   discriminator, but does have a property matching a registered
   *   variant, then the variant is returned (because the source
   *   matches a variant without an explicit conflict);
   * * An error is thrown (because we either can't identify a variant,
   *   or we were explicitly told the variant but can't satisfy it).
   *
   * @param {Object} src - an object presumed to be compatible with
   * the content of the Union.
   *
   * @return {(undefined|VariantLayout)} - as described above.
   *
   * @throws {Error} - if `src` cannot be associated with a default or
   * registered variant.
   */
  defaultGetSourceVariant(src) {
    if (src.hasOwnProperty(this.discriminator.property)) {
      if (this.defaultLayout
          && src.hasOwnProperty(this.defaultLayout.property)) {
        return undefined;
      }
      const vlo = this.registry[src[this.discriminator.property]];
      if (vlo
          && ((!vlo.layout)
              || src.hasOwnProperty(vlo.property))) {
        return vlo;
      }
    } else {
      for (const tag in this.registry) {
        const vlo = this.registry[tag];
        if (src.hasOwnProperty(vlo.property)) {
          return vlo;
        }
      }
    }
    throw new Error('unable to infer src variant');
  }

  /** Implement {@link Layout#decode|decode} for {@link Union}.
   *
   * If the variant is {@link Union#addVariant|registered} the return
   * value is an instance of that variant, with no explicit
   * discriminator.  Otherwise the {@link Union#defaultLayout|default
   * layout} is used to decode the content. */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    let dest;
    const dlo = this.discriminator;
    const discr = dlo.decode(b, offset);
    let clo = this.registry[discr];
    if (undefined === clo) {
      let contentOffset = 0;
      clo = this.defaultLayout;
      if (this.usesPrefixDiscriminator) {
        contentOffset = dlo.layout.span;
      }
      dest = this.makeDestinationObject();
      dest[dlo.property] = discr;
      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);
    } else {
      dest = clo.decode(b, offset);
    }
    return dest;
  }

  /** Implement {@link Layout#encode|encode} for {@link Union}.
   *
   * This API assumes the `src` object is consistent with the union's
   * {@link Union#defaultLayout|default layout}.  To encode variants
   * use the appropriate variant-specific {@link VariantLayout#encode}
   * method. */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    const vlo = this.getSourceVariant(src);
    if (undefined === vlo) {
      const dlo = this.discriminator;
      const clo = this.defaultLayout;
      let contentOffset = 0;
      if (this.usesPrefixDiscriminator) {
        contentOffset = dlo.layout.span;
      }
      dlo.encode(src[dlo.property], b, offset);
      return contentOffset + clo.encode(src[clo.property], b,
                                        offset + contentOffset);
    }
    return vlo.encode(src, b, offset);
  }

  /** Register a new variant structure within a union.  The newly
   * created variant is returned.
   *
   * @param {Number} variant - initializer for {@link
   * VariantLayout#variant|variant}.
   *
   * @param {Layout} layout - initializer for {@link
   * VariantLayout#layout|layout}.
   *
   * @param {String} property - initializer for {@link
   * Layout#property|property}.
   *
   * @return {VariantLayout} */
  addVariant(variant, layout, property) {
    const rv = new VariantLayout(this, variant, layout, property);
    this.registry[variant] = rv;
    return rv;
  }

  /**
   * Get the layout associated with a registered variant.
   *
   * If `vb` does not produce a registered variant the function returns
   * `undefined`.
   *
   * @param {(Number|Buffer)} vb - either the variant number, or a
   * buffer from which the discriminator is to be read.
   *
   * @param {Number} offset - offset into `vb` for the start of the
   * union.  Used only when `vb` is an instance of {Buffer}.
   *
   * @return {({VariantLayout}|undefined)}
   */
  getVariant(vb, offset) {
    let variant = vb;
    if (Buffer.isBuffer(vb)) {
      if (undefined === offset) {
        offset = 0;
      }
      variant = this.discriminator.decode(vb, offset);
    }
    return this.registry[variant];
  }
}

/**
 * Represent a specific variant within a containing union.
 *
 * **NOTE** The {@link Layout#span|span} of the variant may include
 * the span of the {@link Union#discriminator|discriminator} used to
 * identify it, but values read and written using the variant strictly
 * conform to the content of {@link VariantLayout#layout|layout}.
 *
 * **NOTE** User code should not invoke this constructor directly.  Use
 * the union {@link Union#addVariant|addVariant} helper method.
 *
 * @param {Union} union - initializer for {@link
 * VariantLayout#union|union}.
 *
 * @param {Number} variant - initializer for {@link
 * VariantLayout#variant|variant}.
 *
 * @param {Layout} [layout] - initializer for {@link
 * VariantLayout#layout|layout}.  If absent the variant carries no
 * data.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.  Unlike many other layouts, variant
 * layouts normally include a property name so they can be identified
 * within their containing {@link Union}.  The property identifier may
 * be absent only if `layout` is is absent.
 *
 * @augments {Layout}
 */
class VariantLayout extends Layout {
  constructor(union, variant, layout, property) {
    if (!(union instanceof Union)) {
      throw new TypeError('union must be a Union');
    }
    if ((!Number.isInteger(variant)) || (0 > variant)) {
      throw new TypeError('variant must be a (non-negative) integer');
    }
    if (('string' === typeof layout)
        && (undefined === property)) {
      property = layout;
      layout = null;
    }
    if (layout) {
      if (!(layout instanceof Layout)) {
        throw new TypeError('layout must be a Layout');
      }
      if ((null !== union.defaultLayout)
          && (0 <= layout.span)
          && (layout.span > union.defaultLayout.span)) {
        throw new Error('variant span exceeds span of containing union');
      }
      if ('string' !== typeof property) {
        throw new TypeError('variant must have a String property');
      }
    }
    let span = union.span;
    if (0 > union.span) {
      span = layout ? layout.span : 0;
      if ((0 <= span) && union.usesPrefixDiscriminator) {
        span += union.discriminator.layout.span;
      }
    }
    super(span, property);

    /** The {@link Union} to which this variant belongs. */
    this.union = union;

    /** The unsigned integral value identifying this variant within
     * the {@link Union#discriminator|discriminator} of the containing
     * union. */
    this.variant = variant;

    /** The {@link Layout} to be used when reading/writing the
     * non-discriminator part of the {@link
     * VariantLayout#union|union}.  If `null` the variant carries no
     * data. */
    this.layout = layout || null;
  }

  /** @override */
  getSpan(b, offset) {
    if (0 <= this.span) {
      /* Will be equal to the containing union span if that is not
       * variable. */
      return this.span;
    }
    if (undefined === offset) {
      offset = 0;
    }
    let contentOffset = 0;
    if (this.union.usesPrefixDiscriminator) {
      contentOffset = this.union.discriminator.layout.span;
    }
    /* Span is defined solely by the variant (and prefix discriminator) */
    return contentOffset + this.layout.getSpan(b, offset + contentOffset);
  }

  /** @override */
  decode(b, offset) {
    const dest = this.makeDestinationObject();
    if (undefined === offset) {
      offset = 0;
    }
    if (this !== this.union.getVariant(b, offset)) {
      throw new Error('variant mismatch');
    }
    let contentOffset = 0;
    if (this.union.usesPrefixDiscriminator) {
      contentOffset = this.union.discriminator.layout.span;
    }
    if (this.layout) {
      dest[this.property] = this.layout.decode(b, offset + contentOffset);
    } else if (this.property) {
      dest[this.property] = true;
    } else if (this.union.usesPrefixDiscriminator) {
      dest[this.union.discriminator.property] = this.variant;
    }
    return dest;
  }

  /** @override */
  encode(src, b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    let contentOffset = 0;
    if (this.union.usesPrefixDiscriminator) {
      contentOffset = this.union.discriminator.layout.span;
    }
    if (this.layout
        && (!src.hasOwnProperty(this.property))) {
      throw new TypeError('variant lacks property ' + this.property);
    }
    this.union.discriminator.encode(this.variant, b, offset);
    let span = contentOffset;
    if (this.layout) {
      this.layout.encode(src[this.property], b, offset + contentOffset);
      span += this.layout.getSpan(b, offset + contentOffset);
      if ((0 <= this.union.span)
          && (span > this.union.span)) {
        throw new Error('encoded variant overruns containing union');
      }
    }
    return span;
  }

  /** Delegate {@link Layout#fromArray|fromArray} to {@link
   * VariantLayout#layout|layout}. */
  fromArray(values) {
    if (this.layout) {
      return this.layout.fromArray(values);
    }
  }
}
/* eslint-enable no-extend-native */

/**
 * Contain a fixed-length block of arbitrary data, represented as a
 * Buffer.
 *
 * *Factory*: {@link module:Layout.blob|blob}
 *
 * @param {(Number|ExternalLayout)} length - initializes {@link
 * Blob#length|length}.
 *
 * @param {String} [property] - initializer for {@link
 * Layout#property|property}.
 *
 * @augments {Layout}
 */
class Blob$1 extends Layout {
  constructor(length, property) {
    if (!(((length instanceof ExternalLayout) && length.isCount())
          || (Number.isInteger(length) && (0 <= length)))) {
      throw new TypeError('length must be positive integer '
                          + 'or an unsigned integer ExternalLayout');
    }

    let span = -1;
    if (!(length instanceof ExternalLayout)) {
      span = length;
    }
    super(span, property);

    /** The number of bytes in the blob.
     *
     * This may be a non-negative integer, or an instance of {@link
     * ExternalLayout} that satisfies {@link
     * ExternalLayout#isCount|isCount()}. */
    this.length = length;
  }

  /** @override */
  getSpan(b, offset) {
    let span = this.span;
    if (0 > span) {
      span = this.length.decode(b, offset);
    }
    return span;
  }

  /** @override */
  decode(b, offset) {
    if (undefined === offset) {
      offset = 0;
    }
    let span = this.span;
    if (0 > span) {
      span = this.length.decode(b, offset);
    }
    return b.slice(offset, offset + span);
  }

  /** Implement {@link Layout#encode|encode} for {@link Blob}.
   *
   * **NOTE** If {@link Layout#count|count} is an instance of {@link
   * ExternalLayout} then the length of `src` will be encoded as the
   * count after `src` is encoded. */
  encode(src, b, offset) {
    let span = this.length;
    if (this.length instanceof ExternalLayout) {
      span = src.length;
    }
    if (!(Buffer.isBuffer(src)
          && (span === src.length))) {
      throw new TypeError(nameWithProperty('Blob.encode', this)
                          + ' requires (length ' + span + ') Buffer as src');
    }
    if ((offset + span) > b.length) {
      throw new RangeError('encoding overruns Buffer');
    }
    b.write(src.toString('hex'), offset, span, 'hex');
    if (this.length instanceof ExternalLayout) {
      this.length.encode(span, b, offset);
    }
    return span;
  }
}

/** Factory for {@link OffsetLayout}. */
var offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));

/** Factory for {@link UInt|unsigned int layouts} spanning one
 * byte. */
var u8$3 = (property => new UInt(1, property));

/** Factory for {@link UInt|little-endian unsigned int layouts}
 * spanning four bytes. */
var u32$3 = (property => new UInt(4, property));

/** Factory for {@link NearUInt64|little-endian unsigned int
 * layouts} interpreted as Numbers. */
var nu64 = (property => new NearUInt64(property));

/** Factory for {@link NearInt64|little-endian signed int layouts}
 * interpreted as Numbers. */
var ns64 = (property => new NearInt64(property));

/** Factory for {@link Structure} values. */
var struct$3 = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));

/** Factory for {@link Union} values. */
var union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));

/** Factory for {@link Blob} values. */
var blob$1 = ((length, property) => new Blob$1(length, property));

class SystemInstructionCoder {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    constructor(_) { }
    encode(ixName, ix) {
        switch (camelCase$1(ixName)) {
            case "createAccount": {
                return encodeCreateAccount(ix);
            }
            case "assign": {
                return encodeAssign(ix);
            }
            case "transfer": {
                return encodeTransfer(ix);
            }
            case "createAccountWithSeed": {
                return encodeCreateAccountWithSeed(ix);
            }
            case "advanceNonceAccount": {
                return encodeAdvanceNonceAccount(ix);
            }
            case "withdrawNonceAccount": {
                return encodeWithdrawNonceAccount(ix);
            }
            case "initializeNonceAccount": {
                return encodeInitializeNonceAccount(ix);
            }
            case "authorizeNonceAccount": {
                return encodeAuthorizeNonceAccount(ix);
            }
            case "allocate": {
                return encodeAllocate(ix);
            }
            case "allocateWithSeed": {
                return encodeAllocateWithSeed(ix);
            }
            case "assignWithSeed": {
                return encodeAssignWithSeed(ix);
            }
            case "transferWithSeed": {
                return encodeTransferWithSeed(ix);
            }
            default: {
                throw new Error(`Invalid instruction: ${ixName}`);
            }
        }
    }
    encodeState(_ixName, _ix) {
        throw new Error("System does not have state");
    }
}
class RustStringLayout extends Layout_2 {
    constructor(property) {
        super(-1, property);
        this.property = property;
        this.layout = struct$3([
            u32$3("length"),
            u32$3("lengthPadding"),
            blob$1(offset(u32$3(), -8), "chars"),
        ], this.property);
    }
    encode(src, b, offset = 0) {
        if (src === null || src === undefined) {
            return this.layout.span;
        }
        const data = {
            chars: Buffer.from(src, "utf8"),
        };
        return this.layout.encode(data, b, offset);
    }
    decode(b, offset = 0) {
        const data = this.layout.decode(b, offset);
        return data["chars"].toString();
    }
    getSpan(b, offset = 0) {
        return (u32$3().span +
            u32$3().span +
            new BN$2(new Uint8Array(b).slice(offset, offset + 4), 10, "le").toNumber());
    }
}
function rustStringLayout(property) {
    return new RustStringLayout(property);
}
function publicKey$2$1(property) {
    return blob$1(32, property);
}
function encodeCreateAccount({ lamports, space, owner }) {
    return encodeData({
        createAccount: { lamports, space, owner: owner.toBuffer() },
    });
}
function encodeAssign({ owner }) {
    return encodeData({
        assign: { owner: owner.toBuffer() },
    });
}
function encodeTransfer({ lamports }) {
    return encodeData({
        transfer: { lamports },
    });
}
function encodeCreateAccountWithSeed({ base, seed, lamports, space, owner, }) {
    return encodeData({
        createAccountWithSeed: {
            base: base.toBuffer(),
            seed,
            lamports,
            space,
            owner: owner.toBuffer(),
        },
    }, LAYOUT.getVariant(3).span + seed.length);
}
function encodeInitializeNonceAccount({ authorized }) {
    return encodeData({
        initializeNonceAccount: { authorized: authorized.toBuffer() },
    });
}
function encodeAdvanceNonceAccount({ authorized }) {
    return encodeData({
        advanceNonceAccount: { authorized: authorized.toBuffer() },
    });
}
function encodeWithdrawNonceAccount({ lamports }) {
    return encodeData({
        withdrawNonceAccount: { lamports },
    });
}
function encodeAuthorizeNonceAccount({ authorized }) {
    return encodeData({
        authorizeNonceAccount: { authorized: authorized.toBuffer() },
    });
}
function encodeAllocate({ space }) {
    return encodeData({
        allocate: { space },
    });
}
function encodeAllocateWithSeed({ base, seed, space, owner }) {
    return encodeData({
        allocateWithSeed: {
            base: base.toBuffer(),
            seed,
            space,
            owner: owner.toBuffer(),
        },
    }, LAYOUT.getVariant(9).span + seed.length);
}
function encodeAssignWithSeed({ base, seed, owner }) {
    return encodeData({
        assignWithSeed: {
            base: base.toBuffer(),
            seed,
            owner: owner.toBuffer(),
        },
    }, LAYOUT.getVariant(10).span + seed.length);
}
function encodeTransferWithSeed({ lamports, seed, owner }) {
    return encodeData({
        transferWithSeed: {
            lamports,
            seed,
            owner: owner.toBuffer(),
        },
    }, LAYOUT.getVariant(11).span + seed.length);
}
const LAYOUT = union(u32$3("instruction"));
LAYOUT.addVariant(0, struct$3([
    ns64("lamports"),
    ns64("space"),
    publicKey$2$1("owner"),
]), "createAccount");
LAYOUT.addVariant(1, struct$3([publicKey$2$1("owner")]), "assign");
LAYOUT.addVariant(2, struct$3([ns64("lamports")]), "transfer");
LAYOUT.addVariant(3, struct$3([
    publicKey$2$1("base"),
    rustStringLayout("seed"),
    ns64("lamports"),
    ns64("space"),
    publicKey$2$1("owner"),
]), "createAccountWithSeed");
LAYOUT.addVariant(4, struct$3([publicKey$2$1("authorized")]), "advanceNonceAccount");
LAYOUT.addVariant(5, struct$3([ns64("lamports")]), "withdrawNonceAccount");
LAYOUT.addVariant(6, struct$3([publicKey$2$1("authorized")]), "initializeNonceAccount");
LAYOUT.addVariant(7, struct$3([publicKey$2$1("authorized")]), "authorizeNonceAccount");
LAYOUT.addVariant(8, struct$3([ns64("space")]), "allocate");
LAYOUT.addVariant(9, struct$3([
    publicKey$2$1("base"),
    rustStringLayout("seed"),
    ns64("space"),
    publicKey$2$1("owner"),
]), "allocateWithSeed");
LAYOUT.addVariant(10, struct$3([
    publicKey$2$1("base"),
    rustStringLayout("seed"),
    publicKey$2$1("owner"),
]), "assignWithSeed");
LAYOUT.addVariant(11, struct$3([
    ns64("lamports"),
    rustStringLayout("seed"),
    publicKey$2$1("owner"),
]), "transferWithSeed");
function encodeData(instruction, maxSpan) {
    const b = Buffer.alloc(maxSpan !== null && maxSpan !== void 0 ? maxSpan : instructionMaxSpan);
    const span = LAYOUT.encode(instruction, b);
    if (maxSpan === undefined) {
        return b.slice(0, span);
    }
    return b;
}
const instructionMaxSpan = Math.max(...Object.values(LAYOUT.registry).map((r) => r.span));

class SystemAccountsCoder {
    constructor(idl) {
        this.idl = idl;
    }
    async encode(accountName, account) {
        switch (accountName) {
            case "nonce": {
                const buffer = Buffer.alloc(NONCE_ACCOUNT_LENGTH);
                const len = NONCE_ACCOUNT_LAYOUT.encode(account, buffer);
                return buffer.slice(0, len);
            }
            default: {
                throw new Error(`Invalid account name: ${accountName}`);
            }
        }
    }
    decode(accountName, ix) {
        return this.decodeUnchecked(accountName, ix);
    }
    decodeUnchecked(accountName, ix) {
        switch (accountName) {
            case "nonce": {
                return decodeNonceAccount(ix);
            }
            default: {
                throw new Error(`Invalid account name: ${accountName}`);
            }
        }
    }
    // TODO: this won't use the appendData.
    memcmp(accountName, _appendData) {
        switch (accountName) {
            case "nonce": {
                return {
                    dataSize: NONCE_ACCOUNT_LENGTH,
                };
            }
            default: {
                throw new Error(`Invalid account name: ${accountName}`);
            }
        }
    }
    size(idlAccount) {
        var _a;
        return (_a = accountSize(this.idl, idlAccount)) !== null && _a !== void 0 ? _a : 0;
    }
}
function decodeNonceAccount(ix) {
    return NONCE_ACCOUNT_LAYOUT.decode(ix);
}
class WrappedLayout$1 extends Layout_2 {
    constructor(layout, decoder, encoder, property) {
        super(layout.span, property);
        this.layout = layout;
        this.decoder = decoder;
        this.encoder = encoder;
    }
    decode(b, offset) {
        return this.decoder(this.layout.decode(b, offset));
    }
    encode(src, b, offset) {
        return this.layout.encode(this.encoder(src), b, offset);
    }
    getSpan(b, offset) {
        return this.layout.getSpan(b, offset);
    }
}
function publicKey$1$1(property) {
    return new WrappedLayout$1(blob$1(32), (b) => new PublicKey(b), (key) => key.toBuffer(), property);
}
const NONCE_ACCOUNT_LAYOUT = struct$3([
    u32$3("version"),
    u32$3("state"),
    publicKey$1$1("authorizedPubkey"),
    publicKey$1$1("nonce"),
    struct$3([nu64("lamportsPerSignature")], "feeCalculator"),
]);

class SystemEventsCoder {
    constructor(_idl) { }
    decode(_log) {
        throw new Error("System program does not have events");
    }
}

class SystemTypesCoder {
    constructor(_idl) { }
    encode(_name, _type) {
        throw new Error("System does not have user-defined types");
    }
    decode(_name, _typeData) {
        throw new Error("System does not have user-defined types");
    }
}

/**
 * Coder for the System program.
 */
class SystemCoder {
    constructor(idl) {
        this.instruction = new SystemInstructionCoder(idl);
        this.accounts = new SystemAccountsCoder(idl);
        this.events = new SystemEventsCoder(idl);
        this.types = new SystemTypesCoder(idl);
    }
}

function hash(data) {
    return new TextDecoder().decode(sha256$2(data));
}

var sha256 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hash: hash
});

// Sync version of web3.PublicKey.createWithSeed.
function createWithSeedSync(fromPublicKey, seed, programId) {
    const buffer = Buffer.concat([
        fromPublicKey.toBuffer(),
        Buffer.from(seed),
        programId.toBuffer(),
    ]);
    return new PublicKey(sha256$2(buffer));
}
function associated(programId, ...args) {
    let seeds = [Buffer.from([97, 110, 99, 104, 111, 114])]; // b"anchor".
    args.forEach((arg) => {
        seeds.push(arg instanceof Buffer ? arg : translateAddress(arg).toBuffer());
    });
    const [assoc] = PublicKey.findProgramAddressSync(seeds, translateAddress(programId));
    return assoc;
}

var pubkey = /*#__PURE__*/Object.freeze({
    __proto__: null,
    createWithSeedSync: createWithSeedSync,
    associated: associated
});

const TOKEN_PROGRAM_ID$1 = new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
const ASSOCIATED_PROGRAM_ID = new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
function associatedAddress({ mint, owner, }) {
    return PublicKey.findProgramAddressSync([owner.toBuffer(), TOKEN_PROGRAM_ID$1.toBuffer(), mint.toBuffer()], ASSOCIATED_PROGRAM_ID)[0];
}

var token$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TOKEN_PROGRAM_ID: TOKEN_PROGRAM_ID$1,
    ASSOCIATED_PROGRAM_ID: ASSOCIATED_PROGRAM_ID,
    associatedAddress: associatedAddress
});

var browserPonyfill = {exports: {}};

(function (module, exports) {
var global = typeof self !== 'undefined' ? self : commonjsGlobal;
var __self__ = (function () {
function F() {
this.fetch = false;
this.DOMException = global.DOMException;
}
F.prototype = global;
return new F();
})();
(function(self) {

((function (exports) {

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new exports.DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}))({});
})(__self__);
__self__.fetch.ponyfill = true;
// Remove "polyfill" property added by whatwg-fetch
delete __self__.fetch.polyfill;
// Choose between native implementation (global) or custom implementation (__self__)
// var ctx = global.fetch ? global : __self__;
var ctx = __self__; // this line disable service worker support temporarily
exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers;
exports.Request = ctx.Request;
exports.Response = ctx.Response;
module.exports = exports;
}(browserPonyfill, browserPonyfill.exports));

var fetch$2 = /*@__PURE__*/getDefaultExportFromCjs$1(browserPonyfill.exports);

/**
 * Returns a verified build from the anchor registry. null if no such
 * verified build exists, e.g., if the program has been upgraded since the
 * last verified build.
 */
async function verifiedBuild(connection, programId, limit = 5) {
    const url = `https://api.apr.dev/api/v0/program/${programId.toString()}/latest?limit=${limit}`;
    const [programData, latestBuildsResp] = await Promise.all([
        fetchData(connection, programId),
        fetch$2(url),
    ]);
    // Filter out all non successful builds.
    const latestBuilds = (await latestBuildsResp.json()).filter((b) => !b.aborted && b.state === "Built" && b.verified === "Verified");
    if (latestBuilds.length === 0) {
        return null;
    }
    // Get the latest build.
    const build = latestBuilds[0];
    // Has the program been upgraded since the last build?
    if (programData.slot.toNumber() !== build.verified_slot) {
        return null;
    }
    // Success.
    return build;
}
/**
 * Returns the program data account for this program, containing the
 * metadata for this program, e.g., the upgrade authority.
 */
async function fetchData(connection, programId) {
    const accountInfo = await connection.getAccountInfo(programId);
    if (accountInfo === null) {
        throw new Error("program account not found");
    }
    const { program } = decodeUpgradeableLoaderState(accountInfo.data);
    const programdataAccountInfo = await connection.getAccountInfo(program.programdataAddress);
    if (programdataAccountInfo === null) {
        throw new Error("program data account not found");
    }
    const { programData } = decodeUpgradeableLoaderState(programdataAccountInfo.data);
    return programData;
}
const UPGRADEABLE_LOADER_STATE_LAYOUT = dist.rustEnum([
    dist.struct([], "uninitialized"),
    dist.struct([dist.option(dist.publicKey(), "authorityAddress")], "buffer"),
    dist.struct([dist.publicKey("programdataAddress")], "program"),
    dist.struct([
        dist.u64("slot"),
        dist.option(dist.publicKey(), "upgradeAuthorityAddress"),
    ], "programData"),
], undefined, dist.u32());
function decodeUpgradeableLoaderState(data) {
    return UPGRADEABLE_LOADER_STATE_LAYOUT.decode(data);
}

var registry = /*#__PURE__*/Object.freeze({
    __proto__: null,
    verifiedBuild: verifiedBuild,
    fetchData: fetchData,
    decodeUpgradeableLoaderState: decodeUpgradeableLoaderState
});

var index$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    sha256: sha256,
    rpc: rpc,
    publicKey: pubkey,
    bytes: index$1,
    token: token$2,
    features: features,
    registry: registry
});

function isIdlAccounts(accountItem) {
    return "accounts" in accountItem;
}
// Deterministic IDL address as a function of the program id.
async function idlAddress(programId) {
    const base = (await PublicKey.findProgramAddress([], programId))[0];
    return await PublicKey.createWithSeed(base, seed(), programId);
}
// Seed for generating the idlAddress.
function seed() {
    return "anchor:idl";
}
const IDL_ACCOUNT_LAYOUT = dist.struct([
    dist.publicKey("authority"),
    dist.vecU8("data"),
]);
function decodeIdlAccount(data) {
    return IDL_ACCOUNT_LAYOUT.decode(data);
}

function splitArgsAndCtx(idlIx, args) {
    var _a, _b;
    let options = {};
    const inputLen = idlIx.args ? idlIx.args.length : 0;
    if (args.length > inputLen) {
        if (args.length !== inputLen + 1) {
            throw new Error(`provided too many arguments ${args} to instruction ${idlIx === null || idlIx === void 0 ? void 0 : idlIx.name} expecting: ${(_b = (_a = idlIx.args) === null || _a === void 0 ? void 0 : _a.map((a) => a.name)) !== null && _b !== void 0 ? _b : []}`);
        }
        options = args.pop();
    }
    return [args, options];
}

class InstructionNamespaceFactory {
    static build(idlIx, encodeFn, programId) {
        if (idlIx.name === "_inner") {
            throw new IdlError("the _inner name is reserved");
        }
        const ix = (...args) => {
            const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);
            validateAccounts(idlIx.accounts, ctx.accounts);
            validateInstruction(idlIx, ...args);
            const keys = ix.accounts(ctx.accounts);
            if (ctx.remainingAccounts !== undefined) {
                keys.push(...ctx.remainingAccounts);
            }
            if (isSet("debug-logs")) {
                console.log("Outgoing account metas:", keys);
            }
            return new TransactionInstruction({
                keys,
                programId,
                data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs)),
            });
        };
        // Utility fn for ordering the accounts for this instruction.
        ix["accounts"] = (accs) => {
            return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts, programId, idlIx.name);
        };
        return ix;
    }
    static accountsArray(ctx, accounts, programId, ixName) {
        if (!ctx) {
            return [];
        }
        return accounts
            .map((acc) => {
            // Nested accounts.
            const nestedAccounts = "accounts" in acc ? acc.accounts : undefined;
            if (nestedAccounts !== undefined) {
                const rpcAccs = ctx[acc.name];
                return InstructionNamespaceFactory.accountsArray(rpcAccs, acc.accounts, programId, ixName).flat();
            }
            else {
                const account = acc;
                let pubkey;
                try {
                    pubkey = translateAddress(ctx[acc.name]);
                }
                catch (err) {
                    throw new Error(`Wrong input type for account "${acc.name}" in the instruction accounts object${ixName !== undefined ? ' for instruction "' + ixName + '"' : ""}. Expected PublicKey or string.`);
                }
                const optional = account.isOptional && pubkey.equals(programId);
                const isWritable = account.isMut && !optional;
                const isSigner = account.isSigner && !optional;
                return {
                    pubkey,
                    isWritable,
                    isSigner,
                };
            }
        })
            .flat();
    }
}
// Throws error if any argument required for the `ix` is not given.
function validateInstruction(ix, ...args) {
    // todo
}

class TransactionFactory {
    static build(idlIx, ixFn) {
        const txFn = (...args) => {
            var _a, _b, _c;
            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);
            const tx = new Transaction$3();
            if (ctx.preInstructions && ctx.instructions) {
                throw new Error("instructions is deprecated, use preInstructions");
            }
            (_a = ctx.preInstructions) === null || _a === void 0 ? void 0 : _a.forEach((ix) => tx.add(ix));
            (_b = ctx.instructions) === null || _b === void 0 ? void 0 : _b.forEach((ix) => tx.add(ix));
            tx.add(ixFn(...args));
            (_c = ctx.postInstructions) === null || _c === void 0 ? void 0 : _c.forEach((ix) => tx.add(ix));
            return tx;
        };
        return txFn;
    }
}

class RpcFactory {
    static build(idlIx, txFn, idlErrors, provider) {
        const rpc = async (...args) => {
            var _a;
            const tx = txFn(...args);
            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);
            if (provider.sendAndConfirm === undefined) {
                throw new Error("This function requires 'Provider.sendAndConfirm' to be implemented.");
            }
            try {
                return await provider.sendAndConfirm(tx, (_a = ctx.signers) !== null && _a !== void 0 ? _a : [], ctx.options);
            }
            catch (err) {
                throw translateError(err, idlErrors);
            }
        };
        return rpc;
    }
}

class AccountFactory {
    static build(idl, coder, programId, provider) {
        var _a;
        const accountFns = {};
        (_a = idl.accounts) === null || _a === void 0 ? void 0 : _a.forEach((idlAccount) => {
            const name = camelCase$1(idlAccount.name);
            accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);
        });
        return accountFns;
    }
}
class AccountClient {
    /**
     * Returns the number of bytes in this account.
     */
    get size() {
        return this._size;
    }
    /**
     * Returns the program ID owning all accounts.
     */
    get programId() {
        return this._programId;
    }
    /**
     * Returns the client's wallet and network provider.
     */
    get provider() {
        return this._provider;
    }
    /**
     * Returns the coder.
     */
    get coder() {
        return this._coder;
    }
    /**
     * Returns the idl account.
     */
    get idlAccount() {
        return this._idlAccount;
    }
    constructor(idl, idlAccount, programId, provider, coder) {
        this._idlAccount = idlAccount;
        this._programId = programId;
        this._provider = provider !== null && provider !== void 0 ? provider : getProvider();
        this._coder = coder !== null && coder !== void 0 ? coder : new BorshCoder(idl);
        this._size = this._coder.accounts.size(idlAccount);
    }
    /**
     * Returns a deserialized account, returning null if it doesn't exist.
     *
     * @param address The address of the account to fetch.
     */
    async fetchNullable(address, commitment) {
        const { data } = await this.fetchNullableAndContext(address, commitment);
        return data;
    }
    /**
     * Returns a deserialized account along with the associated rpc response context, returning null if it doesn't exist.
     *
     * @param address The address of the account to fetch.
     */
    async fetchNullableAndContext(address, commitment) {
        const accountInfo = await this.getAccountInfoAndContext(address, commitment);
        const { value, context } = accountInfo;
        return {
            data: value && value.data.length !== 0
                ? this._coder.accounts.decode(this._idlAccount.name, value.data)
                : null,
            context,
        };
    }
    /**
     * Returns a deserialized account.
     *
     * @param address The address of the account to fetch.
     */
    async fetch(address, commitment) {
        const { data } = await this.fetchNullableAndContext(address, commitment);
        if (data === null) {
            throw new Error(`Account does not exist or has no data ${address.toString()}`);
        }
        return data;
    }
    /**
     * Returns a deserialized account along with the associated rpc response context.
     *
     * @param address The address of the account to fetch.
     */
    async fetchAndContext(address, commitment) {
        const { data, context } = await this.fetchNullableAndContext(address, commitment);
        if (data === null) {
            throw new Error(`Account does not exist ${address.toString()}`);
        }
        return { data, context };
    }
    /**
     * Returns multiple deserialized accounts.
     * Accounts not found or with wrong discriminator are returned as null.
     *
     * @param addresses The addresses of the accounts to fetch.
     */
    async fetchMultiple(addresses, commitment) {
        const accounts = await this.fetchMultipleAndContext(addresses, commitment);
        return accounts.map((account) => (account ? account.data : null));
    }
    /**
     * Returns multiple deserialized accounts.
     * Accounts not found or with wrong discriminator are returned as null.
     *
     * @param addresses The addresses of the accounts to fetch.
     */
    async fetchMultipleAndContext(addresses, commitment) {
        const accounts = await getMultipleAccountsAndContext(this._provider.connection, addresses.map((address) => translateAddress(address)), commitment);
        // Decode accounts where discriminator is correct, null otherwise
        return accounts.map((result) => {
            if (result == null) {
                return null;
            }
            const { account, context } = result;
            return {
                data: this._coder.accounts.decode(this._idlAccount.name, account.data),
                context,
            };
        });
    }
    /**
     * Returns all instances of this account type for the program.
     *
     * @param filters User-provided filters to narrow the results from `connection.getProgramAccounts`.
     *
     *                When filters are not defined this method returns all
     *                the account instances.
     *
     *                When filters are of type `Buffer`, the filters are appended
     *                after the discriminator.
     *
     *                When filters are of type `GetProgramAccountsFilter[]`,
     *                filters are appended after the discriminator filter.
     */
    async all(filters) {
        const filter = this.coder.accounts.memcmp(this._idlAccount.name, filters instanceof Buffer ? filters : undefined);
        const coderFilters = [];
        if ((filter === null || filter === void 0 ? void 0 : filter.offset) != undefined && (filter === null || filter === void 0 ? void 0 : filter.bytes) != undefined) {
            coderFilters.push({
                memcmp: { offset: filter.offset, bytes: filter.bytes },
            });
        }
        if ((filter === null || filter === void 0 ? void 0 : filter.dataSize) != undefined) {
            coderFilters.push({ dataSize: filter.dataSize });
        }
        let resp = await this._provider.connection.getProgramAccounts(this._programId, {
            commitment: this._provider.connection.commitment,
            filters: [...coderFilters, ...(Array.isArray(filters) ? filters : [])],
        });
        return resp.map(({ pubkey, account }) => {
            return {
                publicKey: pubkey,
                account: this._coder.accounts.decode(this._idlAccount.name, account.data),
            };
        });
    }
    /**
     * Returns an `EventEmitter` emitting a "change" event whenever the account
     * changes.
     */
    subscribe(address, commitment) {
        const sub = subscriptions.get(address.toString());
        if (sub) {
            return sub.ee;
        }
        const ee = new EventEmitter();
        address = translateAddress(address);
        const listener = this._provider.connection.onAccountChange(address, (acc) => {
            const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);
            ee.emit("change", account);
        }, commitment);
        subscriptions.set(address.toString(), {
            ee,
            listener,
        });
        return ee;
    }
    /**
     * Unsubscribes from the account at the given address.
     */
    async unsubscribe(address) {
        let sub = subscriptions.get(address.toString());
        if (!sub) {
            console.warn("Address is not subscribed");
            return;
        }
        if (subscriptions) {
            await this._provider.connection
                .removeAccountChangeListener(sub.listener)
                .then(() => {
                subscriptions.delete(address.toString());
            })
                .catch(console.error);
        }
    }
    /**
     * Returns an instruction for creating this account.
     */
    async createInstruction(signer, sizeOverride) {
        const size = this.size;
        if (this._provider.publicKey === undefined) {
            throw new Error("This function requires the Provider interface implementor to have a 'publicKey' field.");
        }
        return SystemProgram.createAccount({
            fromPubkey: this._provider.publicKey,
            newAccountPubkey: signer.publicKey,
            space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,
            lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),
            programId: this._programId,
        });
    }
    /**
     * @deprecated since version 14.0.
     *
     * Function returning the associated account. Args are keys to associate.
     * Order matters.
     */
    async associated(...args) {
        const addr = await this.associatedAddress(...args);
        return await this.fetch(addr);
    }
    /**
     * @deprecated since version 14.0.
     *
     * Function returning the associated address. Args are keys to associate.
     * Order matters.
     */
    async associatedAddress(...args) {
        return await associated(this._programId, ...args);
    }
    async getAccountInfo(address, commitment) {
        return await this._provider.connection.getAccountInfo(translateAddress(address), commitment);
    }
    async getAccountInfoAndContext(address, commitment) {
        return await this._provider.connection.getAccountInfoAndContext(translateAddress(address), commitment);
    }
}
// Tracks all subscriptions.
const subscriptions = new Map();

const PROGRAM_LOG = "Program log: ";
const PROGRAM_DATA = "Program data: ";
const PROGRAM_LOG_START_INDEX = PROGRAM_LOG.length;
const PROGRAM_DATA_START_INDEX = PROGRAM_DATA.length;
class EventManager {
    constructor(programId, provider, coder) {
        this._programId = programId;
        this._provider = provider;
        this._eventParser = new EventParser(programId, coder);
        this._eventCallbacks = new Map();
        this._eventListeners = new Map();
        this._listenerIdCount = 0;
    }
    addEventListener(eventName, callback) {
        var _a;
        let listener = this._listenerIdCount;
        this._listenerIdCount += 1;
        // Store the listener into the event map.
        if (!this._eventListeners.has(eventName)) {
            this._eventListeners.set(eventName, []);
        }
        this._eventListeners.set(eventName, ((_a = this._eventListeners.get(eventName)) !== null && _a !== void 0 ? _a : []).concat(listener));
        // Store the callback into the listener map.
        this._eventCallbacks.set(listener, [eventName, callback]);
        // Create the subscription singleton, if needed.
        if (this._onLogsSubscriptionId !== undefined) {
            return listener;
        }
        this._onLogsSubscriptionId = this._provider.connection.onLogs(this._programId, (logs, ctx) => {
            if (logs.err) {
                return;
            }
            for (const event of this._eventParser.parseLogs(logs.logs)) {
                const allListeners = this._eventListeners.get(event.name);
                if (allListeners) {
                    allListeners.forEach((listener) => {
                        const listenerCb = this._eventCallbacks.get(listener);
                        if (listenerCb) {
                            const [, callback] = listenerCb;
                            callback(event.data, ctx.slot, logs.signature);
                        }
                    });
                }
            }
        });
        return listener;
    }
    async removeEventListener(listener) {
        // Get the callback.
        const callback = this._eventCallbacks.get(listener);
        if (!callback) {
            throw new Error(`Event listener ${listener} doesn't exist!`);
        }
        const [eventName] = callback;
        // Get the listeners.
        let listeners = this._eventListeners.get(eventName);
        if (!listeners) {
            throw new Error(`Event listeners don't exist for ${eventName}!`);
        }
        // Update both maps.
        this._eventCallbacks.delete(listener);
        listeners = listeners.filter((l) => l !== listener);
        this._eventListeners.set(eventName, listeners);
        if (listeners.length === 0) {
            this._eventListeners.delete(eventName);
        }
        // Kill the websocket connection if all listeners have been removed.
        if (this._eventCallbacks.size === 0) {
            if (this._eventListeners.size !== 0) {
                throw new Error(`Expected event listeners size to be 0 but got ${this._eventListeners.size}`);
            }
            if (this._onLogsSubscriptionId !== undefined) {
                await this._provider.connection.removeOnLogsListener(this._onLogsSubscriptionId);
                this._onLogsSubscriptionId = undefined;
            }
        }
    }
}
class EventParser {
    constructor(programId, coder) {
        this.coder = coder;
        this.programId = programId;
    }
    // Each log given, represents an array of messages emitted by
    // a single transaction, which can execute many different programs across
    // CPI boundaries. However, the subscription is only interested in the
    // events emitted by *this* program. In achieving this, we keep track of the
    // program execution context by parsing each log and looking for a CPI
    // `invoke` call. If one exists, we know a new program is executing. So we
    // push the programId onto a stack and switch the program context. This
    // allows us to track, for a given log, which program was executing during
    // its emission, thereby allowing us to know if a given log event was
    // emitted by *this* program. If it was, then we parse the raw string and
    // emit the event if the string matches the event being subscribed to.
    *parseLogs(logs, errorOnDecodeFailure = false) {
        const logScanner = new LogScanner(logs);
        const execution = new ExecutionContext();
        let log = logScanner.next();
        while (log !== null) {
            let [event, newProgram, didPop] = this.handleLog(execution, log, errorOnDecodeFailure);
            if (event) {
                yield event;
            }
            if (newProgram) {
                execution.push(newProgram);
            }
            if (didPop) {
                execution.pop();
            }
            log = logScanner.next();
        }
    }
    // Main log handler. Returns a three element array of the event, the
    // next program that was invoked for CPI, and a boolean indicating if
    // a program has completed execution (and thus should be popped off the
    // execution stack).
    handleLog(execution, log, errorOnDecodeFailure) {
        // Executing program is this program.
        if (execution.stack.length > 0 &&
            execution.program() === this.programId.toString()) {
            return this.handleProgramLog(log, errorOnDecodeFailure);
        }
        // Executing program is not this program.
        else {
            return [null, ...this.handleSystemLog(log)];
        }
    }
    // Handles logs from *this* program.
    handleProgramLog(log, errorOnDecodeFailure) {
        // This is a `msg!` log or a `sol_log_data` log.
        if (log.startsWith(PROGRAM_LOG) || log.startsWith(PROGRAM_DATA)) {
            const logStr = log.startsWith(PROGRAM_LOG)
                ? log.slice(PROGRAM_LOG_START_INDEX)
                : log.slice(PROGRAM_DATA_START_INDEX);
            const event = this.coder.events.decode(logStr);
            if (errorOnDecodeFailure && event === null) {
                throw new Error(`Unable to decode event ${logStr}`);
            }
            return [event, null, false];
        }
        // System log.
        else {
            return [null, ...this.handleSystemLog(log)];
        }
    }
    // Handles logs when the current program being executing is *not* this.
    handleSystemLog(log) {
        // System component.
        const logStart = log.split(":")[0];
        // Did the program finish executing?
        if (logStart.match(/^Program (.*) success/g) !== null) {
            return [null, true];
            // Recursive call.
        }
        else if (logStart.startsWith(`Program ${this.programId.toString()} invoke`)) {
            return [this.programId.toString(), false];
        }
        // CPI call.
        else if (logStart.includes("invoke")) {
            return ["cpi", false]; // Any string will do.
        }
        else {
            return [null, false];
        }
    }
}
// Stack frame execution context, allowing one to track what program is
// executing for a given log.
class ExecutionContext {
    constructor() {
        this.stack = [];
    }
    program() {
        if (!this.stack.length) {
            throw new Error("Expected the stack to have elements");
        }
        return this.stack[this.stack.length - 1];
    }
    push(newProgram) {
        this.stack.push(newProgram);
    }
    pop() {
        if (!this.stack.length) {
            throw new Error("Expected the stack to have elements");
        }
        this.stack.pop();
    }
}
class LogScanner {
    constructor(logs) {
        this.logs = logs;
    }
    next() {
        if (this.logs.length === 0) {
            return null;
        }
        let l = this.logs[0];
        this.logs = this.logs.slice(1);
        return l;
    }
}

class SimulateFactory {
    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {
        const simulate = async (...args) => {
            var _a;
            const tx = txFn(...args);
            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);
            let resp = undefined;
            if (provider.simulate === undefined) {
                throw new Error("This function requires 'Provider.simulate' to be implemented.");
            }
            try {
                resp = await provider.simulate(tx, ctx.signers, (_a = ctx.options) === null || _a === void 0 ? void 0 : _a.commitment);
            }
            catch (err) {
                throw translateError(err, idlErrors);
            }
            if (resp === undefined) {
                throw new Error("Unable to simulate transaction");
            }
            const logs = resp.logs;
            if (!logs) {
                throw new Error("Simulated logs not found");
            }
            const events = [];
            if (idl.events) {
                let parser = new EventParser(programId, coder);
                for (const event of parser.parseLogs(logs)) {
                    events.push(event);
                }
            }
            return { events, raw: logs };
        };
        return simulate;
    }
}

function uint64(property) {
    return new WrappedLayout(blob$1(8), (b) => u64$4.fromBuffer(b), (n) => n.toBuffer(), property);
}
function publicKey$6(property) {
    return new WrappedLayout(blob$1(32), (b) => new PublicKey(b), (key) => key.toBuffer(), property);
}
function coption(layout, property) {
    return new COptionLayout(layout, property);
}
class WrappedLayout extends Layout_2 {
    constructor(layout, decoder, encoder, property) {
        super(layout.span, property);
        this.layout = layout;
        this.decoder = decoder;
        this.encoder = encoder;
    }
    decode(b, offset) {
        return this.decoder(this.layout.decode(b, offset));
    }
    encode(src, b, offset) {
        return this.layout.encode(this.encoder(src), b, offset);
    }
    getSpan(b, offset) {
        return this.layout.getSpan(b, offset);
    }
}
class COptionLayout extends Layout_2 {
    constructor(layout, property) {
        super(-1, property);
        this.layout = layout;
        this.discriminator = u32$3();
    }
    encode(src, b, offset = 0) {
        if (src === null || src === undefined) {
            return this.layout.span + this.discriminator.encode(0, b, offset);
        }
        this.discriminator.encode(1, b, offset);
        return this.layout.encode(src, b, offset + 4) + 4;
    }
    decode(b, offset = 0) {
        const discriminator = this.discriminator.decode(b, offset);
        if (discriminator === 0) {
            return null;
        }
        else if (discriminator === 1) {
            return this.layout.decode(b, offset + 4);
        }
        throw new Error("Invalid coption " + this.layout.property);
    }
    getSpan(b, offset = 0) {
        return this.layout.getSpan(b, offset + 4) + 4;
    }
}
let u64$4 = class u64 extends BN$2 {
    /**
     * Convert to Buffer representation
     */
    toBuffer() {
        const a = super.toArray().reverse();
        const b = Buffer.from(a);
        if (b.length === 8) {
            return b;
        }
        if (b.length >= 8) {
            throw new Error("u64 too large");
        }
        const zeroPad = Buffer.alloc(8);
        b.copy(zeroPad);
        return zeroPad;
    }
    /**
     * Construct a u64 from Buffer representation
     */
    static fromBuffer(buffer) {
        if (buffer.length !== 8) {
            throw new Error(`Invalid buffer length: ${buffer.length}`);
        }
        return new u64([...buffer]
            .reverse()
            .map((i) => `00${i.toString(16)}`.slice(-2))
            .join(""), 16);
    }
};
const TOKEN_ACCOUNT_LAYOUT = struct$3([
    publicKey$6("mint"),
    publicKey$6("owner"),
    uint64("amount"),
    coption(publicKey$6(), "delegate"),
    ((p) => {
        const U = union(u8$3("discriminator"), null, p);
        U.addVariant(0, struct$3([]), "uninitialized");
        U.addVariant(1, struct$3([]), "initialized");
        U.addVariant(2, struct$3([]), "frozen");
        return U;
    })("state"),
    coption(uint64(), "isNative"),
    uint64("delegatedAmount"),
    coption(publicKey$6(), "closeAuthority"),
]);
function decodeTokenAccount(b) {
    return TOKEN_ACCOUNT_LAYOUT.decode(b);
}

// Populates a given accounts context with PDAs and common missing accounts.
class AccountsResolver {
    constructor(_args, _accounts, _provider, _programId, _idlIx, _accountNamespace, _idlTypes, _customResolver) {
        this._accounts = _accounts;
        this._provider = _provider;
        this._programId = _programId;
        this._idlIx = _idlIx;
        this._idlTypes = _idlTypes;
        this._customResolver = _customResolver;
        this._args = _args;
        this._accountStore = new AccountStore(_provider, _accountNamespace, this._programId);
    }
    args(_args) {
        this._args = _args;
    }
    // Note: We serially resolve PDAs one by one rather than doing them
    //       in parallel because there can be dependencies between
    //       addresses. That is, one PDA can be used as a seed in another.
    async resolve() {
        await this.resolveConst(this._idlIx.accounts);
        this._resolveEventCpi(this._idlIx.accounts);
        // Auto populate pdas and relations until we stop finding new accounts
        while ((await this.resolvePdas(this._idlIx.accounts)) +
            (await this.resolveRelations(this._idlIx.accounts)) +
            (await this.resolveCustom()) >
            0) { }
    }
    async resolveCustom() {
        if (this._customResolver) {
            const { accounts, resolved } = await this._customResolver({
                args: this._args,
                accounts: this._accounts,
                provider: this._provider,
                programId: this._programId,
                idlIx: this._idlIx,
            });
            this._accounts = accounts;
            return resolved;
        }
        return 0;
    }
    resolveOptionalsHelper(partialAccounts, accountItems) {
        const nestedAccountsGeneric = {};
        // Looping through accountItem array instead of on partialAccounts, so
        // we only traverse array once
        for (const accountItem of accountItems) {
            const accountName = accountItem.name;
            const partialAccount = partialAccounts[accountName];
            // Skip if the account isn't included (thus would be undefined)
            if (partialAccount === undefined)
                continue;
            if (isPartialAccounts(partialAccount)) {
                // is compound accounts, recurse one level deeper
                if (isIdlAccounts(accountItem)) {
                    nestedAccountsGeneric[accountName] = this.resolveOptionalsHelper(partialAccount, accountItem["accounts"]);
                }
                else {
                    // Here we try our best to recover gracefully. If there are optionals we can't check, we will fail then.
                    nestedAccountsGeneric[accountName] = flattenPartialAccounts(partialAccount, true);
                }
            }
            else {
                // if not compound accounts, do null/optional check and proceed
                if (partialAccount !== null) {
                    nestedAccountsGeneric[accountName] = translateAddress(partialAccount);
                }
                else if (accountItem["isOptional"]) {
                    nestedAccountsGeneric[accountName] = this._programId;
                }
            }
        }
        return nestedAccountsGeneric;
    }
    resolveOptionals(accounts) {
        Object.assign(this._accounts, this.resolveOptionalsHelper(accounts, this._idlIx.accounts));
    }
    get(path) {
        // Only return if pubkey
        const ret = path.reduce((acc, subPath) => acc && acc[subPath], this._accounts);
        if (ret && ret.toBase58) {
            return ret;
        }
    }
    set(path, value) {
        let curr = this._accounts;
        path.forEach((p, idx) => {
            const isLast = idx == path.length - 1;
            if (isLast) {
                curr[p] = value;
            }
            curr[p] = curr[p] || {};
            curr = curr[p];
        });
    }
    async resolveConst(accounts, path = []) {
        for (let k = 0; k < accounts.length; k += 1) {
            const accountDescOrAccounts = accounts[k];
            const subAccounts = accountDescOrAccounts.accounts;
            if (subAccounts) {
                await this.resolveConst(subAccounts, [
                    ...path,
                    camelCase$1(accountDescOrAccounts.name),
                ]);
            }
            const accountDesc = accountDescOrAccounts;
            const accountDescName = camelCase$1(accountDescOrAccounts.name);
            // Signers default to the provider.
            if (accountDesc.isSigner && !this.get([...path, accountDescName])) {
                // @ts-expect-error
                if (this._provider.wallet === undefined) {
                    throw new Error("This function requires the Provider interface implementor to have a 'wallet' field.");
                }
                // @ts-expect-error
                this.set([...path, accountDescName], this._provider.wallet.publicKey);
            }
            // Common accounts are auto populated with magic names by convention.
            if (Reflect.has(AccountsResolver.CONST_ACCOUNTS, accountDescName) &&
                !this.get([...path, accountDescName])) {
                this.set([...path, accountDescName], AccountsResolver.CONST_ACCOUNTS[accountDescName]);
            }
        }
    }
    /**
     * Resolve event CPI accounts `eventAuthority` and `program`.
     *
     * Accounts will only be resolved if they are declared next to each other to
     * reduce the chance of name collision.
     */
    _resolveEventCpi(accounts, path = []) {
        for (const i in accounts) {
            const accountDescOrAccounts = accounts[i];
            const subAccounts = accountDescOrAccounts.accounts;
            if (subAccounts) {
                this._resolveEventCpi(subAccounts, [
                    ...path,
                    camelCase$1(accountDescOrAccounts.name),
                ]);
            }
            // Validate next index exists
            const nextIndex = +i + 1;
            if (nextIndex === accounts.length)
                return;
            const currentName = camelCase$1(accounts[i].name);
            const nextName = camelCase$1(accounts[nextIndex].name);
            // Populate event CPI accounts if they exist
            if (currentName === "eventAuthority" && nextName === "program") {
                const currentPath = [...path, currentName];
                const nextPath = [...path, nextName];
                if (!this.get(currentPath)) {
                    this.set(currentPath, PublicKey.findProgramAddressSync([Buffer.from("__event_authority")], this._programId)[0]);
                }
                if (!this.get(nextPath)) {
                    this.set(nextPath, this._programId);
                }
                return;
            }
        }
    }
    async resolvePdas(accounts, path = []) {
        let found = 0;
        for (let k = 0; k < accounts.length; k += 1) {
            const accountDesc = accounts[k];
            const subAccounts = accountDesc.accounts;
            if (subAccounts) {
                found += await this.resolvePdas(subAccounts, [
                    ...path,
                    camelCase$1(accountDesc.name),
                ]);
            }
            const accountDescCasted = accountDesc;
            const accountDescName = camelCase$1(accountDesc.name);
            // PDA derived from IDL seeds.
            if (accountDescCasted.pda &&
                accountDescCasted.pda.seeds.length > 0 &&
                !this.get([...path, accountDescName])) {
                if (Boolean(await this.autoPopulatePda(accountDescCasted, path))) {
                    found += 1;
                }
            }
        }
        return found;
    }
    async resolveRelations(accounts, path = []) {
        let found = 0;
        for (let k = 0; k < accounts.length; k += 1) {
            const accountDesc = accounts[k];
            const subAccounts = accountDesc.accounts;
            if (subAccounts) {
                found += await this.resolveRelations(subAccounts, [
                    ...path,
                    camelCase$1(accountDesc.name),
                ]);
            }
            const relations = accountDesc.relations || [];
            const accountDescName = camelCase$1(accountDesc.name);
            const newPath = [...path, accountDescName];
            // If we have this account and there's some missing accounts that are relations to this account, fetch them
            const accountKey = this.get(newPath);
            if (accountKey) {
                const matching = relations.filter((rel) => !this.get([...path, camelCase$1(rel)]));
                found += matching.length;
                if (matching.length > 0) {
                    const account = await this._accountStore.fetchAccount({
                        publicKey: accountKey,
                    });
                    await Promise.all(matching.map(async (rel) => {
                        const relName = camelCase$1(rel);
                        this.set([...path, relName], account[relName]);
                        return account[relName];
                    }));
                }
            }
        }
        return found;
    }
    async autoPopulatePda(accountDesc, path = []) {
        if (!accountDesc.pda || !accountDesc.pda.seeds)
            throw new Error("Must have seeds");
        const seeds = await Promise.all(accountDesc.pda.seeds.map((seedDesc) => this.toBuffer(seedDesc, path)));
        if (seeds.some((seed) => typeof seed == "undefined")) {
            return;
        }
        const programId = await this.parseProgramId(accountDesc, path);
        if (!programId) {
            return;
        }
        const [pubkey] = await PublicKey.findProgramAddress(seeds, programId);
        this.set([...path, camelCase$1(accountDesc.name)], pubkey);
    }
    async parseProgramId(accountDesc, path = []) {
        var _a;
        if (!((_a = accountDesc.pda) === null || _a === void 0 ? void 0 : _a.programId)) {
            return this._programId;
        }
        switch (accountDesc.pda.programId.kind) {
            case "const":
                return new PublicKey(this.toBufferConst(accountDesc.pda.programId.value));
            case "arg":
                return this.argValue(accountDesc.pda.programId);
            case "account":
                return await this.accountValue(accountDesc.pda.programId, path);
            default:
                throw new Error(`Unexpected program seed kind: ${accountDesc.pda.programId.kind}`);
        }
    }
    async toBuffer(seedDesc, path = []) {
        switch (seedDesc.kind) {
            case "const":
                return this.toBufferConst(seedDesc);
            case "arg":
                return await this.toBufferArg(seedDesc);
            case "account":
                return await this.toBufferAccount(seedDesc, path);
            default:
                throw new Error(`Unexpected seed kind: ${seedDesc.kind}`);
        }
    }
    /**
     * Recursively get the type at some path of either a primitive or a user defined struct.
     */
    getType(type, path = []) {
        if (path.length > 0 && type.defined) {
            const subType = this._idlTypes.find((t) => t.name === type.defined);
            if (!subType) {
                throw new Error(`Cannot find type ${type.defined}`);
            }
            const structType = subType.type; // enum not supported yet
            const field = structType.fields.find((field) => field.name === path[0]);
            return this.getType(field.type, path.slice(1));
        }
        return type;
    }
    toBufferConst(seedDesc) {
        return this.toBufferValue(this.getType(seedDesc.type, (seedDesc.path || "").split(".").slice(1)), seedDesc.value);
    }
    async toBufferArg(seedDesc) {
        const argValue = this.argValue(seedDesc);
        if (typeof argValue === "undefined") {
            return;
        }
        return this.toBufferValue(this.getType(seedDesc.type, (seedDesc.path || "").split(".").slice(1)), argValue);
    }
    argValue(seedDesc) {
        const split = seedDesc.path.split(".");
        const seedArgName = camelCase$1(split[0]);
        const idlArgPosition = this._idlIx.args.findIndex((argDesc) => argDesc.name === seedArgName);
        if (idlArgPosition === -1) {
            throw new Error(`Unable to find argument for seed: ${seedArgName}`);
        }
        return split
            .slice(1)
            .reduce((curr, path) => (curr || {})[path], this._args[idlArgPosition]);
    }
    async toBufferAccount(seedDesc, path = []) {
        const accountValue = await this.accountValue(seedDesc, path);
        if (!accountValue) {
            return;
        }
        return this.toBufferValue(seedDesc.type, accountValue);
    }
    async accountValue(seedDesc, path = []) {
        const pathComponents = seedDesc.path.split(".");
        const fieldName = pathComponents[0];
        const fieldPubkey = this.get([...path, camelCase$1(fieldName)]);
        if (fieldPubkey === null) {
            throw new Error(`fieldPubkey is null`);
        }
        // The seed is a pubkey of the account.
        if (pathComponents.length === 1) {
            return fieldPubkey;
        }
        // The key is account data.
        //
        // Fetch and deserialize it.
        const account = await this._accountStore.fetchAccount({
            publicKey: fieldPubkey,
            name: seedDesc.account,
        });
        // Dereference all fields in the path to get the field value
        // used in the seed.
        const fieldValue = this.parseAccountValue(account, pathComponents.slice(1));
        return fieldValue;
    }
    parseAccountValue(account, path) {
        let accountField;
        while (path.length > 0) {
            accountField = account[camelCase$1(path[0])];
            path = path.slice(1);
        }
        return accountField;
    }
    // Converts the given idl valaue into a Buffer. The values here must be
    // primitives. E.g. no structs.
    //
    // TODO: add more types here as needed.
    toBufferValue(type, value) {
        switch (type) {
            case "u8":
                return Buffer.from([value]);
            case "u16":
                let b = Buffer.alloc(2);
                b.writeUInt16LE(value);
                return b;
            case "u32":
                let buf = Buffer.alloc(4);
                buf.writeUInt32LE(value);
                return buf;
            case "u64":
                let bU64 = Buffer.alloc(8);
                bU64.writeBigUInt64LE(BigInt(value));
                return bU64;
            case "string":
                return Buffer.from(encode$2(value));
            case "publicKey":
                return value.toBuffer();
            default:
                if (type.array) {
                    return Buffer.from(value);
                }
                throw new Error(`Unexpected seed type: ${type}`);
        }
    }
}
AccountsResolver.CONST_ACCOUNTS = {
    associatedTokenProgram: ASSOCIATED_PROGRAM_ID,
    rent: SYSVAR_RENT_PUBKEY,
    systemProgram: SystemProgram.programId,
    tokenProgram: TOKEN_PROGRAM_ID$1,
    clock: SYSVAR_CLOCK_PUBKEY,
};
// TODO: this should be configureable to avoid unnecessary requests.
class AccountStore {
    // todo: don't use the progrma use the account namespace.
    constructor(_provider, _accounts, _programId) {
        this._provider = _provider;
        this._programId = _programId;
        this._cache = new Map();
        this._idls = {};
        this._idls[_programId.toBase58()] = _accounts;
    }
    async ensureIdl(programId) {
        if (!this._idls[programId.toBase58()]) {
            const idl = await Program$1.fetchIdl(programId, this._provider);
            if (idl) {
                const program = new Program$1(idl, programId, this._provider);
                this._idls[programId.toBase58()] = program.account;
            }
        }
        return this._idls[programId.toBase58()];
    }
    async fetchAccount({ publicKey, name, programId = this._programId, }) {
        const address = publicKey.toString();
        if (!this._cache.has(address)) {
            if (name === "TokenAccount") {
                const accountInfo = await this._provider.connection.getAccountInfo(publicKey);
                if (accountInfo === null) {
                    throw new Error(`invalid account info for ${address}`);
                }
                const data = decodeTokenAccount(accountInfo.data);
                this._cache.set(address, data);
            }
            else if (name) {
                const accounts = await this.ensureIdl(programId);
                if (accounts) {
                    const accountFetcher = accounts[camelCase$1(name)];
                    if (accountFetcher) {
                        const account = await accountFetcher.fetch(publicKey);
                        this._cache.set(address, account);
                    }
                }
            }
            else {
                const account = await this._provider.connection.getAccountInfo(publicKey);
                if (account === null) {
                    throw new Error(`invalid account info for ${address}`);
                }
                const data = account.data;
                const accounts = await this.ensureIdl(account.owner);
                if (accounts) {
                    const firstAccountLayout = Object.values(accounts)[0];
                    if (!firstAccountLayout) {
                        throw new Error("No accounts for this program");
                    }
                    const result = firstAccountLayout.coder.accounts.decodeAny(data);
                    this._cache.set(address, result);
                }
            }
        }
        return this._cache.get(address);
    }
}

class MethodsBuilderFactory {
    static build(provider, programId, idlIx, ixFn, txFn, rpcFn, simulateFn, viewFn, accountNamespace, idlTypes, customResolver) {
        return (...args) => new MethodsBuilder(args, ixFn, txFn, rpcFn, simulateFn, viewFn, provider, programId, idlIx, accountNamespace, idlTypes, customResolver);
    }
}
function isPartialAccounts(partialAccount) {
    return (typeof partialAccount === "object" &&
        partialAccount !== null &&
        !("_bn" in partialAccount) // Ensures not a pubkey
    );
}
function flattenPartialAccounts(partialAccounts, throwOnNull) {
    const toReturn = {};
    for (const accountName in partialAccounts) {
        const account = partialAccounts[accountName];
        if (account === null) {
            if (throwOnNull)
                throw new Error("Failed to resolve optionals due to IDL type mismatch with input accounts!");
            continue;
        }
        toReturn[accountName] = isPartialAccounts(account)
            ? flattenPartialAccounts(account, true)
            : translateAddress(account);
    }
    return toReturn;
}
class MethodsBuilder {
    constructor(_args, _ixFn, _txFn, _rpcFn, _simulateFn, _viewFn, _provider, _programId, _idlIx, _accountNamespace, _idlTypes, _customResolver) {
        this._ixFn = _ixFn;
        this._txFn = _txFn;
        this._rpcFn = _rpcFn;
        this._simulateFn = _simulateFn;
        this._viewFn = _viewFn;
        this._programId = _programId;
        this._accounts = {};
        this._remainingAccounts = [];
        this._signers = [];
        this._preInstructions = [];
        this._postInstructions = [];
        this._autoResolveAccounts = true;
        this._args = _args;
        this._accountsResolver = new AccountsResolver(_args, this._accounts, _provider, _programId, _idlIx, _accountNamespace, _idlTypes, _customResolver);
    }
    args(_args) {
        this._args = _args;
        this._accountsResolver.args(_args);
    }
    async pubkeys() {
        if (this._autoResolveAccounts) {
            await this._accountsResolver.resolve();
        }
        return this._accounts;
    }
    accounts(accounts) {
        this._autoResolveAccounts = true;
        this._accountsResolver.resolveOptionals(accounts);
        return this;
    }
    accountsStrict(accounts) {
        this._autoResolveAccounts = false;
        this._accountsResolver.resolveOptionals(accounts);
        return this;
    }
    signers(signers) {
        this._signers = this._signers.concat(signers);
        return this;
    }
    remainingAccounts(accounts) {
        this._remainingAccounts = this._remainingAccounts.concat(accounts);
        return this;
    }
    preInstructions(ixs) {
        this._preInstructions = this._preInstructions.concat(ixs);
        return this;
    }
    postInstructions(ixs) {
        this._postInstructions = this._postInstructions.concat(ixs);
        return this;
    }
    async rpc(options) {
        if (this._autoResolveAccounts) {
            await this._accountsResolver.resolve();
        }
        // @ts-ignore
        return this._rpcFn(...this._args, {
            accounts: this._accounts,
            signers: this._signers,
            remainingAccounts: this._remainingAccounts,
            preInstructions: this._preInstructions,
            postInstructions: this._postInstructions,
            options: options,
        });
    }
    async rpcAndKeys(options) {
        const pubkeys = await this.pubkeys();
        return {
            pubkeys,
            signature: await this.rpc(options),
        };
    }
    async view(options) {
        if (this._autoResolveAccounts) {
            await this._accountsResolver.resolve();
        }
        if (!this._viewFn) {
            throw new Error("Method does not support views");
        }
        // @ts-ignore
        return this._viewFn(...this._args, {
            accounts: this._accounts,
            signers: this._signers,
            remainingAccounts: this._remainingAccounts,
            preInstructions: this._preInstructions,
            postInstructions: this._postInstructions,
            options: options,
        });
    }
    async simulate(options) {
        if (this._autoResolveAccounts) {
            await this._accountsResolver.resolve();
        }
        // @ts-ignore
        return this._simulateFn(...this._args, {
            accounts: this._accounts,
            signers: this._signers,
            remainingAccounts: this._remainingAccounts,
            preInstructions: this._preInstructions,
            postInstructions: this._postInstructions,
            options: options,
        });
    }
    async instruction() {
        if (this._autoResolveAccounts) {
            await this._accountsResolver.resolve();
        }
        // @ts-ignore
        return this._ixFn(...this._args, {
            accounts: this._accounts,
            signers: this._signers,
            remainingAccounts: this._remainingAccounts,
            preInstructions: this._preInstructions,
            postInstructions: this._postInstructions,
        });
    }
    /**
     * Convenient shortcut to get instructions and pubkeys via
     * const { pubkeys, instructions } = await prepare();
     */
    async prepare() {
        return {
            instruction: await this.instruction(),
            pubkeys: await this.pubkeys(),
            signers: await this._signers,
        };
    }
    async transaction() {
        if (this._autoResolveAccounts) {
            await this._accountsResolver.resolve();
        }
        // @ts-ignore
        return this._txFn(...this._args, {
            accounts: this._accounts,
            signers: this._signers,
            remainingAccounts: this._remainingAccounts,
            preInstructions: this._preInstructions,
            postInstructions: this._postInstructions,
        });
    }
}

class ViewFactory {
    static build(programId, idlIx, simulateFn, idl) {
        const isMut = idlIx.accounts.find((a) => a.isMut);
        const hasReturn = !!idlIx.returns;
        if (isMut || !hasReturn)
            return;
        const view = async (...args) => {
            var _a, _b;
            let simulationResult = await simulateFn(...args);
            const returnPrefix = `Program return: ${programId} `;
            let returnLog = simulationResult.raw.find((l) => l.startsWith(returnPrefix));
            if (!returnLog) {
                throw new Error("View expected return log");
            }
            let returnData = decode$4(returnLog.slice(returnPrefix.length));
            let returnType = idlIx.returns;
            if (!returnType) {
                throw new Error("View expected return type");
            }
            const coder = IdlCoder.fieldLayout({ type: returnType }, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));
            return coder.decode(returnData);
        };
        return view;
    }
}

class NamespaceFactory {
    /**
     * Generates all namespaces for a given program.
     */
    static build(idl, coder, programId, provider, getCustomResolver) {
        const rpc = {};
        const instruction = {};
        const transaction = {};
        const simulate = {};
        const methods = {};
        const view = {};
        const idlErrors = parseIdlErrors(idl);
        const account = idl.accounts
            ? AccountFactory.build(idl, coder, programId, provider)
            : {};
        idl.instructions.forEach((idlIx) => {
            const ixItem = InstructionNamespaceFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);
            const txItem = TransactionFactory.build(idlIx, ixItem);
            const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);
            const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);
            const viewItem = ViewFactory.build(programId, idlIx, simulateItem, idl);
            const methodItem = MethodsBuilderFactory.build(provider, programId, idlIx, ixItem, txItem, rpcItem, simulateItem, viewItem, account, idl.types || [], getCustomResolver && getCustomResolver(idlIx));
            const name = camelCase$1(idlIx.name);
            instruction[name] = ixItem;
            transaction[name] = txItem;
            rpc[name] = rpcItem;
            simulate[name] = simulateItem;
            methods[name] = methodItem;
            if (viewItem) {
                view[name] = viewItem;
            }
        });
        return [
            rpc,
            instruction,
            transaction,
            account,
            simulate,
            methods,
            view,
        ];
    }
}

/**
 * ## Program
 *
 * Program provides the IDL deserialized client representation of an Anchor
 * program.
 *
 * This API is the one stop shop for all things related to communicating with
 * on-chain programs. Among other things, one can send transactions, fetch
 * deserialized accounts, decode instruction data, subscribe to account
 * changes, and listen to events.
 *
 * In addition to field accessors and methods, the object provides a set of
 * dynamically generated properties, also known as namespaces, that
 * map one-to-one to program methods and accounts. These namespaces generally
 *  can be used as follows:
 *
 * ## Usage
 *
 * ```javascript
 * program.<namespace>.<program-specific-method>
 * ```
 *
 * API specifics are namespace dependent. The examples used in the documentation
 * below will refer to the two counter examples found
 * [here](https://github.com/coral-xyz/anchor#examples).
 */
let Program$1 = class Program {
    /**
     * Address of the program.
     */
    get programId() {
        return this._programId;
    }
    /**
     * IDL defining the program's interface.
     */
    get idl() {
        return this._idl;
    }
    /**
     * Coder for serializing requests.
     */
    get coder() {
        return this._coder;
    }
    /**
     * Wallet and network provider.
     */
    get provider() {
        return this._provider;
    }
    /**
     * @param idl       The interface definition.
     * @param programId The on-chain address of the program.
     * @param provider  The network and wallet context to use. If not provided
     *                  then uses [[getProvider]].
     * @param getCustomResolver A function that returns a custom account resolver
     *                          for the given instruction. This is useful for resolving
     *                          public keys of missing accounts when building instructions
     */
    constructor(idl, programId, provider, coder, getCustomResolver) {
        programId = translateAddress(programId);
        if (!provider) {
            provider = getProvider();
        }
        // Fields.
        this._idl = idl;
        this._provider = provider;
        this._programId = programId;
        this._coder = coder !== null && coder !== void 0 ? coder : new BorshCoder(idl);
        this._events = new EventManager(this._programId, provider, this._coder);
        // Dynamic namespaces.
        const [rpc, instruction, transaction, account, simulate, methods, views] = NamespaceFactory.build(idl, this._coder, programId, provider, getCustomResolver !== null && getCustomResolver !== void 0 ? getCustomResolver : (() => undefined));
        this.rpc = rpc;
        this.instruction = instruction;
        this.transaction = transaction;
        this.account = account;
        this.simulate = simulate;
        this.methods = methods;
        this.views = views;
    }
    /**
     * Generates a Program client by fetching the IDL from the network.
     *
     * In order to use this method, an IDL must have been previously initialized
     * via the anchor CLI's `anchor idl init` command.
     *
     * @param programId The on-chain address of the program.
     * @param provider  The network and wallet context.
     */
    static async at(address, provider) {
        const programId = translateAddress(address);
        const idl = await Program.fetchIdl(programId, provider);
        if (!idl) {
            throw new Error(`IDL not found for program: ${address.toString()}`);
        }
        return new Program(idl, programId, provider);
    }
    /**
     * Fetches an idl from the blockchain.
     *
     * In order to use this method, an IDL must have been previously initialized
     * via the anchor CLI's `anchor idl init` command.
     *
     * @param programId The on-chain address of the program.
     * @param provider  The network and wallet context.
     */
    static async fetchIdl(address, provider) {
        provider = provider !== null && provider !== void 0 ? provider : getProvider();
        const programId = translateAddress(address);
        const idlAddr = await idlAddress(programId);
        const accountInfo = await provider.connection.getAccountInfo(idlAddr);
        if (!accountInfo) {
            return null;
        }
        // Chop off account discriminator.
        let idlAccount = decodeIdlAccount(accountInfo.data.slice(8));
        const inflatedIdl = inflate_1(idlAccount.data);
        return JSON.parse(decode$2(inflatedIdl));
    }
    /**
     * Invokes the given callback every time the given event is emitted.
     *
     * @param eventName The PascalCase name of the event, provided by the IDL.
     * @param callback  The function to invoke whenever the event is emitted from
     *                  program logs.
     */
    addEventListener(eventName, callback) {
        return this._events.addEventListener(eventName, callback);
    }
    /**
     * Unsubscribes from the given eventName.
     */
    async removeEventListener(listener) {
        return await this._events.removeEventListener(listener);
    }
};

const SYSTEM_PROGRAM_ID = new PublicKey("11111111111111111111111111111111");
function program(provider) {
    return new Program$1(IDL, SYSTEM_PROGRAM_ID, provider, coder());
}
function coder() {
    return new SystemCoder(IDL);
}
const IDL = {
    version: "0.1.0",
    name: "system_program",
    instructions: [
        {
            name: "createAccount",
            accounts: [
                {
                    name: "from",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "to",
                    isMut: true,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "lamports",
                    type: "u64",
                },
                {
                    name: "space",
                    type: "u64",
                },
                {
                    name: "owner",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "assign",
            accounts: [
                {
                    name: "pubkey",
                    isMut: true,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "owner",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "transfer",
            accounts: [
                {
                    name: "from",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "to",
                    isMut: true,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "lamports",
                    type: "u64",
                },
            ],
        },
        {
            name: "createAccountWithSeed",
            accounts: [
                {
                    name: "from",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "to",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "base",
                    isMut: false,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "base",
                    type: "publicKey",
                },
                {
                    name: "seed",
                    type: "string",
                },
                {
                    name: "lamports",
                    type: "u64",
                },
                {
                    name: "space",
                    type: "u64",
                },
                {
                    name: "owner",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "advanceNonceAccount",
            accounts: [
                {
                    name: "nonce",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "recentBlockhashes",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "authorized",
                    isMut: false,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "authorized",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "withdrawNonceAccount",
            accounts: [
                {
                    name: "nonce",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "to",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "recentBlockhashes",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "rent",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "authorized",
                    isMut: false,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "lamports",
                    type: "u64",
                },
            ],
        },
        {
            name: "initializeNonceAccount",
            accounts: [
                {
                    name: "nonce",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "recentBlockhashes",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "rent",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "authorized",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "authorizeNonceAccount",
            accounts: [
                {
                    name: "nonce",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "authorized",
                    isMut: false,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "authorized",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "allocate",
            accounts: [
                {
                    name: "pubkey",
                    isMut: true,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "space",
                    type: "u64",
                },
            ],
        },
        {
            name: "allocateWithSeed",
            accounts: [
                {
                    name: "account",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "base",
                    isMut: false,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "base",
                    type: "publicKey",
                },
                {
                    name: "seed",
                    type: "string",
                },
                {
                    name: "space",
                    type: "u64",
                },
                {
                    name: "owner",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "assignWithSeed",
            accounts: [
                {
                    name: "account",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "base",
                    isMut: false,
                    isSigner: true,
                },
            ],
            args: [
                {
                    name: "base",
                    type: "publicKey",
                },
                {
                    name: "seed",
                    type: "string",
                },
                {
                    name: "owner",
                    type: "publicKey",
                },
            ],
        },
        {
            name: "transferWithSeed",
            accounts: [
                {
                    name: "from",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "base",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "to",
                    isMut: true,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "lamports",
                    type: "u64",
                },
                {
                    name: "seed",
                    type: "string",
                },
                {
                    name: "owner",
                    type: "publicKey",
                },
            ],
        },
    ],
    accounts: [
        {
            name: "nonce",
            type: {
                kind: "struct",
                fields: [
                    {
                        name: "version",
                        type: "u32",
                    },
                    {
                        name: "state",
                        type: "u32",
                    },
                    {
                        name: "authorizedPubkey",
                        type: "publicKey",
                    },
                    {
                        name: "nonce",
                        type: "publicKey",
                    },
                    {
                        name: "feeCalculator",
                        type: {
                            defined: "FeeCalculator",
                        },
                    },
                ],
            },
        },
    ],
    types: [
        {
            name: "FeeCalculator",
            type: {
                kind: "struct",
                fields: [
                    {
                        name: "lamportsPerSignature",
                        type: "u64",
                    },
                ],
            },
        },
    ],
};

class Native {
    static system(provider) {
        return program(provider);
    }
}

var anchor = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AccountClient: AccountClient,
  AnchorError: AnchorError,
  AnchorProvider: AnchorProvider,
  BN: BN$2,
  BorshAccountsCoder: BorshAccountsCoder,
  BorshCoder: BorshCoder,
  BorshEventCoder: BorshEventCoder,
  BorshInstructionCoder: BorshInstructionCoder,
  DISCRIMINATOR_SIZE: DISCRIMINATOR_SIZE,
  EventManager: EventManager,
  EventParser: EventParser,
  IdlError: IdlError,
  LangErrorCode: LangErrorCode,
  LangErrorMessage: LangErrorMessage,
  MethodsBuilderFactory: MethodsBuilderFactory,
  Native: Native,
  Program: Program$1,
  ProgramError: ProgramError$3,
  ProgramErrorStack: ProgramErrorStack,
  SystemCoder: SystemCoder,
  eventDiscriminator: eventDiscriminator,
  getProvider: getProvider,
  parseIdlErrors: parseIdlErrors,
  setProvider: setProvider,
  splitArgsAndCtx: splitArgsAndCtx,
  toInstruction: toInstruction,
  translateAddress: translateAddress,
  translateError: translateError,
  utils: index$2,
  validateAccounts: validateAccounts,
  web3: index_browser_esm
});

/** Address of the SPL Token program */
const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
/** Address of the SPL Token 2022 program */
new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');
/** Address of the SPL Associated Token Account program */
const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
/** Address of the special mint for wrapped native SOL in spl-token */
new PublicKey('So11111111111111111111111111111111111111112');
/** Address of the special mint for wrapped native SOL in spl-token-2022 */
new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');

const encodeDecode = (layout) => {
    const decode = layout.decode.bind(layout);
    const encode = layout.encode.bind(layout);
    return { decode, encode };
};

const bigInt = (length) => (property) => {
    const layout = blob$2(length, property);
    const { encode, decode } = encodeDecode(layout);
    const bigIntLayout = layout;
    bigIntLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return toBigIntLE_1(Buffer.from(src));
    };
    bigIntLayout.encode = (bigInt, buffer, offset) => {
        const src = toBufferLE_1(bigInt, length);
        return encode(src, buffer, offset);
    };
    return bigIntLayout;
};
const u64$3 = bigInt(8);

const bool$3 = (property) => {
    const layout = u8$4(property);
    const { encode, decode } = encodeDecode(layout);
    const boolLayout = layout;
    boolLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return !!src;
    };
    boolLayout.encode = (bool, buffer, offset) => {
        const src = Number(bool);
        return encode(src, buffer, offset);
    };
    return boolLayout;
};

const publicKey$5 = (property) => {
    const layout = blob$2(32, property);
    const { encode, decode } = encodeDecode(layout);
    const publicKeyLayout = layout;
    publicKeyLayout.decode = (buffer, offset) => {
        const src = decode(buffer, offset);
        return new PublicKey(src);
    };
    publicKeyLayout.encode = (publicKey, buffer, offset) => {
        const src = publicKey.toBuffer();
        return encode(src, buffer, offset);
    };
    return publicKeyLayout;
};

/** Base class for errors */
class TokenError extends Error {
    constructor(message) {
        super(message);
    }
}
/** Thrown if an account is not found at the expected address */
class TokenAccountNotFoundError extends TokenError {
    constructor() {
        super(...arguments);
        this.name = 'TokenAccountNotFoundError';
    }
}
/** Thrown if a program state account is not a valid Account */
class TokenInvalidAccountError extends TokenError {
    constructor() {
        super(...arguments);
        this.name = 'TokenInvalidAccountError';
    }
}
/** Thrown if a program state account is not owned by the expected token program */
class TokenInvalidAccountOwnerError extends TokenError {
    constructor() {
        super(...arguments);
        this.name = 'TokenInvalidAccountOwnerError';
    }
}
/** Thrown if the byte length of an program state account doesn't match the expected size */
class TokenInvalidAccountSizeError extends TokenError {
    constructor() {
        super(...arguments);
        this.name = 'TokenInvalidAccountSizeError';
    }
}
/** Thrown if the owner of a token account is a PDA (Program Derived Address) */
class TokenOwnerOffCurveError extends TokenError {
    constructor() {
        super(...arguments);
        this.name = 'TokenOwnerOffCurveError';
    }
}

/** Instructions defined by the program */
var TokenInstruction;
(function (TokenInstruction) {
    TokenInstruction[TokenInstruction["InitializeMint"] = 0] = "InitializeMint";
    TokenInstruction[TokenInstruction["InitializeAccount"] = 1] = "InitializeAccount";
    TokenInstruction[TokenInstruction["InitializeMultisig"] = 2] = "InitializeMultisig";
    TokenInstruction[TokenInstruction["Transfer"] = 3] = "Transfer";
    TokenInstruction[TokenInstruction["Approve"] = 4] = "Approve";
    TokenInstruction[TokenInstruction["Revoke"] = 5] = "Revoke";
    TokenInstruction[TokenInstruction["SetAuthority"] = 6] = "SetAuthority";
    TokenInstruction[TokenInstruction["MintTo"] = 7] = "MintTo";
    TokenInstruction[TokenInstruction["Burn"] = 8] = "Burn";
    TokenInstruction[TokenInstruction["CloseAccount"] = 9] = "CloseAccount";
    TokenInstruction[TokenInstruction["FreezeAccount"] = 10] = "FreezeAccount";
    TokenInstruction[TokenInstruction["ThawAccount"] = 11] = "ThawAccount";
    TokenInstruction[TokenInstruction["TransferChecked"] = 12] = "TransferChecked";
    TokenInstruction[TokenInstruction["ApproveChecked"] = 13] = "ApproveChecked";
    TokenInstruction[TokenInstruction["MintToChecked"] = 14] = "MintToChecked";
    TokenInstruction[TokenInstruction["BurnChecked"] = 15] = "BurnChecked";
    TokenInstruction[TokenInstruction["InitializeAccount2"] = 16] = "InitializeAccount2";
    TokenInstruction[TokenInstruction["SyncNative"] = 17] = "SyncNative";
    TokenInstruction[TokenInstruction["InitializeAccount3"] = 18] = "InitializeAccount3";
    TokenInstruction[TokenInstruction["InitializeMultisig2"] = 19] = "InitializeMultisig2";
    TokenInstruction[TokenInstruction["InitializeMint2"] = 20] = "InitializeMint2";
    TokenInstruction[TokenInstruction["GetAccountDataSize"] = 21] = "GetAccountDataSize";
    TokenInstruction[TokenInstruction["InitializeImmutableOwner"] = 22] = "InitializeImmutableOwner";
    TokenInstruction[TokenInstruction["AmountToUiAmount"] = 23] = "AmountToUiAmount";
    TokenInstruction[TokenInstruction["UiAmountToAmount"] = 24] = "UiAmountToAmount";
    TokenInstruction[TokenInstruction["InitializeMintCloseAuthority"] = 25] = "InitializeMintCloseAuthority";
    TokenInstruction[TokenInstruction["TransferFeeExtension"] = 26] = "TransferFeeExtension";
    TokenInstruction[TokenInstruction["ConfidentialTransferExtension"] = 27] = "ConfidentialTransferExtension";
    TokenInstruction[TokenInstruction["DefaultAccountStateExtension"] = 28] = "DefaultAccountStateExtension";
    TokenInstruction[TokenInstruction["Reallocate"] = 29] = "Reallocate";
    TokenInstruction[TokenInstruction["MemoTransferExtension"] = 30] = "MemoTransferExtension";
    TokenInstruction[TokenInstruction["CreateNativeMint"] = 31] = "CreateNativeMint";
    TokenInstruction[TokenInstruction["InitializeNonTransferableMint"] = 32] = "InitializeNonTransferableMint";
    TokenInstruction[TokenInstruction["InterestBearingMintExtension"] = 33] = "InterestBearingMintExtension";
    TokenInstruction[TokenInstruction["CpiGuardExtension"] = 34] = "CpiGuardExtension";
    TokenInstruction[TokenInstruction["InitializePermanentDelegate"] = 35] = "InitializePermanentDelegate";
    TokenInstruction[TokenInstruction["TransferHookExtension"] = 36] = "TransferHookExtension";
    // ConfidentialTransferFeeExtension = 37,
    // WithdrawalExcessLamports = 38,
    TokenInstruction[TokenInstruction["MetadataPointerExtension"] = 39] = "MetadataPointerExtension";
})(TokenInstruction || (TokenInstruction = {}));

/** @internal */
function addSigners(keys, ownerOrAuthority, multiSigners) {
    if (multiSigners.length) {
        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });
        for (const signer of multiSigners) {
            keys.push({
                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,
                isSigner: true,
                isWritable: false,
            });
        }
    }
    else {
        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });
    }
    return keys;
}

var AccountType;
(function (AccountType) {
    AccountType[AccountType["Uninitialized"] = 0] = "Uninitialized";
    AccountType[AccountType["Mint"] = 1] = "Mint";
    AccountType[AccountType["Account"] = 2] = "Account";
})(AccountType || (AccountType = {}));
const ACCOUNT_TYPE_SIZE = 1;

/** Buffer layout for de/serializing a multisig */
const MultisigLayout = struct$4([
    u8$4('m'),
    u8$4('n'),
    bool$3('isInitialized'),
    publicKey$5('signer1'),
    publicKey$5('signer2'),
    publicKey$5('signer3'),
    publicKey$5('signer4'),
    publicKey$5('signer5'),
    publicKey$5('signer6'),
    publicKey$5('signer7'),
    publicKey$5('signer8'),
    publicKey$5('signer9'),
    publicKey$5('signer10'),
    publicKey$5('signer11'),
]);
/** Byte length of a multisig */
const MULTISIG_SIZE = MultisigLayout.span;

/** Token account state as stored by the program */
var AccountState;
(function (AccountState) {
    AccountState[AccountState["Uninitialized"] = 0] = "Uninitialized";
    AccountState[AccountState["Initialized"] = 1] = "Initialized";
    AccountState[AccountState["Frozen"] = 2] = "Frozen";
})(AccountState || (AccountState = {}));
/** Buffer layout for de/serializing a token account */
const AccountLayout = struct$4([
    publicKey$5('mint'),
    publicKey$5('owner'),
    u64$3('amount'),
    u32$4('delegateOption'),
    publicKey$5('delegate'),
    u8$4('state'),
    u32$4('isNativeOption'),
    u64$3('isNative'),
    u64$3('delegatedAmount'),
    u32$4('closeAuthorityOption'),
    publicKey$5('closeAuthority'),
]);
/** Byte length of a token account */
const ACCOUNT_SIZE = AccountLayout.span;
/**
 * Retrieve information about a token account
 *
 * @param connection Connection to use
 * @param address    Token account
 * @param commitment Desired level of commitment for querying the state
 * @param programId  SPL Token program account
 *
 * @return Token account information
 */
async function getAccount(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {
    const info = await connection.getAccountInfo(address, commitment);
    return unpackAccount(address, info, programId);
}
/**
 * Unpack a token account
 *
 * @param address   Token account
 * @param info      Token account data
 * @param programId SPL Token program account
 *
 * @return Unpacked token account
 */
function unpackAccount(address, info, programId = TOKEN_PROGRAM_ID) {
    if (!info)
        throw new TokenAccountNotFoundError();
    if (!info.owner.equals(programId))
        throw new TokenInvalidAccountOwnerError();
    if (info.data.length < ACCOUNT_SIZE)
        throw new TokenInvalidAccountSizeError();
    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));
    let tlvData = Buffer.alloc(0);
    if (info.data.length > ACCOUNT_SIZE) {
        if (info.data.length === MULTISIG_SIZE)
            throw new TokenInvalidAccountSizeError();
        if (info.data[ACCOUNT_SIZE] != AccountType.Account)
            throw new TokenInvalidAccountError();
        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);
    }
    return {
        address,
        mint: rawAccount.mint,
        owner: rawAccount.owner,
        amount: rawAccount.amount,
        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,
        delegatedAmount: rawAccount.delegatedAmount,
        isInitialized: rawAccount.state !== AccountState.Uninitialized,
        isFrozen: rawAccount.state === AccountState.Frozen,
        isNative: !!rawAccount.isNativeOption,
        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,
        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,
        tlvData,
    };
}

/** Buffer layout for de/serializing a mint */
const MintLayout = struct$4([
    u32$4('mintAuthorityOption'),
    publicKey$5('mintAuthority'),
    u64$3('supply'),
    u8$4('decimals'),
    bool$3('isInitialized'),
    u32$4('freezeAuthorityOption'),
    publicKey$5('freezeAuthority'),
]);
/** Byte length of a mint */
MintLayout.span;
/**
 * Async version of getAssociatedTokenAddressSync
 * For backwards compatibility
 *
 * @param mint                     Token mint account
 * @param owner                    Owner of the new account
 * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Promise containing the address of the associated token account
 */
async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))
        throw new TokenOwnerOffCurveError();
    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
    return address;
}
/**
 * Get the address of the associated token account for a given mint and owner
 *
 * @param mint                     Token mint account
 * @param owner                    Owner of the new account
 * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Address of the associated token account
 */
function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))
        throw new TokenOwnerOffCurveError();
    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
    return address;
}

/**
 * Construct a CreateAssociatedTokenAccount instruction
 *
 * @param payer                    Payer of the initialization fees
 * @param associatedToken          New associated token account
 * @param owner                    Owner of the new account
 * @param mint                     Token mint account
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Instruction to add to a transaction
 */
function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);
}
function buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
    const keys = [
        { pubkey: payer, isSigner: true, isWritable: true },
        { pubkey: associatedToken, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: false, isWritable: false },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
        { pubkey: programId, isSigner: false, isWritable: false },
    ];
    return new TransactionInstruction({
        keys,
        programId: associatedTokenProgramId,
        data: instructionData,
    });
}

/** TODO: docs */
const transferInstructionData = struct$4([u8$4('instruction'), u64$3('amount')]);
/**
 * Construct a Transfer instruction
 *
 * @param source       Source account
 * @param destination  Destination account
 * @param owner        Owner of the source account
 * @param amount       Number of tokens to transfer
 * @param multiSigners Signing accounts if `owner` is a multisig
 * @param programId    SPL Token program account
 *
 * @return Instruction to add to a transaction
 */
function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {
    const keys = addSigners([
        { pubkey: source, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true },
    ], owner, multiSigners);
    const data = Buffer.alloc(transferInstructionData.span);
    transferInstructionData.encode({
        instruction: TokenInstruction.Transfer,
        amount: BigInt(amount),
    }, data);
    return new TransactionInstruction({ keys, programId, data });
}

var token$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.associatedAddress = exports.ASSOCIATED_PROGRAM_ID = exports.TOKEN_PROGRAM_ID = void 0;
	const web3_js_1 = index_browser_esm;
	exports.TOKEN_PROGRAM_ID = new web3_js_1.PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
	exports.ASSOCIATED_PROGRAM_ID = new web3_js_1.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
	function associatedAddress({ mint, owner, }) {
	    return web3_js_1.PublicKey.findProgramAddressSync([owner.toBuffer(), exports.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], exports.ASSOCIATED_PROGRAM_ID)[0];
	}
	exports.associatedAddress = associatedAddress;
	
} (token$1));

/**
 * Defines a type `T` that can also be `null`.
 * @category Utils — Options
 */

/**
 * An implementation of the Rust Option type in JavaScript.
 * It can be one of the following:
 * - <code>{@link Some}<T></code>: Meaning there is a value of type T.
 * - <code>{@link None}</code>: Meaning there is no value.
 *
 * @category Utils — Options
 */

/**
 * Defines a looser type that can be used when serializing an {@link Option}.
 * This allows us to pass null or the Option value directly whilst still
 * supporting the Option type for use-cases that need more type safety.
 *
 * @category Utils — Options
 */

/**
 * Represents an option of type `T` that has a value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */

/**
 * Represents an option of type `T` that has no value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */

/**
 * Creates a new {@link Option} of type `T` that has a value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */
const some$1 = value => ({
  __option: 'Some',
  value
});

/**
 * Creates a new {@link Option} of type `T` that has no value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */
const none$1 = () => ({
  __option: 'None'
});

/**
 * Whether the given data is an {@link Option}.
 * @category Utils — Options
 */
const isOption$1 = input => input && typeof input === 'object' && '__option' in input && (input.__option === 'Some' && 'value' in input || input.__option === 'None');

/**
 * Whether the given {@link Option} is a {@link Some}.
 * @category Utils — Options
 */
const isSome$1 = option => option.__option === 'Some';

/**
 * Wraps a nullable value into an {@link Option}.
 *
 * @category Utils — Options
 */
const wrapNullable$1 = nullable => nullable !== null ? some$1(nullable) : none$1();

/** @category Errors */
let InvalidBaseStringError$3 = class InvalidBaseStringError extends Error {
  name = 'InvalidBaseStringError';
  constructor(value, base, cause) {
    const message = `Expected a string of base ${base}, got [${value}].`;
    super(message);
    this.cause = cause;
  }
};

/**
 * A string serializer that requires a custom alphabet and uses
 * the length of that alphabet as the base. It then divides
 * the input by the base as many times as necessary to get
 * the output. It also supports leading zeroes by using the
 * first character of the alphabet as the zero character.
 *
 * This can be used to create serializers such as base10 or base58.
 *
 * @category Serializers
 */
const baseX$6 = alphabet => {
  const base = alphabet.length;
  const baseBigInt = BigInt(base);
  return {
    description: `base${base}`,
    fixedSize: null,
    maxSize: null,
    serialize(value) {
      // Check if the value is valid.
      if (!value.match(new RegExp(`^[${alphabet}]*$`))) {
        throw new InvalidBaseStringError$3(value, base);
      }
      if (value === '') return new Uint8Array();

      // Handle leading zeroes.
      const chars = [...value];
      let trailIndex = chars.findIndex(c => c !== alphabet[0]);
      trailIndex = trailIndex === -1 ? chars.length : trailIndex;
      const leadingZeroes = Array(trailIndex).fill(0);
      if (trailIndex === chars.length) return Uint8Array.from(leadingZeroes);

      // From baseX to base10.
      const tailChars = chars.slice(trailIndex);
      let base10Number = 0n;
      let baseXPower = 1n;
      for (let i = tailChars.length - 1; i >= 0; i -= 1) {
        base10Number += baseXPower * BigInt(alphabet.indexOf(tailChars[i]));
        baseXPower *= baseBigInt;
      }

      // From base10 to bytes.
      const tailBytes = [];
      while (base10Number > 0n) {
        tailBytes.unshift(Number(base10Number % 256n));
        base10Number /= 256n;
      }
      return Uint8Array.from(leadingZeroes.concat(tailBytes));
    },
    deserialize(buffer, offset = 0) {
      if (buffer.length === 0) return ['', 0];

      // Handle leading zeroes.
      const bytes = buffer.slice(offset);
      let trailIndex = bytes.findIndex(n => n !== 0);
      trailIndex = trailIndex === -1 ? bytes.length : trailIndex;
      const leadingZeroes = alphabet[0].repeat(trailIndex);
      if (trailIndex === bytes.length) return [leadingZeroes, buffer.length];

      // From bytes to base10.
      let base10Number = bytes.slice(trailIndex).reduce((sum, byte) => sum * 256n + BigInt(byte), 0n);

      // From base10 to baseX.
      const tailChars = [];
      while (base10Number > 0n) {
        tailChars.unshift(alphabet[Number(base10Number % baseBigInt)]);
        base10Number /= baseBigInt;
      }
      return [leadingZeroes + tailChars.join(''), buffer.length];
    }
  };
};

/**
 * A string serializer that uses base58 encoding.
 * @category Serializers
 */
const base58$5 = baseX$6('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');

/**
 * Concatenates an array of `Uint8Array`s into a single `Uint8Array`.
 * @category Utils
 */
const mergeBytes$2 = bytesArr => {
  const totalLength = bytesArr.reduce((total, arr) => total + arr.length, 0);
  const result = new Uint8Array(totalLength);
  let offset = 0;
  bytesArr.forEach(arr => {
    result.set(arr, offset);
    offset += arr.length;
  });
  return result;
};

/**
 * Pads a `Uint8Array` with zeroes to the specified length.
 * If the array is longer than the specified length, it is returned as-is.
 * @category Utils
 */
const padBytes$2 = (bytes, length) => {
  if (bytes.length >= length) return bytes;
  const paddedBytes = new Uint8Array(length).fill(0);
  paddedBytes.set(bytes);
  return paddedBytes;
};

/**
 * Fixes a `Uint8Array` to the specified length.
 * If the array is longer than the specified length, it is truncated.
 * If the array is shorter than the specified length, it is padded with zeroes.
 * @category Utils
 */
const fixBytes$2 = (bytes, length) => padBytes$2(bytes.slice(0, length), length);

/** @category Errors */
let DeserializingEmptyBufferError$1 = class DeserializingEmptyBufferError extends Error {
  name = 'DeserializingEmptyBufferError';
  constructor(serializer) {
    super(`Serializer [${serializer}] cannot deserialize empty buffers.`);
  }
};

/** @category Errors */
let NotEnoughBytesError$1 = class NotEnoughBytesError extends Error {
  name = 'NotEnoughBytesError';
  constructor(serializer, expected, actual) {
    super(`Serializer [${serializer}] expected ${expected} bytes, got ${actual}.`);
  }
};

/** @category Errors */
let ExpectedFixedSizeSerializerError$1 = class ExpectedFixedSizeSerializerError extends Error {
  name = 'ExpectedFixedSizeSerializerError';
  constructor(message) {
    message ??= 'Expected a fixed-size serializer, got a variable-size one.';
    super(message);
  }
};

/**
 * Creates a fixed-size serializer from a given serializer.
 *
 * @param serializer - The serializer to wrap into a fixed-size serializer.
 * @param fixedBytes - The fixed number of bytes to read.
 * @param description - A custom description for the serializer.
 *
 * @category Serializers
 */
function fixSerializer$4(serializer, fixedBytes, description) {
  return {
    description: description ?? `fixed(${fixedBytes}, ${serializer.description})`,
    fixedSize: fixedBytes,
    maxSize: fixedBytes,
    serialize: value => fixBytes$2(serializer.serialize(value), fixedBytes),
    deserialize: (buffer, offset = 0) => {
      // Slice the buffer to the fixed size.
      buffer = buffer.slice(offset, offset + fixedBytes);
      // Ensure we have enough bytes.
      if (buffer.length < fixedBytes) {
        throw new NotEnoughBytesError$1('fixSerializer', fixedBytes, buffer.length);
      }
      // If the nested serializer is fixed-size, pad and truncate the buffer accordingly.
      if (serializer.fixedSize !== null) {
        buffer = fixBytes$2(buffer, serializer.fixedSize);
      }
      // Deserialize the value using the nested serializer.
      const [value] = serializer.deserialize(buffer, 0);
      return [value, offset + fixedBytes];
    }
  };
}

/**
 * Converts a serializer A to a serializer B by mapping their values.
 * @category Serializers
 */

function mapSerializer$4(serializer, unmap, map) {
  return {
    description: serializer.description,
    fixedSize: serializer.fixedSize,
    maxSize: serializer.maxSize,
    serialize: value => serializer.serialize(unmap(value)),
    deserialize: (buffer, offset = 0) => {
      const [value, length] = serializer.deserialize(buffer, offset);
      return map ? [map(value, buffer, offset), length] : [value, length];
    }
  };
}

/**
 * Removes null characters from a string.
 * @category Utils
 */
const removeNullCharacters$2 = value =>
// eslint-disable-next-line no-control-regex
value.replace(/\u0000/g, '');

/**
 * A string serializer that uses UTF-8 encoding
 * using the native `TextEncoder` API.
 * @category Serializers
 */
const utf8$6 = {
  description: 'utf8',
  fixedSize: null,
  maxSize: null,
  serialize(value) {
    return new TextEncoder().encode(value);
  },
  deserialize(buffer, offset = 0) {
    const value = new TextDecoder().decode(buffer.slice(offset));
    return [removeNullCharacters$2(value), buffer.length];
  }
};

/** @category Errors */
let InvalidPublicKeyError$1 = class InvalidPublicKeyError extends Error {
  name = 'InvalidPublicKeyError';
  constructor(invalidPublicKey, reason) {
    reason = reason ? `. ${reason}` : '';
    super(`The provided public key is invalid: ${invalidPublicKey}${reason}`);
    this.invalidPublicKey = invalidPublicKey;
  }
};

/**
 * The amount of bytes in a public key.
 * @category Signers and PublicKeys
 */
const PUBLIC_KEY_LENGTH$1 = 32;

/**
 * Defines a public key as a base58 string.
 * @category Signers and PublicKeys
 */

function publicKey$4(input, assertValidPublicKey = true) {
  const key = (() => {
    if (typeof input === 'string') {
      return input;
    }
    // HasPublicKey.
    if (typeof input === 'object' && 'publicKey' in input) {
      return input.publicKey;
    }
    // LegacyWeb3JsPublicKey.
    if (typeof input === 'object' && 'toBase58' in input) {
      return input.toBase58();
    }
    // Pda.
    if (Array.isArray(input)) {
      return input[0];
    }
    // PublicKeyBytes.
    return base58$5.deserialize(input)[0];
  })();
  if (assertValidPublicKey) {
    assertPublicKey$1(key);
  }
  return key;
}

/**
 * Whether the given value is a valid public key.
 * @category Signers and PublicKeys
 */
const isPublicKey$1 = value => {
  try {
    assertPublicKey$1(value);
    return true;
  } catch (error) {
    return false;
  }
};

/**
 * Ensures the given value is a valid public key.
 * @category Signers and PublicKeys
 */
function assertPublicKey$1(value) {
  // Check value type.
  if (typeof value !== 'string') {
    throw new InvalidPublicKeyError$1(value, 'Public keys must be strings.');
  }

  // Check base58 encoding and byte length.
  publicKeyBytes$1(value);
}

/**
 * Converts the given public key to a Uint8Array.
 * Throws an error if the public key is an invalid base58 string.
 * @category Signers and PublicKeys
 */
const publicKeyBytes$1 = value => {
  // Check string length to avoid unnecessary base58 encoding.
  if (value.length < 32 || value.length > 44) {
    throw new InvalidPublicKeyError$1(value, 'Public keys must be between 32 and 44 characters.');
  }

  // Check base58 encoding.
  let bytes;
  try {
    bytes = base58$5.serialize(value);
  } catch (error) {
    throw new InvalidPublicKeyError$1(value, 'Public keys must be base58 encoded.');
  }

  // Check byte length.
  if (bytes.length !== PUBLIC_KEY_LENGTH$1) {
    throw new InvalidPublicKeyError$1(value, `Public keys must be ${PUBLIC_KEY_LENGTH$1} bytes.`);
  }
  return bytes;
};

/**
 * Defines a serializer for numbers and bigints.
 * @category Serializers
 */

/**
 * Defines the options for u8 and i8 serializers.
 * @category Serializers
 */

/**
 * Defines the options for number serializers that use more than one byte.
 * @category Serializers
 */

/**
 * Defines the endianness of a number serializer.
 * @category Serializers
 */
let Endian$1;
(function (Endian) {
  Endian["Little"] = "le";
  Endian["Big"] = "be";
})(Endian$1 || (Endian$1 = {}));

/** @category Errors */
let NumberOutOfRangeError$1 = class NumberOutOfRangeError extends RangeError {
  name = 'NumberOutOfRangeError';
  constructor(serializer, min, max, actual) {
    super(`Serializer [${serializer}] expected number to be between ${min} and ${max}, got ${actual}.`);
  }
};

function numberFactory$1(input) {
  let littleEndian;
  let defaultDescription = input.name;
  if (input.size > 1) {
    littleEndian = !('endian' in input.options) || input.options.endian === Endian$1.Little;
    defaultDescription += littleEndian ? '(le)' : '(be)';
  }
  return {
    description: input.options.description ?? defaultDescription,
    fixedSize: input.size,
    maxSize: input.size,
    serialize(value) {
      if (input.range) {
        assertRange$1(input.name, input.range[0], input.range[1], value);
      }
      const buffer = new ArrayBuffer(input.size);
      input.set(new DataView(buffer), value, littleEndian);
      return new Uint8Array(buffer);
    },
    deserialize(bytes, offset = 0) {
      const slice = bytes.slice(offset, offset + input.size);
      assertEnoughBytes$1('i8', slice, input.size);
      const view = toDataView$1(slice);
      return [input.get(view, littleEndian), offset + input.size];
    }
  };
}

/**
 * Helper function to ensure that the array buffer is converted properly from a uint8array
 * Source: https://stackoverflow.com/questions/37228285/uint8array-to-arraybuffer
 * @param {Uint8Array} array Uint8array that's being converted into an array buffer
 * @returns {ArrayBuffer} An array buffer that's necessary to construct a data view
 */
const toArrayBuffer$1 = array => array.buffer.slice(array.byteOffset, array.byteLength + array.byteOffset);
const toDataView$1 = array => new DataView(toArrayBuffer$1(array));
const assertRange$1 = (serializer, min, max, value) => {
  if (value < min || value > max) {
    throw new NumberOutOfRangeError$1(serializer, min, max, value);
  }
};
const assertEnoughBytes$1 = (serializer, bytes, expected) => {
  if (bytes.length === 0) {
    throw new DeserializingEmptyBufferError$1(serializer);
  }
  if (bytes.length < expected) {
    throw new NotEnoughBytesError$1(serializer, expected, bytes.length);
  }
};

const f32$2 = (options = {}) => numberFactory$1({
  name: 'f32',
  size: 4,
  set: (view, value, le) => view.setFloat32(0, Number(value), le),
  get: (view, le) => view.getFloat32(0, le),
  options
});

const f64$2 = (options = {}) => numberFactory$1({
  name: 'f64',
  size: 8,
  set: (view, value, le) => view.setFloat64(0, Number(value), le),
  get: (view, le) => view.getFloat64(0, le),
  options
});

const i8$2 = (options = {}) => numberFactory$1({
  name: 'i8',
  size: 1,
  range: [-Number('0x7f') - 1, Number('0x7f')],
  set: (view, value) => view.setInt8(0, Number(value)),
  get: view => view.getInt8(0),
  options
});

const i16$2 = (options = {}) => numberFactory$1({
  name: 'i16',
  size: 2,
  range: [-Number('0x7fff') - 1, Number('0x7fff')],
  set: (view, value, le) => view.setInt16(0, Number(value), le),
  get: (view, le) => view.getInt16(0, le),
  options
});

const i32$2 = (options = {}) => numberFactory$1({
  name: 'i32',
  size: 4,
  range: [-Number('0x7fffffff') - 1, Number('0x7fffffff')],
  set: (view, value, le) => view.setInt32(0, Number(value), le),
  get: (view, le) => view.getInt32(0, le),
  options
});

const i64$2 = (options = {}) => numberFactory$1({
  name: 'i64',
  size: 8,
  range: [-BigInt('0x7fffffffffffffff') - 1n, BigInt('0x7fffffffffffffff')],
  set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),
  get: (view, le) => view.getBigInt64(0, le),
  options
});

/* eslint-disable no-bitwise */
const i128$2 = (options = {}) => numberFactory$1({
  name: 'i128',
  size: 16,
  range: [-BigInt('0x7fffffffffffffffffffffffffffffff') - 1n, BigInt('0x7fffffffffffffffffffffffffffffff')],
  set: (view, value, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const rightMask = 0xffffffffffffffffn;
    view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);
    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);
  },
  get: (view, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const left = view.getBigInt64(leftOffset, le);
    const right = view.getBigUint64(rightOffset, le);
    return (left << 64n) + right;
  },
  options
});

const u8$2 = (options = {}) => numberFactory$1({
  name: 'u8',
  size: 1,
  range: [0, Number('0xff')],
  set: (view, value) => view.setUint8(0, Number(value)),
  get: view => view.getUint8(0),
  options
});

const u16$2 = (options = {}) => numberFactory$1({
  name: 'u16',
  size: 2,
  range: [0, Number('0xffff')],
  set: (view, value, le) => view.setUint16(0, Number(value), le),
  get: (view, le) => view.getUint16(0, le),
  options
});

const u32$2 = (options = {}) => numberFactory$1({
  name: 'u32',
  size: 4,
  range: [0, Number('0xffffffff')],
  set: (view, value, le) => view.setUint32(0, Number(value), le),
  get: (view, le) => view.getUint32(0, le),
  options
});

const u64$2 = (options = {}) => numberFactory$1({
  name: 'u64',
  size: 8,
  range: [0, BigInt('0xffffffffffffffff')],
  set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),
  get: (view, le) => view.getBigUint64(0, le),
  options
});

/* eslint-disable no-bitwise */
const u128$2 = (options = {}) => numberFactory$1({
  name: 'u128',
  size: 16,
  range: [0, BigInt('0xffffffffffffffffffffffffffffffff')],
  set: (view, value, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const rightMask = 0xffffffffffffffffn;
    view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);
    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);
  },
  get: (view, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const left = view.getBigUint64(leftOffset, le);
    const right = view.getBigUint64(rightOffset, le);
    return (left << 64n) + right;
  },
  options
});

/* eslint-disable no-bitwise */

/**
 * Defines the options for the shortU16 serializer.
 * @category Serializers
 */

/**
 * Same as u16, but serialized with 1 to 3 bytes.
 *
 * If the value is above 0x7f, the top bit is set and the remaining
 * value is stored in the next bytes. Each byte follows the same
 * pattern until the 3rd byte. The 3rd byte, if needed, uses
 * all 8 bits to store the last byte of the original value.
 *
 * @category Serializers
 */
const shortU16$2 = (options = {}) => ({
  description: options.description ?? 'shortU16',
  fixedSize: null,
  maxSize: 3,
  serialize: value => {
    assertRange$1('shortU16', 0, 65535, value);
    const bytes = [0];
    for (let ii = 0;; ii += 1) {
      // Shift the bits of the value over such that the next 7 bits are at the right edge.
      const alignedValue = value >> ii * 7;
      if (alignedValue === 0) {
        // No more bits to consume.
        break;
      }
      // Extract those 7 bits using a mask.
      const nextSevenBits = 0b1111111 & alignedValue;
      bytes[ii] = nextSevenBits;
      if (ii > 0) {
        // Set the continuation bit of the previous slice.
        bytes[ii - 1] |= 0b10000000;
      }
    }
    return new Uint8Array(bytes);
  },
  deserialize: (bytes, offset = 0) => {
    let value = 0;
    let byteCount = 0;
    while (++byteCount // eslint-disable-line no-plusplus
    ) {
      const byteIndex = byteCount - 1;
      const currentByte = bytes[offset + byteIndex];
      const nextSevenBits = 0b1111111 & currentByte;
      // Insert the next group of seven bits into the correct slot of the output value.
      value |= nextSevenBits << byteIndex * 7;
      if ((currentByte & 0b10000000) === 0) {
        // This byte does not have its continuation bit set. We're done.
        break;
      }
    }
    return [value, offset + byteCount];
  }
});

/** @category Errors */
let InvalidNumberOfItemsError$1 = class InvalidNumberOfItemsError extends Error {
  name = 'InvalidNumberOfItemsError';
  constructor(serializer, expected, actual) {
    super(`Expected [${serializer}] to have ${expected} items, got ${actual}.`);
  }
};

/** @category Errors */
let UnrecognizedArrayLikeSerializerSizeError$1 = class UnrecognizedArrayLikeSerializerSizeError extends Error {
  name = 'UnrecognizedArrayLikeSerializerSizeError';
  constructor(size) {
    super(`Unrecognized array-like serializer size: ${JSON.stringify(size)}`);
  }
};

/** @category Errors */
let InvalidDataEnumVariantError$1 = class InvalidDataEnumVariantError extends Error {
  name = 'InvalidDataEnumVariantError';
  constructor(invalidVariant, validVariants) {
    super(`Invalid data enum variant. ` + `Expected one of [${validVariants.join(', ')}], ` + `got "${invalidVariant}".`);
  }
};

/** @category Errors */
let InvalidScalarEnumVariantError$1 = class InvalidScalarEnumVariantError extends Error {
  name = 'InvalidScalarEnumVariantError';
  constructor(invalidVariant, validVariants, min, max) {
    super(`Invalid scalar enum variant. ` + `Expected one of [${validVariants.join(', ')}] ` + `or a number between ${min} and ${max}, ` + `got "${invalidVariant}".`);
  }
};

/** @category Errors */
let EnumDiscriminatorOutOfRangeError$1 = class EnumDiscriminatorOutOfRangeError extends RangeError {
  name = 'EnumDiscriminatorOutOfRangeError';
  constructor(discriminator, min, max) {
    super(`Enum discriminator out of range. ` + `Expected a number between ${min} and ${max}, got ${discriminator}.`);
  }
};

function sumSerializerSizes$8(sizes) {
  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);
}

function getResolvedSize$1(size, bytes, offset) {
  if (typeof size === 'number') {
    return [size, offset];
  }
  if (typeof size === 'object') {
    return size.deserialize(bytes, offset);
  }
  throw new UnrecognizedArrayLikeSerializerSizeError$1(size);
}
function getSizeDescription$1(size) {
  return typeof size === 'object' ? size.description : `${size}`;
}
function getSizeFromChildren$1(size, childrenSizes) {
  if (typeof size !== 'number') return null;
  if (size === 0) return 0;
  const childrenSize = sumSerializerSizes$8(childrenSizes);
  return childrenSize === null ? null : childrenSize * size;
}
function getSizePrefix$1(size, realSize) {
  return typeof size === 'object' ? size.serialize(realSize) : new Uint8Array();
}

/**
 * Defines the options for array serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for an array of items.
 *
 * @param item - The serializer to use for the array's items.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function array$5(item, options = {}) {
  const size = options.size ?? u32$2();
  return {
    description: options.description ?? `array(${item.description}; ${getSizeDescription$1(size)})`,
    fixedSize: getSizeFromChildren$1(size, [item.fixedSize]),
    maxSize: getSizeFromChildren$1(size, [item.maxSize]),
    serialize: value => {
      if (typeof size === 'number' && value.length !== size) {
        throw new InvalidNumberOfItemsError$1('array', size, value.length);
      }
      return mergeBytes$2([getSizePrefix$1(size, value.length), ...value.map(v => item.serialize(v))]);
    },
    deserialize: (bytes, offset = 0) => {
      const values = [];
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        return [values, offset];
      }
      if (size === 'remainder') {
        while (offset < bytes.length) {
          const [value, newOffset] = item.deserialize(bytes, offset);
          values.push(value);
          offset = newOffset;
        }
        return [values, offset];
      }
      const [resolvedSize, newOffset] = getResolvedSize$1(size, bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset] = item.deserialize(bytes, offset);
        values.push(value);
        offset = newOffset;
      }
      return [values, offset];
    }
  };
}

/**
 * Defines the options for boolean serializers.
 * @category Serializers
 */

/**
 * Creates a boolean serializer.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function bool$2(options = {}) {
  const size = options.size ?? u8$2();
  if (size.fixedSize === null) {
    throw new ExpectedFixedSizeSerializerError$1('Serializer [bool] requires a fixed size.');
  }
  return {
    description: options.description ?? `bool(${size.description})`,
    fixedSize: size.fixedSize,
    maxSize: size.fixedSize,
    serialize: value => size.serialize(value ? 1 : 0),
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        throw new DeserializingEmptyBufferError$1('bool');
      }
      const [value, vOffset] = size.deserialize(bytes, offset);
      return [value === 1, vOffset];
    }
  };
}

/**
 * Defines the options for bytes serializers.
 * @category Serializers
 */

/**
 * Creates a serializer that passes the buffer as-is.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function bytes$6(options = {}) {
  const size = options.size ?? 'variable';
  const description = options.description ?? `bytes(${getSizeDescription$1(size)})`;
  const byteSerializer = {
    description,
    fixedSize: null,
    maxSize: null,
    serialize: value => new Uint8Array(value),
    deserialize: (bytes, offset = 0) => {
      const slice = bytes.slice(offset);
      return [slice, offset + slice.length];
    }
  };
  if (size === 'variable') {
    return byteSerializer;
  }
  if (typeof size === 'number') {
    return fixSerializer$4(byteSerializer, size, description);
  }
  return {
    description,
    fixedSize: null,
    maxSize: null,
    serialize: value => {
      const contentBytes = byteSerializer.serialize(value);
      const lengthBytes = size.serialize(contentBytes.length);
      return mergeBytes$2([lengthBytes, contentBytes]);
    },
    deserialize: (buffer, offset = 0) => {
      if (buffer.slice(offset).length === 0) {
        throw new DeserializingEmptyBufferError$1('bytes');
      }
      const [lengthBigInt, lengthOffset] = size.deserialize(buffer, offset);
      const length = Number(lengthBigInt);
      offset = lengthOffset;
      const contentBuffer = buffer.slice(offset, offset + length);
      if (contentBuffer.length < length) {
        throw new NotEnoughBytesError$1('bytes', length, contentBuffer.length);
      }
      const [value, contentOffset] = byteSerializer.deserialize(contentBuffer);
      offset += contentOffset;
      return [value, offset];
    }
  };
}

function maxSerializerSizes$3(sizes) {
  return sizes.reduce((all, size) => all === null || size === null ? null : Math.max(all, size), 0);
}

/**
 * Defines a data enum using discriminated union types.
 *
 * @example
 * ```ts
 * type WebPageEvent =
 *   | { __kind: 'pageview', url: string }
 *   | { __kind: 'click', x: number, y: number };
 * ```
 *
 * @category Serializers
 */

/**
 * Creates a data enum serializer.
 *
 * @param variants - The variant serializers of the data enum.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function dataEnum$2(variants, options = {}) {
  const prefix = options.size ?? u8$2();
  const fieldDescriptions = variants.map(([name, serializer]) => `${String(name)}${serializer ? `: ${serializer.description}` : ''}`).join(', ');
  const allVariantHaveTheSameFixedSize = variants.every((one, i, all) => one[1].fixedSize === all[0][1].fixedSize);
  const fixedVariantSize = allVariantHaveTheSameFixedSize ? variants[0][1].fixedSize : null;
  const maxVariantSize = maxSerializerSizes$3(variants.map(([, field]) => field.maxSize));
  return {
    description: options.description ?? `dataEnum(${fieldDescriptions}; ${prefix.description})`,
    fixedSize: variants.length === 0 ? prefix.fixedSize : sumSerializerSizes$8([prefix.fixedSize, fixedVariantSize]),
    maxSize: variants.length === 0 ? prefix.maxSize : sumSerializerSizes$8([prefix.maxSize, maxVariantSize]),
    serialize: variant => {
      const discriminator = variants.findIndex(([key]) => variant.__kind === key);
      if (discriminator < 0) {
        throw new InvalidDataEnumVariantError$1(variant.__kind, variants.map(([key]) => key));
      }
      const variantPrefix = prefix.serialize(discriminator);
      const variantSerializer = variants[discriminator][1];
      const variantBytes = variantSerializer.serialize(variant);
      return mergeBytes$2([variantPrefix, variantBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        throw new DeserializingEmptyBufferError$1('dataEnum');
      }
      const [discriminator, dOffset] = prefix.deserialize(bytes, offset);
      offset = dOffset;
      const variantField = variants[Number(discriminator)] ?? null;
      if (!variantField) {
        throw new EnumDiscriminatorOutOfRangeError$1(discriminator, 0, variants.length - 1);
      }
      const [variant, vOffset] = variantField[1].deserialize(bytes, offset);
      offset = vOffset;
      return [{
        __kind: variantField[0],
        ...(variant ?? {})
      }, offset];
    }
  };
}

/**
 * Defines the options for `Map` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for a map.
 *
 * @param key - The serializer to use for the map's keys.
 * @param value - The serializer to use for the map's values.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function map$2(key, value, options = {}) {
  const size = options.size ?? u32$2();
  return {
    description: options.description ?? `map(${key.description}, ${value.description}; ${getSizeDescription$1(size)})`,
    fixedSize: getSizeFromChildren$1(size, [key.fixedSize, value.fixedSize]),
    maxSize: getSizeFromChildren$1(size, [key.maxSize, value.maxSize]),
    serialize: map => {
      if (typeof size === 'number' && map.size !== size) {
        throw new InvalidNumberOfItemsError$1('map', size, map.size);
      }
      const itemBytes = Array.from(map, ([k, v]) => mergeBytes$2([key.serialize(k), value.serialize(v)]));
      return mergeBytes$2([getSizePrefix$1(size, map.size), ...itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      const map = new Map();
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        return [map, offset];
      }
      if (size === 'remainder') {
        while (offset < bytes.length) {
          const [deserializedKey, kOffset] = key.deserialize(bytes, offset);
          offset = kOffset;
          const [deserializedValue, vOffset] = value.deserialize(bytes, offset);
          offset = vOffset;
          map.set(deserializedKey, deserializedValue);
        }
        return [map, offset];
      }
      const [resolvedSize, newOffset] = getResolvedSize$1(size, bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [deserializedKey, kOffset] = key.deserialize(bytes, offset);
        offset = kOffset;
        const [deserializedValue, vOffset] = value.deserialize(bytes, offset);
        offset = vOffset;
        map.set(deserializedKey, deserializedValue);
      }
      return [map, offset];
    }
  };
}

/**
 * Defines the options for `Nullable` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for an optional value using `null` as the `None` value.
 *
 * @param item - The serializer to use for the value that may be present.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function nullable$2(item, options = {}) {
  const prefix = options.prefix ?? u8$2();
  const fixed = options.fixed ?? false;
  let descriptionSuffix = `; ${getSizeDescription$1(prefix)}`;
  let fixedSize = item.fixedSize === 0 ? prefix.fixedSize : null;
  if (fixed) {
    if (item.fixedSize === null || prefix.fixedSize === null) {
      throw new ExpectedFixedSizeSerializerError$1('Fixed nullables can only be used with fixed-size serializers');
    }
    descriptionSuffix += '; fixed';
    fixedSize = prefix.fixedSize + item.fixedSize;
  }
  return {
    description: options.description ?? `nullable(${item.description + descriptionSuffix})`,
    fixedSize,
    maxSize: sumSerializerSizes$8([prefix.maxSize, item.maxSize]),
    serialize: option => {
      const prefixByte = prefix.serialize(Number(option !== null));
      if (fixed) {
        const itemFixedSize = item.fixedSize;
        const itemBytes = option !== null ? item.serialize(option).slice(0, itemFixedSize) : new Uint8Array(itemFixedSize).fill(0);
        return mergeBytes$2([prefixByte, itemBytes]);
      }
      const itemBytes = option !== null ? item.serialize(option) : new Uint8Array();
      return mergeBytes$2([prefixByte, itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        return [null, offset];
      }
      const fixedOffset = offset + (prefix.fixedSize ?? 0) + (item.fixedSize ?? 0);
      const [isSome, prefixOffset] = prefix.deserialize(bytes, offset);
      offset = prefixOffset;
      if (isSome === 0) {
        return [null, fixed ? fixedOffset : offset];
      }
      const [value, newOffset] = item.deserialize(bytes, offset);
      offset = newOffset;
      return [value, fixed ? fixedOffset : offset];
    }
  };
}

/**
 * Defines the options for `Option` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for an optional value using the {@link Option} type.
 *
 * @param item - The serializer to use for the value that may be present.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function option$2(item, options = {}) {
  const prefix = options.prefix ?? u8$2();
  const fixed = options.fixed ?? false;
  let descriptionSuffix = `; ${getSizeDescription$1(prefix)}`;
  let fixedSize = item.fixedSize === 0 ? prefix.fixedSize : null;
  if (fixed) {
    if (item.fixedSize === null || prefix.fixedSize === null) {
      throw new ExpectedFixedSizeSerializerError$1('Fixed options can only be used with fixed-size serializers');
    }
    descriptionSuffix += '; fixed';
    fixedSize = prefix.fixedSize + item.fixedSize;
  }
  return {
    description: options.description ?? `option(${item.description + descriptionSuffix})`,
    fixedSize,
    maxSize: sumSerializerSizes$8([prefix.maxSize, item.maxSize]),
    serialize: optionOrNullable => {
      const option = isOption$1(optionOrNullable) ? optionOrNullable : wrapNullable$1(optionOrNullable);
      const prefixByte = prefix.serialize(Number(isSome$1(option)));
      if (fixed) {
        const itemFixedSize = item.fixedSize;
        const itemBytes = isSome$1(option) ? item.serialize(option.value).slice(0, itemFixedSize) : new Uint8Array(itemFixedSize).fill(0);
        return mergeBytes$2([prefixByte, itemBytes]);
      }
      const itemBytes = isSome$1(option) ? item.serialize(option.value) : new Uint8Array();
      return mergeBytes$2([prefixByte, itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        return [none$1(), offset];
      }
      const fixedOffset = offset + (prefix.fixedSize ?? 0) + (item.fixedSize ?? 0);
      const [isSome, prefixOffset] = prefix.deserialize(bytes, offset);
      offset = prefixOffset;
      if (isSome === 0) {
        return [none$1(), fixed ? fixedOffset : offset];
      }
      const [value, newOffset] = item.deserialize(bytes, offset);
      offset = newOffset;
      return [some$1(value), fixed ? fixedOffset : offset];
    }
  };
}

/**
 * Defines the options for `PublicKey` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for base58 encoded public keys.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function publicKey$3(options = {}) {
  return {
    description: options.description ?? 'publicKey',
    fixedSize: 32,
    maxSize: 32,
    serialize: value => publicKeyBytes$1(publicKey$4(value)),
    deserialize: (bytes, offset = 0) => {
      const pubkeyBytes = bytes.slice(offset, offset + 32);
      if (pubkeyBytes.length === 0) {
        throw new DeserializingEmptyBufferError$1('publicKey');
      }
      if (pubkeyBytes.length < PUBLIC_KEY_LENGTH$1) {
        throw new NotEnoughBytesError$1('publicKey', PUBLIC_KEY_LENGTH$1, pubkeyBytes.length);
      }
      return [publicKey$4(pubkeyBytes), offset + 32];
    }
  };
}

/**
 * Defines a scalar enum as a type from its constructor.
 *
 * @example
 * ```ts
 * enum Direction { Left, Right };
 * type DirectionType = ScalarEnum<Direction>;
 * ```
 *
 * @category Serializers
 */

/**
 * Creates a scalar enum serializer.
 *
 * @param constructor - The constructor of the scalar enum.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function scalarEnum$2(constructor, options = {}) {
  const prefix = options.size ?? u8$2();
  const enumKeys = Object.keys(constructor);
  const enumValues = Object.values(constructor);
  const isNumericEnum = enumValues.some(v => typeof v === 'number');
  const valueDescriptions = enumValues.filter(v => typeof v === 'string').join(', ');
  const minRange = 0;
  const maxRange = isNumericEnum ? enumValues.length / 2 - 1 : enumValues.length - 1;
  const stringValues = isNumericEnum ? [...enumKeys] : [...new Set([...enumKeys, ...enumValues])];
  function assertValidVariant(variant) {
    const isInvalidNumber = typeof variant === 'number' && (variant < minRange || variant > maxRange);
    const isInvalidString = typeof variant === 'string' && !stringValues.includes(variant);
    if (isInvalidNumber || isInvalidString) {
      throw new InvalidScalarEnumVariantError$1(variant, stringValues, minRange, maxRange);
    }
  }
  return {
    description: options.description ?? `enum(${valueDescriptions}; ${prefix.description})`,
    fixedSize: prefix.fixedSize,
    maxSize: prefix.maxSize,
    serialize: value => {
      assertValidVariant(value);
      if (typeof value === 'number') return prefix.serialize(value);
      const valueIndex = enumValues.indexOf(value);
      if (valueIndex >= 0) return prefix.serialize(valueIndex);
      return prefix.serialize(enumKeys.indexOf(value));
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        throw new DeserializingEmptyBufferError$1('enum');
      }
      const [value, newOffset] = prefix.deserialize(bytes, offset);
      const valueAsNumber = Number(value);
      offset = newOffset;
      if (valueAsNumber < minRange || valueAsNumber > maxRange) {
        throw new EnumDiscriminatorOutOfRangeError$1(valueAsNumber, minRange, maxRange);
      }
      return [isNumericEnum ? valueAsNumber : enumValues[valueAsNumber], offset];
    }
  };
}

/**
 * Defines the options for `Set` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for a set.
 *
 * @param item - The serializer to use for the set's items.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function set$2(item, options = {}) {
  const size = options.size ?? u32$2();
  return {
    description: options.description ?? `set(${item.description}; ${getSizeDescription$1(size)})`,
    fixedSize: getSizeFromChildren$1(size, [item.fixedSize]),
    maxSize: getSizeFromChildren$1(size, [item.maxSize]),
    serialize: set => {
      if (typeof size === 'number' && set.size !== size) {
        throw new InvalidNumberOfItemsError$1('set', size, set.size);
      }
      const itemBytes = Array.from(set, value => item.serialize(value));
      return mergeBytes$2([getSizePrefix$1(size, set.size), ...itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      const set = new Set();
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        return [set, offset];
      }
      if (size === 'remainder') {
        while (offset < bytes.length) {
          const [value, newOffset] = item.deserialize(bytes, offset);
          set.add(value);
          offset = newOffset;
        }
        return [set, offset];
      }
      const [resolvedSize, newOffset] = getResolvedSize$1(size, bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset] = item.deserialize(bytes, offset);
        set.add(value);
        offset = newOffset;
      }
      return [set, offset];
    }
  };
}

/**
 * Defines the options for string serializers.
 * @category Serializers
 */

/**
 * Creates a string serializer.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function string$7(options = {}) {
  const size = options.size ?? u32$2();
  const encoding = options.encoding ?? utf8$6;
  const description = options.description ?? `string(${encoding.description}; ${getSizeDescription$1(size)})`;
  if (size === 'variable') {
    return {
      ...encoding,
      description
    };
  }
  if (typeof size === 'number') {
    return fixSerializer$4(encoding, size, description);
  }
  return {
    description,
    fixedSize: null,
    maxSize: null,
    serialize: value => {
      const contentBytes = encoding.serialize(value);
      const lengthBytes = size.serialize(contentBytes.length);
      return mergeBytes$2([lengthBytes, contentBytes]);
    },
    deserialize: (buffer, offset = 0) => {
      if (buffer.slice(offset).length === 0) {
        throw new DeserializingEmptyBufferError$1('string');
      }
      const [lengthBigInt, lengthOffset] = size.deserialize(buffer, offset);
      const length = Number(lengthBigInt);
      offset = lengthOffset;
      const contentBuffer = buffer.slice(offset, offset + length);
      if (contentBuffer.length < length) {
        throw new NotEnoughBytesError$1('string', length, contentBuffer.length);
      }
      const [value, contentOffset] = encoding.deserialize(contentBuffer);
      offset += contentOffset;
      return [value, offset];
    }
  };
}

/**
 * Get the name and serializer of each field in a struct.
 * @category Serializers
 */

/**
 * Creates a serializer for a custom object.
 *
 * @param fields - The name and serializer of each field.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function struct$2(fields, options = {}) {
  const fieldDescriptions = fields.map(([name, serializer]) => `${String(name)}: ${serializer.description}`).join(', ');
  return {
    description: options.description ?? `struct(${fieldDescriptions})`,
    fixedSize: sumSerializerSizes$8(fields.map(([, field]) => field.fixedSize)),
    maxSize: sumSerializerSizes$8(fields.map(([, field]) => field.maxSize)),
    serialize: struct => {
      const fieldBytes = fields.map(([key, serializer]) => serializer.serialize(struct[key]));
      return mergeBytes$2(fieldBytes);
    },
    deserialize: (bytes, offset = 0) => {
      const struct = {};
      fields.forEach(([key, serializer]) => {
        const [value, newOffset] = serializer.deserialize(bytes, offset);
        offset = newOffset;
        struct[key] = value;
      });
      return [struct, offset];
    }
  };
}

/**
 * Defines the options for tuple serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for a tuple-like array.
 *
 * @param items - The serializers to use for each item in the tuple.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function tuple$2(items, options = {}) {
  const itemDescriptions = items.map(item => item.description).join(', ');
  return {
    description: options.description ?? `tuple(${itemDescriptions})`,
    fixedSize: sumSerializerSizes$8(items.map(item => item.fixedSize)),
    maxSize: sumSerializerSizes$8(items.map(item => item.maxSize)),
    serialize: value => {
      if (value.length !== items.length) {
        throw new InvalidNumberOfItemsError$1('tuple', items.length, value.length);
      }
      return mergeBytes$2(items.map((item, index) => item.serialize(value[index])));
    },
    deserialize: (bytes, offset = 0) => {
      const values = [];
      items.forEach(serializer => {
        const [newValue, newOffset] = serializer.deserialize(bytes, offset);
        values.push(newValue);
        offset = newOffset;
      });
      return [values, offset];
    }
  };
}

/**
 * Defines the options for unit serializers.
 * @category Serializers
 */

/**
 * Creates a void serializer.
 *
 * @param options - A set of options for the serializer.
 */
function unit$2(options = {}) {
  return {
    description: options.description ?? 'unit',
    fixedSize: 0,
    maxSize: 0,
    serialize: () => new Uint8Array(),
    deserialize: (_bytes, offset = 0) => [undefined, offset]
  };
}

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const base58$4 = base58$5;

/** @category Errors */
let UmiError$4 = class UmiError extends Error {
  name = 'UmiError';
  constructor(message, source, sourceDetails, cause) {
    super(message);
    this.source = source;
    this.sourceDetails = sourceDetails;
    this.cause = cause;
    this.message = `${this.message}\n\nSource: ${this.getFullSource()}${this.cause ? `\n\nCaused By: ${this.cause}` : ''}\n`;
  }
  getCapitalizedSource() {
    if (this.source === 'sdk' || this.source === 'rpc') {
      return this.source.toUpperCase();
    }
    return this.source[0].toUpperCase() + this.source.slice(1);
  }
  getFullSource() {
    const capitalizedSource = this.getCapitalizedSource();
    const sourceDetails = this.sourceDetails ? ` > ${this.sourceDetails}` : '';
    return capitalizedSource + sourceDetails;
  }
  toString() {
    return `[${this.name}] ${this.message}`;
  }
};

/** @category Errors */
let SdkError$a = class SdkError extends UmiError$4 {
  name = 'SdkError';
  constructor(message, cause) {
    super(message, 'sdk', undefined, cause);
  }
};

/**
 * The size of an account header in bytes.
 * @category Accounts
 */
const ACCOUNT_HEADER_SIZE$1 = 128;

/**
 * Defines all the types that can be used to create
 * a BigInt via the <code>{@link createBigInt}</code> function.
 * @category Utils — Amounts
 */

/**
 * Creates a BigInt from a number, string, boolean, or Uint8Array.
 * @category Utils — Amounts
 */
const createBigInt$1 = input => {
  input = typeof input === 'object' ? input.toString() : input;
  return BigInt(input);
};

/**
 * The identifier of an amount.
 * @category Utils — Amounts
 */

/**
 * Creates an amount from the provided basis points, identifier, and decimals.
 * @category Utils — Amounts
 */
const createAmount$1 = (basisPoints, identifier, decimals) => ({
  basisPoints: createBigInt$1(basisPoints),
  identifier,
  decimals
});

/**
 * Creates an amount from a decimal value which will be converted to the lowest
 * possible unit using the provided decimals.
 * @category Utils — Amounts
 */
const createAmountFromDecimals$1 = (decimalAmount, identifier, decimals) => {
  const exponentAmount = createAmount$1(BigInt(10) ** BigInt(decimals ?? 0), identifier, decimals);
  return multiplyAmount$1(exponentAmount, decimalAmount);
};

/**
 * Creates a percentage amount from the provided decimal value.
 * @category Utils — Amounts
 */
const percentAmount$1 = (percent, decimals = 2) => createAmountFromDecimals$1(percent, '%', decimals);

/**
 * Creates a {@link SolAmount} from the provided lamports.
 * @category Utils — Amounts
 */
const lamports$1 = lamports => createAmount$1(lamports, 'SOL', 9);

/**
 * Multiplies an amount by a given multiplier.
 * @category Utils — Amounts
 */
const multiplyAmount$1 = (left, multiplier) => {
  if (typeof multiplier === 'bigint') {
    return {
      ...left,
      basisPoints: left.basisPoints * multiplier
    };
  }
  const [units, decimals] = multiplier.toString().split('.');
  const multiplierBasisPoints = BigInt(units + (decimals ?? ''));
  const multiplierExponents = BigInt(10) ** BigInt(decimals?.length ?? 0);
  return {
    ...left,
    basisPoints: left.basisPoints * multiplierBasisPoints / multiplierExponents
  };
};

/**
 * Whether the amount is zero.
 * @category Utils — Amounts
 */
const isZeroAmount$1 = value => value.basisPoints === BigInt(0);

/**
 * Defines the available Solana clusters.
 * @category Utils — Cluster
 */

/**
 * Helper type to helps the end-user selecting a cluster.
 * They can either provide a specific cluster or use the
 * special values 'current' or '*' to select the current
 * cluster or all clusters respectively.
 * @category Utils — Cluster
 */

const MAINNET_BETA_DOMAINS$1 = ['api.mainnet-beta.solana.com', 'ssc-dao.genesysgo.net'];
const DEVNET_DOMAINS$1 = ['api.devnet.solana.com', 'psytrbhymqlkfrhudd.dev.genesysgo.net'];
const TESTNET_DOMAINS$1 = ['api.testnet.solana.com'];
const LOCALNET_DOMAINS$1 = ['localhost', '127.0.0.1'];

/**
 * Helper method that tries its best to resolve a cluster from a given endpoint.
 * @category Utils — Cluster
 */
const resolveClusterFromEndpoint$1 = endpoint => {
  const domain = new URL(endpoint).hostname;
  if (MAINNET_BETA_DOMAINS$1.includes(domain)) return 'mainnet-beta';
  if (DEVNET_DOMAINS$1.includes(domain)) return 'devnet';
  if (TESTNET_DOMAINS$1.includes(domain)) return 'testnet';
  if (LOCALNET_DOMAINS$1.includes(domain)) return 'localnet';
  if (endpoint.includes('mainnet')) return 'mainnet-beta';
  if (endpoint.includes('devnet')) return 'devnet';
  if (endpoint.includes('testnet')) return 'testnet';
  if (endpoint.includes('local')) return 'localnet';
  return 'custom';
};

/** @category Errors */
let InterfaceImplementationMissingError$a = class InterfaceImplementationMissingError extends SdkError$a {
  name = 'InterfaceImplementationMissingError';
  constructor(interfaceName, contextVariable) {
    const interfaceBasename = interfaceName.replace(/Interface$/, '');
    const message = `Tried using ${interfaceName} but no implementation of that interface was found. ` + `Make sure an implementation is registered, ` + `e.g. via "context.${contextVariable} = new My${interfaceBasename}();".`;
    super(message);
  }
};

/**
 * An implementation of the {@link DownloaderInterface} that throws an error when called.
 * @category Storage
 */
function createNullDownloader$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('DownloaderInterface', 'downloader');
  };
  return {
    download: errorHandler,
    downloadJson: errorHandler
  };
}

/**
 * An implementation of the {@link EddsaInterface} that throws an error when called.
 * @category Signers and PublicKeys
 */
function createNullEddsa$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('EddsaInterface', 'eddsa');
  };
  return {
    generateKeypair: errorHandler,
    createKeypairFromSecretKey: errorHandler,
    createKeypairFromSeed: errorHandler,
    isOnCurve: errorHandler,
    findPda: errorHandler,
    sign: errorHandler,
    verify: errorHandler
  };
}

/**
 * An implementation of the {@link HttpInterface} that throws an error when called.
 * @category Http
 */
function createNullHttp$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('HttpInterface', 'http');
  };
  return {
    send: errorHandler
  };
}

/**
 * Defines the interface for a program repository.
 * It allows us to register and retrieve programs when needed.
 *
 * @category Context and Interfaces
 */

/**
 * An implementation of the {@link ProgramRepositoryInterface} that throws an error when called.
 * @category Programs
 */
function createNullProgramRepository$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('ProgramRepositoryInterface', 'programs');
  };
  return {
    has: errorHandler,
    get: errorHandler,
    getPublicKey: errorHandler,
    all: errorHandler,
    add: errorHandler,
    bind: errorHandler,
    unbind: errorHandler,
    clone: errorHandler,
    resolveError: errorHandler
  };
}

/**
 * Defines the interface for an RPC client.
 * It allows us to interact with the Solana blockchain.
 *
 * @category Context and Interfaces
 */

/**
 * An implementation of the {@link RpcInterface} that throws an error when called.
 * @category Rpc
 */
function createNullRpc$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('RpcInterface', 'rpc');
  };
  return {
    getEndpoint: errorHandler,
    getCluster: errorHandler,
    getAccount: errorHandler,
    getAccounts: errorHandler,
    getProgramAccounts: errorHandler,
    getBlockTime: errorHandler,
    getBalance: errorHandler,
    getRent: errorHandler,
    getSlot: errorHandler,
    getLatestBlockhash: errorHandler,
    getTransaction: errorHandler,
    getSignatureStatuses: errorHandler,
    accountExists: errorHandler,
    airdrop: errorHandler,
    call: errorHandler,
    sendTransaction: errorHandler,
    confirmTransaction: errorHandler
  };
}

/**
 * Defines the interface for a set of serializers
 * that can be used to serialize/deserialize any Serde types.
 *
 * @category Context and Interfaces
 * @deprecated This interface is deprecated.
 * You can now directly use `@metaplex-foundation/umi/serializers` instead.
 */

/**
 * An implementation of the {@link SerializerInterface} that throws an error when called.
 * @category Serializers
 */
function createNullSerializer$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('SerializerInterface', 'serializer');
  };
  return {
    tuple: errorHandler,
    array: errorHandler,
    map: errorHandler,
    set: errorHandler,
    option: errorHandler,
    nullable: errorHandler,
    struct: errorHandler,
    enum: errorHandler,
    dataEnum: errorHandler,
    string: errorHandler,
    bool: errorHandler,
    unit: errorHandler,
    u8: errorHandler,
    u16: errorHandler,
    u32: errorHandler,
    u64: errorHandler,
    u128: errorHandler,
    i8: errorHandler,
    i16: errorHandler,
    i32: errorHandler,
    i64: errorHandler,
    i128: errorHandler,
    f32: errorHandler,
    f64: errorHandler,
    bytes: errorHandler,
    publicKey: errorHandler
  };
}

/**
 * Chunks an array into smaller arrays of (at most) the specified size.
 * @category Utils
 */
const chunk$1 = (array, chunkSize) => array.reduce((chunks, item, index) => {
  const chunkIndex = Math.floor(index / chunkSize);
  if (!chunks[chunkIndex]) {
    chunks[chunkIndex] = [];
  }
  chunks[chunkIndex].push(item);
  return chunks;
}, []);

/**
 * Deduplicates an array by the provided function.
 * @category Utils
 */
const uniqueBy$1 = (array, fn) => array.reduce((acc, v) => {
  if (!acc.some(x => fn(v, x))) acc.push(v);
  return acc;
}, []);

/**
 * Defines a public key that can sign transactions and messages.
 * @category Context and Interfaces
 */

/**
 * Signs a transaction using the provided signers.
 * @category Signers and PublicKeys
 */
const signTransaction$1 = async (transaction, signers) => signers.reduce(async (promise, signer) => {
  const unsigned = await promise;
  return signer.signTransaction(unsigned);
}, Promise.resolve(transaction));

/**
 * Deduplicates the provided signers by public key.
 * @category Signers and PublicKeys
 */
const uniqueSigners$1 = signers => uniqueBy$1(signers, (a, b) => a.publicKey === b.publicKey);

/**
 * Creates a `Signer` that, when required to sign, throws an error.
 * @category Signers and PublicKeys
 */
function createNullSigner$1() {
  const error = new Error('Trying to use a NullSigner. ' + 'Did you forget to set a Signer on your Umi instance? ' + 'See the `signerIdentity` method for more information.');
  const errorHandler = () => {
    throw error;
  };
  return {
    get publicKey() {
      throw error;
    },
    signMessage: errorHandler,
    signTransaction: errorHandler,
    signAllTransactions: errorHandler
  };
}

/**
 * An implementation of the {@link TransactionFactoryInterface} that throws an error when called.
 * @category Transactions
 */
function createNullTransactionFactory$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('TransactionFactoryInterface', 'transactions');
  };
  return {
    create: errorHandler,
    serialize: errorHandler,
    deserialize: errorHandler,
    serializeMessage: errorHandler,
    deserializeMessage: errorHandler
  };
}

/**
 * An implementation of the {@link UploaderInterface} that throws an error when called.
 * @category Storage
 */
function createNullUploader$1() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$a('UploaderInterface', 'uploader');
  };
  return {
    upload: errorHandler,
    uploadJson: errorHandler,
    getUploadPrice: errorHandler
  };
}

/**
 * A Umi context object that uses all of the interfaces provided by Umi.
 * Once created, the end-user can pass this object to any function that
 * requires some or all of these interfaces.
 *
 * @category Context and Interfaces
 */

/**
 * A helper method that creates a Umi context object using only
 * Null implementations of the interfaces. This can be useful to
 * create a full Umi context object when only a few of the interfaces
 * are needed.
 *
 * @category Context and Interfaces
 */
const createNullContext$1 = () => ({
  downloader: createNullDownloader$1(),
  eddsa: createNullEddsa$1(),
  http: createNullHttp$1(),
  identity: createNullSigner$1(),
  payer: createNullSigner$1(),
  programs: createNullProgramRepository$1(),
  rpc: createNullRpc$1(),
  serializer: createNullSerializer$1(),
  transactions: createNullTransactionFactory$1(),
  uploader: createNullUploader$1()
});

/**
 * Defines a string that can be parsed into a Date object.
 * For instance, `"2020-01-01T00:00:00.000Z"`.
 * @category Utils — DateTime
 */

/**
 * Creates a {@link DateTime} from a {@link DateTimeInput}.
 * @category Utils — DateTime
 */
const dateTime$1 = value => {
  if (typeof value === 'string' || isDateObject$1(value)) {
    const date = new Date(value);
    const timestamp = Math.floor(date.getTime() / 1000);
    return createBigInt$1(timestamp);
  }
  return createBigInt$1(value);
};

/**
 * Whether the given value is a Date object.
 * @category Utils — DateTime
 */
const isDateObject$1 = value => Object.prototype.toString.call(value) === '[object Date]';

/**
 * Generate a random string of the given length.
 * Warning: This is not a cryptographically secure random string generator.
 * @category Utils
 */
const generateRandomString$1 = (length = 20, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') => {
  let result = '';
  const alphabetLength = alphabet.length;
  for (let i = 0; i < length; i += 1) {
    result += alphabet.charAt(Math.floor(Math.random() * alphabetLength));
  }
  return result;
};

/**
 * A generic definition of a File represented as a buffer with
 * extra metadata such as a file name, content type, and tags.
 *
 * @category Storage
 */

/**
 * Creates a new {@link GenericFile} from a buffer and a file name.
 * @category Storage
 */
const createGenericFile$1 = (content, fileName, options = {}) => ({
  buffer: typeof content === 'string' ? utf8$6.serialize(content) : content,
  fileName,
  displayName: options.displayName ?? fileName,
  uniqueName: options.uniqueName ?? generateRandomString$1(),
  contentType: options.contentType ?? null,
  extension: options.extension ?? getExtension$1(fileName),
  tags: options.tags ?? []
});

/**
 * Returns the extension of a file name.
 * @category Storage
 */
const getExtension$1 = fileName => {
  const lastDotIndex = fileName.lastIndexOf('.');
  return lastDotIndex < 0 ? null : fileName.slice(lastDotIndex + 1);
};

/** Defines a number in milliseconds. */

/**
 * Defines a HTTP Request with custom data.
 * @category Http
 */

/**
 * Creates a new {@link HttpRequestBuilder} instance.
 * @category Http
 */
const request$1 = () => new HttpRequestBuilder$1({
  method: 'get',
  data: undefined,
  headers: {},
  url: ''
});

/**
 * A builder for constructing {@link HttpRequest} instances.
 * @category Http
 */
let HttpRequestBuilder$1 = class HttpRequestBuilder {
  constructor(request) {
    this.request = request;
  }
  asJson() {
    return this.contentType('application/json');
  }
  asMultipart() {
    return this.contentType('multipart/form-data');
  }
  asForm() {
    return this.contentType('application/x-www-form-urlencoded');
  }
  accept(contentType) {
    return this.withHeader('accept', contentType);
  }
  contentType(contentType) {
    return this.withHeader('content-type', contentType);
  }
  userAgent(userAgent) {
    return this.withHeader('user-agent', userAgent);
  }
  withToken(token, type = 'Bearer') {
    return this.withHeader('authorization', `${type} ${token}`);
  }
  withHeader(key, value) {
    return this.withHeaders({
      [key]: value
    });
  }
  withHeaders(headers) {
    return new HttpRequestBuilder({
      ...this.request,
      headers: {
        ...this.request.headers,
        ...headers
      }
    });
  }
  dontFollowRedirects() {
    return this.followRedirects(0);
  }
  followRedirects(maxRedirects) {
    return new HttpRequestBuilder({
      ...this.request,
      maxRedirects
    });
  }
  withoutTimeout() {
    return this.withTimeout(0);
  }
  withTimeout(timeout) {
    return new HttpRequestBuilder({
      ...this.request,
      timeout
    });
  }
  withAbortSignal(signal) {
    return new HttpRequestBuilder({
      ...this.request,
      signal
    });
  }
  withEndpoint(method, url) {
    return new HttpRequestBuilder({
      ...this.request,
      method,
      url
    });
  }
  withParams(params) {
    const url = new URL(this.request.url);
    const newSearch = new URLSearchParams(params);
    const search = new URLSearchParams(url.searchParams);
    [...newSearch.entries()].forEach(([key, val]) => {
      search.append(key, val);
    });
    url.search = search.toString();
    return new HttpRequestBuilder({
      ...this.request,
      url: url.toString()
    });
  }
  withData(data) {
    return new HttpRequestBuilder({
      ...this.request,
      data
    });
  }
  get(url) {
    return this.withEndpoint('get', url);
  }
  post(url) {
    return this.withEndpoint('post', url);
  }
  put(url) {
    return this.withEndpoint('put', url);
  }
  patch(url) {
    return this.withEndpoint('patch', url);
  }
  delete(url) {
    return this.withEndpoint('delete', url);
  }
  get method() {
    return this.request.method;
  }
  get url() {
    return this.request.url;
  }
  get data() {
    return this.request.data;
  }
  get headers() {
    return this.request.headers;
  }
  get maxRedirects() {
    return this.request.maxRedirects;
  }
  get timeout() {
    return this.request.timeout;
  }
  get signal() {
    return this.request.signal;
  }
};

/**
 * The maximum amount of bytes that can be used for a transaction.
 * @category Transactions
 */
const TRANSACTION_SIZE_LIMIT$1 = 1232;

/**
 * The version of a transaction.
 * - Legacy is the very first iteration of Solana transactions.
 * - V0 introduces the concept of versionned transaction for
 * the first time and adds supports for address lookup tables.
 *
 * @category Transactions
 */

/**
 * Adds a given signature to the transaction's signature array
 * and returns the updated transaction as a new object.
 *
 * @category Transactions
 */
const addTransactionSignature$1 = (transaction, signature, signerPublicKey) => {
  const maxSigners = transaction.message.header.numRequiredSignatures;
  const signerPublicKeys = transaction.message.accounts.slice(0, maxSigners);
  const signerIndex = signerPublicKeys.findIndex(key => key === signerPublicKey);
  if (signerIndex < 0) {
    throw new Error('The provided signer is not required to sign this transaction.');
  }
  const newSignatures = [...transaction.signatures];
  newSignatures[signerIndex] = signature;
  return {
    ...transaction,
    signatures: newSignatures
  };
};

/**
 * Represents a keypair with a public key and a secret key.
 * @category Signers and PublicKeys
 */

/**
 * Generate a new random {@link KeypairSigner} using the Eddsa interface.
 * @category Signers and PublicKeys
 */
const generateSigner$1 = context => createSignerFromKeypair$1(context, context.eddsa.generateKeypair());

/**
 * Creates a {@link KeypairSigner} from a {@link Keypair} object.
 * @category Signers and PublicKeys
 */
const createSignerFromKeypair$1 = (context, keypair) => ({
  publicKey: keypair.publicKey,
  secretKey: keypair.secretKey,
  async signMessage(message) {
    return context.eddsa.sign(message, keypair);
  },
  async signTransaction(transaction) {
    const message = transaction.serializedMessage;
    const signature = context.eddsa.sign(message, keypair);
    return addTransactionSignature$1(transaction, signature, keypair.publicKey);
  },
  async signAllTransactions(transactions) {
    return Promise.all(transactions.map(transaction => this.signTransaction(transaction)));
  }
});

/**
 * Umi plugin that sets the identity and the payer to the given signer.
 * @category Signers and PublicKeys
 */
const signerIdentity$1 = (signer, setPayer = true) => ({
  install(umi) {
    umi.identity = signer;
    if (setPayer) {
      umi.payer = signer;
    }
  }
});

/**
 * Umi plugin that sets the identity and the payer to a provided keypair.
 * @category Signers and PublicKeys
 */
const keypairIdentity$1 = (keypair, setPayer = true) => ({
  install(umi) {
    const signer = createSignerFromKeypair$1(umi, keypair);
    umi.use(signerIdentity$1(signer, setPayer));
  }
});

/**
 * Defines an generic object with wrapped instructions,
 * such as a {@link TransactionBuilder}.
 * @category Transactions
 */

/**
 * A builder that helps construct transactions.
 * @category Transactions
 */
let TransactionBuilder$3 = class TransactionBuilder {
  constructor(items = [], options = {}) {
    this.items = items;
    this.options = options;
  }
  empty() {
    return new TransactionBuilder([], this.options);
  }
  setItems(input) {
    return new TransactionBuilder(this.parseItems(input), this.options);
  }
  prepend(input) {
    return new TransactionBuilder([...this.parseItems(input), ...this.items], this.options);
  }
  append(input) {
    return new TransactionBuilder([...this.items, ...this.parseItems(input)], this.options);
  }
  add(input) {
    return this.append(input);
  }
  mapInstructions(fn) {
    return new TransactionBuilder(this.items.map(fn), this.options);
  }
  addRemainingAccounts(accountMeta, instructionIndex) {
    instructionIndex = instructionIndex ?? this.items.length - 1;
    const metas = Array.isArray(accountMeta) ? accountMeta : [accountMeta];
    const extraKeys = metas.map(meta => 'pubkey' in meta ? meta : {
      pubkey: meta.signer.publicKey,
      isSigner: true,
      isWritable: meta.isWritable
    });
    const extraSigners = metas.flatMap(meta => 'pubkey' in meta ? [] : [meta.signer]);
    return this.mapInstructions((wrappedInstruction, index) => {
      if (index !== instructionIndex) return wrappedInstruction;
      const keys = [...wrappedInstruction.instruction.keys, ...extraKeys];
      return {
        ...wrappedInstruction,
        instruction: {
          ...wrappedInstruction.instruction,
          keys
        },
        signers: [...wrappedInstruction.signers, ...extraSigners]
      };
    });
  }
  splitByIndex(index) {
    return [new TransactionBuilder(this.items.slice(0, index), this.options), new TransactionBuilder(this.items.slice(index), this.options)];
  }

  /**
   * Split the builder into multiple builders, such that
   * each of them should fit in a single transaction.
   *
   * This method is unsafe for several reasons:
   * - Because transactions are atomic, splitting the builder
   *   into multiple transactions may cause undesired side effects.
   *   For example, if the first transaction succeeds but the second
   *   one fails, you may end up with an inconsistent account state.
   *   This is why it is recommended to manually split your transactions
   *   such that each of them is valid on its own.
   * - It can only split the instructions of the builder. Meaning that,
   *   if the builder has a single instruction that is too big to fit in
   *   a single transaction, it will not be able to split it.
   */
  unsafeSplitByTransactionSize(context) {
    return this.items.reduce((builders, item) => {
      const lastBuilder = builders.pop();
      const lastBuilderWithItem = lastBuilder.add(item);
      if (lastBuilderWithItem.fitsInOneTransaction(context)) {
        builders.push(lastBuilderWithItem);
      } else {
        builders.push(lastBuilder);
        builders.push(lastBuilder.empty().add(item));
      }
      return builders;
    }, [this.empty()]);
  }
  setFeePayer(feePayer) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      feePayer
    });
  }
  getFeePayer(context) {
    return this.options.feePayer ?? context.payer;
  }
  setVersion(version) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      version
    });
  }
  useLegacyVersion() {
    return this.setVersion('legacy');
  }
  useV0() {
    return this.setVersion(0);
  }
  setAddressLookupTables(addressLookupTables) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      addressLookupTables
    });
  }
  getBlockhash() {
    return typeof this.options.blockhash === 'object' ? this.options.blockhash.blockhash : this.options.blockhash;
  }
  setBlockhash(blockhash) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      blockhash
    });
  }
  async setLatestBlockhash(context, options = {}) {
    return this.setBlockhash(await context.rpc.getLatestBlockhash(options));
  }
  getInstructions() {
    return this.items.map(item => item.instruction);
  }
  getSigners(context) {
    return uniqueSigners$1([this.getFeePayer(context), ...this.items.flatMap(item => item.signers)]);
  }
  getBytesCreatedOnChain() {
    return this.items.reduce((sum, item) => sum + item.bytesCreatedOnChain, 0);
  }
  async getRentCreatedOnChain(context) {
    return context.rpc.getRent(this.getBytesCreatedOnChain(), {
      includesHeaderBytes: true
    });
  }
  getTransactionSize(context) {
    return context.transactions.serialize(this.setBlockhash('11111111111111111111111111111111').build(context)).length;
  }
  minimumTransactionsRequired(context) {
    return Math.ceil(this.getTransactionSize(context) / TRANSACTION_SIZE_LIMIT$1);
  }
  fitsInOneTransaction(context) {
    return this.minimumTransactionsRequired(context) === 1;
  }
  build(context) {
    const blockhash = this.getBlockhash();
    if (!blockhash) {
      throw new SdkError$a('Setting a blockhash is required to build a transaction. ' + 'Please use the `setBlockhash` or `setLatestBlockhash` methods.');
    }
    const input = {
      version: this.options.version ?? 0,
      payer: this.getFeePayer(context).publicKey,
      instructions: this.getInstructions(),
      blockhash
    };
    if (input.version === 0 && this.options.addressLookupTables) {
      input.addressLookupTables = this.options.addressLookupTables;
    }
    return context.transactions.create(input);
  }
  async buildWithLatestBlockhash(context, options = {}) {
    let builder = this;
    if (!this.options.blockhash) {
      builder = await this.setLatestBlockhash(context, options);
    }
    return builder.build(context);
  }
  async buildAndSign(context) {
    return signTransaction$1(await this.buildWithLatestBlockhash(context), this.getSigners(context));
  }
  async send(context, options = {}) {
    const transaction = await this.buildAndSign(context);
    return context.rpc.sendTransaction(transaction, options);
  }
  async confirm(context, signature, options = {}) {
    let builder = this;
    if (!this.options.blockhash) {
      builder = await this.setLatestBlockhash(context);
    }
    let strategy;
    if (options.strategy) {
      strategy = options.strategy;
    } else {
      const blockhash = typeof builder.options.blockhash === 'object' ? builder.options.blockhash : await context.rpc.getLatestBlockhash();
      strategy = options.strategy ?? {
        type: 'blockhash',
        ...blockhash
      };
    }
    return context.rpc.confirmTransaction(signature, {
      ...options,
      strategy
    });
  }
  async sendAndConfirm(context, options = {}) {
    let builder = this;
    if (!this.options.blockhash) {
      builder = await this.setLatestBlockhash(context);
    }
    const signature = await builder.send(context, options.send);
    const result = await builder.confirm(context, signature, options.confirm);
    return {
      signature,
      result
    };
  }
  parseItems(input) {
    return (Array.isArray(input) ? input : [input]).flatMap(item => 'items' in item ? item.items : [item]);
  }
};

/**
 * Creates a new transaction builder.
 * @category Transactions
 */
const transactionBuilder$1 = (items = []) => new TransactionBuilder$3(items);

/**
 * Creates a Umi instance using only Null implementations of the interfaces.
 * The `use` method can then be used to install plugins and replace the
 * Null implementations with real implementations.
 *
 * @category Context and Interfaces
 */
const createUmi$2 = () => ({
  ...createNullContext$1(),
  use(plugin) {
    plugin.install(this);
    return this;
  }
});

/** @category Errors */

/** @category Errors */
let ProgramError$2 = class ProgramError extends UmiError$4 {
  name = 'ProgramError';
  constructor(message, program, cause) {
    super(message, 'program', `${program.name} [${program.publicKey}]`, cause);
    this.program = program;
    this.logs = cause?.logs;
    if (this.logs) {
      this.message += `\nProgram Logs:\n${this.logs.map(log => `| ${log}`).join('\n')}\n`;
    }
  }
};

function createHttpDownloader(context) {
  const downloadOne = async (uri, options = {}) => {
    const response = await context.http.send(request$1().get(uri).withAbortSignal(options.signal));
    return createGenericFile$1(response.body, uri);
  };
  const download = async (uris, options = {}) => Promise.all(uris.map(uri => downloadOne(uri, options)));
  const downloadJson = async (uri, options = {}) => {
    const response = await context.http.send(request$1().get(uri).withAbortSignal(options.signal));
    return response.data;
  };
  return {
    download,
    downloadJson
  };
}

const httpDownloader = () => ({
  install(umi) {
    umi.downloader = createHttpDownloader(umi);
  }
});

function fromWeb3JsPublicKey(publicKey) {
  return publicKey.toBase58();
}
function toWeb3JsPublicKey(publicKey) {
  return new PublicKey(publicKey);
}

function toWeb3JsInstruction(instruction) {
  return new TransactionInstruction({
    keys: instruction.keys.map(accountMeta => ({
      ...accountMeta,
      pubkey: toWeb3JsPublicKey(accountMeta.pubkey)
    })),
    programId: toWeb3JsPublicKey(instruction.programId),
    data: Buffer.from(instruction.data)
  });
}

function fromWeb3JsKeypair(keypair) {
  return {
    publicKey: fromWeb3JsPublicKey(keypair.publicKey),
    secretKey: keypair.secretKey
  };
}

function fromWeb3JsMessage(message) {
  return {
    version: message.version,
    header: message.header,
    accounts: message.staticAccountKeys.map(fromWeb3JsPublicKey),
    blockhash: message.recentBlockhash,
    instructions: message.compiledInstructions.map(instruction => ({
      programIndex: instruction.programIdIndex,
      accountIndexes: instruction.accountKeyIndexes,
      data: new Uint8Array(instruction.data)
    })),
    addressLookupTables: message.addressTableLookups.map(lookup => ({
      publicKey: fromWeb3JsPublicKey(lookup.accountKey),
      writableIndexes: lookup.writableIndexes,
      readonlyIndexes: lookup.readonlyIndexes
    }))
  };
}
function toWeb3JsMessageFromInput(input) {
  if (input.version === 'legacy') {
    return Message.compile({
      payerKey: toWeb3JsPublicKey(input.payer),
      instructions: input.instructions.map(toWeb3JsInstruction),
      recentBlockhash: input.blockhash
    });
  }
  return MessageV0.compile({
    payerKey: toWeb3JsPublicKey(input.payer),
    instructions: input.instructions.map(toWeb3JsInstruction),
    recentBlockhash: input.blockhash,
    addressLookupTableAccounts: input.addressLookupTables?.map(account => new AddressLookupTableAccount({
      key: toWeb3JsPublicKey(account.publicKey),
      state: {
        addresses: account.addresses.map(toWeb3JsPublicKey),
        authority: undefined,
        deactivationSlot: BigInt(`0x${'ff'.repeat(8)}`),
        lastExtendedSlot: 0,
        lastExtendedSlotStartIndex: 0
      }
    }))
  });
}

function createWeb3JsEddsa() {
  const generateKeypair = () => fromWeb3JsKeypair(Keypair$2.generate());
  const createKeypairFromSecretKey = secretKey => fromWeb3JsKeypair(Keypair$2.fromSecretKey(secretKey));
  const createKeypairFromSeed = seed => fromWeb3JsKeypair(Keypair$2.fromSeed(seed));
  const isOnCurve = input => PublicKey.isOnCurve(toWeb3JsPublicKey(publicKey$4(input)));
  const findPda = (programId, seeds) => {
    const [key, bump] = PublicKey.findProgramAddressSync(seeds, toWeb3JsPublicKey(publicKey$4(programId)));
    return [fromWeb3JsPublicKey(key), bump];
  };
  const sign = (message, keypair) => ed25519.sign(message, keypair.secretKey.slice(0, 32));
  const verify = (message, signature, publicKey) => ed25519.verify(signature, message, publicKeyBytes$1(publicKey));
  return {
    generateKeypair,
    createKeypairFromSecretKey,
    createKeypairFromSeed,
    isOnCurve,
    findPda,
    sign,
    verify
  };
}

const web3JsEddsa = () => ({
  install(umi) {
    umi.eddsa = createWeb3JsEddsa();
  }
});

var browser = {exports: {}};

(function (module, exports) {

	// ref: https://github.com/tc39/proposal-global
	var getGlobal = function () {
		// the only reliable means to get the global object is
		// `Function('return this')()`
		// However, this causes CSP violations in Chrome apps.
		if (typeof self !== 'undefined') { return self; }
		if (typeof window !== 'undefined') { return window; }
		if (typeof commonjsGlobal$1 !== 'undefined') { return commonjsGlobal$1; }
		throw new Error('unable to locate global object');
	};

	var globalObject = getGlobal();

	module.exports = exports = globalObject.fetch;

	// Needed for TypeScript and Webpack.
	if (globalObject.fetch) {
		exports.default = globalObject.fetch.bind(globalObject);
	}

	exports.Headers = globalObject.Headers;
	exports.Request = globalObject.Request;
	exports.Response = globalObject.Response; 
} (browser, browser.exports));

var browserExports = browser.exports;
var fetch$1 = /*@__PURE__*/getDefaultExportFromCjs$3(browserExports);

function createFetchHttp() {
  return {
    send: async request => {
      const headers = request.headers ? Object.entries(request.headers).reduce((acc, [name, headers]) => ({
        ...acc,
        [name.toLowerCase()]: (Array.isArray(headers) ? headers.join(', ') : headers).toLowerCase()
      }), {}) : {};
      const isJsonRequest = headers['content-type']?.includes('application/json') ?? false;
      let body;
      if (isJsonRequest && request.data) {
        body = JSON.stringify(request.data);
      } else {
        body = request.data;
      }
      const requestInit = {
        method: request.method,
        body,
        headers,
        follow: request.maxRedirects,
        signal: request.signal,
        timeout: request.timeout
      };
      const response = await fetch$1(request.url, requestInit);
      const isJsonResponse = response.headers.get('content-type')?.includes('application/json') ?? false;
      const bodyAsText = await response.text();
      const bodyAsJson = isJsonResponse ? JSON.parse(bodyAsText) : undefined;
      return {
        data: bodyAsJson ?? bodyAsText,
        body: bodyAsText,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      };
    }
  };
}

const fetchHttp = () => ({
  install(umi) {
    umi.http = createFetchHttp();
  }
});

class ProgramNotRecognizedError extends SdkError$a {
  name = 'ProgramNotRecognizedError';
  constructor(identifier, cluster) {
    const isName = !isPublicKey$1(identifier);
    const toString = isName ? identifier : identifier;
    const clusterString = cluster === '*' ? 'any' : `the [${cluster}]`;
    const message = `The provided program ${isName ? 'name' : 'address'} [${toString}] ` + `is not recognized in ${clusterString} cluster. ` + 'Did you forget to register this program? ' + 'If so, you may use "context.programs.add(myProgram)" to fix this.';
    super(message);
    this.identifier = identifier;
    this.cluster = cluster;
  }
}

/** @category Errors */
class ProgramErrorNotRecognizedError extends ProgramError$2 {
  name = 'ProgramErrorNotRecognizedError';
  constructor(program, cause) {
    const ofCode = cause.code ? ` of code [${cause.code}]` : '';
    const message = `The program [${program.name}] ` + `at address [${program.publicKey}] ` + `raised an error${ofCode} ` + `that is not recognized by the programs registered on the SDK. ` + `Please check the underlying program error below for more details.`;
    super(message, program, cause);
  }
}

function createDefaultProgramRepository(context, initialPrograms = [], initialBindings = {}) {
  const programs = [...initialPrograms];
  const bindings = {
    ...initialBindings
  };
  const has = (identifier, clusterFilter = 'current') => {
    const programs = all(clusterFilter);
    const resolvedIdentifier = resolveBinding(identifier);
    return isPublicKey$1(resolvedIdentifier) ? programs.some(p => p.publicKey === resolvedIdentifier) : programs.some(p => p.name === resolvedIdentifier);
  };
  const get = (identifier, clusterFilter = 'current') => {
    const cluster = resolveClusterFilter(clusterFilter);
    const programs = all(clusterFilter);
    const resolvedIdentifier = resolveBinding(identifier);
    const program = isPublicKey$1(resolvedIdentifier) ? programs.find(p => p.publicKey === resolvedIdentifier) : programs.find(p => p.name === resolvedIdentifier);
    if (!program) {
      throw new ProgramNotRecognizedError(resolvedIdentifier, cluster);
    }
    return program;
  };
  const getPublicKey = (identifier, fallback, clusterFilter) => {
    try {
      return get(identifier, clusterFilter).publicKey;
    } catch (error) {
      if (fallback === undefined) throw error;
      return publicKey$4(fallback);
    }
  };
  const all = (clusterFilter = 'current') => {
    const cluster = resolveClusterFilter(clusterFilter);
    return cluster === '*' ? programs : programs.filter(program => program.isOnCluster(cluster));
  };
  const add = (program, overrides = true) => {
    if (!overrides && has(program.publicKey, '*')) return;
    programs.unshift(program);
  };
  const bind = (abstract, concrete) => {
    bindings[abstract] = concrete;
    resolveBinding(abstract); // Ensures the binding is valid.
  };

  const unbind = abstract => {
    delete bindings[abstract];
  };
  const clone = () => createDefaultProgramRepository(context, programs, bindings);
  const resolveError = (error, transaction) => {
    // Ensure the error as logs.
    if (!Array.isArray(error.logs) || error.logs.length === 0) return null;
    const logs = error.logs.join('\n');

    // Parse the instruction number.
    const instructionRegex = /Error processing Instruction (\d+):/;
    const instruction = error.message.match(instructionRegex)?.[1] ?? null;

    // Parse the error code.
    const errorCodeRegex = /Custom program error: (0x[a-f0-9]+)/i;
    const errorCodeString = logs.match(errorCodeRegex)?.[1] ?? null;
    const errorCode = errorCodeString ? parseInt(errorCodeString, 16) : null;

    // Ensure we could find an instruction number and an error code.
    if (instruction === null || errorCode === null) return null;

    // Get the program ID from the instruction in the transaction.
    const instructionNumber = parseInt(instruction, 10);
    const programIndex = transaction.message.instructions?.[instructionNumber]?.programIndex ?? null;
    const programId = programIndex ? transaction.message.accounts[programIndex] : null;

    // Ensure we were able to find a program ID for the instruction.
    if (!programId) return null;

    // Find a registered program if any.
    let program;
    try {
      program = get(programId);
    } catch (_programNotFoundError) {
      return null;
    }

    // Finally, resolve the error.
    const resolvedError = program.getErrorFromCode(errorCode, error);
    return resolvedError ?? new ProgramErrorNotRecognizedError(program, error);
  };
  const resolveClusterFilter = clusterFilter => clusterFilter === 'current' ? context.rpc.getCluster() : clusterFilter;
  const resolveBinding = (identifier, stack = []) => {
    if (isPublicKey$1(identifier)) return identifier;
    if (bindings[identifier] === undefined) return identifier;
    const stackWithIdentifier = [...stack, identifier];
    if (stack.includes(identifier)) {
      throw new Error(`Circular binding detected: ${stackWithIdentifier.join(' -> ')}`);
    }
    return resolveBinding(bindings[identifier], stackWithIdentifier);
  };
  return {
    has,
    get,
    getPublicKey,
    all,
    add,
    bind,
    unbind,
    clone,
    resolveError
  };
}

const defaultProgramRepository = () => ({
  install(umi) {
    umi.programs = createDefaultProgramRepository(umi);
  }
});

function createWeb3JsRpc(context, endpointOrConnection, rpcOptions) {
  let connection = null;
  const getConnection = () => {
    if (connection) {
      return connection;
    }
    if (typeof endpointOrConnection === 'string') {
      connection = new Connection(endpointOrConnection, rpcOptions);
    } else {
      connection = endpointOrConnection;
    }
    return connection;
  };
  const cluster = resolveClusterFromEndpoint$1(getConnection().rpcEndpoint);
  const getAccount = async (publicKey, options = {}) => {
    const account = await getConnection().getAccountInfo(toWeb3JsPublicKey(publicKey), options);
    return parseMaybeAccount(account, publicKey);
  };
  const getAccounts = async (publicKeys, options = {}) => {
    const accounts = await getConnection().getMultipleAccountsInfo(publicKeys.map(toWeb3JsPublicKey), options);
    return accounts.map((account, index) => parseMaybeAccount(account, publicKeys[index]));
  };
  const getProgramAccounts = async (programId, options = {}) => {
    const accounts = await getConnection().getProgramAccounts(toWeb3JsPublicKey(programId), {
      ...options,
      filters: options.filters?.map(filter => parseDataFilter(filter))
    });
    return accounts.map(({
      pubkey,
      account
    }) => parseAccount(account, fromWeb3JsPublicKey(pubkey)));
  };
  const getBlockTime = async (slot,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _options = {}) => {
    const blockTime = await getConnection().getBlockTime(slot);
    return blockTime ? dateTime$1(blockTime) : null;
  };
  const getBalance = async (publicKey, options = {}) => {
    const balanceInLamports = await getConnection().getBalance(toWeb3JsPublicKey(publicKey), options);
    return lamports$1(balanceInLamports);
  };
  const getRent = async (bytes, options = {}) => {
    const rentFor = bytes => getConnection().getMinimumBalanceForRentExemption(bytes, options.commitment);
    if (options.includesHeaderBytes ?? false) {
      const headerRent = await rentFor(0);
      const rentPerByte = BigInt(headerRent) / BigInt(ACCOUNT_HEADER_SIZE$1);
      return lamports$1(rentPerByte * BigInt(bytes));
    }
    return lamports$1(await rentFor(bytes));
  };
  const getLatestBlockhash = async (options = {}) => getConnection().getLatestBlockhash(options);
  const getTransaction = async (signature, options = {}) => {
    const response = await getConnection().getTransaction(base58$5.deserialize(signature)[0], {
      commitment: options.commitment,
      maxSupportedTransactionVersion: 0
    });
    if (!response) {
      return null;
    }
    if (!response.meta) {
      // TODO: Custom error.
      throw new Error('Transaction meta is missing.');
    }
    const {
      transaction,
      meta
    } = response;
    const message = fromWeb3JsMessage(transaction.message);
    const mapPublicKey = key => fromWeb3JsPublicKey(new PublicKey(key));
    const mapTokenBalance = tokenBalance => ({
      accountIndex: tokenBalance.accountIndex,
      amount: createAmount$1(tokenBalance.uiTokenAmount.amount, 'splToken', tokenBalance.uiTokenAmount.decimals),
      mint: mapPublicKey(tokenBalance.mint),
      owner: tokenBalance.owner ? mapPublicKey(tokenBalance.owner) : null
    });
    return {
      message,
      serializedMessage: context.transactions.serializeMessage(message),
      signatures: transaction.signatures.map(base58$5.serialize),
      meta: {
        fee: lamports$1(meta.fee),
        logs: meta.logMessages ?? [],
        preBalances: meta.preBalances.map(lamports$1),
        postBalances: meta.postBalances.map(lamports$1),
        preTokenBalances: (meta.preTokenBalances ?? []).map(mapTokenBalance),
        postTokenBalances: (meta.postTokenBalances ?? []).map(mapTokenBalance),
        innerInstructions: meta.innerInstructions?.map(inner => ({
          index: inner.index,
          instructions: inner.instructions.map(instruction => ({
            programIndex: instruction.programIdIndex,
            accountIndexes: instruction.accounts,
            data: base58$5.serialize(instruction.data)
          }))
        })) ?? null,
        loadedAddresses: {
          writable: (meta.loadedAddresses?.writable ?? []).map(fromWeb3JsPublicKey),
          readonly: (meta.loadedAddresses?.readonly ?? []).map(fromWeb3JsPublicKey)
        },
        computeUnitsConsumed: meta.computeUnitsConsumed ? BigInt(meta.computeUnitsConsumed) : null,
        err: meta.err
      }
    };
  };
  const getSignatureStatuses = async (signatures, options = {}) => {
    const response = await getConnection().getSignatureStatuses(signatures.map(signature => base58$5.deserialize(signature)[0]), {
      searchTransactionHistory: options?.searchTransactionHistory ?? false
    });
    return response.value.map(status => {
      if (!status) return null;
      return {
        slot: status.slot,
        confirmations: status.confirmations,
        error: status.err,
        commitment: status.confirmationStatus ?? null
      };
    });
  };
  const accountExists = async (publicKey, options = {}) => !isZeroAmount$1(await getBalance(publicKey, options));
  const airdrop = async (publicKey, amount, options = {}) => {
    const signature = await getConnection().requestAirdrop(toWeb3JsPublicKey(publicKey), Number(amount.basisPoints));
    if (options.strategy) {
      await confirmTransaction(base58$5.serialize(signature), options);
      return;
    }
    await confirmTransaction(base58$5.serialize(signature), {
      ...options,
      strategy: {
        type: 'blockhash',
        ...(await getLatestBlockhash())
      }
    });
  };
  const call = async (method, params, options = {}) => {
    const client = getConnection()._rpcClient;
    const resolvedParams = resolveCallParams(params ? [...params] : [], options.commitment, options.extra);
    return new Promise((resolve, reject) => {
      const callback = (error, response) => error ? reject(error) : resolve(response.result);
      if (options.id) {
        client.request(method, resolvedParams, options.id, callback);
      } else {
        client.request(method, resolvedParams, callback);
      }
    });
  };
  const sendTransaction = async (transaction, options = {}) => {
    try {
      const signature = await getConnection().sendRawTransaction(context.transactions.serialize(transaction), options);
      return base58$5.serialize(signature);
    } catch (error) {
      let resolvedError = null;
      if (error instanceof Error && 'logs' in error) {
        resolvedError = context.programs.resolveError(error, transaction);
      }
      throw resolvedError || error;
    }
  };
  const confirmTransaction = async (signature, options) => getConnection().confirmTransaction(parseConfirmStrategy(signature, options), options.commitment);
  return {
    getEndpoint: () => getConnection().rpcEndpoint,
    getCluster: () => cluster,
    getAccount,
    getAccounts,
    getProgramAccounts,
    getBlockTime,
    getBalance,
    getRent,
    getSlot: async (options = {}) => getConnection().getSlot(options),
    getLatestBlockhash,
    getTransaction,
    getSignatureStatuses,
    accountExists,
    airdrop,
    call,
    sendTransaction,
    confirmTransaction,
    get connection() {
      return getConnection();
    }
  };
}
function parseAccount(account, publicKey) {
  return {
    executable: account.executable,
    owner: fromWeb3JsPublicKey(account.owner),
    lamports: lamports$1(account.lamports),
    rentEpoch: account.rentEpoch ? BigInt(account.rentEpoch) : undefined,
    publicKey,
    data: new Uint8Array(account.data)
  };
}
function parseMaybeAccount(account, publicKey) {
  return account ? {
    ...parseAccount(account, publicKey),
    exists: true
  } : {
    exists: false,
    publicKey
  };
}
function parseDataFilter(filter) {
  if (!('memcmp' in filter)) return filter;
  const {
    bytes,
    ...rest
  } = filter.memcmp;
  return {
    memcmp: {
      ...rest,
      bytes: base58$5.deserialize(bytes)[0]
    }
  };
}
function parseConfirmStrategy(signature, options) {
  if (options.strategy.type === 'blockhash') {
    return {
      ...options.strategy,
      signature: base58$5.deserialize(signature)[0]
    };
  }
  return {
    ...options.strategy,
    signature: base58$5.deserialize(signature)[0],
    nonceAccountPubkey: toWeb3JsPublicKey(options.strategy.nonceAccountPubkey)
  };
}
function resolveCallParams(args, commitment, extra) {
  if (!commitment && !extra) return args;
  let options = {};
  if (commitment) options.commitment = commitment;
  if (extra) options = {
    ...options,
    ...extra
  };
  args.push(options);
  return args;
}

function web3JsRpc(endpointOrConnection, rpcOptions) {
  return {
    install(umi) {
      umi.rpc = typeof endpointOrConnection === 'string' ? createWeb3JsRpc(umi, endpointOrConnection, rpcOptions) : createWeb3JsRpc(umi, endpointOrConnection);
    }
  };
}

const createChunkGetAccountsRpc = (rpc, chunkSize = 100) => ({
  ...rpc,
  getAccounts: async (publicKeys, options) => {
    const promises = chunk$1(publicKeys, chunkSize).map(chunk => rpc.getAccounts(chunk, options));
    const chunks = await Promise.all(promises);
    return chunks.flat();
  }
});

const chunkGetAccountsRpc = (chunkSize = 100) => ({
  install(umi) {
    umi.rpc = createChunkGetAccountsRpc(umi.rpc, chunkSize);
  }
});

function createDataViewSerializer(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
options = {}) {
  return {
    tuple: tuple$2,
    array: array$5,
    map: map$2,
    set: set$2,
    option: option$2,
    nullable: nullable$2,
    struct: struct$2,
    enum: scalarEnum$2,
    dataEnum: dataEnum$2,
    string: string$7,
    bool: bool$2,
    unit: unit$2,
    u8: u8$2,
    u16: u16$2,
    u32: u32$2,
    u64: u64$2,
    u128: u128$2,
    i8: i8$2,
    i16: i16$2,
    i32: i32$2,
    i64: i64$2,
    i128: i128$2,
    f32: f32$2,
    f64: f64$2,
    bytes: bytes$6,
    publicKey: publicKey$3
  };
}

const dataViewSerializer = (options = {}) => ({
  install(umi) {
    umi.serializer = createDataViewSerializer(options);
  }
});

/* eslint-disable no-bitwise */
const TRANSACTION_VERSION_FLAG = 0x80;
const TRANSACTION_VERSION_MASK = 0x7f;
function createWeb3JsTransactionFactory() {
  const create = input => {
    const web3JsMessage = toWeb3JsMessageFromInput(input);
    const message = fromWeb3JsMessage(web3JsMessage);
    const web3JsTransaction = new VersionedTransaction(web3JsMessage, input.signatures);
    return {
      message,
      serializedMessage: serializeMessage(message),
      signatures: web3JsTransaction.signatures
    };
  };
  const serialize = transaction => getTransactionSerializer().serialize(transaction);
  const deserialize = serializedTransaction => getTransactionSerializer().deserialize(serializedTransaction)[0];
  const serializeMessage = message => getTransactionMessageSerializer().serialize(message);
  const deserializeMessage = serializedMessage => getTransactionMessageSerializer().deserialize(serializedMessage)[0];
  const getTransactionSerializer = () => ({
    ...mapSerializer$4(struct$2([['signatures', array$5(bytes$6({
      size: 64
    }), {
      size: shortU16$2()
    })], ['serializedMessage', bytes$6()]]), value => value, value => ({
      ...value,
      message: deserializeMessage(value.serializedMessage)
    })),
    description: 'Transaction'
  });
  const getTransactionMessageSerializer = () => ({
    description: 'TransactionMessage',
    fixedSize: null,
    maxSize: null,
    serialize: value => {
      const serializer = getTransactionMessageSerializerForVersion(value.version);
      return serializer.serialize(value);
    },
    deserialize: (bytes, offset = 0) => {
      const [version] = getTransactionVersionSerializer().deserialize(bytes, offset);
      const serializer = getTransactionMessageSerializerForVersion(version);
      return serializer.deserialize(bytes, offset);
    }
  });
  const getTransactionMessageSerializerForVersion = version => struct$2([['version', getTransactionVersionSerializer()], ['header', getTransactionMessageHeaderSerializer()], ['accounts', array$5(publicKey$3(), {
    size: shortU16$2()
  })], ['blockhash', string$7({
    encoding: base58$5,
    size: 32
  })], ['instructions', array$5(getCompiledInstructionSerializer(), {
    size: shortU16$2()
  })], ['addressLookupTables', array$5(getCompiledAddressLookupTableSerializer(), {
    size: version === 'legacy' ? 0 : shortU16$2()
  })]]);
  const getTransactionVersionSerializer = () => ({
    description: 'TransactionVersion',
    fixedSize: null,
    maxSize: 1,
    serialize: value => {
      if (value === 'legacy') return new Uint8Array([]);
      return new Uint8Array([TRANSACTION_VERSION_FLAG | value]);
    },
    deserialize: (bytes, offset = 0) => {
      const slice = bytes.slice(offset);
      if (slice.length === 0 || (slice[0] & TRANSACTION_VERSION_FLAG) === 0) {
        return ['legacy', offset];
      }
      const version = slice[0] & TRANSACTION_VERSION_MASK;
      if (version > 0) {
        throw new SdkError$a(`Unsupported transaction version: ${version}.`);
      }
      return [version, offset + 1];
    }
  });
  const getTransactionMessageHeaderSerializer = () => struct$2([['numRequiredSignatures', u8$2()], ['numReadonlySignedAccounts', u8$2()], ['numReadonlyUnsignedAccounts', u8$2()]]);
  const getCompiledInstructionSerializer = () => struct$2([['programIndex', u8$2()], ['accountIndexes', array$5(u8$2(), {
    size: shortU16$2()
  })], ['data', bytes$6({
    size: shortU16$2()
  })]]);
  const getCompiledAddressLookupTableSerializer = () => struct$2([['publicKey', publicKey$3()], ['writableIndexes', array$5(u8$2(), {
    size: shortU16$2()
  })], ['readonlyIndexes', array$5(u8$2(), {
    size: shortU16$2()
  })]]);
  return {
    create,
    serialize,
    deserialize,
    serializeMessage,
    deserializeMessage
  };
}

const web3JsTransactionFactory = () => ({
  install(umi) {
    umi.transactions = createWeb3JsTransactionFactory();
  }
});

function defaultPlugins(endpointOrConnection, rpcOptions) {
  return {
    install(umi) {
      umi.use(dataViewSerializer());
      umi.use(defaultProgramRepository());
      umi.use(fetchHttp());
      umi.use(httpDownloader());
      umi.use(web3JsEddsa());
      umi.use(typeof endpointOrConnection === 'string' ? web3JsRpc(endpointOrConnection, rpcOptions) : web3JsRpc(endpointOrConnection));
      umi.use(chunkGetAccountsRpc(rpcOptions?.getAccountsChunkSize));
      umi.use(web3JsTransactionFactory());
    }
  };
}

function createUmi$1(endpointOrConnection, rpcOptions) {
  return createUmi$2().use(typeof endpointOrConnection === 'string' ? defaultPlugins(endpointOrConnection, rpcOptions) : defaultPlugins(endpointOrConnection, rpcOptions));
}

var src$1 = {};

var generated$1 = {};

var accounts$1 = {};

var collectionAuthorityRecord = {};

var cjs$6 = {};

var cjs$5 = {};

var common$7 = {};

Object.defineProperty(common$7, '__esModule', { value: true });

/**
 * Defines a type `T` that can also be `null`.
 * @category Utils — Options
 */

/**
 * An implementation of the Rust Option type in JavaScript.
 * It can be one of the following:
 * - <code>{@link Some}<T></code>: Meaning there is a value of type T.
 * - <code>{@link None}</code>: Meaning there is no value.
 *
 * @category Utils — Options
 */

/**
 * Defines a looser type that can be used when serializing an {@link Option}.
 * This allows us to pass null or the Option value directly whilst still
 * supporting the Option type for use-cases that need more type safety.
 *
 * @category Utils — Options
 */

/**
 * Represents an option of type `T` that has a value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */

/**
 * Represents an option of type `T` that has no value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */

/**
 * Creates a new {@link Option} of type `T` that has a value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */
const some = value => ({
  __option: 'Some',
  value
});

/**
 * Creates a new {@link Option} of type `T` that has no value.
 *
 * @see {@link Option}
 * @category Utils — Options
 */
const none = () => ({
  __option: 'None'
});

/**
 * Whether the given data is an {@link Option}.
 * @category Utils — Options
 */
const isOption = input => input && typeof input === 'object' && '__option' in input && (input.__option === 'Some' && 'value' in input || input.__option === 'None');

/**
 * Whether the given {@link Option} is a {@link Some}.
 * @category Utils — Options
 */
const isSome = option => option.__option === 'Some';

/**
 * Whether the given {@link Option} is a {@link None}.
 * @category Utils — Options
 */
const isNone = option => option.__option === 'None';

common$7.isNone = isNone;
common$7.isOption = isOption;
common$7.isSome = isSome;
common$7.none = none;
common$7.some = some;

var unwrapOption$2 = {};

Object.defineProperty(unwrapOption$2, '__esModule', { value: true });

var common$6 = common$7;

/**
 * Unwraps the value of an {@link Option} of type `T`
 * or returns a fallback value that defaults to `null`.
 *
 * @category Utils — Options
 */

function unwrapOption$1(option, fallback) {
  if (common$6.isSome(option)) return option.value;
  return fallback ? fallback() : null;
}

/**
 * Wraps a nullable value into an {@link Option}.
 *
 * @category Utils — Options
 */
const wrapNullable = nullable => nullable !== null ? common$6.some(nullable) : common$6.none();

/**
 * Unwraps the value of an {@link Option} of type `T`.
 * If the option is a {@link Some}, it returns its value,
 * Otherwise, it returns `null`.
 *
 * @category Utils — Options
 * @deprecated Use {@link unwrapOption} instead.
 */
const unwrapSome = option => common$6.isSome(option) ? option.value : null;

/**
 * Unwraps the value of an {@link Option} of type `T`
 * or returns a custom fallback value.
 * If the option is a {@link Some}, it returns its value,
 * Otherwise, it returns the return value of the provided fallback callback.
 *
 * @category Utils — Options
 * @deprecated Use {@link unwrapOption} instead.
 */
const unwrapSomeOrElse = (option, fallback) => common$6.isSome(option) ? option.value : fallback();

unwrapOption$2.unwrapOption = unwrapOption$1;
unwrapOption$2.unwrapSome = unwrapSome;
unwrapOption$2.unwrapSomeOrElse = unwrapSomeOrElse;
unwrapOption$2.wrapNullable = wrapNullable;

var unwrapOptionRecursively$2 = {};

Object.defineProperty(unwrapOptionRecursively$2, '__esModule', { value: true });

var common$5 = common$7;

/**
 * A type that defines the recursive unwrapping of a type `T`
 * such that all nested {@link Option} types are unwrapped.
 *
 * For each nested {@link Option} type, if the option is a {@link Some},
 * it returns the type of its value, otherwise, it returns the provided
 * fallback type `U` which defaults to `null`.
 *
 * @category Utils — Options
 */

function unwrapOptionRecursively$1(input, fallback) {
  // Types to bypass.
  if (!input || ArrayBuffer.isView(input)) {
    return input;
  }
  const next = x => fallback ? unwrapOptionRecursively$1(x, fallback) : unwrapOptionRecursively$1(x);

  // Handle Option.
  if (common$5.isOption(input)) {
    if (common$5.isSome(input)) return next(input.value);
    return fallback ? fallback() : null;
  }

  // Walk.
  if (Array.isArray(input)) {
    return input.map(next);
  }
  if (typeof input === 'object') {
    return Object.fromEntries(Object.entries(input).map(([k, v]) => [k, next(v)]));
  }
  return input;
}

unwrapOptionRecursively$2.unwrapOptionRecursively = unwrapOptionRecursively$1;

Object.defineProperty(cjs$5, '__esModule', { value: true });

var common$4 = common$7;
var unwrapOption = unwrapOption$2;
var unwrapOptionRecursively = unwrapOptionRecursively$2;



cjs$5.isNone = common$4.isNone;
cjs$5.isOption = common$4.isOption;
cjs$5.isSome = common$4.isSome;
cjs$5.none = common$4.none;
cjs$5.some = common$4.some;
cjs$5.unwrapOption = unwrapOption.unwrapOption;
cjs$5.unwrapSome = unwrapOption.unwrapSome;
cjs$5.unwrapSomeOrElse = unwrapOption.unwrapSomeOrElse;
cjs$5.wrapNullable = unwrapOption.wrapNullable;
cjs$5.unwrapOptionRecursively = unwrapOptionRecursively.unwrapOptionRecursively;

var cjs$4 = {};

var common$3 = {};

var cjs$3 = {};

var base10$3 = {};

var baseX$5 = {};

var errors$o = {};

Object.defineProperty(errors$o, '__esModule', { value: true });

/** @category Errors */
let InvalidBaseStringError$2 = class InvalidBaseStringError extends Error {
  name = 'InvalidBaseStringError';
  constructor(value, base, cause) {
    const message = `Expected a string of base ${base}, got [${value}].`;
    super(message);
    this.cause = cause;
  }
};

errors$o.InvalidBaseStringError = InvalidBaseStringError$2;

Object.defineProperty(baseX$5, '__esModule', { value: true });

var errors$n = errors$o;

/**
 * A string serializer that requires a custom alphabet and uses
 * the length of that alphabet as the base. It then divides
 * the input by the base as many times as necessary to get
 * the output. It also supports leading zeroes by using the
 * first character of the alphabet as the zero character.
 *
 * This can be used to create serializers such as base10 or base58.
 *
 * @category Serializers
 */
const baseX$4 = alphabet => {
  const base = alphabet.length;
  const baseBigInt = BigInt(base);
  return {
    description: `base${base}`,
    fixedSize: null,
    maxSize: null,
    serialize(value) {
      // Check if the value is valid.
      if (!value.match(new RegExp(`^[${alphabet}]*$`))) {
        throw new errors$n.InvalidBaseStringError(value, base);
      }
      if (value === '') return new Uint8Array();

      // Handle leading zeroes.
      const chars = [...value];
      let trailIndex = chars.findIndex(c => c !== alphabet[0]);
      trailIndex = trailIndex === -1 ? chars.length : trailIndex;
      const leadingZeroes = Array(trailIndex).fill(0);
      if (trailIndex === chars.length) return Uint8Array.from(leadingZeroes);

      // From baseX to base10.
      const tailChars = chars.slice(trailIndex);
      let base10Number = 0n;
      let baseXPower = 1n;
      for (let i = tailChars.length - 1; i >= 0; i -= 1) {
        base10Number += baseXPower * BigInt(alphabet.indexOf(tailChars[i]));
        baseXPower *= baseBigInt;
      }

      // From base10 to bytes.
      const tailBytes = [];
      while (base10Number > 0n) {
        tailBytes.unshift(Number(base10Number % 256n));
        base10Number /= 256n;
      }
      return Uint8Array.from(leadingZeroes.concat(tailBytes));
    },
    deserialize(buffer, offset = 0) {
      if (buffer.length === 0) return ['', 0];

      // Handle leading zeroes.
      const bytes = buffer.slice(offset);
      let trailIndex = bytes.findIndex(n => n !== 0);
      trailIndex = trailIndex === -1 ? bytes.length : trailIndex;
      const leadingZeroes = alphabet[0].repeat(trailIndex);
      if (trailIndex === bytes.length) return [leadingZeroes, buffer.length];

      // From bytes to base10.
      let base10Number = bytes.slice(trailIndex).reduce((sum, byte) => sum * 256n + BigInt(byte), 0n);

      // From base10 to baseX.
      const tailChars = [];
      while (base10Number > 0n) {
        tailChars.unshift(alphabet[Number(base10Number % baseBigInt)]);
        base10Number /= baseBigInt;
      }
      return [leadingZeroes + tailChars.join(''), buffer.length];
    }
  };
};

baseX$5.baseX = baseX$4;

Object.defineProperty(base10$3, '__esModule', { value: true });

var baseX$3 = baseX$5;

/**
 * A string serializer that uses base10 encoding.
 * @category Serializers
 */
const base10$2 = baseX$3.baseX('0123456789');

base10$3.base10 = base10$2;

var base16$3 = {};

Object.defineProperty(base16$3, '__esModule', { value: true });

var errors$m = errors$o;

/**
 * A string serializer that uses base16 encoding.
 * @category Serializers
 */
const base16$2 = {
  description: 'base16',
  fixedSize: null,
  maxSize: null,
  serialize(value) {
    const lowercaseValue = value.toLowerCase();
    if (!lowercaseValue.match(/^[0123456789abcdef]*$/)) {
      throw new errors$m.InvalidBaseStringError(value, 16);
    }
    const matches = lowercaseValue.match(/.{1,2}/g);
    return Uint8Array.from(matches ? matches.map(byte => parseInt(byte, 16)) : []);
  },
  deserialize(buffer, offset = 0) {
    const value = buffer.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');
    return [value, buffer.length];
  }
};

base16$3.base16 = base16$2;

var base58$3 = {};

Object.defineProperty(base58$3, '__esModule', { value: true });

var baseX$2 = baseX$5;

/**
 * A string serializer that uses base58 encoding.
 * @category Serializers
 */
const base58$2 = baseX$2.baseX('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');

base58$3.base58 = base58$2;

var base64$3 = {};

var cjs$2 = {};

var bytes$5 = {};

Object.defineProperty(bytes$5, '__esModule', { value: true });

/**
 * Concatenates an array of `Uint8Array`s into a single `Uint8Array`.
 * @category Utils
 */
const mergeBytes$1 = bytesArr => {
  const totalLength = bytesArr.reduce((total, arr) => total + arr.length, 0);
  const result = new Uint8Array(totalLength);
  let offset = 0;
  bytesArr.forEach(arr => {
    result.set(arr, offset);
    offset += arr.length;
  });
  return result;
};

/**
 * Pads a `Uint8Array` with zeroes to the specified length.
 * If the array is longer than the specified length, it is returned as-is.
 * @category Utils
 */
const padBytes$1 = (bytes, length) => {
  if (bytes.length >= length) return bytes;
  const paddedBytes = new Uint8Array(length).fill(0);
  paddedBytes.set(bytes);
  return paddedBytes;
};

/**
 * Fixes a `Uint8Array` to the specified length.
 * If the array is longer than the specified length, it is truncated.
 * If the array is shorter than the specified length, it is padded with zeroes.
 * @category Utils
 */
const fixBytes$1 = (bytes, length) => padBytes$1(bytes.slice(0, length), length);

bytes$5.fixBytes = fixBytes$1;
bytes$5.mergeBytes = mergeBytes$1;
bytes$5.padBytes = padBytes$1;

var errors$l = {};

Object.defineProperty(errors$l, '__esModule', { value: true });

/** @category Errors */
class DeserializingEmptyBufferError extends Error {
  name = 'DeserializingEmptyBufferError';
  constructor(serializer) {
    super(`Serializer [${serializer}] cannot deserialize empty buffers.`);
  }
}

/** @category Errors */
class NotEnoughBytesError extends Error {
  name = 'NotEnoughBytesError';
  constructor(serializer, expected, actual) {
    super(`Serializer [${serializer}] expected ${expected} bytes, got ${actual}.`);
  }
}

/** @category Errors */
class ExpectedFixedSizeSerializerError extends Error {
  name = 'ExpectedFixedSizeSerializerError';
  constructor(message) {
    message ??= 'Expected a fixed-size serializer, got a variable-size one.';
    super(message);
  }
}

errors$l.DeserializingEmptyBufferError = DeserializingEmptyBufferError;
errors$l.ExpectedFixedSizeSerializerError = ExpectedFixedSizeSerializerError;
errors$l.NotEnoughBytesError = NotEnoughBytesError;

var fixSerializer$3 = {};

Object.defineProperty(fixSerializer$3, '__esModule', { value: true });

var bytes$4 = bytes$5;
var errors$k = errors$l;

/**
 * Creates a fixed-size serializer from a given serializer.
 *
 * @param serializer - The serializer to wrap into a fixed-size serializer.
 * @param fixedBytes - The fixed number of bytes to read.
 * @param description - A custom description for the serializer.
 *
 * @category Serializers
 */
function fixSerializer$2(serializer, fixedBytes, description) {
  return {
    description: description ?? `fixed(${fixedBytes}, ${serializer.description})`,
    fixedSize: fixedBytes,
    maxSize: fixedBytes,
    serialize: value => bytes$4.fixBytes(serializer.serialize(value), fixedBytes),
    deserialize: (buffer, offset = 0) => {
      // Slice the buffer to the fixed size.
      buffer = buffer.slice(offset, offset + fixedBytes);
      // Ensure we have enough bytes.
      if (buffer.length < fixedBytes) {
        throw new errors$k.NotEnoughBytesError('fixSerializer', fixedBytes, buffer.length);
      }
      // If the nested serializer is fixed-size, pad and truncate the buffer accordingly.
      if (serializer.fixedSize !== null) {
        buffer = bytes$4.fixBytes(buffer, serializer.fixedSize);
      }
      // Deserialize the value using the nested serializer.
      const [value] = serializer.deserialize(buffer, 0);
      return [value, offset + fixedBytes];
    }
  };
}

fixSerializer$3.fixSerializer = fixSerializer$2;

var mapSerializer$3 = {};

Object.defineProperty(mapSerializer$3, '__esModule', { value: true });

/**
 * Converts a serializer A to a serializer B by mapping their values.
 * @category Serializers
 */

function mapSerializer$2(serializer, unmap, map) {
  return {
    description: serializer.description,
    fixedSize: serializer.fixedSize,
    maxSize: serializer.maxSize,
    serialize: value => serializer.serialize(unmap(value)),
    deserialize: (buffer, offset = 0) => {
      const [value, length] = serializer.deserialize(buffer, offset);
      return map ? [map(value, buffer, offset), length] : [value, length];
    }
  };
}

mapSerializer$3.mapSerializer = mapSerializer$2;

var reverseSerializer$3 = {};

Object.defineProperty(reverseSerializer$3, '__esModule', { value: true });

var bytes$3 = bytes$5;
var errors$j = errors$l;

/**
 * Reverses the bytes of a fixed-size serializer.
 * @category Serializers
 */
function reverseSerializer$2(serializer) {
  if (serializer.fixedSize === null) {
    throw new errors$j.ExpectedFixedSizeSerializerError('Cannot reverse a serializer of variable size.');
  }
  return {
    ...serializer,
    serialize: value => serializer.serialize(value).reverse(),
    deserialize: (bytes$1, offset = 0) => {
      const fixedSize = serializer.fixedSize;
      const newBytes = bytes$3.mergeBytes([bytes$1.slice(0, offset), bytes$1.slice(offset, offset + fixedSize).reverse(), bytes$1.slice(offset + fixedSize)]);
      return serializer.deserialize(newBytes, offset);
    }
  };
}

reverseSerializer$3.reverseSerializer = reverseSerializer$2;

Object.defineProperty(cjs$2, '__esModule', { value: true });

var bytes$2 = bytes$5;
var errors$i = errors$l;
var fixSerializer$1 = fixSerializer$3;
var mapSerializer$1 = mapSerializer$3;
var reverseSerializer$1 = reverseSerializer$3;



cjs$2.fixBytes = bytes$2.fixBytes;
cjs$2.mergeBytes = bytes$2.mergeBytes;
cjs$2.padBytes = bytes$2.padBytes;
cjs$2.DeserializingEmptyBufferError = errors$i.DeserializingEmptyBufferError;
cjs$2.ExpectedFixedSizeSerializerError = errors$i.ExpectedFixedSizeSerializerError;
cjs$2.NotEnoughBytesError = errors$i.NotEnoughBytesError;
cjs$2.fixSerializer = fixSerializer$1.fixSerializer;
cjs$2.mapSerializer = mapSerializer$1.mapSerializer;
cjs$2.reverseSerializer = reverseSerializer$1.reverseSerializer;

var baseXReslice$3 = {};

Object.defineProperty(baseXReslice$3, '__esModule', { value: true });

var errors$h = errors$o;

/* eslint-disable no-restricted-syntax */

/**
 * A string serializer that reslices bytes into custom chunks
 * of bits that are then mapped to a custom alphabet.
 *
 * This can be used to create serializers whose alphabet
 * is a power of 2 such as base16 or base64.
 *
 * @category Serializers
 */
const baseXReslice$2 = (alphabet, bits) => {
  const base = alphabet.length;
  const reslice = (input, inputBits, outputBits, useRemainder) => {
    const output = [];
    let accumulator = 0;
    let bitsInAccumulator = 0;
    const mask = (1 << outputBits) - 1;
    for (const value of input) {
      accumulator = accumulator << inputBits | value;
      bitsInAccumulator += inputBits;
      while (bitsInAccumulator >= outputBits) {
        bitsInAccumulator -= outputBits;
        output.push(accumulator >> bitsInAccumulator & mask);
      }
    }
    if (useRemainder && bitsInAccumulator > 0) {
      output.push(accumulator << outputBits - bitsInAccumulator & mask);
    }
    return output;
  };
  return {
    description: `base${base}`,
    fixedSize: null,
    maxSize: null,
    serialize(value) {
      // Check if the value is valid.
      if (!value.match(new RegExp(`^[${alphabet}]*$`))) {
        throw new errors$h.InvalidBaseStringError(value, base);
      }
      if (value === '') return new Uint8Array();
      const charIndices = [...value].map(c => alphabet.indexOf(c));
      const bytes = reslice(charIndices, bits, 8, false);
      return Uint8Array.from(bytes);
    },
    deserialize(buffer, offset = 0) {
      if (buffer.length === 0) return ['', 0];
      const bytes = [...buffer.slice(offset)];
      const charIndices = reslice(bytes, 8, bits, true);
      return [charIndices.map(i => alphabet[i]).join(''), buffer.length];
    }
  };
};

baseXReslice$3.baseXReslice = baseXReslice$2;

Object.defineProperty(base64$3, '__esModule', { value: true });

var umiSerializersCore$f = cjs$2;
var baseXReslice$1 = baseXReslice$3;

/**
 * A string serializer that uses base64 encoding.
 * @category Serializers
 */
const base64$2 = umiSerializersCore$f.mapSerializer(baseXReslice$1.baseXReslice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', 6), value => value.replace(/=/g, ''), value => value.padEnd(Math.ceil(value.length / 4) * 4, '='));

base64$3.base64 = base64$2;

var nullCharacters$2 = {};

Object.defineProperty(nullCharacters$2, '__esModule', { value: true });

/**
 * Removes null characters from a string.
 * @category Utils
 */
const removeNullCharacters$1 = value =>
// eslint-disable-next-line no-control-regex
value.replace(/\u0000/g, '');

/**
 * Pads a string with null characters at the end.
 * @category Utils
 */
const padNullCharacters$1 = (value, chars) => value.padEnd(chars, '\u0000');

nullCharacters$2.padNullCharacters = padNullCharacters$1;
nullCharacters$2.removeNullCharacters = removeNullCharacters$1;

var utf8$5 = {};

Object.defineProperty(utf8$5, '__esModule', { value: true });

var nullCharacters$1 = nullCharacters$2;

/**
 * A string serializer that uses UTF-8 encoding
 * using the native `TextEncoder` API.
 * @category Serializers
 */
const utf8$4 = {
  description: 'utf8',
  fixedSize: null,
  maxSize: null,
  serialize(value) {
    return new TextEncoder().encode(value);
  },
  deserialize(buffer, offset = 0) {
    const value = new TextDecoder().decode(buffer.slice(offset));
    return [nullCharacters$1.removeNullCharacters(value), buffer.length];
  }
};

utf8$5.utf8 = utf8$4;

Object.defineProperty(cjs$3, '__esModule', { value: true });

var base10$1 = base10$3;
var base16$1 = base16$3;
var base58$1 = base58$3;
var base64$1 = base64$3;
var baseX$1 = baseX$5;
var baseXReslice = baseXReslice$3;
var errors$g = errors$o;
var nullCharacters = nullCharacters$2;
var utf8$3 = utf8$5;



cjs$3.base10 = base10$1.base10;
cjs$3.base16 = base16$1.base16;
cjs$3.base58 = base58$1.base58;
cjs$3.base64 = base64$1.base64;
cjs$3.baseX = baseX$1.baseX;
cjs$3.baseXReslice = baseXReslice.baseXReslice;
cjs$3.InvalidBaseStringError = errors$g.InvalidBaseStringError;
cjs$3.padNullCharacters = nullCharacters.padNullCharacters;
cjs$3.removeNullCharacters = nullCharacters.removeNullCharacters;
cjs$3.utf8 = utf8$3.utf8;

var errors$f = {};

Object.defineProperty(errors$f, '__esModule', { value: true });

/** @category Errors */
class InvalidPublicKeyError extends Error {
  name = 'InvalidPublicKeyError';
  constructor(invalidPublicKey, reason) {
    reason = reason ? `. ${reason}` : '';
    super(`The provided public key is invalid: ${invalidPublicKey}${reason}`);
    this.invalidPublicKey = invalidPublicKey;
  }
}

errors$f.InvalidPublicKeyError = InvalidPublicKeyError;

Object.defineProperty(common$3, '__esModule', { value: true });

var umiSerializersEncodings$1 = cjs$3;
var errors$e = errors$f;

/**
 * The amount of bytes in a public key.
 * @category Signers and PublicKeys
 */
const PUBLIC_KEY_LENGTH = 32;

/**
 * Defines a public key as a base58 string.
 * @category Signers and PublicKeys
 */

function publicKey$2(input, assertValidPublicKey = true) {
  const key = (() => {
    if (typeof input === 'string') {
      return input;
    }
    // HasPublicKey.
    if (typeof input === 'object' && 'publicKey' in input) {
      return input.publicKey;
    }
    // LegacyWeb3JsPublicKey.
    if (typeof input === 'object' && 'toBase58' in input) {
      return input.toBase58();
    }
    // Pda.
    if (Array.isArray(input)) {
      return input[0];
    }
    // PublicKeyBytes.
    return umiSerializersEncodings$1.base58.deserialize(input)[0];
  })();
  if (assertValidPublicKey) {
    assertPublicKey(key);
  }
  return key;
}

/**
 * Creates the default public key which is composed of all zero bytes.
 * @category Signers and PublicKeys
 */
const defaultPublicKey = () => '11111111111111111111111111111111';

/**
 * Whether the given value is a valid public key.
 * @category Signers and PublicKeys
 */
const isPublicKey = value => {
  try {
    assertPublicKey(value);
    return true;
  } catch (error) {
    return false;
  }
};

/**
 * Whether the given value is a valid program-derived address.
 * @category Signers and PublicKeys
 */
const isPda = value => Array.isArray(value) && value.length === 2 && typeof value[1] === 'number' && isPublicKey(value[0]);

/**
 * Ensures the given value is a valid public key.
 * @category Signers and PublicKeys
 */
function assertPublicKey(value) {
  // Check value type.
  if (typeof value !== 'string') {
    throw new errors$e.InvalidPublicKeyError(value, 'Public keys must be strings.');
  }

  // Check base58 encoding and byte length.
  publicKeyBytes(value);
}

/**
 * Deduplicates the given array of public keys.
 * @category Signers and PublicKeys
 */
const uniquePublicKeys = publicKeys => [...new Set(publicKeys)];

/**
 * Converts the given public key to a Uint8Array.
 * Throws an error if the public key is an invalid base58 string.
 * @category Signers and PublicKeys
 */
const publicKeyBytes = value => {
  // Check string length to avoid unnecessary base58 encoding.
  if (value.length < 32 || value.length > 44) {
    throw new errors$e.InvalidPublicKeyError(value, 'Public keys must be between 32 and 44 characters.');
  }

  // Check base58 encoding.
  let bytes;
  try {
    bytes = umiSerializersEncodings$1.base58.serialize(value);
  } catch (error) {
    throw new errors$e.InvalidPublicKeyError(value, 'Public keys must be base58 encoded.');
  }

  // Check byte length.
  if (bytes.length !== PUBLIC_KEY_LENGTH) {
    throw new errors$e.InvalidPublicKeyError(value, `Public keys must be ${PUBLIC_KEY_LENGTH} bytes.`);
  }
  return bytes;
};

/**
 * Converts the given public key to a base58 string.
 * @category Signers and PublicKeys
 * @deprecated Public keys are now represented directly as base58 strings.
 */
const base58PublicKey = key => publicKey$2(key);

/**
 * Whether the given public keys are the same.
 * @category Signers and PublicKeys
 * @deprecated Use `left === right` instead now that public keys are base58 strings.
 */
const samePublicKey = (left, right) => publicKey$2(left) === publicKey$2(right);

common$3.PUBLIC_KEY_LENGTH = PUBLIC_KEY_LENGTH;
common$3.assertPublicKey = assertPublicKey;
common$3.base58PublicKey = base58PublicKey;
common$3.defaultPublicKey = defaultPublicKey;
common$3.isPda = isPda;
common$3.isPublicKey = isPublicKey;
common$3.publicKey = publicKey$2;
common$3.publicKeyBytes = publicKeyBytes;
common$3.samePublicKey = samePublicKey;
common$3.uniquePublicKeys = uniquePublicKeys;

Object.defineProperty(cjs$4, '__esModule', { value: true });

var common$2 = common$3;
var errors$d = errors$f;



cjs$4.PUBLIC_KEY_LENGTH = common$2.PUBLIC_KEY_LENGTH;
cjs$4.assertPublicKey = common$2.assertPublicKey;
cjs$4.base58PublicKey = common$2.base58PublicKey;
cjs$4.defaultPublicKey = common$2.defaultPublicKey;
cjs$4.isPda = common$2.isPda;
cjs$4.isPublicKey = common$2.isPublicKey;
cjs$4.publicKey = common$2.publicKey;
cjs$4.publicKeyBytes = common$2.publicKeyBytes;
cjs$4.samePublicKey = common$2.samePublicKey;
cjs$4.uniquePublicKeys = common$2.uniquePublicKeys;
cjs$4.InvalidPublicKeyError = errors$d.InvalidPublicKeyError;

var serializersInternal = {};

var cjs$1 = {};

var cjs = {};

var common$1 = {};

(function (exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	/**
	 * Defines a serializer for numbers and bigints.
	 * @category Serializers
	 */

	/**
	 * Defines the options for u8 and i8 serializers.
	 * @category Serializers
	 */

	/**
	 * Defines the options for number serializers that use more than one byte.
	 * @category Serializers
	 */

	/**
	 * Defines the endianness of a number serializer.
	 * @category Serializers
	 */
	exports.Endian = void 0;
	(function (Endian) {
	  Endian["Little"] = "le";
	  Endian["Big"] = "be";
	})(exports.Endian || (exports.Endian = {}));
	
} (common$1));

var errors$c = {};

Object.defineProperty(errors$c, '__esModule', { value: true });

/** @category Errors */
class NumberOutOfRangeError extends RangeError {
  name = 'NumberOutOfRangeError';
  constructor(serializer, min, max, actual) {
    super(`Serializer [${serializer}] expected number to be between ${min} and ${max}, got ${actual}.`);
  }
}

errors$c.NumberOutOfRangeError = NumberOutOfRangeError;

var f32$1 = {};

var utils$l = {};

Object.defineProperty(utils$l, '__esModule', { value: true });

var umiSerializersCore$e = cjs$2;
var common = common$1;
var errors$b = errors$c;

function numberFactory(input) {
  let littleEndian;
  let defaultDescription = input.name;
  if (input.size > 1) {
    littleEndian = !('endian' in input.options) || input.options.endian === common.Endian.Little;
    defaultDescription += littleEndian ? '(le)' : '(be)';
  }
  return {
    description: input.options.description ?? defaultDescription,
    fixedSize: input.size,
    maxSize: input.size,
    serialize(value) {
      if (input.range) {
        assertRange(input.name, input.range[0], input.range[1], value);
      }
      const buffer = new ArrayBuffer(input.size);
      input.set(new DataView(buffer), value, littleEndian);
      return new Uint8Array(buffer);
    },
    deserialize(bytes, offset = 0) {
      const slice = bytes.slice(offset, offset + input.size);
      assertEnoughBytes('i8', slice, input.size);
      const view = toDataView(slice);
      return [input.get(view, littleEndian), offset + input.size];
    }
  };
}

/**
 * Helper function to ensure that the array buffer is converted properly from a uint8array
 * Source: https://stackoverflow.com/questions/37228285/uint8array-to-arraybuffer
 * @param {Uint8Array} array Uint8array that's being converted into an array buffer
 * @returns {ArrayBuffer} An array buffer that's necessary to construct a data view
 */
const toArrayBuffer = array => array.buffer.slice(array.byteOffset, array.byteLength + array.byteOffset);
const toDataView = array => new DataView(toArrayBuffer(array));
const assertRange = (serializer, min, max, value) => {
  if (value < min || value > max) {
    throw new errors$b.NumberOutOfRangeError(serializer, min, max, value);
  }
};
const assertEnoughBytes = (serializer, bytes, expected) => {
  if (bytes.length === 0) {
    throw new umiSerializersCore$e.DeserializingEmptyBufferError(serializer);
  }
  if (bytes.length < expected) {
    throw new umiSerializersCore$e.NotEnoughBytesError(serializer, expected, bytes.length);
  }
};

utils$l.assertEnoughBytes = assertEnoughBytes;
utils$l.assertRange = assertRange;
utils$l.numberFactory = numberFactory;
utils$l.toArrayBuffer = toArrayBuffer;
utils$l.toDataView = toDataView;

Object.defineProperty(f32$1, '__esModule', { value: true });

var utils$k = utils$l;

const f32 = (options = {}) => utils$k.numberFactory({
  name: 'f32',
  size: 4,
  set: (view, value, le) => view.setFloat32(0, Number(value), le),
  get: (view, le) => view.getFloat32(0, le),
  options
});

f32$1.f32 = f32;

var f64$1 = {};

Object.defineProperty(f64$1, '__esModule', { value: true });

var utils$j = utils$l;

const f64 = (options = {}) => utils$j.numberFactory({
  name: 'f64',
  size: 8,
  set: (view, value, le) => view.setFloat64(0, Number(value), le),
  get: (view, le) => view.getFloat64(0, le),
  options
});

f64$1.f64 = f64;

var i8$1 = {};

Object.defineProperty(i8$1, '__esModule', { value: true });

var utils$i = utils$l;

const i8 = (options = {}) => utils$i.numberFactory({
  name: 'i8',
  size: 1,
  range: [-Number('0x7f') - 1, Number('0x7f')],
  set: (view, value) => view.setInt8(0, Number(value)),
  get: view => view.getInt8(0),
  options
});

i8$1.i8 = i8;

var i16$1 = {};

Object.defineProperty(i16$1, '__esModule', { value: true });

var utils$h = utils$l;

const i16 = (options = {}) => utils$h.numberFactory({
  name: 'i16',
  size: 2,
  range: [-Number('0x7fff') - 1, Number('0x7fff')],
  set: (view, value, le) => view.setInt16(0, Number(value), le),
  get: (view, le) => view.getInt16(0, le),
  options
});

i16$1.i16 = i16;

var i32$1 = {};

Object.defineProperty(i32$1, '__esModule', { value: true });

var utils$g = utils$l;

const i32 = (options = {}) => utils$g.numberFactory({
  name: 'i32',
  size: 4,
  range: [-Number('0x7fffffff') - 1, Number('0x7fffffff')],
  set: (view, value, le) => view.setInt32(0, Number(value), le),
  get: (view, le) => view.getInt32(0, le),
  options
});

i32$1.i32 = i32;

var i64$1 = {};

Object.defineProperty(i64$1, '__esModule', { value: true });

var utils$f = utils$l;

const i64 = (options = {}) => utils$f.numberFactory({
  name: 'i64',
  size: 8,
  range: [-BigInt('0x7fffffffffffffff') - 1n, BigInt('0x7fffffffffffffff')],
  set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),
  get: (view, le) => view.getBigInt64(0, le),
  options
});

i64$1.i64 = i64;

var i128$1 = {};

Object.defineProperty(i128$1, '__esModule', { value: true });

var utils$e = utils$l;

/* eslint-disable no-bitwise */
const i128 = (options = {}) => utils$e.numberFactory({
  name: 'i128',
  size: 16,
  range: [-BigInt('0x7fffffffffffffffffffffffffffffff') - 1n, BigInt('0x7fffffffffffffffffffffffffffffff')],
  set: (view, value, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const rightMask = 0xffffffffffffffffn;
    view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);
    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);
  },
  get: (view, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const left = view.getBigInt64(leftOffset, le);
    const right = view.getBigUint64(rightOffset, le);
    return (left << 64n) + right;
  },
  options
});

i128$1.i128 = i128;

var u8$1 = {};

Object.defineProperty(u8$1, '__esModule', { value: true });

var utils$d = utils$l;

const u8 = (options = {}) => utils$d.numberFactory({
  name: 'u8',
  size: 1,
  range: [0, Number('0xff')],
  set: (view, value) => view.setUint8(0, Number(value)),
  get: view => view.getUint8(0),
  options
});

u8$1.u8 = u8;

var u16$1 = {};

Object.defineProperty(u16$1, '__esModule', { value: true });

var utils$c = utils$l;

const u16 = (options = {}) => utils$c.numberFactory({
  name: 'u16',
  size: 2,
  range: [0, Number('0xffff')],
  set: (view, value, le) => view.setUint16(0, Number(value), le),
  get: (view, le) => view.getUint16(0, le),
  options
});

u16$1.u16 = u16;

var u32$1 = {};

Object.defineProperty(u32$1, '__esModule', { value: true });

var utils$b = utils$l;

const u32 = (options = {}) => utils$b.numberFactory({
  name: 'u32',
  size: 4,
  range: [0, Number('0xffffffff')],
  set: (view, value, le) => view.setUint32(0, Number(value), le),
  get: (view, le) => view.getUint32(0, le),
  options
});

u32$1.u32 = u32;

var u64$1 = {};

Object.defineProperty(u64$1, '__esModule', { value: true });

var utils$a = utils$l;

const u64 = (options = {}) => utils$a.numberFactory({
  name: 'u64',
  size: 8,
  range: [0, BigInt('0xffffffffffffffff')],
  set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),
  get: (view, le) => view.getBigUint64(0, le),
  options
});

u64$1.u64 = u64;

var u128$1 = {};

Object.defineProperty(u128$1, '__esModule', { value: true });

var utils$9 = utils$l;

/* eslint-disable no-bitwise */
const u128 = (options = {}) => utils$9.numberFactory({
  name: 'u128',
  size: 16,
  range: [0, BigInt('0xffffffffffffffffffffffffffffffff')],
  set: (view, value, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const rightMask = 0xffffffffffffffffn;
    view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);
    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);
  },
  get: (view, le) => {
    const leftOffset = le ? 8 : 0;
    const rightOffset = le ? 0 : 8;
    const left = view.getBigUint64(leftOffset, le);
    const right = view.getBigUint64(rightOffset, le);
    return (left << 64n) + right;
  },
  options
});

u128$1.u128 = u128;

var shortU16$1 = {};

Object.defineProperty(shortU16$1, '__esModule', { value: true });

var utils$8 = utils$l;

/* eslint-disable no-bitwise */

/**
 * Defines the options for the shortU16 serializer.
 * @category Serializers
 */

/**
 * Same as u16, but serialized with 1 to 3 bytes.
 *
 * If the value is above 0x7f, the top bit is set and the remaining
 * value is stored in the next bytes. Each byte follows the same
 * pattern until the 3rd byte. The 3rd byte, if needed, uses
 * all 8 bits to store the last byte of the original value.
 *
 * @category Serializers
 */
const shortU16 = (options = {}) => ({
  description: options.description ?? 'shortU16',
  fixedSize: null,
  maxSize: 3,
  serialize: value => {
    utils$8.assertRange('shortU16', 0, 65535, value);
    const bytes = [0];
    for (let ii = 0;; ii += 1) {
      // Shift the bits of the value over such that the next 7 bits are at the right edge.
      const alignedValue = value >> ii * 7;
      if (alignedValue === 0) {
        // No more bits to consume.
        break;
      }
      // Extract those 7 bits using a mask.
      const nextSevenBits = 0b1111111 & alignedValue;
      bytes[ii] = nextSevenBits;
      if (ii > 0) {
        // Set the continuation bit of the previous slice.
        bytes[ii - 1] |= 0b10000000;
      }
    }
    return new Uint8Array(bytes);
  },
  deserialize: (bytes, offset = 0) => {
    let value = 0;
    let byteCount = 0;
    while (++byteCount // eslint-disable-line no-plusplus
    ) {
      const byteIndex = byteCount - 1;
      const currentByte = bytes[offset + byteIndex];
      const nextSevenBits = 0b1111111 & currentByte;
      // Insert the next group of seven bits into the correct slot of the output value.
      value |= nextSevenBits << byteIndex * 7;
      if ((currentByte & 0b10000000) === 0) {
        // This byte does not have its continuation bit set. We're done.
        break;
      }
    }
    return [value, offset + byteCount];
  }
});

shortU16$1.shortU16 = shortU16;

(function (exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	var common = common$1;
	var errors = errors$c;
	var f32 = f32$1;
	var f64 = f64$1;
	var i8 = i8$1;
	var i16 = i16$1;
	var i32 = i32$1;
	var i64 = i64$1;
	var i128 = i128$1;
	var u8 = u8$1;
	var u16 = u16$1;
	var u32 = u32$1;
	var u64 = u64$1;
	var u128 = u128$1;
	var shortU16 = shortU16$1;



	Object.defineProperty(exports, 'Endian', {
		enumerable: true,
		get: function () { return common.Endian; }
	});
	exports.NumberOutOfRangeError = errors.NumberOutOfRangeError;
	exports.f32 = f32.f32;
	exports.f64 = f64.f64;
	exports.i8 = i8.i8;
	exports.i16 = i16.i16;
	exports.i32 = i32.i32;
	exports.i64 = i64.i64;
	exports.i128 = i128.i128;
	exports.u8 = u8.u8;
	exports.u16 = u16.u16;
	exports.u32 = u32.u32;
	exports.u64 = u64.u64;
	exports.u128 = u128.u128;
	exports.shortU16 = shortU16.shortU16;
	
} (cjs));

var array$4 = {};

var errors$a = {};

Object.defineProperty(errors$a, '__esModule', { value: true });

/** @category Errors */
class InvalidNumberOfItemsError extends Error {
  name = 'InvalidNumberOfItemsError';
  constructor(serializer, expected, actual) {
    super(`Expected [${serializer}] to have ${expected} items, got ${actual}.`);
  }
}

/** @category Errors */
class InvalidArrayLikeRemainderSizeError extends Error {
  name = 'InvalidArrayLikeRemainderSizeError';
  constructor(remainderSize, itemSize) {
    super(`The remainder of the buffer (${remainderSize} bytes) cannot be split into chunks of ${itemSize} bytes. ` + `Serializers of "remainder" size must have a remainder that is a multiple of its item size. ` + `In other words, ${remainderSize} modulo ${itemSize} should be equal to zero.`);
  }
}

/** @category Errors */
class UnrecognizedArrayLikeSerializerSizeError extends Error {
  name = 'UnrecognizedArrayLikeSerializerSizeError';
  constructor(size) {
    super(`Unrecognized array-like serializer size: ${JSON.stringify(size)}`);
  }
}

/** @category Errors */
class InvalidDataEnumVariantError extends Error {
  name = 'InvalidDataEnumVariantError';
  constructor(invalidVariant, validVariants) {
    super(`Invalid data enum variant. ` + `Expected one of [${validVariants.join(', ')}], ` + `got "${invalidVariant}".`);
  }
}

/** @category Errors */
class InvalidScalarEnumVariantError extends Error {
  name = 'InvalidScalarEnumVariantError';
  constructor(invalidVariant, validVariants, min, max) {
    super(`Invalid scalar enum variant. ` + `Expected one of [${validVariants.join(', ')}] ` + `or a number between ${min} and ${max}, ` + `got "${invalidVariant}".`);
  }
}

/** @category Errors */
class EnumDiscriminatorOutOfRangeError extends RangeError {
  name = 'EnumDiscriminatorOutOfRangeError';
  constructor(discriminator, min, max) {
    super(`Enum discriminator out of range. ` + `Expected a number between ${min} and ${max}, got ${discriminator}.`);
  }
}

errors$a.EnumDiscriminatorOutOfRangeError = EnumDiscriminatorOutOfRangeError;
errors$a.InvalidArrayLikeRemainderSizeError = InvalidArrayLikeRemainderSizeError;
errors$a.InvalidDataEnumVariantError = InvalidDataEnumVariantError;
errors$a.InvalidNumberOfItemsError = InvalidNumberOfItemsError;
errors$a.InvalidScalarEnumVariantError = InvalidScalarEnumVariantError;
errors$a.UnrecognizedArrayLikeSerializerSizeError = UnrecognizedArrayLikeSerializerSizeError;

var utils$7 = {};

var sumSerializerSizes$7 = {};

Object.defineProperty(sumSerializerSizes$7, '__esModule', { value: true });

function sumSerializerSizes$6(sizes) {
  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);
}

sumSerializerSizes$7.sumSerializerSizes = sumSerializerSizes$6;

Object.defineProperty(utils$7, '__esModule', { value: true });

var errors$9 = errors$a;
var sumSerializerSizes$5 = sumSerializerSizes$7;

function getResolvedSize(size, bytes, offset) {
  if (typeof size === 'number') {
    return [size, offset];
  }
  if (typeof size === 'object') {
    return size.deserialize(bytes, offset);
  }
  throw new errors$9.UnrecognizedArrayLikeSerializerSizeError(size);
}
function getSizeDescription(size) {
  return typeof size === 'object' ? size.description : `${size}`;
}
function getSizeFromChildren(size, childrenSizes) {
  if (typeof size !== 'number') return null;
  if (size === 0) return 0;
  const childrenSize = sumSerializerSizes$5.sumSerializerSizes(childrenSizes);
  return childrenSize === null ? null : childrenSize * size;
}
function getSizePrefix(size, realSize) {
  return typeof size === 'object' ? size.serialize(realSize) : new Uint8Array();
}

utils$7.getResolvedSize = getResolvedSize;
utils$7.getSizeDescription = getSizeDescription;
utils$7.getSizeFromChildren = getSizeFromChildren;
utils$7.getSizePrefix = getSizePrefix;

Object.defineProperty(array$4, '__esModule', { value: true });

var umiSerializersCore$d = cjs$2;
var umiSerializersNumbers$8 = cjs;
var errors$8 = errors$a;
var utils$6 = utils$7;

/**
 * Defines the options for array serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for an array of items.
 *
 * @param item - The serializer to use for the array's items.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function array$3(item, options = {}) {
  const size = options.size ?? umiSerializersNumbers$8.u32();
  return {
    description: options.description ?? `array(${item.description}; ${utils$6.getSizeDescription(size)})`,
    fixedSize: utils$6.getSizeFromChildren(size, [item.fixedSize]),
    maxSize: utils$6.getSizeFromChildren(size, [item.maxSize]),
    serialize: value => {
      if (typeof size === 'number' && value.length !== size) {
        throw new errors$8.InvalidNumberOfItemsError('array', size, value.length);
      }
      return umiSerializersCore$d.mergeBytes([utils$6.getSizePrefix(size, value.length), ...value.map(v => item.serialize(v))]);
    },
    deserialize: (bytes, offset = 0) => {
      const values = [];
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        return [values, offset];
      }
      if (size === 'remainder') {
        while (offset < bytes.length) {
          const [value, newOffset] = item.deserialize(bytes, offset);
          values.push(value);
          offset = newOffset;
        }
        return [values, offset];
      }
      const [resolvedSize, newOffset] = utils$6.getResolvedSize(size, bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset] = item.deserialize(bytes, offset);
        values.push(value);
        offset = newOffset;
      }
      return [values, offset];
    }
  };
}

array$4.array = array$3;

var bitArray$2 = {};

Object.defineProperty(bitArray$2, '__esModule', { value: true });

var umiSerializersCore$c = cjs$2;

/* eslint-disable no-bitwise */

/**
 * Defines the options for bitArray serializers.
 * @category Serializers
 */

/**
 * An array of boolean serializer that
 * converts booleans to bits and vice versa.
 *
 * @param size - The amount of bytes to use for the bit array.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
const bitArray$1 = (size, options = {}) => {
  const parsedOptions = typeof options === 'boolean' ? {
    backward: options
  } : options;
  const backward = parsedOptions.backward ?? false;
  const backwardSuffix = backward ? '; backward' : '';
  return {
    description: parsedOptions.description ?? `bitArray(${size}${backwardSuffix})`,
    fixedSize: size,
    maxSize: size,
    serialize(value) {
      const bytes = [];
      for (let i = 0; i < size; i += 1) {
        let byte = 0;
        for (let j = 0; j < 8; j += 1) {
          const feature = Number(value[i * 8 + j] ?? 0);
          byte |= feature << (backward ? j : 7 - j);
        }
        if (backward) {
          bytes.unshift(byte);
        } else {
          bytes.push(byte);
        }
      }
      return new Uint8Array(bytes);
    },
    deserialize(bytes, offset = 0) {
      const booleans = [];
      let slice = bytes.slice(offset, offset + size);
      slice = backward ? slice.reverse() : slice;
      if (slice.length !== size) {
        throw new umiSerializersCore$c.NotEnoughBytesError('bitArray', size, slice.length);
      }
      slice.forEach(byte => {
        for (let i = 0; i < 8; i += 1) {
          if (backward) {
            booleans.push(Boolean(byte & 1));
            byte >>= 1;
          } else {
            booleans.push(Boolean(byte & 0b1000_0000));
            byte <<= 1;
          }
        }
      });
      return [booleans, offset + size];
    }
  };
};

bitArray$2.bitArray = bitArray$1;

var bool$1 = {};

Object.defineProperty(bool$1, '__esModule', { value: true });

var umiSerializersCore$b = cjs$2;
var umiSerializersNumbers$7 = cjs;

/**
 * Defines the options for boolean serializers.
 * @category Serializers
 */

/**
 * Creates a boolean serializer.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function bool(options = {}) {
  const size = options.size ?? umiSerializersNumbers$7.u8();
  if (size.fixedSize === null) {
    throw new umiSerializersCore$b.ExpectedFixedSizeSerializerError('Serializer [bool] requires a fixed size.');
  }
  return {
    description: options.description ?? `bool(${size.description})`,
    fixedSize: size.fixedSize,
    maxSize: size.fixedSize,
    serialize: value => size.serialize(value ? 1 : 0),
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        throw new umiSerializersCore$b.DeserializingEmptyBufferError('bool');
      }
      const [value, vOffset] = size.deserialize(bytes, offset);
      return [value === 1, vOffset];
    }
  };
}

bool$1.bool = bool;

var bytes$1 = {};

Object.defineProperty(bytes$1, '__esModule', { value: true });

var umiSerializersCore$a = cjs$2;
var utils$5 = utils$7;

/**
 * Defines the options for bytes serializers.
 * @category Serializers
 */

/**
 * Creates a serializer that passes the buffer as-is.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function bytes(options = {}) {
  const size = options.size ?? 'variable';
  const description = options.description ?? `bytes(${utils$5.getSizeDescription(size)})`;
  const byteSerializer = {
    description,
    fixedSize: null,
    maxSize: null,
    serialize: value => new Uint8Array(value),
    deserialize: (bytes, offset = 0) => {
      const slice = bytes.slice(offset);
      return [slice, offset + slice.length];
    }
  };
  if (size === 'variable') {
    return byteSerializer;
  }
  if (typeof size === 'number') {
    return umiSerializersCore$a.fixSerializer(byteSerializer, size, description);
  }
  return {
    description,
    fixedSize: null,
    maxSize: null,
    serialize: value => {
      const contentBytes = byteSerializer.serialize(value);
      const lengthBytes = size.serialize(contentBytes.length);
      return umiSerializersCore$a.mergeBytes([lengthBytes, contentBytes]);
    },
    deserialize: (buffer, offset = 0) => {
      if (buffer.slice(offset).length === 0) {
        throw new umiSerializersCore$a.DeserializingEmptyBufferError('bytes');
      }
      const [lengthBigInt, lengthOffset] = size.deserialize(buffer, offset);
      const length = Number(lengthBigInt);
      offset = lengthOffset;
      const contentBuffer = buffer.slice(offset, offset + length);
      if (contentBuffer.length < length) {
        throw new umiSerializersCore$a.NotEnoughBytesError('bytes', length, contentBuffer.length);
      }
      const [value, contentOffset] = byteSerializer.deserialize(contentBuffer);
      offset += contentOffset;
      return [value, offset];
    }
  };
}

bytes$1.bytes = bytes;

var dataEnum$1 = {};

var maxSerializerSizes$2 = {};

Object.defineProperty(maxSerializerSizes$2, '__esModule', { value: true });

function maxSerializerSizes$1(sizes) {
  return sizes.reduce((all, size) => all === null || size === null ? null : Math.max(all, size), 0);
}

maxSerializerSizes$2.maxSerializerSizes = maxSerializerSizes$1;

Object.defineProperty(dataEnum$1, '__esModule', { value: true });

var umiSerializersCore$9 = cjs$2;
var umiSerializersNumbers$6 = cjs;
var errors$7 = errors$a;
var maxSerializerSizes = maxSerializerSizes$2;
var sumSerializerSizes$4 = sumSerializerSizes$7;

/**
 * Defines a data enum using discriminated union types.
 *
 * @example
 * ```ts
 * type WebPageEvent =
 *   | { __kind: 'pageview', url: string }
 *   | { __kind: 'click', x: number, y: number };
 * ```
 *
 * @category Serializers
 */

/**
 * Creates a data enum serializer.
 *
 * @param variants - The variant serializers of the data enum.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function dataEnum(variants, options = {}) {
  const prefix = options.size ?? umiSerializersNumbers$6.u8();
  const fieldDescriptions = variants.map(([name, serializer]) => `${String(name)}${serializer ? `: ${serializer.description}` : ''}`).join(', ');
  const allVariantHaveTheSameFixedSize = variants.every((one, i, all) => one[1].fixedSize === all[0][1].fixedSize);
  const fixedVariantSize = allVariantHaveTheSameFixedSize ? variants[0][1].fixedSize : null;
  const maxVariantSize = maxSerializerSizes.maxSerializerSizes(variants.map(([, field]) => field.maxSize));
  return {
    description: options.description ?? `dataEnum(${fieldDescriptions}; ${prefix.description})`,
    fixedSize: variants.length === 0 ? prefix.fixedSize : sumSerializerSizes$4.sumSerializerSizes([prefix.fixedSize, fixedVariantSize]),
    maxSize: variants.length === 0 ? prefix.maxSize : sumSerializerSizes$4.sumSerializerSizes([prefix.maxSize, maxVariantSize]),
    serialize: variant => {
      const discriminator = variants.findIndex(([key]) => variant.__kind === key);
      if (discriminator < 0) {
        throw new errors$7.InvalidDataEnumVariantError(variant.__kind, variants.map(([key]) => key));
      }
      const variantPrefix = prefix.serialize(discriminator);
      const variantSerializer = variants[discriminator][1];
      const variantBytes = variantSerializer.serialize(variant);
      return umiSerializersCore$9.mergeBytes([variantPrefix, variantBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        throw new umiSerializersCore$9.DeserializingEmptyBufferError('dataEnum');
      }
      const [discriminator, dOffset] = prefix.deserialize(bytes, offset);
      offset = dOffset;
      const variantField = variants[Number(discriminator)] ?? null;
      if (!variantField) {
        throw new errors$7.EnumDiscriminatorOutOfRangeError(discriminator, 0, variants.length - 1);
      }
      const [variant, vOffset] = variantField[1].deserialize(bytes, offset);
      offset = vOffset;
      return [{
        __kind: variantField[0],
        ...(variant ?? {})
      }, offset];
    }
  };
}

dataEnum$1.dataEnum = dataEnum;

var map$1 = {};

Object.defineProperty(map$1, '__esModule', { value: true });

var umiSerializersCore$8 = cjs$2;
var umiSerializersNumbers$5 = cjs;
var errors$6 = errors$a;
var utils$4 = utils$7;

/**
 * Defines the options for `Map` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for a map.
 *
 * @param key - The serializer to use for the map's keys.
 * @param value - The serializer to use for the map's values.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function map(key, value, options = {}) {
  const size = options.size ?? umiSerializersNumbers$5.u32();
  return {
    description: options.description ?? `map(${key.description}, ${value.description}; ${utils$4.getSizeDescription(size)})`,
    fixedSize: utils$4.getSizeFromChildren(size, [key.fixedSize, value.fixedSize]),
    maxSize: utils$4.getSizeFromChildren(size, [key.maxSize, value.maxSize]),
    serialize: map => {
      if (typeof size === 'number' && map.size !== size) {
        throw new errors$6.InvalidNumberOfItemsError('map', size, map.size);
      }
      const itemBytes = Array.from(map, ([k, v]) => umiSerializersCore$8.mergeBytes([key.serialize(k), value.serialize(v)]));
      return umiSerializersCore$8.mergeBytes([utils$4.getSizePrefix(size, map.size), ...itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      const map = new Map();
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        return [map, offset];
      }
      if (size === 'remainder') {
        while (offset < bytes.length) {
          const [deserializedKey, kOffset] = key.deserialize(bytes, offset);
          offset = kOffset;
          const [deserializedValue, vOffset] = value.deserialize(bytes, offset);
          offset = vOffset;
          map.set(deserializedKey, deserializedValue);
        }
        return [map, offset];
      }
      const [resolvedSize, newOffset] = utils$4.getResolvedSize(size, bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [deserializedKey, kOffset] = key.deserialize(bytes, offset);
        offset = kOffset;
        const [deserializedValue, vOffset] = value.deserialize(bytes, offset);
        offset = vOffset;
        map.set(deserializedKey, deserializedValue);
      }
      return [map, offset];
    }
  };
}

map$1.map = map;

var nullable$1 = {};

Object.defineProperty(nullable$1, '__esModule', { value: true });

var umiSerializersCore$7 = cjs$2;
var umiSerializersNumbers$4 = cjs;
var sumSerializerSizes$3 = sumSerializerSizes$7;
var utils$3 = utils$7;

/**
 * Defines the options for `Nullable` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for an optional value using `null` as the `None` value.
 *
 * @param item - The serializer to use for the value that may be present.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function nullable(item, options = {}) {
  const prefix = options.prefix ?? umiSerializersNumbers$4.u8();
  const fixed = options.fixed ?? false;
  let descriptionSuffix = `; ${utils$3.getSizeDescription(prefix)}`;
  let fixedSize = item.fixedSize === 0 ? prefix.fixedSize : null;
  if (fixed) {
    if (item.fixedSize === null || prefix.fixedSize === null) {
      throw new umiSerializersCore$7.ExpectedFixedSizeSerializerError('Fixed nullables can only be used with fixed-size serializers');
    }
    descriptionSuffix += '; fixed';
    fixedSize = prefix.fixedSize + item.fixedSize;
  }
  return {
    description: options.description ?? `nullable(${item.description + descriptionSuffix})`,
    fixedSize,
    maxSize: sumSerializerSizes$3.sumSerializerSizes([prefix.maxSize, item.maxSize]),
    serialize: option => {
      const prefixByte = prefix.serialize(Number(option !== null));
      if (fixed) {
        const itemFixedSize = item.fixedSize;
        const itemBytes = option !== null ? item.serialize(option).slice(0, itemFixedSize) : new Uint8Array(itemFixedSize).fill(0);
        return umiSerializersCore$7.mergeBytes([prefixByte, itemBytes]);
      }
      const itemBytes = option !== null ? item.serialize(option) : new Uint8Array();
      return umiSerializersCore$7.mergeBytes([prefixByte, itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        return [null, offset];
      }
      const fixedOffset = offset + (prefix.fixedSize ?? 0) + (item.fixedSize ?? 0);
      const [isSome, prefixOffset] = prefix.deserialize(bytes, offset);
      offset = prefixOffset;
      if (isSome === 0) {
        return [null, fixed ? fixedOffset : offset];
      }
      const [value, newOffset] = item.deserialize(bytes, offset);
      offset = newOffset;
      return [value, fixed ? fixedOffset : offset];
    }
  };
}

nullable$1.nullable = nullable;

var option$1 = {};

Object.defineProperty(option$1, '__esModule', { value: true });

var umiOptions = cjs$5;
var umiSerializersCore$6 = cjs$2;
var umiSerializersNumbers$3 = cjs;
var sumSerializerSizes$2 = sumSerializerSizes$7;
var utils$2 = utils$7;

/**
 * Defines the options for `Option` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for an optional value using the {@link Option} type.
 *
 * @param item - The serializer to use for the value that may be present.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function option(item, options = {}) {
  const prefix = options.prefix ?? umiSerializersNumbers$3.u8();
  const fixed = options.fixed ?? false;
  let descriptionSuffix = `; ${utils$2.getSizeDescription(prefix)}`;
  let fixedSize = item.fixedSize === 0 ? prefix.fixedSize : null;
  if (fixed) {
    if (item.fixedSize === null || prefix.fixedSize === null) {
      throw new umiSerializersCore$6.ExpectedFixedSizeSerializerError('Fixed options can only be used with fixed-size serializers');
    }
    descriptionSuffix += '; fixed';
    fixedSize = prefix.fixedSize + item.fixedSize;
  }
  return {
    description: options.description ?? `option(${item.description + descriptionSuffix})`,
    fixedSize,
    maxSize: sumSerializerSizes$2.sumSerializerSizes([prefix.maxSize, item.maxSize]),
    serialize: optionOrNullable => {
      const option = umiOptions.isOption(optionOrNullable) ? optionOrNullable : umiOptions.wrapNullable(optionOrNullable);
      const prefixByte = prefix.serialize(Number(umiOptions.isSome(option)));
      if (fixed) {
        const itemFixedSize = item.fixedSize;
        const itemBytes = umiOptions.isSome(option) ? item.serialize(option.value).slice(0, itemFixedSize) : new Uint8Array(itemFixedSize).fill(0);
        return umiSerializersCore$6.mergeBytes([prefixByte, itemBytes]);
      }
      const itemBytes = umiOptions.isSome(option) ? item.serialize(option.value) : new Uint8Array();
      return umiSerializersCore$6.mergeBytes([prefixByte, itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        return [umiOptions.none(), offset];
      }
      const fixedOffset = offset + (prefix.fixedSize ?? 0) + (item.fixedSize ?? 0);
      const [isSome, prefixOffset] = prefix.deserialize(bytes, offset);
      offset = prefixOffset;
      if (isSome === 0) {
        return [umiOptions.none(), fixed ? fixedOffset : offset];
      }
      const [value, newOffset] = item.deserialize(bytes, offset);
      offset = newOffset;
      return [umiOptions.some(value), fixed ? fixedOffset : offset];
    }
  };
}

option$1.option = option;

var publicKey$1 = {};

Object.defineProperty(publicKey$1, '__esModule', { value: true });

var umiPublicKeys$1 = cjs$4;
var umiSerializersCore$5 = cjs$2;

/**
 * Defines the options for `PublicKey` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for base58 encoded public keys.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function publicKey(options = {}) {
  return {
    description: options.description ?? 'publicKey',
    fixedSize: 32,
    maxSize: 32,
    serialize: value => umiPublicKeys$1.publicKeyBytes(umiPublicKeys$1.publicKey(value)),
    deserialize: (bytes, offset = 0) => {
      const pubkeyBytes = bytes.slice(offset, offset + 32);
      if (pubkeyBytes.length === 0) {
        throw new umiSerializersCore$5.DeserializingEmptyBufferError('publicKey');
      }
      if (pubkeyBytes.length < umiPublicKeys$1.PUBLIC_KEY_LENGTH) {
        throw new umiSerializersCore$5.NotEnoughBytesError('publicKey', umiPublicKeys$1.PUBLIC_KEY_LENGTH, pubkeyBytes.length);
      }
      return [umiPublicKeys$1.publicKey(pubkeyBytes), offset + 32];
    }
  };
}

publicKey$1.publicKey = publicKey;

var scalarEnum$1 = {};

Object.defineProperty(scalarEnum$1, '__esModule', { value: true });

var umiSerializersCore$4 = cjs$2;
var umiSerializersNumbers$2 = cjs;
var errors$5 = errors$a;

/**
 * Defines a scalar enum as a type from its constructor.
 *
 * @example
 * ```ts
 * enum Direction { Left, Right };
 * type DirectionType = ScalarEnum<Direction>;
 * ```
 *
 * @category Serializers
 */

/**
 * Creates a scalar enum serializer.
 *
 * @param constructor - The constructor of the scalar enum.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function scalarEnum(constructor, options = {}) {
  const prefix = options.size ?? umiSerializersNumbers$2.u8();
  const enumKeys = Object.keys(constructor);
  const enumValues = Object.values(constructor);
  const isNumericEnum = enumValues.some(v => typeof v === 'number');
  const valueDescriptions = enumValues.filter(v => typeof v === 'string').join(', ');
  const minRange = 0;
  const maxRange = isNumericEnum ? enumValues.length / 2 - 1 : enumValues.length - 1;
  const stringValues = isNumericEnum ? [...enumKeys] : [...new Set([...enumKeys, ...enumValues])];
  function assertValidVariant(variant) {
    const isInvalidNumber = typeof variant === 'number' && (variant < minRange || variant > maxRange);
    const isInvalidString = typeof variant === 'string' && !stringValues.includes(variant);
    if (isInvalidNumber || isInvalidString) {
      throw new errors$5.InvalidScalarEnumVariantError(variant, stringValues, minRange, maxRange);
    }
  }
  return {
    description: options.description ?? `enum(${valueDescriptions}; ${prefix.description})`,
    fixedSize: prefix.fixedSize,
    maxSize: prefix.maxSize,
    serialize: value => {
      assertValidVariant(value);
      if (typeof value === 'number') return prefix.serialize(value);
      const valueIndex = enumValues.indexOf(value);
      if (valueIndex >= 0) return prefix.serialize(valueIndex);
      return prefix.serialize(enumKeys.indexOf(value));
    },
    deserialize: (bytes, offset = 0) => {
      if (bytes.slice(offset).length === 0) {
        throw new umiSerializersCore$4.DeserializingEmptyBufferError('enum');
      }
      const [value, newOffset] = prefix.deserialize(bytes, offset);
      const valueAsNumber = Number(value);
      offset = newOffset;
      if (valueAsNumber < minRange || valueAsNumber > maxRange) {
        throw new errors$5.EnumDiscriminatorOutOfRangeError(valueAsNumber, minRange, maxRange);
      }
      return [isNumericEnum ? valueAsNumber : enumValues[valueAsNumber], offset];
    }
  };
}

scalarEnum$1.scalarEnum = scalarEnum;

var set$1 = {};

Object.defineProperty(set$1, '__esModule', { value: true });

var umiSerializersCore$3 = cjs$2;
var umiSerializersNumbers$1 = cjs;
var errors$4 = errors$a;
var utils$1 = utils$7;

/**
 * Defines the options for `Set` serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for a set.
 *
 * @param item - The serializer to use for the set's items.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function set(item, options = {}) {
  const size = options.size ?? umiSerializersNumbers$1.u32();
  return {
    description: options.description ?? `set(${item.description}; ${utils$1.getSizeDescription(size)})`,
    fixedSize: utils$1.getSizeFromChildren(size, [item.fixedSize]),
    maxSize: utils$1.getSizeFromChildren(size, [item.maxSize]),
    serialize: set => {
      if (typeof size === 'number' && set.size !== size) {
        throw new errors$4.InvalidNumberOfItemsError('set', size, set.size);
      }
      const itemBytes = Array.from(set, value => item.serialize(value));
      return umiSerializersCore$3.mergeBytes([utils$1.getSizePrefix(size, set.size), ...itemBytes]);
    },
    deserialize: (bytes, offset = 0) => {
      const set = new Set();
      if (typeof size === 'object' && bytes.slice(offset).length === 0) {
        return [set, offset];
      }
      if (size === 'remainder') {
        while (offset < bytes.length) {
          const [value, newOffset] = item.deserialize(bytes, offset);
          set.add(value);
          offset = newOffset;
        }
        return [set, offset];
      }
      const [resolvedSize, newOffset] = utils$1.getResolvedSize(size, bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset] = item.deserialize(bytes, offset);
        set.add(value);
        offset = newOffset;
      }
      return [set, offset];
    }
  };
}

set$1.set = set;

var string$6 = {};

Object.defineProperty(string$6, '__esModule', { value: true });

var umiSerializersCore$2 = cjs$2;
var umiSerializersEncodings = cjs$3;
var umiSerializersNumbers = cjs;
var utils = utils$7;

/**
 * Defines the options for string serializers.
 * @category Serializers
 */

/**
 * Creates a string serializer.
 *
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function string$5(options = {}) {
  const size = options.size ?? umiSerializersNumbers.u32();
  const encoding = options.encoding ?? umiSerializersEncodings.utf8;
  const description = options.description ?? `string(${encoding.description}; ${utils.getSizeDescription(size)})`;
  if (size === 'variable') {
    return {
      ...encoding,
      description
    };
  }
  if (typeof size === 'number') {
    return umiSerializersCore$2.fixSerializer(encoding, size, description);
  }
  return {
    description,
    fixedSize: null,
    maxSize: null,
    serialize: value => {
      const contentBytes = encoding.serialize(value);
      const lengthBytes = size.serialize(contentBytes.length);
      return umiSerializersCore$2.mergeBytes([lengthBytes, contentBytes]);
    },
    deserialize: (buffer, offset = 0) => {
      if (buffer.slice(offset).length === 0) {
        throw new umiSerializersCore$2.DeserializingEmptyBufferError('string');
      }
      const [lengthBigInt, lengthOffset] = size.deserialize(buffer, offset);
      const length = Number(lengthBigInt);
      offset = lengthOffset;
      const contentBuffer = buffer.slice(offset, offset + length);
      if (contentBuffer.length < length) {
        throw new umiSerializersCore$2.NotEnoughBytesError('string', length, contentBuffer.length);
      }
      const [value, contentOffset] = encoding.deserialize(contentBuffer);
      offset += contentOffset;
      return [value, offset];
    }
  };
}

string$6.string = string$5;

var struct$1 = {};

Object.defineProperty(struct$1, '__esModule', { value: true });

var umiSerializersCore$1 = cjs$2;
var sumSerializerSizes$1 = sumSerializerSizes$7;

/**
 * Get the name and serializer of each field in a struct.
 * @category Serializers
 */

/**
 * Creates a serializer for a custom object.
 *
 * @param fields - The name and serializer of each field.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function struct(fields, options = {}) {
  const fieldDescriptions = fields.map(([name, serializer]) => `${String(name)}: ${serializer.description}`).join(', ');
  return {
    description: options.description ?? `struct(${fieldDescriptions})`,
    fixedSize: sumSerializerSizes$1.sumSerializerSizes(fields.map(([, field]) => field.fixedSize)),
    maxSize: sumSerializerSizes$1.sumSerializerSizes(fields.map(([, field]) => field.maxSize)),
    serialize: struct => {
      const fieldBytes = fields.map(([key, serializer]) => serializer.serialize(struct[key]));
      return umiSerializersCore$1.mergeBytes(fieldBytes);
    },
    deserialize: (bytes, offset = 0) => {
      const struct = {};
      fields.forEach(([key, serializer]) => {
        const [value, newOffset] = serializer.deserialize(bytes, offset);
        offset = newOffset;
        struct[key] = value;
      });
      return [struct, offset];
    }
  };
}

struct$1.struct = struct;

var tuple$1 = {};

Object.defineProperty(tuple$1, '__esModule', { value: true });

var umiSerializersCore = cjs$2;
var sumSerializerSizes = sumSerializerSizes$7;
var errors$3 = errors$a;

/**
 * Defines the options for tuple serializers.
 * @category Serializers
 */

/**
 * Creates a serializer for a tuple-like array.
 *
 * @param items - The serializers to use for each item in the tuple.
 * @param options - A set of options for the serializer.
 * @category Serializers
 */
function tuple(items, options = {}) {
  const itemDescriptions = items.map(item => item.description).join(', ');
  return {
    description: options.description ?? `tuple(${itemDescriptions})`,
    fixedSize: sumSerializerSizes.sumSerializerSizes(items.map(item => item.fixedSize)),
    maxSize: sumSerializerSizes.sumSerializerSizes(items.map(item => item.maxSize)),
    serialize: value => {
      if (value.length !== items.length) {
        throw new errors$3.InvalidNumberOfItemsError('tuple', items.length, value.length);
      }
      return umiSerializersCore.mergeBytes(items.map((item, index) => item.serialize(value[index])));
    },
    deserialize: (bytes, offset = 0) => {
      const values = [];
      items.forEach(serializer => {
        const [newValue, newOffset] = serializer.deserialize(bytes, offset);
        values.push(newValue);
        offset = newOffset;
      });
      return [values, offset];
    }
  };
}

tuple$1.tuple = tuple;

var unit$1 = {};

Object.defineProperty(unit$1, '__esModule', { value: true });

/**
 * Defines the options for unit serializers.
 * @category Serializers
 */

/**
 * Creates a void serializer.
 *
 * @param options - A set of options for the serializer.
 */
function unit(options = {}) {
  return {
    description: options.description ?? 'unit',
    fixedSize: 0,
    maxSize: 0,
    serialize: () => new Uint8Array(),
    deserialize: (_bytes, offset = 0) => [undefined, offset]
  };
}

unit$1.unit = unit;

(function (exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	var umiSerializersCore = cjs$2;
	var umiSerializersEncodings = cjs$3;
	var umiSerializersNumbers = cjs;
	var array = array$4;
	var bitArray = bitArray$2;
	var bool = bool$1;
	var bytes = bytes$1;
	var dataEnum = dataEnum$1;
	var errors = errors$a;
	var map = map$1;
	var nullable = nullable$1;
	var option = option$1;
	var publicKey = publicKey$1;
	var scalarEnum = scalarEnum$1;
	var set = set$1;
	var string = string$6;
	var struct = struct$1;
	var tuple = tuple$1;
	var unit = unit$1;
	var maxSerializerSizes = maxSerializerSizes$2;
	var sumSerializerSizes = sumSerializerSizes$7;



	exports.array = array.array;
	exports.bitArray = bitArray.bitArray;
	exports.bool = bool.bool;
	exports.bytes = bytes.bytes;
	exports.dataEnum = dataEnum.dataEnum;
	exports.EnumDiscriminatorOutOfRangeError = errors.EnumDiscriminatorOutOfRangeError;
	exports.InvalidArrayLikeRemainderSizeError = errors.InvalidArrayLikeRemainderSizeError;
	exports.InvalidDataEnumVariantError = errors.InvalidDataEnumVariantError;
	exports.InvalidNumberOfItemsError = errors.InvalidNumberOfItemsError;
	exports.InvalidScalarEnumVariantError = errors.InvalidScalarEnumVariantError;
	exports.UnrecognizedArrayLikeSerializerSizeError = errors.UnrecognizedArrayLikeSerializerSizeError;
	exports.map = map.map;
	exports.nullable = nullable.nullable;
	exports.option = option.option;
	exports.publicKey = publicKey.publicKey;
	exports.scalarEnum = scalarEnum.scalarEnum;
	exports.set = set.set;
	exports.string = string.string;
	exports.struct = struct.struct;
	exports.tuple = tuple.tuple;
	exports.unit = unit.unit;
	exports.maxSerializerSizes = maxSerializerSizes.maxSerializerSizes;
	exports.sumSerializerSizes = sumSerializerSizes.sumSerializerSizes;
	Object.keys(umiSerializersCore).forEach(function (k) {
		if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
			enumerable: true,
			get: function () { return umiSerializersCore[k]; }
		});
	});
	Object.keys(umiSerializersEncodings).forEach(function (k) {
		if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
			enumerable: true,
			get: function () { return umiSerializersEncodings[k]; }
		});
	});
	Object.keys(umiSerializersNumbers).forEach(function (k) {
		if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
			enumerable: true,
			get: function () { return umiSerializersNumbers[k]; }
		});
	});
	
} (cjs$1));

Object.defineProperty(serializersInternal, '__esModule', { value: true });

var umiSerializers$4 = cjs$1;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const mapSerializer = umiSerializers$4.mapSerializer;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const fixSerializer = umiSerializers$4.fixSerializer;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const reverseSerializer = umiSerializers$4.reverseSerializer;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const mergeBytes = umiSerializers$4.mergeBytes;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const padBytes = umiSerializers$4.padBytes;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const fixBytes = umiSerializers$4.fixBytes;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const utf8$2 = umiSerializers$4.utf8;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const baseX = umiSerializers$4.baseX;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const base10 = umiSerializers$4.base10;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const base58 = umiSerializers$4.base58;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const base64 = umiSerializers$4.base64;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const base16 = umiSerializers$4.base16;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const bitArray = umiSerializers$4.bitArray;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const removeNullCharacters = umiSerializers$4.removeNullCharacters;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const padNullCharacters = umiSerializers$4.padNullCharacters;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */
const Endian = umiSerializers$4.Endian;

/** @deprecated import from "@metaplex-foundation/umi/serializers" instead. */

serializersInternal.Endian = Endian;
serializersInternal.base10 = base10;
serializersInternal.base16 = base16;
serializersInternal.base58 = base58;
serializersInternal.base64 = base64;
serializersInternal.baseX = baseX;
serializersInternal.bitArray = bitArray;
serializersInternal.fixBytes = fixBytes;
serializersInternal.fixSerializer = fixSerializer;
serializersInternal.mapSerializer = mapSerializer;
serializersInternal.mergeBytes = mergeBytes;
serializersInternal.padBytes = padBytes;
serializersInternal.padNullCharacters = padNullCharacters;
serializersInternal.removeNullCharacters = removeNullCharacters;
serializersInternal.reverseSerializer = reverseSerializer;
serializersInternal.utf8 = utf8$2;

var Account = {};

var UnexpectedAccountError$2 = {};

var SdkError$9 = {};

var UmiError$3 = {};

Object.defineProperty(UmiError$3, '__esModule', { value: true });

/** @category Errors */
let UmiError$2 = class UmiError extends Error {
  name = 'UmiError';
  constructor(message, source, sourceDetails, cause) {
    super(message);
    this.source = source;
    this.sourceDetails = sourceDetails;
    this.cause = cause;
    this.message = `${this.message}\n\nSource: ${this.getFullSource()}${this.cause ? `\n\nCaused By: ${this.cause}` : ''}\n`;
  }
  getCapitalizedSource() {
    if (this.source === 'sdk' || this.source === 'rpc') {
      return this.source.toUpperCase();
    }
    return this.source[0].toUpperCase() + this.source.slice(1);
  }
  getFullSource() {
    const capitalizedSource = this.getCapitalizedSource();
    const sourceDetails = this.sourceDetails ? ` > ${this.sourceDetails}` : '';
    return capitalizedSource + sourceDetails;
  }
  toString() {
    return `[${this.name}] ${this.message}`;
  }
};

/** @category Errors */

UmiError$3.UmiError = UmiError$2;

Object.defineProperty(SdkError$9, '__esModule', { value: true });

var UmiError$1 = UmiError$3;

/** @category Errors */
let SdkError$8 = class SdkError extends UmiError$1.UmiError {
  name = 'SdkError';
  constructor(message, cause) {
    super(message, 'sdk', undefined, cause);
  }
};

SdkError$9.SdkError = SdkError$8;

Object.defineProperty(UnexpectedAccountError$2, '__esModule', { value: true });

var SdkError$7 = SdkError$9;

/** @category Errors */
let UnexpectedAccountError$1 = class UnexpectedAccountError extends SdkError$7.SdkError {
  name = 'UnexpectedAccountError';
  constructor(publicKey, expectedType, cause) {
    const message = `The account at the provided address [${publicKey}] ` + `is not of the expected type [${expectedType}].`;
    super(message, cause);
  }
};

UnexpectedAccountError$2.UnexpectedAccountError = UnexpectedAccountError$1;

var AccountNotFoundError$2 = {};

Object.defineProperty(AccountNotFoundError$2, '__esModule', { value: true });

var SdkError$6 = SdkError$9;

/** @category Errors */
let AccountNotFoundError$1 = class AccountNotFoundError extends SdkError$6.SdkError {
  name = 'AccountNotFoundError';
  constructor(publicKey, accountType, solution) {
    const message = `${accountType ? `The account of type [${accountType}] was not found` : 'No account was found'} at the provided address [${publicKey}].${solution ? ` ${solution}` : ''}`;
    super(message);
  }
};

AccountNotFoundError$2.AccountNotFoundError = AccountNotFoundError$1;

Object.defineProperty(Account, '__esModule', { value: true });

var UnexpectedAccountError = UnexpectedAccountError$2;
var AccountNotFoundError = AccountNotFoundError$2;

/**
 * The size of an account header in bytes.
 * @category Accounts
 */
const ACCOUNT_HEADER_SIZE = 128;

/**
 * Describes the header of an account.
 * @category Accounts
 */

/**
 * Given an account data serializer,
 * returns a deserialized account from a raw account.
 * @category Accounts
 */
function deserializeAccount(rawAccount, dataSerializer) {
  const {
    data,
    publicKey,
    ...rest
  } = rawAccount;
  try {
    const [parsedData] = dataSerializer.deserialize(data);
    return {
      publicKey,
      header: rest,
      ...parsedData
    };
  } catch (error) {
    throw new UnexpectedAccountError.UnexpectedAccountError(publicKey, dataSerializer.description, error);
  }
}

/**
 * Ensures an account that may or may not exist actually exists.
 * @category Accounts
 */
function assertAccountExists(account, name, solution) {
  if (!account.exists) {
    throw new AccountNotFoundError.AccountNotFoundError(account.publicKey, name, solution);
  }
}

Account.ACCOUNT_HEADER_SIZE = ACCOUNT_HEADER_SIZE;
Account.assertAccountExists = assertAccountExists;
Account.deserializeAccount = deserializeAccount;

var Amount = {};

var BigInt$2 = {};

Object.defineProperty(BigInt$2, '__esModule', { value: true });

/**
 * Defines all the types that can be used to create
 * a BigInt via the <code>{@link createBigInt}</code> function.
 * @category Utils — Amounts
 */

/**
 * Creates a BigInt from a number, string, boolean, or Uint8Array.
 * @category Utils — Amounts
 */
const createBigInt = input => {
  input = typeof input === 'object' ? input.toString() : input;
  return BigInt(input);
};

BigInt$2.createBigInt = createBigInt;

var UnexpectedAmountError$2 = {};

Object.defineProperty(UnexpectedAmountError$2, '__esModule', { value: true });

var SdkError$5 = SdkError$9;

/** @category Errors */
let UnexpectedAmountError$1 = class UnexpectedAmountError extends SdkError$5.SdkError {
  name = 'UnexpectedAmountError';
  constructor(amount, expectedIdentifier, expectedDecimals) {
    const message = `Expected amount of type [${expectedIdentifier} with ${expectedDecimals} decimals] ` + `but got [${amount.identifier} with ${amount.decimals} decimals]. ` + `Ensure the provided Amount is of the expected type.`;
    super(message);
    this.amount = amount;
    this.expectedIdentifier = expectedIdentifier;
    this.expectedDecimals = expectedDecimals;
  }
};

UnexpectedAmountError$2.UnexpectedAmountError = UnexpectedAmountError$1;

var AmountMismatchError$2 = {};

Object.defineProperty(AmountMismatchError$2, '__esModule', { value: true });

var SdkError$4 = SdkError$9;

/** @category Errors */
let AmountMismatchError$1 = class AmountMismatchError extends SdkError$4.SdkError {
  name = 'AmountMismatchError';
  constructor(left, right, operation) {
    const wrappedOperation = operation ? ` [${operation}]` : '';
    const message = `The SDK tried to execute an operation${wrappedOperation} on two amounts of different types: ` + `[${left.identifier} with ${left.decimals} decimals] and ` + `[${right.identifier} with ${right.decimals} decimals]. ` + `Provide both amounts in the same type to perform this operation.`;
    super(message);
    this.left = left;
    this.right = right;
    this.operation = operation;
  }
};

AmountMismatchError$2.AmountMismatchError = AmountMismatchError$1;

Object.defineProperty(Amount, '__esModule', { value: true });

var umiSerializers$3 = cjs$1;
var BigInt$1$1 = BigInt$2;
var UnexpectedAmountError = UnexpectedAmountError$2;
var AmountMismatchError = AmountMismatchError$2;

/**
 * The identifier of an amount.
 * @category Utils — Amounts
 */

/**
 * Creates an amount from the provided basis points, identifier, and decimals.
 * @category Utils — Amounts
 */
const createAmount = (basisPoints, identifier, decimals) => ({
  basisPoints: BigInt$1$1.createBigInt(basisPoints),
  identifier,
  decimals
});

/**
 * Creates an amount from a decimal value which will be converted to the lowest
 * possible unit using the provided decimals.
 * @category Utils — Amounts
 */
const createAmountFromDecimals = (decimalAmount, identifier, decimals) => {
  const exponentAmount = createAmount(BigInt(10) ** BigInt(decimals ?? 0), identifier, decimals);
  return multiplyAmount(exponentAmount, decimalAmount);
};

/**
 * Creates a percentage amount from the provided decimal value.
 * @category Utils — Amounts
 */
const percentAmount = (percent, decimals = 2) => createAmountFromDecimals(percent, '%', decimals);

/**
 * Creates an amount of SPL tokens from the provided decimal value.
 * @category Utils — Amounts
 */
const tokenAmount = (tokens, identifier, decimals) => createAmountFromDecimals(tokens, identifier ?? 'splToken', decimals ?? 0);

/**
 * Creates a {@link SolAmount} from the provided lamports.
 * @category Utils — Amounts
 */
const lamports = lamports => createAmount(lamports, 'SOL', 9);

/**
 * Creates a {@link SolAmount} from the provided decimal value in SOL.
 * @category Utils — Amounts
 */
const sol = sol => createAmountFromDecimals(sol, 'SOL', 9);

/**
 * Creates a {@link UsdAmount} from the provided decimal value in USD.
 * @category Utils — Amounts
 */
const usd = usd => createAmountFromDecimals(usd, 'USD', 2);

/**
 * Determines whether a given amount has the provided identifier and decimals.
 * @category Utils — Amounts
 */
const isAmount = (amount, identifier, decimals) => amount.identifier === identifier && amount.decimals === decimals;

/**
 * Determines whether a given amount is a {@link SolAmount}.
 * @category Utils — Amounts
 */
const isSolAmount = amount => isAmount(amount, 'SOL', 9);

/**
 * Determines whether two amounts are of the same type.
 * @category Utils — Amounts
 */
const sameAmounts = (left, right) => isAmount(left, right.identifier, right.decimals);

/**
 * Ensures that a given amount has the provided identifier and decimals.
 * @category Utils — Amounts
 */
function assertAmount(amount, identifier, decimals) {
  if (!isAmount(amount, identifier, decimals)) {
    throw new UnexpectedAmountError.UnexpectedAmountError(amount, identifier, decimals);
  }
}

/**
 * Ensures that a given amount is a {@link SolAmount}.
 * @category Utils — Amounts
 */
function assertSolAmount(actual) {
  assertAmount(actual, 'SOL', 9);
}

/**
 * Ensures that two amounts are of the same type.
 * @category Utils — Amounts
 */
function assertSameAmounts(left, right, operation) {
  if (!sameAmounts(left, right)) {
    throw new AmountMismatchError.AmountMismatchError(left, right, operation);
  }
}

/**
 * Adds two amounts of the same type.
 * @category Utils — Amounts
 */
const addAmounts = (left, right) => {
  assertSameAmounts(left, right, 'add');
  return {
    ...left,
    basisPoints: left.basisPoints + right.basisPoints
  };
};

/**
 * Subtracts two amounts of the same type.
 * @category Utils — Amounts
 */
const subtractAmounts = (left, right) => {
  assertSameAmounts(left, right, 'subtract');
  return {
    ...left,
    basisPoints: left.basisPoints - right.basisPoints
  };
};

/**
 * Multiplies an amount by a given multiplier.
 * @category Utils — Amounts
 */
const multiplyAmount = (left, multiplier) => {
  if (typeof multiplier === 'bigint') {
    return {
      ...left,
      basisPoints: left.basisPoints * multiplier
    };
  }
  const [units, decimals] = multiplier.toString().split('.');
  const multiplierBasisPoints = BigInt(units + (decimals ?? ''));
  const multiplierExponents = BigInt(10) ** BigInt(decimals?.length ?? 0);
  return {
    ...left,
    basisPoints: left.basisPoints * multiplierBasisPoints / multiplierExponents
  };
};

/**
 * Divides an amount by a given divisor.
 * @category Utils — Amounts
 */
const divideAmount = (left, divisor) => {
  if (typeof divisor === 'bigint') {
    return {
      ...left,
      basisPoints: left.basisPoints / divisor
    };
  }
  const [units, decimals] = divisor.toString().split('.');
  const divisorBasisPoints = BigInt(units + (decimals ?? ''));
  const divisorExponents = BigInt(10) ** BigInt(decimals?.length ?? 0);
  return {
    ...left,
    basisPoints: left.basisPoints * divisorExponents / divisorBasisPoints
  };
};

/**
 * Returns the absolute value of an amount.
 * @category Utils — Amounts
 */
const absoluteAmount = value => {
  const x = value.basisPoints;
  return {
    ...value,
    basisPoints: x < 0 ? -x : x
  };
};

/**
 * Compares two amounts of the same type.
 * @category Utils — Amounts
 */
const compareAmounts = (left, right) => {
  assertSameAmounts(left, right, 'compare');
  if (left.basisPoints > right.basisPoints) return 1;
  if (left.basisPoints < right.basisPoints) return -1;
  return 0;
};

/**
 * Determines whether two amounts are equal.
 * An optional tolerance can be provided to allow for small differences.
 * When using {@link SolAmount}, this is usually due to transaction or small storage fees.
 * @category Utils — Amounts
 */
const isEqualToAmount = (left, right, tolerance) => {
  tolerance = tolerance ?? createAmount(0, left.identifier, left.decimals);
  assertSameAmounts(left, right, 'isEqualToAmount');
  assertSameAmounts(left, tolerance, 'isEqualToAmount');
  const delta = absoluteAmount(subtractAmounts(left, right));
  return isLessThanOrEqualToAmount(delta, tolerance);
};

/**
 * Whether the left amount is less than the right amount.
 * @category Utils — Amounts
 */
const isLessThanAmount = (left, right) => compareAmounts(left, right) < 0;

/**
 * Whether the left amount is less than or equal to the right amount.
 * @category Utils — Amounts
 */
const isLessThanOrEqualToAmount = (left, right) => compareAmounts(left, right) <= 0;

/**
 * Whether the left amount is greater than the right amount.
 * @category Utils — Amounts
 */
const isGreaterThanAmount = (left, right) => compareAmounts(left, right) > 0;

/**
 * Whether the left amount is greater than or equal to the right amount.
 * @category Utils — Amounts
 */
const isGreaterThanOrEqualToAmount = (left, right) => compareAmounts(left, right) >= 0;

/**
 * Whether the amount is zero.
 * @category Utils — Amounts
 */
const isZeroAmount = value => value.basisPoints === BigInt(0);

/**
 * Whether the amount is positive.
 * @category Utils — Amounts
 */
const isPositiveAmount = value => value.basisPoints >= BigInt(0);

/**
 * Whether the amount is negative.
 * @category Utils — Amounts
 */
const isNegativeAmount = value => value.basisPoints < BigInt(0);

/**
 * Converts an amount to a string by using the amount's decimals.
 * @category Utils — Amounts
 */
const amountToString = (value, maxDecimals) => {
  let text = value.basisPoints.toString();
  if (value.decimals === 0) {
    return text;
  }
  const sign = text.startsWith('-') ? '-' : '';
  text = text.replace('-', '');
  text = text.padStart(value.decimals + 1, '0');
  const units = text.slice(0, -value.decimals);
  let decimals = text.slice(-value.decimals);
  if (maxDecimals !== undefined) {
    decimals = decimals.slice(0, maxDecimals);
  }
  return `${sign + units}.${decimals}`;
};

/**
 * Converts an amount to a number by using the amount's decimals.
 * Note that this may throw an error if the amount is too large to fit in a JavaScript number.
 * @category Utils — Amounts
 */
const amountToNumber = value => parseFloat(amountToString(value));

/**
 * Displays an amount as a string by using the amount's decimals and identifier.
 * @category Utils — Amounts
 */
const displayAmount = (value, maxDecimals) => {
  const amountAsString = amountToString(value, maxDecimals);
  switch (value.identifier) {
    case '%':
      return `${amountAsString}%`;
    case 'splToken':
      return /^1(\.0+)?$/.test(amountAsString) ? `${amountAsString} Token` : `${amountAsString} Tokens`;
    default:
      if (value.identifier.startsWith('splToken.')) {
        const [, identifier] = value.identifier.split('.');
        return `${identifier} ${amountAsString}`;
      }
      return `${value.identifier} ${amountAsString}`;
  }
};

/**
 * Converts a number serializer into an amount serializer
 * by providing an amount identifier and decimals.
 * @category Utils — Amounts
 */
const mapAmountSerializer = (serializer, identifier, decimals) => umiSerializers$3.mapSerializer(serializer, value => value.basisPoints > Number.MAX_SAFE_INTEGER ? value.basisPoints : Number(value.basisPoints), value => createAmount(value, identifier, decimals));

Amount.absoluteAmount = absoluteAmount;
Amount.addAmounts = addAmounts;
Amount.amountToNumber = amountToNumber;
Amount.amountToString = amountToString;
Amount.assertAmount = assertAmount;
Amount.assertSameAmounts = assertSameAmounts;
Amount.assertSolAmount = assertSolAmount;
Amount.compareAmounts = compareAmounts;
Amount.createAmount = createAmount;
Amount.createAmountFromDecimals = createAmountFromDecimals;
Amount.displayAmount = displayAmount;
Amount.divideAmount = divideAmount;
Amount.isAmount = isAmount;
Amount.isEqualToAmount = isEqualToAmount;
Amount.isGreaterThanAmount = isGreaterThanAmount;
Amount.isGreaterThanOrEqualToAmount = isGreaterThanOrEqualToAmount;
Amount.isLessThanAmount = isLessThanAmount;
Amount.isLessThanOrEqualToAmount = isLessThanOrEqualToAmount;
Amount.isNegativeAmount = isNegativeAmount;
Amount.isPositiveAmount = isPositiveAmount;
Amount.isSolAmount = isSolAmount;
Amount.isZeroAmount = isZeroAmount;
Amount.lamports = lamports;
Amount.mapAmountSerializer = mapAmountSerializer;
Amount.multiplyAmount = multiplyAmount;
Amount.percentAmount = percentAmount;
Amount.sameAmounts = sameAmounts;
Amount.sol = sol;
Amount.subtractAmounts = subtractAmounts;
Amount.tokenAmount = tokenAmount;
Amount.usd = usd;

var Cluster = {};

Object.defineProperty(Cluster, '__esModule', { value: true });

/**
 * Defines the available Solana clusters.
 * @category Utils — Cluster
 */

/**
 * Helper type to helps the end-user selecting a cluster.
 * They can either provide a specific cluster or use the
 * special values 'current' or '*' to select the current
 * cluster or all clusters respectively.
 * @category Utils — Cluster
 */

const MAINNET_BETA_DOMAINS = ['api.mainnet-beta.solana.com', 'ssc-dao.genesysgo.net'];
const DEVNET_DOMAINS = ['api.devnet.solana.com', 'psytrbhymqlkfrhudd.dev.genesysgo.net'];
const TESTNET_DOMAINS = ['api.testnet.solana.com'];
const LOCALNET_DOMAINS = ['localhost', '127.0.0.1'];

/**
 * Helper method that tries its best to resolve a cluster from a given endpoint.
 * @category Utils — Cluster
 */
const resolveClusterFromEndpoint = endpoint => {
  const domain = new URL(endpoint).hostname;
  if (MAINNET_BETA_DOMAINS.includes(domain)) return 'mainnet-beta';
  if (DEVNET_DOMAINS.includes(domain)) return 'devnet';
  if (TESTNET_DOMAINS.includes(domain)) return 'testnet';
  if (LOCALNET_DOMAINS.includes(domain)) return 'localnet';
  if (endpoint.includes('mainnet')) return 'mainnet-beta';
  if (endpoint.includes('devnet')) return 'devnet';
  if (endpoint.includes('testnet')) return 'testnet';
  if (endpoint.includes('local')) return 'localnet';
  return 'custom';
};

Cluster.resolveClusterFromEndpoint = resolveClusterFromEndpoint;

var Context$1 = {};

var DownloaderInterface$1 = {};

var InterfaceImplementationMissingError$9 = {};

Object.defineProperty(InterfaceImplementationMissingError$9, '__esModule', { value: true });

var SdkError$3 = SdkError$9;

/** @category Errors */
let InterfaceImplementationMissingError$8 = class InterfaceImplementationMissingError extends SdkError$3.SdkError {
  name = 'InterfaceImplementationMissingError';
  constructor(interfaceName, contextVariable) {
    const interfaceBasename = interfaceName.replace(/Interface$/, '');
    const message = `Tried using ${interfaceName} but no implementation of that interface was found. ` + `Make sure an implementation is registered, ` + `e.g. via "context.${contextVariable} = new My${interfaceBasename}();".`;
    super(message);
  }
};

InterfaceImplementationMissingError$9.InterfaceImplementationMissingError = InterfaceImplementationMissingError$8;

Object.defineProperty(DownloaderInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError$7 = InterfaceImplementationMissingError$9;

/**
 * An implementation of the {@link DownloaderInterface} that throws an error when called.
 * @category Storage
 */
function createNullDownloader() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$7.InterfaceImplementationMissingError('DownloaderInterface', 'downloader');
  };
  return {
    download: errorHandler,
    downloadJson: errorHandler
  };
}

DownloaderInterface$1.createNullDownloader = createNullDownloader;

var EddsaInterface$1 = {};

Object.defineProperty(EddsaInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError$6 = InterfaceImplementationMissingError$9;

/**
 * An implementation of the {@link EddsaInterface} that throws an error when called.
 * @category Signers and PublicKeys
 */
function createNullEddsa() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$6.InterfaceImplementationMissingError('EddsaInterface', 'eddsa');
  };
  return {
    generateKeypair: errorHandler,
    createKeypairFromSecretKey: errorHandler,
    createKeypairFromSeed: errorHandler,
    isOnCurve: errorHandler,
    findPda: errorHandler,
    sign: errorHandler,
    verify: errorHandler
  };
}

EddsaInterface$1.createNullEddsa = createNullEddsa;

var HttpInterface$1 = {};

Object.defineProperty(HttpInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError$5 = InterfaceImplementationMissingError$9;

/**
 * An implementation of the {@link HttpInterface} that throws an error when called.
 * @category Http
 */
function createNullHttp() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$5.InterfaceImplementationMissingError('HttpInterface', 'http');
  };
  return {
    send: errorHandler
  };
}

HttpInterface$1.createNullHttp = createNullHttp;

var ProgramRepositoryInterface$1 = {};

Object.defineProperty(ProgramRepositoryInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError$4 = InterfaceImplementationMissingError$9;

/**
 * Defines the interface for a program repository.
 * It allows us to register and retrieve programs when needed.
 *
 * @category Context and Interfaces
 */

/**
 * An implementation of the {@link ProgramRepositoryInterface} that throws an error when called.
 * @category Programs
 */
function createNullProgramRepository() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$4.InterfaceImplementationMissingError('ProgramRepositoryInterface', 'programs');
  };
  return {
    has: errorHandler,
    get: errorHandler,
    getPublicKey: errorHandler,
    all: errorHandler,
    add: errorHandler,
    bind: errorHandler,
    unbind: errorHandler,
    clone: errorHandler,
    resolveError: errorHandler
  };
}

ProgramRepositoryInterface$1.createNullProgramRepository = createNullProgramRepository;

var RpcInterface$1 = {};

Object.defineProperty(RpcInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError$3 = InterfaceImplementationMissingError$9;

/**
 * Defines the interface for an RPC client.
 * It allows us to interact with the Solana blockchain.
 *
 * @category Context and Interfaces
 */

/**
 * An implementation of the {@link RpcInterface} that throws an error when called.
 * @category Rpc
 */
function createNullRpc() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$3.InterfaceImplementationMissingError('RpcInterface', 'rpc');
  };
  return {
    getEndpoint: errorHandler,
    getCluster: errorHandler,
    getAccount: errorHandler,
    getAccounts: errorHandler,
    getProgramAccounts: errorHandler,
    getBlockTime: errorHandler,
    getBalance: errorHandler,
    getRent: errorHandler,
    getSlot: errorHandler,
    getLatestBlockhash: errorHandler,
    getTransaction: errorHandler,
    getSignatureStatuses: errorHandler,
    accountExists: errorHandler,
    airdrop: errorHandler,
    call: errorHandler,
    sendTransaction: errorHandler,
    confirmTransaction: errorHandler
  };
}

RpcInterface$1.createNullRpc = createNullRpc;

var SerializerInterface$1 = {};

Object.defineProperty(SerializerInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError$2 = InterfaceImplementationMissingError$9;

/**
 * Defines the interface for a set of serializers
 * that can be used to serialize/deserialize any Serde types.
 *
 * @category Context and Interfaces
 * @deprecated This interface is deprecated.
 * You can now directly use `@metaplex-foundation/umi/serializers` instead.
 */

/**
 * An implementation of the {@link SerializerInterface} that throws an error when called.
 * @category Serializers
 */
function createNullSerializer() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$2.InterfaceImplementationMissingError('SerializerInterface', 'serializer');
  };
  return {
    tuple: errorHandler,
    array: errorHandler,
    map: errorHandler,
    set: errorHandler,
    option: errorHandler,
    nullable: errorHandler,
    struct: errorHandler,
    enum: errorHandler,
    dataEnum: errorHandler,
    string: errorHandler,
    bool: errorHandler,
    unit: errorHandler,
    u8: errorHandler,
    u16: errorHandler,
    u32: errorHandler,
    u64: errorHandler,
    u128: errorHandler,
    i8: errorHandler,
    i16: errorHandler,
    i32: errorHandler,
    i64: errorHandler,
    i128: errorHandler,
    f32: errorHandler,
    f64: errorHandler,
    bytes: errorHandler,
    publicKey: errorHandler
  };
}

SerializerInterface$1.createNullSerializer = createNullSerializer;

var Signer$3 = {};

var arrays$2 = {};

Object.defineProperty(arrays$2, '__esModule', { value: true });

/**
 * Chunks an array into smaller arrays of (at most) the specified size.
 * @category Utils
 */
const chunk = (array, chunkSize) => array.reduce((chunks, item, index) => {
  const chunkIndex = Math.floor(index / chunkSize);
  if (!chunks[chunkIndex]) {
    chunks[chunkIndex] = [];
  }
  chunks[chunkIndex].push(item);
  return chunks;
}, []);

/**
 * Zips two arrays together, using the provided function to map the values.
 * @category Utils
 */
const zipMap = (left, right, fn) => left.map((t, index) => fn(t, right?.[index] ?? null, index));

/**
 * Deduplicates an array by the provided function.
 * @category Utils
 */
const uniqueBy = (array, fn) => array.reduce((acc, v) => {
  if (!acc.some(x => fn(v, x))) acc.push(v);
  return acc;
}, []);

arrays$2.chunk = chunk;
arrays$2.uniqueBy = uniqueBy;
arrays$2.zipMap = zipMap;

Object.defineProperty(Signer$3, '__esModule', { value: true });

var arrays$1 = arrays$2;

/**
 * Defines a public key that can sign transactions and messages.
 * @category Context and Interfaces
 */

/**
 * Signs a transaction using the provided signers.
 * @category Signers and PublicKeys
 */
const signTransaction = async (transaction, signers) => signers.reduce(async (promise, signer) => {
  const unsigned = await promise;
  return signer.signTransaction(unsigned);
}, Promise.resolve(transaction));

/**
 * Signs multiple transactions using the provided signers
 * such that signers that need to sign multiple transactions
 * sign them all at once using the `signAllTransactions` method.
 *
 * @category Signers and PublicKeys
 */
const signAllTransactions = async transactionsWithSigners => {
  const transactions = transactionsWithSigners.map(item => item.transaction);
  const signersWithTransactions = transactionsWithSigners.reduce((all, {
    signers
  }, index) => {
    signers.forEach(signer => {
      const item = all.find(item => item.signer.publicKey === signer.publicKey);
      if (item) {
        item.indices.push(index);
      } else {
        all.push({
          signer,
          indices: [index]
        });
      }
    });
    return all;
  }, []);
  return signersWithTransactions.reduce(async (promise, {
    signer,
    indices
  }) => {
    const transactions = await promise;
    if (indices.length === 1) {
      const unsigned = transactions[indices[0]];
      transactions[indices[0]] = await signer.signTransaction(unsigned);
      return transactions;
    }
    const unsigned = indices.map(index => transactions[index]);
    const signed = await signer.signAllTransactions(unsigned);
    indices.forEach((index, position) => {
      transactions[index] = signed[position];
    });
    return transactions;
  }, Promise.resolve(transactions));
};

/**
 * Whether the provided value is a `Signer`.
 * @category Signers and PublicKeys
 */
const isSigner = value => typeof value === 'object' && 'publicKey' in value && 'signMessage' in value;

/**
 * Deduplicates the provided signers by public key.
 * @category Signers and PublicKeys
 */
const uniqueSigners = signers => arrays$1.uniqueBy(signers, (a, b) => a.publicKey === b.publicKey);

/**
 * Creates a `Signer` that, when required to sign, does nothing.
 * This can be useful when libraries require a `Signer` but
 * we don't have one in the current environment. For example,
 * if the transaction will then be signed in a backend server.
 *
 * @category Signers and PublicKeys
 */
const createNoopSigner = publicKey => ({
  publicKey,
  async signMessage(message) {
    return message;
  },
  async signTransaction(transaction) {
    return transaction;
  },
  async signAllTransactions(transactions) {
    return transactions;
  }
});

/**
 * Creates a `Signer` that, when required to sign, throws an error.
 * @category Signers and PublicKeys
 */
function createNullSigner() {
  const error = new Error('Trying to use a NullSigner. ' + 'Did you forget to set a Signer on your Umi instance? ' + 'See the `signerIdentity` method for more information.');
  const errorHandler = () => {
    throw error;
  };
  return {
    get publicKey() {
      throw error;
    },
    signMessage: errorHandler,
    signTransaction: errorHandler,
    signAllTransactions: errorHandler
  };
}

Signer$3.createNoopSigner = createNoopSigner;
Signer$3.createNullSigner = createNullSigner;
Signer$3.isSigner = isSigner;
Signer$3.signAllTransactions = signAllTransactions;
Signer$3.signTransaction = signTransaction;
Signer$3.uniqueSigners = uniqueSigners;

var TransactionFactoryInterface$1 = {};

Object.defineProperty(TransactionFactoryInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError$1 = InterfaceImplementationMissingError$9;

/**
 * An implementation of the {@link TransactionFactoryInterface} that throws an error when called.
 * @category Transactions
 */
function createNullTransactionFactory() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError$1.InterfaceImplementationMissingError('TransactionFactoryInterface', 'transactions');
  };
  return {
    create: errorHandler,
    serialize: errorHandler,
    deserialize: errorHandler,
    serializeMessage: errorHandler,
    deserializeMessage: errorHandler
  };
}

TransactionFactoryInterface$1.createNullTransactionFactory = createNullTransactionFactory;

var UploaderInterface$1 = {};

Object.defineProperty(UploaderInterface$1, '__esModule', { value: true });

var InterfaceImplementationMissingError = InterfaceImplementationMissingError$9;

/**
 * An implementation of the {@link UploaderInterface} that throws an error when called.
 * @category Storage
 */
function createNullUploader() {
  const errorHandler = () => {
    throw new InterfaceImplementationMissingError.InterfaceImplementationMissingError('UploaderInterface', 'uploader');
  };
  return {
    upload: errorHandler,
    uploadJson: errorHandler,
    getUploadPrice: errorHandler
  };
}

UploaderInterface$1.createNullUploader = createNullUploader;

Object.defineProperty(Context$1, '__esModule', { value: true });

var DownloaderInterface = DownloaderInterface$1;
var EddsaInterface = EddsaInterface$1;
var HttpInterface = HttpInterface$1;
var ProgramRepositoryInterface = ProgramRepositoryInterface$1;
var RpcInterface = RpcInterface$1;
var SerializerInterface = SerializerInterface$1;
var Signer$2 = Signer$3;
var TransactionFactoryInterface = TransactionFactoryInterface$1;
var UploaderInterface = UploaderInterface$1;

/**
 * A Umi context object that uses all of the interfaces provided by Umi.
 * Once created, the end-user can pass this object to any function that
 * requires some or all of these interfaces.
 *
 * @category Context and Interfaces
 */

/**
 * A helper method that creates a Umi context object using only
 * Null implementations of the interfaces. This can be useful to
 * create a full Umi context object when only a few of the interfaces
 * are needed.
 *
 * @category Context and Interfaces
 */
const createNullContext = () => ({
  downloader: DownloaderInterface.createNullDownloader(),
  eddsa: EddsaInterface.createNullEddsa(),
  http: HttpInterface.createNullHttp(),
  identity: Signer$2.createNullSigner(),
  payer: Signer$2.createNullSigner(),
  programs: ProgramRepositoryInterface.createNullProgramRepository(),
  rpc: RpcInterface.createNullRpc(),
  serializer: SerializerInterface.createNullSerializer(),
  transactions: TransactionFactoryInterface.createNullTransactionFactory(),
  uploader: UploaderInterface.createNullUploader()
});

Context$1.createNullContext = createNullContext;

var DateTime = {};

Object.defineProperty(DateTime, '__esModule', { value: true });

var umiSerializers$2 = cjs$1;
var BigInt$1 = BigInt$2;

/**
 * Defines a string that can be parsed into a Date object.
 * For instance, `"2020-01-01T00:00:00.000Z"`.
 * @category Utils — DateTime
 */

/**
 * Creates a {@link DateTime} from a {@link DateTimeInput}.
 * @category Utils — DateTime
 */
const dateTime = value => {
  if (typeof value === 'string' || isDateObject(value)) {
    const date = new Date(value);
    const timestamp = Math.floor(date.getTime() / 1000);
    return BigInt$1.createBigInt(timestamp);
  }
  return BigInt$1.createBigInt(value);
};

/**
 * Helper function to get the current time as a {@link DateTime}.
 * @category Utils — DateTime
 */
const now = () => dateTime(new Date(Date.now()));

/**
 * Whether the given value is a Date object.
 * @category Utils — DateTime
 */
const isDateObject = value => Object.prototype.toString.call(value) === '[object Date]';

/**
 * Formats a {@link DateTime} as a string.
 * @category Utils — DateTime
 */
const formatDateTime = (value, locales = 'en-US', options = {
  month: 'short',
  day: 'numeric',
  year: 'numeric',
  hour: 'numeric',
  minute: 'numeric'
}) => {
  const date = new Date(Number(value * 1000n));
  return date.toLocaleDateString(locales, options);
};

/**
 * Converts a number serializer into a DateTime serializer.
 * @category Utils — DateTime
 */
const mapDateTimeSerializer = serializer => umiSerializers$2.mapSerializer(serializer, value => {
  const date = dateTime(value);
  return date > Number.MAX_SAFE_INTEGER ? date : Number(date);
}, value => dateTime(value));

DateTime.dateTime = dateTime;
DateTime.formatDateTime = formatDateTime;
DateTime.mapDateTimeSerializer = mapDateTimeSerializer;
DateTime.now = now;

var GenericFile = {};

var randomStrings$1 = {};

Object.defineProperty(randomStrings$1, '__esModule', { value: true });

/**
 * Generate a random string of the given length.
 * Warning: This is not a cryptographically secure random string generator.
 * @category Utils
 */
const generateRandomString = (length = 20, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') => {
  let result = '';
  const alphabetLength = alphabet.length;
  for (let i = 0; i < length; i += 1) {
    result += alphabet.charAt(Math.floor(Math.random() * alphabetLength));
  }
  return result;
};

randomStrings$1.generateRandomString = generateRandomString;

Object.defineProperty(GenericFile, '__esModule', { value: true });

var umiSerializers$1 = cjs$1;
var randomStrings = randomStrings$1;

/**
 * A generic definition of a File represented as a buffer with
 * extra metadata such as a file name, content type, and tags.
 *
 * @category Storage
 */

/**
 * Creates a new {@link GenericFile} from a buffer and a file name.
 * @category Storage
 */
const createGenericFile = (content, fileName, options = {}) => ({
  buffer: typeof content === 'string' ? umiSerializers$1.utf8.serialize(content) : content,
  fileName,
  displayName: options.displayName ?? fileName,
  uniqueName: options.uniqueName ?? randomStrings.generateRandomString(),
  contentType: options.contentType ?? null,
  extension: options.extension ?? getExtension(fileName),
  tags: options.tags ?? []
});

/**
 * Creates a new {@link GenericFile} from a {@link BrowserFile}.
 * @category Storage
 */
const createGenericFileFromBrowserFile = async (browserFile, options = {}) => createGenericFile(new Uint8Array(await browserFile.arrayBuffer()), browserFile.name, options);

/**
 * Creates a new {@link GenericFile} from a JSON object.
 * @category Storage
 */
const createGenericFileFromJson = (json, fileName = 'inline.json', options = {}) => createGenericFile(JSON.stringify(json), fileName, {
  contentType: 'application/json',
  ...options
});

/**
 * Creates a new {@link BrowserFile} from a {@link GenericFile}.
 * @category Storage
 */
const createBrowserFileFromGenericFile = file => new File([file.buffer], file.fileName);

/**
 * Returns the content of a {@link GenericFile} as a parsed JSON object.
 * @category Storage
 */
const parseJsonFromGenericFile = file => JSON.parse(new TextDecoder().decode(file.buffer));

/**
 * Returns the total size of a list of {@link GenericFile} in bytes.
 * @category Storage
 */
const getBytesFromGenericFiles = (...files) => files.reduce((acc, file) => acc + file.buffer.byteLength, 0);

/**
 * Whether the given value is a {@link GenericFile}.
 * @category Storage
 */
const isGenericFile = file => file != null && typeof file === 'object' && 'buffer' in file && 'fileName' in file && 'displayName' in file && 'uniqueName' in file && 'contentType' in file && 'extension' in file && 'tags' in file;

/**
 * Returns the extension of a file name.
 * @category Storage
 */
const getExtension = fileName => {
  const lastDotIndex = fileName.lastIndexOf('.');
  return lastDotIndex < 0 ? null : fileName.slice(lastDotIndex + 1);
};

GenericFile.createBrowserFileFromGenericFile = createBrowserFileFromGenericFile;
GenericFile.createGenericFile = createGenericFile;
GenericFile.createGenericFileFromBrowserFile = createGenericFileFromBrowserFile;
GenericFile.createGenericFileFromJson = createGenericFileFromJson;
GenericFile.getBytesFromGenericFiles = getBytesFromGenericFiles;
GenericFile.isGenericFile = isGenericFile;
GenericFile.parseJsonFromGenericFile = parseJsonFromGenericFile;

var GpaBuilder$1 = {};

Object.defineProperty(GpaBuilder$1, '__esModule', { value: true });

var umiPublicKeys = cjs$4;
var umiSerializers = cjs$1;
var SdkError$2 = SdkError$9;

/**
 * Builder for `getProgramAccounts` RPC requests.
 * @category Utils — GpaBuilder
 */
class GpaBuilder {
  constructor(context, programId, options = {}) {
    this.context = context;
    this.programId = programId;
    this.options = options;
  }
  reset() {
    return new GpaBuilder(this.context, this.programId, {
      fields: this.options.fields,
      deserializeCallback: this.options.deserializeCallback
    });
  }
  registerFields(fields) {
    return new GpaBuilder(this.context, this.programId, {
      ...this.options,
      fields
    });
  }
  registerFieldsFromStruct(structFields) {
    let offset = 0;
    const fields = structFields.reduce((acc, [field, serializer]) => {
      acc[field] = [offset, serializer];
      offset = offset === null || serializer.fixedSize === null ? null : offset + serializer.fixedSize;
      return acc;
    }, {});
    return this.registerFields(fields);
  }
  deserializeUsing(callback) {
    return new GpaBuilder(this.context, this.programId, {
      ...this.options,
      deserializeCallback: callback
    });
  }
  slice(offset, length) {
    return new GpaBuilder(this.context, this.programId, {
      ...this.options,
      dataSlice: {
        offset,
        length
      }
    });
  }
  sliceField(field, offset) {
    const [effectiveOffset, serializer] = this.getField(field, offset);
    if (!serializer.fixedSize) {
      throw new SdkError$2.SdkError(`Cannot slice field [${field}] because its size is variable.`);
    }
    return this.slice(effectiveOffset, serializer.fixedSize);
  }
  withoutData() {
    return this.slice(0, 0);
  }
  addFilter(...filters) {
    return new GpaBuilder(this.context, this.programId, {
      ...this.options,
      filters: [...(this.options.filters ?? []), ...filters]
    });
  }
  where(offset, data) {
    let bytes;
    if (typeof data === 'string') {
      bytes = umiSerializers.base58.serialize(data);
    } else if (typeof data === 'number' || typeof data === 'bigint' || typeof data === 'boolean') {
      bytes = umiSerializers.base10.serialize(BigInt(data).toString());
    } else {
      bytes = new Uint8Array(data);
    }
    return this.addFilter({
      memcmp: {
        offset,
        bytes
      }
    });
  }
  whereField(field, data, offset) {
    const [effectiveOffset, serializer] = this.getField(field, offset);
    return this.where(effectiveOffset, serializer.serialize(data));
  }
  whereSize(dataSize) {
    return this.addFilter({
      dataSize
    });
  }
  sortUsing(callback) {
    return new GpaBuilder(this.context, this.programId, {
      ...this.options,
      sortCallback: callback
    });
  }
  async get(options = {}) {
    const accounts = await this.context.rpc.getProgramAccounts(this.programId, {
      ...options,
      dataSlice: options.dataSlice ?? this.options.dataSlice,
      filters: [...(options.filters ?? []), ...(this.options.filters ?? [])]
    });
    if (this.options.sortCallback) {
      accounts.sort(this.options.sortCallback);
    }
    return accounts;
  }
  async getAndMap(callback, options = {}) {
    return (await this.get(options)).map(callback);
  }
  async getDeserialized(options = {}) {
    const rpcAccounts = await this.get(options);
    if (!this.options.deserializeCallback) return rpcAccounts;
    return rpcAccounts.map(this.options.deserializeCallback);
  }
  async getPublicKeys(options = {}) {
    return this.getAndMap(account => account.publicKey, options);
  }
  async getDataAsPublicKeys(options = {}) {
    return this.getAndMap(account => {
      try {
        return umiPublicKeys.publicKey(account.data);
      } catch (error) {
        const message = `Following a getProgramAccount call, you are trying to use an ` + `account's data (or a slice of it) as a public key. ` + `However, we encountered an account ` + `[${account.publicKey}] whose data ` + `[base64=${umiSerializers.base64.deserialize(account.data)}] ` + `is not a valid public key.`;
        throw new SdkError$2.SdkError(message);
      }
    }, options);
  }
  getField(fieldName, forcedOffset) {
    if (!this.options.fields) {
      throw new SdkError$2.SdkError('Fields are not defined in this GpaBuilder.');
    }
    const field = this.options.fields[fieldName];
    if (!field) {
      throw new SdkError$2.SdkError(`Field [${fieldName}] is not defined in this GpaBuilder.`);
    }
    const [offset, serializer] = field;
    if (forcedOffset !== undefined) {
      return [forcedOffset, serializer];
    }
    if (offset === null) {
      throw new SdkError$2.SdkError(`Field [${fieldName}] does not have a fixed offset. ` + `This is likely because it is not in the fixed part of ` + `the account's data. In other words, it is located after ` + `a field of variable length which means we cannot find a ` + `fixed offset for the filter. You may go around this by ` + `providing an offset explicitly.`);
    }
    return [offset, serializer];
  }
}

/**
 * Creates a new {@link GpaBuilder} instance.
 * @category Utils — GpaBuilder
 */
const gpaBuilder = (context, programId) => new GpaBuilder(context, programId);

GpaBuilder$1.GpaBuilder = GpaBuilder;
GpaBuilder$1.gpaBuilder = gpaBuilder;

var HttpRequest = {};

Object.defineProperty(HttpRequest, '__esModule', { value: true });

/** Defines a number in milliseconds. */

/**
 * Defines a HTTP Request with custom data.
 * @category Http
 */

/**
 * Creates a new {@link HttpRequestBuilder} instance.
 * @category Http
 */
const request = () => new HttpRequestBuilder({
  method: 'get',
  data: undefined,
  headers: {},
  url: ''
});

/**
 * A builder for constructing {@link HttpRequest} instances.
 * @category Http
 */
class HttpRequestBuilder {
  constructor(request) {
    this.request = request;
  }
  asJson() {
    return this.contentType('application/json');
  }
  asMultipart() {
    return this.contentType('multipart/form-data');
  }
  asForm() {
    return this.contentType('application/x-www-form-urlencoded');
  }
  accept(contentType) {
    return this.withHeader('accept', contentType);
  }
  contentType(contentType) {
    return this.withHeader('content-type', contentType);
  }
  userAgent(userAgent) {
    return this.withHeader('user-agent', userAgent);
  }
  withToken(token, type = 'Bearer') {
    return this.withHeader('authorization', `${type} ${token}`);
  }
  withHeader(key, value) {
    return this.withHeaders({
      [key]: value
    });
  }
  withHeaders(headers) {
    return new HttpRequestBuilder({
      ...this.request,
      headers: {
        ...this.request.headers,
        ...headers
      }
    });
  }
  dontFollowRedirects() {
    return this.followRedirects(0);
  }
  followRedirects(maxRedirects) {
    return new HttpRequestBuilder({
      ...this.request,
      maxRedirects
    });
  }
  withoutTimeout() {
    return this.withTimeout(0);
  }
  withTimeout(timeout) {
    return new HttpRequestBuilder({
      ...this.request,
      timeout
    });
  }
  withAbortSignal(signal) {
    return new HttpRequestBuilder({
      ...this.request,
      signal
    });
  }
  withEndpoint(method, url) {
    return new HttpRequestBuilder({
      ...this.request,
      method,
      url
    });
  }
  withParams(params) {
    const url = new URL(this.request.url);
    const newSearch = new URLSearchParams(params);
    const search = new URLSearchParams(url.searchParams);
    [...newSearch.entries()].forEach(([key, val]) => {
      search.append(key, val);
    });
    url.search = search.toString();
    return new HttpRequestBuilder({
      ...this.request,
      url: url.toString()
    });
  }
  withData(data) {
    return new HttpRequestBuilder({
      ...this.request,
      data
    });
  }
  get(url) {
    return this.withEndpoint('get', url);
  }
  post(url) {
    return this.withEndpoint('post', url);
  }
  put(url) {
    return this.withEndpoint('put', url);
  }
  patch(url) {
    return this.withEndpoint('patch', url);
  }
  delete(url) {
    return this.withEndpoint('delete', url);
  }
  get method() {
    return this.request.method;
  }
  get url() {
    return this.request.url;
  }
  get data() {
    return this.request.data;
  }
  get headers() {
    return this.request.headers;
  }
  get maxRedirects() {
    return this.request.maxRedirects;
  }
  get timeout() {
    return this.request.timeout;
  }
  get signal() {
    return this.request.signal;
  }
}

/**
 * Defines a HTTP method as a string.
 * @category Http
 */

HttpRequest.HttpRequestBuilder = HttpRequestBuilder;
HttpRequest.request = request;

var Keypair$1 = {};

var Transaction$2 = {};

Object.defineProperty(Transaction$2, '__esModule', { value: true });

/**
 * The maximum amount of bytes that can be used for a transaction.
 * @category Transactions
 */
const TRANSACTION_SIZE_LIMIT = 1232;

/**
 * The version of a transaction.
 * - Legacy is the very first iteration of Solana transactions.
 * - V0 introduces the concept of versionned transaction for
 * the first time and adds supports for address lookup tables.
 *
 * @category Transactions
 */

/**
 * Adds a given signature to the transaction's signature array
 * and returns the updated transaction as a new object.
 *
 * @category Transactions
 */
const addTransactionSignature = (transaction, signature, signerPublicKey) => {
  const maxSigners = transaction.message.header.numRequiredSignatures;
  const signerPublicKeys = transaction.message.accounts.slice(0, maxSigners);
  const signerIndex = signerPublicKeys.findIndex(key => key === signerPublicKey);
  if (signerIndex < 0) {
    throw new Error('The provided signer is not required to sign this transaction.');
  }
  const newSignatures = [...transaction.signatures];
  newSignatures[signerIndex] = signature;
  return {
    ...transaction,
    signatures: newSignatures
  };
};

Transaction$2.TRANSACTION_SIZE_LIMIT = TRANSACTION_SIZE_LIMIT;
Transaction$2.addTransactionSignature = addTransactionSignature;

Object.defineProperty(Keypair$1, '__esModule', { value: true });

var Transaction$1 = Transaction$2;

/**
 * Represents a keypair with a public key and a secret key.
 * @category Signers and PublicKeys
 */

/**
 * Generate a new random {@link KeypairSigner} using the Eddsa interface.
 * @category Signers and PublicKeys
 */
const generateSigner = context => createSignerFromKeypair(context, context.eddsa.generateKeypair());

/**
 * Creates a {@link KeypairSigner} from a {@link Keypair} object.
 * @category Signers and PublicKeys
 */
const createSignerFromKeypair = (context, keypair) => ({
  publicKey: keypair.publicKey,
  secretKey: keypair.secretKey,
  async signMessage(message) {
    return context.eddsa.sign(message, keypair);
  },
  async signTransaction(transaction) {
    const message = transaction.serializedMessage;
    const signature = context.eddsa.sign(message, keypair);
    return Transaction$1.addTransactionSignature(transaction, signature, keypair.publicKey);
  },
  async signAllTransactions(transactions) {
    return Promise.all(transactions.map(transaction => this.signTransaction(transaction)));
  }
});

/**
 * Whether the given signer is a {@link KeypairSigner}.
 * @category Signers and PublicKeys
 */
const isKeypairSigner = signer => signer.secretKey !== undefined;

Keypair$1.createSignerFromKeypair = createSignerFromKeypair;
Keypair$1.generateSigner = generateSigner;
Keypair$1.isKeypairSigner = isKeypairSigner;

var Program = {};

Object.defineProperty(Program, '__esModule', { value: true });

/**
 * An error that contains Program logs.
 * @category Programs
 */

/**
 * An error that contains a Program error code.
 * @category Programs
 */

/**
 * Whether the given value is an instance of {@link ErrorWithLogs}.
 * @category Programs
 */
const isErrorWithLogs = error => error instanceof Error && 'logs' in error;

/**
 * Defines a Solana Program that can be
 * registered in Umi's program repository.
 *
 * @category Programs
 */

Program.isErrorWithLogs = isErrorWithLogs;

var SignerPlugins = {};

Object.defineProperty(SignerPlugins, '__esModule', { value: true });

var Keypair = Keypair$1;

/**
 * Umi plugin that sets the identity and the payer to the given signer.
 * @category Signers and PublicKeys
 */
const signerIdentity = (signer, setPayer = true) => ({
  install(umi) {
    umi.identity = signer;
    if (setPayer) {
      umi.payer = signer;
    }
  }
});

/**
 * Umi plugin that only sets the payer to the given signer.
 * @category Signers and PublicKeys
 */
const signerPayer = signer => ({
  install(umi) {
    umi.payer = signer;
  }
});

/**
 * Umi plugin that sets the identity and the payer to a randomly generated signer.
 * @category Signers and PublicKeys
 */
const generatedSignerIdentity = (setPayer = true) => ({
  install(umi) {
    const signer = Keypair.generateSigner(umi);
    umi.use(signerIdentity(signer, setPayer));
  }
});

/**
 * Umi plugin that only sets the payer to a randomly generated signer.
 * @category Signers and PublicKeys
 */
const generatedSignerPayer = () => ({
  install(umi) {
    const signer = Keypair.generateSigner(umi);
    umi.use(signerPayer(signer));
  }
});

/**
 * Umi plugin that sets the identity and the payer to a provided keypair.
 * @category Signers and PublicKeys
 */
const keypairIdentity = (keypair, setPayer = true) => ({
  install(umi) {
    const signer = Keypair.createSignerFromKeypair(umi, keypair);
    umi.use(signerIdentity(signer, setPayer));
  }
});

/**
 * Umi plugin that only sets the payer to a provided keypair.
 * @category Signers and PublicKeys
 */
const keypairPayer = keypair => ({
  install(umi) {
    const signer = Keypair.createSignerFromKeypair(umi, keypair);
    umi.use(signerPayer(signer));
  }
});

SignerPlugins.generatedSignerIdentity = generatedSignerIdentity;
SignerPlugins.generatedSignerPayer = generatedSignerPayer;
SignerPlugins.keypairIdentity = keypairIdentity;
SignerPlugins.keypairPayer = keypairPayer;
SignerPlugins.signerIdentity = signerIdentity;
SignerPlugins.signerPayer = signerPayer;

var TransactionBuilder$2 = {};

Object.defineProperty(TransactionBuilder$2, '__esModule', { value: true });

var Signer$1 = Signer$3;
var Transaction = Transaction$2;
var SdkError$1 = SdkError$9;

/**
 * Defines an generic object with wrapped instructions,
 * such as a {@link TransactionBuilder}.
 * @category Transactions
 */

/**
 * A builder that helps construct transactions.
 * @category Transactions
 */
let TransactionBuilder$1 = class TransactionBuilder {
  constructor(items = [], options = {}) {
    this.items = items;
    this.options = options;
  }
  empty() {
    return new TransactionBuilder([], this.options);
  }
  setItems(input) {
    return new TransactionBuilder(this.parseItems(input), this.options);
  }
  prepend(input) {
    return new TransactionBuilder([...this.parseItems(input), ...this.items], this.options);
  }
  append(input) {
    return new TransactionBuilder([...this.items, ...this.parseItems(input)], this.options);
  }
  add(input) {
    return this.append(input);
  }
  mapInstructions(fn) {
    return new TransactionBuilder(this.items.map(fn), this.options);
  }
  addRemainingAccounts(accountMeta, instructionIndex) {
    instructionIndex = instructionIndex ?? this.items.length - 1;
    const metas = Array.isArray(accountMeta) ? accountMeta : [accountMeta];
    const extraKeys = metas.map(meta => 'pubkey' in meta ? meta : {
      pubkey: meta.signer.publicKey,
      isSigner: true,
      isWritable: meta.isWritable
    });
    const extraSigners = metas.flatMap(meta => 'pubkey' in meta ? [] : [meta.signer]);
    return this.mapInstructions((wrappedInstruction, index) => {
      if (index !== instructionIndex) return wrappedInstruction;
      const keys = [...wrappedInstruction.instruction.keys, ...extraKeys];
      return {
        ...wrappedInstruction,
        instruction: {
          ...wrappedInstruction.instruction,
          keys
        },
        signers: [...wrappedInstruction.signers, ...extraSigners]
      };
    });
  }
  splitByIndex(index) {
    return [new TransactionBuilder(this.items.slice(0, index), this.options), new TransactionBuilder(this.items.slice(index), this.options)];
  }

  /**
   * Split the builder into multiple builders, such that
   * each of them should fit in a single transaction.
   *
   * This method is unsafe for several reasons:
   * - Because transactions are atomic, splitting the builder
   *   into multiple transactions may cause undesired side effects.
   *   For example, if the first transaction succeeds but the second
   *   one fails, you may end up with an inconsistent account state.
   *   This is why it is recommended to manually split your transactions
   *   such that each of them is valid on its own.
   * - It can only split the instructions of the builder. Meaning that,
   *   if the builder has a single instruction that is too big to fit in
   *   a single transaction, it will not be able to split it.
   */
  unsafeSplitByTransactionSize(context) {
    return this.items.reduce((builders, item) => {
      const lastBuilder = builders.pop();
      const lastBuilderWithItem = lastBuilder.add(item);
      if (lastBuilderWithItem.fitsInOneTransaction(context)) {
        builders.push(lastBuilderWithItem);
      } else {
        builders.push(lastBuilder);
        builders.push(lastBuilder.empty().add(item));
      }
      return builders;
    }, [this.empty()]);
  }
  setFeePayer(feePayer) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      feePayer
    });
  }
  getFeePayer(context) {
    return this.options.feePayer ?? context.payer;
  }
  setVersion(version) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      version
    });
  }
  useLegacyVersion() {
    return this.setVersion('legacy');
  }
  useV0() {
    return this.setVersion(0);
  }
  setAddressLookupTables(addressLookupTables) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      addressLookupTables
    });
  }
  getBlockhash() {
    return typeof this.options.blockhash === 'object' ? this.options.blockhash.blockhash : this.options.blockhash;
  }
  setBlockhash(blockhash) {
    return new TransactionBuilder(this.items, {
      ...this.options,
      blockhash
    });
  }
  async setLatestBlockhash(context, options = {}) {
    return this.setBlockhash(await context.rpc.getLatestBlockhash(options));
  }
  getInstructions() {
    return this.items.map(item => item.instruction);
  }
  getSigners(context) {
    return Signer$1.uniqueSigners([this.getFeePayer(context), ...this.items.flatMap(item => item.signers)]);
  }
  getBytesCreatedOnChain() {
    return this.items.reduce((sum, item) => sum + item.bytesCreatedOnChain, 0);
  }
  async getRentCreatedOnChain(context) {
    return context.rpc.getRent(this.getBytesCreatedOnChain(), {
      includesHeaderBytes: true
    });
  }
  getTransactionSize(context) {
    return context.transactions.serialize(this.setBlockhash('11111111111111111111111111111111').build(context)).length;
  }
  minimumTransactionsRequired(context) {
    return Math.ceil(this.getTransactionSize(context) / Transaction.TRANSACTION_SIZE_LIMIT);
  }
  fitsInOneTransaction(context) {
    return this.minimumTransactionsRequired(context) === 1;
  }
  build(context) {
    const blockhash = this.getBlockhash();
    if (!blockhash) {
      throw new SdkError$1.SdkError('Setting a blockhash is required to build a transaction. ' + 'Please use the `setBlockhash` or `setLatestBlockhash` methods.');
    }
    const input = {
      version: this.options.version ?? 0,
      payer: this.getFeePayer(context).publicKey,
      instructions: this.getInstructions(),
      blockhash
    };
    if (input.version === 0 && this.options.addressLookupTables) {
      input.addressLookupTables = this.options.addressLookupTables;
    }
    return context.transactions.create(input);
  }
  async buildWithLatestBlockhash(context, options = {}) {
    let builder = this;
    if (!this.options.blockhash) {
      builder = await this.setLatestBlockhash(context, options);
    }
    return builder.build(context);
  }
  async buildAndSign(context) {
    return Signer$1.signTransaction(await this.buildWithLatestBlockhash(context), this.getSigners(context));
  }
  async send(context, options = {}) {
    const transaction = await this.buildAndSign(context);
    return context.rpc.sendTransaction(transaction, options);
  }
  async confirm(context, signature, options = {}) {
    let builder = this;
    if (!this.options.blockhash) {
      builder = await this.setLatestBlockhash(context);
    }
    let strategy;
    if (options.strategy) {
      strategy = options.strategy;
    } else {
      const blockhash = typeof builder.options.blockhash === 'object' ? builder.options.blockhash : await context.rpc.getLatestBlockhash();
      strategy = options.strategy ?? {
        type: 'blockhash',
        ...blockhash
      };
    }
    return context.rpc.confirmTransaction(signature, {
      ...options,
      strategy
    });
  }
  async sendAndConfirm(context, options = {}) {
    let builder = this;
    if (!this.options.blockhash) {
      builder = await this.setLatestBlockhash(context);
    }
    const signature = await builder.send(context, options.send);
    const result = await builder.confirm(context, signature, options.confirm);
    return {
      signature,
      result
    };
  }
  parseItems(input) {
    return (Array.isArray(input) ? input : [input]).flatMap(item => 'items' in item ? item.items : [item]);
  }
};

/**
 * Creates a new transaction builder.
 * @category Transactions
 */
const transactionBuilder = (items = []) => new TransactionBuilder$1(items);

TransactionBuilder$2.TransactionBuilder = TransactionBuilder$1;
TransactionBuilder$2.transactionBuilder = transactionBuilder;

var TransactionBuilderGroup$1 = {};

Object.defineProperty(TransactionBuilderGroup$1, '__esModule', { value: true });

var Signer = Signer$3;
var TransactionBuilder = TransactionBuilder$2;
var arrays = arrays$2;

class TransactionBuilderGroup {
  constructor(builders = [], options = {}) {
    this.builders = builders;
    this.options = options;
  }
  prepend(builder) {
    const newBuilders = Array.isArray(builder) ? builder : [builder];
    return new TransactionBuilderGroup([...newBuilders, ...this.builders], this.options);
  }
  append(builder) {
    const newBuilders = Array.isArray(builder) ? builder : [builder];
    return new TransactionBuilderGroup([...this.builders, ...newBuilders], this.options);
  }
  add(builder) {
    return this.append(builder);
  }
  sequential() {
    return new TransactionBuilderGroup(this.builders, {
      ...this.options,
      parallel: false
    });
  }
  parallel() {
    return new TransactionBuilderGroup(this.builders, {
      ...this.options,
      parallel: true
    });
  }
  isParallel() {
    return this.options.parallel ?? false;
  }
  merge() {
    if (this.builders.length === 0) {
      return new TransactionBuilder.TransactionBuilder();
    }
    return this.builders.reduce((builder, next) => builder.add(next), this.builders[0].empty());
  }
  build(context) {
    return this.builders.map(builder => builder.build(context));
  }
  async setLatestBlockhash(context) {
    const hasBlockhashlessBuilder = this.builders.some(builder => !builder.options.blockhash);
    if (!hasBlockhashlessBuilder) return this;
    const blockhash = await context.rpc.getLatestBlockhash();
    return this.map(builder => builder.options.blockhash ? builder : builder.setBlockhash(blockhash));
  }
  async buildWithLatestBlockhash(context) {
    return (await this.setLatestBlockhash(context)).build(context);
  }
  async buildAndSign(context) {
    const transactions = await this.buildWithLatestBlockhash(context);
    const signers = this.builders.map(builder => builder.getSigners(context));
    return Signer.signAllTransactions(arrays.zipMap(transactions, signers, (transaction, txSigners) => ({
      transaction,
      signers: txSigners ?? []
    })));
  }
  async send(context, options = {}) {
    return this.runAll(await this.buildAndSign(context), async tx => context.rpc.sendTransaction(tx, options));
  }
  async sendAndConfirm(context, options = {}) {
    const blockhashWithExpiryBlockHeight = this.builders.find(builder => typeof builder.options.blockhash === 'object')?.options.blockhash;
    let strategy;
    if (options.confirm?.strategy) {
      strategy = options.confirm.strategy;
    } else {
      const blockhash = blockhashWithExpiryBlockHeight ?? (await context.rpc.getLatestBlockhash());
      strategy = options.confirm?.strategy ?? {
        type: 'blockhash',
        ...blockhash
      };
    }
    return this.runAll(await this.buildAndSign(context), async tx => {
      const signature = await context.rpc.sendTransaction(tx, options.send);
      const result = await context.rpc.confirmTransaction(signature, {
        ...options.confirm,
        strategy
      });
      return {
        signature,
        result
      };
    });
  }
  map(fn) {
    return new TransactionBuilderGroup(this.builders.map(fn));
  }
  filter(fn) {
    return new TransactionBuilderGroup(this.builders.filter(fn));
  }
  async runAll(array, fn) {
    if (this.isParallel()) {
      return Promise.all(array.map(fn));
    }
    return array.reduce(async (promise, ...args) => [...(await promise), await fn(...args)], Promise.resolve([]));
  }
}
function transactionBuilderGroup(builders = []) {
  return new TransactionBuilderGroup(builders);
}

TransactionBuilderGroup$1.TransactionBuilderGroup = TransactionBuilderGroup;
TransactionBuilderGroup$1.transactionBuilderGroup = transactionBuilderGroup;

var Umi = {};

Object.defineProperty(Umi, '__esModule', { value: true });

var Context = Context$1;

/**
 * Creates a Umi instance using only Null implementations of the interfaces.
 * The `use` method can then be used to install plugins and replace the
 * Null implementations with real implementations.
 *
 * @category Context and Interfaces
 */
const createUmi = () => ({
  ...Context.createNullContext(),
  use(plugin) {
    plugin.install(this);
    return this;
  }
});

Umi.createUmi = createUmi;

var InvalidBaseStringError$1 = {};

Object.defineProperty(InvalidBaseStringError$1, '__esModule', { value: true });

var SdkError = SdkError$9;

/** @category Errors */
class InvalidBaseStringError extends SdkError.SdkError {
  name = 'InvalidBaseStringError';
  constructor(value, base, cause) {
    const message = `Expected a string of base ${base}, got [${value}].`;
    super(message, cause);
  }
}

InvalidBaseStringError$1.InvalidBaseStringError = InvalidBaseStringError;

var ProgramError$1 = {};

Object.defineProperty(ProgramError$1, '__esModule', { value: true });

var UmiError = UmiError$3;

/** @category Errors */

/** @category Errors */
class ProgramError extends UmiError.UmiError {
  name = 'ProgramError';
  constructor(message, program, cause) {
    super(message, 'program', `${program.name} [${program.publicKey}]`, cause);
    this.program = program;
    this.logs = cause?.logs;
    if (this.logs) {
      this.message += `\nProgram Logs:\n${this.logs.map(log => `| ${log}`).join('\n')}\n`;
    }
  }
}

ProgramError$1.ProgramError = ProgramError;

(function (exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	var umiOptions = cjs$5;
	var umiPublicKeys = cjs$4;
	var serializersInternal$1 = serializersInternal;
	var Account$1 = Account;
	var Amount$1 = Amount;
	var BigInt = BigInt$2;
	var Cluster$1 = Cluster;
	var Context = Context$1;
	var DateTime$1 = DateTime;
	var DownloaderInterface = DownloaderInterface$1;
	var EddsaInterface = EddsaInterface$1;
	var GenericFile$1 = GenericFile;
	var GpaBuilder = GpaBuilder$1;
	var HttpInterface = HttpInterface$1;
	var HttpRequest$1 = HttpRequest;
	var Keypair = Keypair$1;
	var Program$1 = Program;
	var ProgramRepositoryInterface = ProgramRepositoryInterface$1;
	var RpcInterface = RpcInterface$1;
	var SerializerInterface = SerializerInterface$1;
	var Signer = Signer$3;
	var SignerPlugins$1 = SignerPlugins;
	var Transaction = Transaction$2;
	var TransactionBuilder = TransactionBuilder$2;
	var TransactionBuilderGroup = TransactionBuilderGroup$1;
	var TransactionFactoryInterface = TransactionFactoryInterface$1;
	var Umi$1 = Umi;
	var UploaderInterface = UploaderInterface$1;
	var AccountNotFoundError = AccountNotFoundError$2;
	var AmountMismatchError = AmountMismatchError$2;
	var InterfaceImplementationMissingError = InterfaceImplementationMissingError$9;
	var InvalidBaseStringError = InvalidBaseStringError$1;
	var ProgramError = ProgramError$1;
	var SdkError = SdkError$9;
	var UmiError = UmiError$3;
	var UnexpectedAccountError = UnexpectedAccountError$2;
	var UnexpectedAmountError = UnexpectedAmountError$2;
	var arrays = arrays$2;
	var randomStrings = randomStrings$1;



	exports.Endian = serializersInternal$1.Endian;
	exports.base10 = serializersInternal$1.base10;
	exports.base16 = serializersInternal$1.base16;
	exports.base58 = serializersInternal$1.base58;
	exports.base64 = serializersInternal$1.base64;
	exports.baseX = serializersInternal$1.baseX;
	exports.bitArray = serializersInternal$1.bitArray;
	exports.fixBytes = serializersInternal$1.fixBytes;
	exports.fixSerializer = serializersInternal$1.fixSerializer;
	exports.mapSerializer = serializersInternal$1.mapSerializer;
	exports.mergeBytes = serializersInternal$1.mergeBytes;
	exports.padBytes = serializersInternal$1.padBytes;
	exports.padNullCharacters = serializersInternal$1.padNullCharacters;
	exports.removeNullCharacters = serializersInternal$1.removeNullCharacters;
	exports.reverseSerializer = serializersInternal$1.reverseSerializer;
	exports.utf8 = serializersInternal$1.utf8;
	exports.ACCOUNT_HEADER_SIZE = Account$1.ACCOUNT_HEADER_SIZE;
	exports.assertAccountExists = Account$1.assertAccountExists;
	exports.deserializeAccount = Account$1.deserializeAccount;
	exports.absoluteAmount = Amount$1.absoluteAmount;
	exports.addAmounts = Amount$1.addAmounts;
	exports.amountToNumber = Amount$1.amountToNumber;
	exports.amountToString = Amount$1.amountToString;
	exports.assertAmount = Amount$1.assertAmount;
	exports.assertSameAmounts = Amount$1.assertSameAmounts;
	exports.assertSolAmount = Amount$1.assertSolAmount;
	exports.compareAmounts = Amount$1.compareAmounts;
	exports.createAmount = Amount$1.createAmount;
	exports.createAmountFromDecimals = Amount$1.createAmountFromDecimals;
	exports.displayAmount = Amount$1.displayAmount;
	exports.divideAmount = Amount$1.divideAmount;
	exports.isAmount = Amount$1.isAmount;
	exports.isEqualToAmount = Amount$1.isEqualToAmount;
	exports.isGreaterThanAmount = Amount$1.isGreaterThanAmount;
	exports.isGreaterThanOrEqualToAmount = Amount$1.isGreaterThanOrEqualToAmount;
	exports.isLessThanAmount = Amount$1.isLessThanAmount;
	exports.isLessThanOrEqualToAmount = Amount$1.isLessThanOrEqualToAmount;
	exports.isNegativeAmount = Amount$1.isNegativeAmount;
	exports.isPositiveAmount = Amount$1.isPositiveAmount;
	exports.isSolAmount = Amount$1.isSolAmount;
	exports.isZeroAmount = Amount$1.isZeroAmount;
	exports.lamports = Amount$1.lamports;
	exports.mapAmountSerializer = Amount$1.mapAmountSerializer;
	exports.multiplyAmount = Amount$1.multiplyAmount;
	exports.percentAmount = Amount$1.percentAmount;
	exports.sameAmounts = Amount$1.sameAmounts;
	exports.sol = Amount$1.sol;
	exports.subtractAmounts = Amount$1.subtractAmounts;
	exports.tokenAmount = Amount$1.tokenAmount;
	exports.usd = Amount$1.usd;
	exports.createBigInt = BigInt.createBigInt;
	exports.resolveClusterFromEndpoint = Cluster$1.resolveClusterFromEndpoint;
	exports.createNullContext = Context.createNullContext;
	exports.dateTime = DateTime$1.dateTime;
	exports.formatDateTime = DateTime$1.formatDateTime;
	exports.mapDateTimeSerializer = DateTime$1.mapDateTimeSerializer;
	exports.now = DateTime$1.now;
	exports.createNullDownloader = DownloaderInterface.createNullDownloader;
	exports.createNullEddsa = EddsaInterface.createNullEddsa;
	exports.createBrowserFileFromGenericFile = GenericFile$1.createBrowserFileFromGenericFile;
	exports.createGenericFile = GenericFile$1.createGenericFile;
	exports.createGenericFileFromBrowserFile = GenericFile$1.createGenericFileFromBrowserFile;
	exports.createGenericFileFromJson = GenericFile$1.createGenericFileFromJson;
	exports.getBytesFromGenericFiles = GenericFile$1.getBytesFromGenericFiles;
	exports.isGenericFile = GenericFile$1.isGenericFile;
	exports.parseJsonFromGenericFile = GenericFile$1.parseJsonFromGenericFile;
	exports.GpaBuilder = GpaBuilder.GpaBuilder;
	exports.gpaBuilder = GpaBuilder.gpaBuilder;
	exports.createNullHttp = HttpInterface.createNullHttp;
	exports.HttpRequestBuilder = HttpRequest$1.HttpRequestBuilder;
	exports.request = HttpRequest$1.request;
	exports.createSignerFromKeypair = Keypair.createSignerFromKeypair;
	exports.generateSigner = Keypair.generateSigner;
	exports.isKeypairSigner = Keypair.isKeypairSigner;
	exports.isErrorWithLogs = Program$1.isErrorWithLogs;
	exports.createNullProgramRepository = ProgramRepositoryInterface.createNullProgramRepository;
	exports.createNullRpc = RpcInterface.createNullRpc;
	exports.createNullSerializer = SerializerInterface.createNullSerializer;
	exports.createNoopSigner = Signer.createNoopSigner;
	exports.createNullSigner = Signer.createNullSigner;
	exports.isSigner = Signer.isSigner;
	exports.signAllTransactions = Signer.signAllTransactions;
	exports.signTransaction = Signer.signTransaction;
	exports.uniqueSigners = Signer.uniqueSigners;
	exports.generatedSignerIdentity = SignerPlugins$1.generatedSignerIdentity;
	exports.generatedSignerPayer = SignerPlugins$1.generatedSignerPayer;
	exports.keypairIdentity = SignerPlugins$1.keypairIdentity;
	exports.keypairPayer = SignerPlugins$1.keypairPayer;
	exports.signerIdentity = SignerPlugins$1.signerIdentity;
	exports.signerPayer = SignerPlugins$1.signerPayer;
	exports.TRANSACTION_SIZE_LIMIT = Transaction.TRANSACTION_SIZE_LIMIT;
	exports.addTransactionSignature = Transaction.addTransactionSignature;
	exports.TransactionBuilder = TransactionBuilder.TransactionBuilder;
	exports.transactionBuilder = TransactionBuilder.transactionBuilder;
	exports.TransactionBuilderGroup = TransactionBuilderGroup.TransactionBuilderGroup;
	exports.transactionBuilderGroup = TransactionBuilderGroup.transactionBuilderGroup;
	exports.createNullTransactionFactory = TransactionFactoryInterface.createNullTransactionFactory;
	exports.createUmi = Umi$1.createUmi;
	exports.createNullUploader = UploaderInterface.createNullUploader;
	exports.AccountNotFoundError = AccountNotFoundError.AccountNotFoundError;
	exports.AmountMismatchError = AmountMismatchError.AmountMismatchError;
	exports.InterfaceImplementationMissingError = InterfaceImplementationMissingError.InterfaceImplementationMissingError;
	exports.InvalidBaseStringError = InvalidBaseStringError.InvalidBaseStringError;
	exports.ProgramError = ProgramError.ProgramError;
	exports.SdkError = SdkError.SdkError;
	exports.UmiError = UmiError.UmiError;
	exports.UnexpectedAccountError = UnexpectedAccountError.UnexpectedAccountError;
	exports.UnexpectedAmountError = UnexpectedAmountError.UnexpectedAmountError;
	exports.chunk = arrays.chunk;
	exports.uniqueBy = arrays.uniqueBy;
	exports.zipMap = arrays.zipMap;
	exports.generateRandomString = randomStrings.generateRandomString;
	Object.keys(umiOptions).forEach(function (k) {
		if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
			enumerable: true,
			get: function () { return umiOptions[k]; }
		});
	});
	Object.keys(umiPublicKeys).forEach(function (k) {
		if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
			enumerable: true,
			get: function () { return umiPublicKeys[k]; }
		});
	});
	
} (cjs$6));

var serializers = {};

(function (exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	var umiSerializers = cjs$1;



	Object.keys(umiSerializers).forEach(function (k) {
		if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
			enumerable: true,
			get: function () { return umiSerializers[k]; }
		});
	});
	
} (serializers));

var types$6 = {};

var authorityType$1 = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getAuthorityTypeSerializer = exports.AuthorityType = void 0;
	const serializers_1 = serializers;
	var AuthorityType;
	(function (AuthorityType) {
	    AuthorityType[AuthorityType["None"] = 0] = "None";
	    AuthorityType[AuthorityType["Metadata"] = 1] = "Metadata";
	    AuthorityType[AuthorityType["Holder"] = 2] = "Holder";
	    AuthorityType[AuthorityType["MetadataDelegate"] = 3] = "MetadataDelegate";
	    AuthorityType[AuthorityType["TokenDelegate"] = 4] = "TokenDelegate";
	})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));
	function getAuthorityTypeSerializer() {
	    return (0, serializers_1.scalarEnum)(AuthorityType, {
	        description: 'AuthorityType',
	    });
	}
	exports.getAuthorityTypeSerializer = getAuthorityTypeSerializer;
	
} (authorityType$1));

var authorizationData = {};

var hasRequiredAuthorizationData;

function requireAuthorizationData () {
	if (hasRequiredAuthorizationData) return authorizationData;
	hasRequiredAuthorizationData = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(authorizationData, "__esModule", { value: true });
	authorizationData.getAuthorizationDataSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getAuthorizationDataSerializer() {
	    return (0, serializers_1.struct)([['payload', (0, _1.getPayloadSerializer)()]], {
	        description: 'AuthorizationData',
	    });
	}
	authorizationData.getAuthorizationDataSerializer = getAuthorizationDataSerializer;
	
	return authorizationData;
}

var burnArgs$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(burnArgs$1, "__esModule", { value: true });
burnArgs$1.isBurnArgs = burnArgs$1.burnArgs = burnArgs$1.getBurnArgsSerializer = void 0;
const serializers_1$1s = serializers;
function getBurnArgsSerializer() {
    return (0, serializers_1$1s.dataEnum)([
        [
            'V1',
            (0, serializers_1$1s.mapSerializer)((0, serializers_1$1s.struct)([['amount', (0, serializers_1$1s.u64)()]]), (value) => ({ ...value, amount: value.amount ?? 1 })),
        ],
    ], { description: 'BurnArgs' });
}
burnArgs$1.getBurnArgsSerializer = getBurnArgsSerializer;
function burnArgs(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
burnArgs$1.burnArgs = burnArgs;
function isBurnArgs(kind, value) {
    return value.__kind === kind;
}
burnArgs$1.isBurnArgs = isBurnArgs;

var collection = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(collection, "__esModule", { value: true });
collection.getCollectionSerializer = void 0;
const serializers_1$1r = serializers;
function getCollectionSerializer() {
    return (0, serializers_1$1r.struct)([
        ['verified', (0, serializers_1$1r.bool)()],
        ['key', (0, serializers_1$1r.publicKey)()],
    ], { description: 'Collection' });
}
collection.getCollectionSerializer = getCollectionSerializer;

var collectionDetails$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(collectionDetails$1, "__esModule", { value: true });
collectionDetails$1.isCollectionDetails = collectionDetails$1.collectionDetails = collectionDetails$1.getCollectionDetailsSerializer = void 0;
const serializers_1$1q = serializers;
function getCollectionDetailsSerializer() {
    return (0, serializers_1$1q.dataEnum)([
        [
            'V1',
            (0, serializers_1$1q.struct)([
                ['size', (0, serializers_1$1q.u64)()],
            ]),
        ],
        [
            'V2',
            (0, serializers_1$1q.struct)([
                ['padding', (0, serializers_1$1q.array)((0, serializers_1$1q.u8)(), { size: 8 })],
            ]),
        ],
    ], { description: 'CollectionDetails' });
}
collectionDetails$1.getCollectionDetailsSerializer = getCollectionDetailsSerializer;
function collectionDetails(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
collectionDetails$1.collectionDetails = collectionDetails;
function isCollectionDetails(kind, value) {
    return value.__kind === kind;
}
collectionDetails$1.isCollectionDetails = isCollectionDetails;

var collectionDetailsToggle = {};

var hasRequiredCollectionDetailsToggle;

function requireCollectionDetailsToggle () {
	if (hasRequiredCollectionDetailsToggle) return collectionDetailsToggle;
	hasRequiredCollectionDetailsToggle = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(collectionDetailsToggle, "__esModule", { value: true });
	collectionDetailsToggle.isCollectionDetailsToggle = collectionDetailsToggle.collectionDetailsToggle = collectionDetailsToggle.getCollectionDetailsToggleSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getCollectionDetailsToggleSerializer() {
	    return (0, serializers_1.dataEnum)([
	        ['None', (0, serializers_1.unit)()],
	        ['Clear', (0, serializers_1.unit)()],
	        [
	            'Set',
	            (0, serializers_1.struct)([
	                ['fields', (0, serializers_1.tuple)([(0, _1.getCollectionDetailsSerializer)()])],
	            ]),
	        ],
	    ], { description: 'CollectionDetailsToggle' });
	}
	collectionDetailsToggle.getCollectionDetailsToggleSerializer = getCollectionDetailsToggleSerializer;
	function collectionDetailsToggle$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	collectionDetailsToggle.collectionDetailsToggle = collectionDetailsToggle$1;
	function isCollectionDetailsToggle(kind, value) {
	    return value.__kind === kind;
	}
	collectionDetailsToggle.isCollectionDetailsToggle = isCollectionDetailsToggle;
	
	return collectionDetailsToggle;
}

var collectionToggle = {};

var hasRequiredCollectionToggle;

function requireCollectionToggle () {
	if (hasRequiredCollectionToggle) return collectionToggle;
	hasRequiredCollectionToggle = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(collectionToggle, "__esModule", { value: true });
	collectionToggle.isCollectionToggle = collectionToggle.collectionToggle = collectionToggle.getCollectionToggleSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getCollectionToggleSerializer() {
	    return (0, serializers_1.dataEnum)([
	        ['None', (0, serializers_1.unit)()],
	        ['Clear', (0, serializers_1.unit)()],
	        [
	            'Set',
	            (0, serializers_1.struct)([
	                ['fields', (0, serializers_1.tuple)([(0, _1.getCollectionSerializer)()])],
	            ]),
	        ],
	    ], { description: 'CollectionToggle' });
	}
	collectionToggle.getCollectionToggleSerializer = getCollectionToggleSerializer;
	function collectionToggle$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	collectionToggle.collectionToggle = collectionToggle$1;
	function isCollectionToggle(kind, value) {
	    return value.__kind === kind;
	}
	collectionToggle.isCollectionToggle = isCollectionToggle;
	
	return collectionToggle;
}

var createArgs = {};

var hasRequiredCreateArgs;

function requireCreateArgs () {
	if (hasRequiredCreateArgs) return createArgs;
	hasRequiredCreateArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(createArgs, "__esModule", { value: true });
	createArgs.isCreateArgs = createArgs.createArgs = createArgs.getCreateArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getCreateArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'V1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['name', (0, serializers_1.string)()],
	                ['symbol', (0, serializers_1.string)()],
	                ['uri', (0, serializers_1.string)()],
	                ['sellerFeeBasisPoints', (0, umi_1.mapAmountSerializer)((0, serializers_1.u16)(), '%', 2)],
	                ['creators', (0, serializers_1.option)((0, serializers_1.array)((0, _1.getCreatorSerializer)()))],
	                ['primarySaleHappened', (0, serializers_1.bool)()],
	                ['isMutable', (0, serializers_1.bool)()],
	                ['tokenStandard', (0, _1.getTokenStandardSerializer)()],
	                ['collection', (0, serializers_1.option)((0, _1.getCollectionSerializer)())],
	                ['uses', (0, serializers_1.option)((0, _1.getUsesSerializer)())],
	                ['collectionDetails', (0, serializers_1.option)((0, _1.getCollectionDetailsSerializer)())],
	                ['ruleSet', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	                ['decimals', (0, serializers_1.option)((0, serializers_1.u8)())],
	                ['printSupply', (0, serializers_1.option)((0, _1.getPrintSupplySerializer)())],
	            ]), (value) => ({
	                ...value,
	                symbol: value.symbol ?? '',
	                primarySaleHappened: value.primarySaleHappened ?? false,
	                isMutable: value.isMutable ?? true,
	                collection: value.collection ?? (0, umi_1.none)(),
	                uses: value.uses ?? (0, umi_1.none)(),
	                collectionDetails: value.collectionDetails ?? (0, umi_1.none)(),
	                ruleSet: value.ruleSet ?? (0, umi_1.none)(),
	                decimals: value.decimals ?? (0, umi_1.none)(),
	                printSupply: value.printSupply ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'CreateArgs' });
	}
	createArgs.getCreateArgsSerializer = getCreateArgsSerializer;
	function createArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	createArgs.createArgs = createArgs$1;
	function isCreateArgs(kind, value) {
	    return value.__kind === kind;
	}
	createArgs.isCreateArgs = isCreateArgs;
	
	return createArgs;
}

var creator = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(creator, "__esModule", { value: true });
creator.getCreatorSerializer = void 0;
const serializers_1$1p = serializers;
function getCreatorSerializer() {
    return (0, serializers_1$1p.struct)([
        ['address', (0, serializers_1$1p.publicKey)()],
        ['verified', (0, serializers_1$1p.bool)()],
        ['share', (0, serializers_1$1p.u8)()],
    ], { description: 'Creator' });
}
creator.getCreatorSerializer = getCreatorSerializer;

var data = {};

var hasRequiredData;

function requireData () {
	if (hasRequiredData) return data;
	hasRequiredData = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(data, "__esModule", { value: true });
	data.getDataSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getDataSerializer() {
	    return (0, serializers_1.struct)([
	        ['name', (0, serializers_1.string)()],
	        ['symbol', (0, serializers_1.string)()],
	        ['uri', (0, serializers_1.string)()],
	        ['sellerFeeBasisPoints', (0, serializers_1.u16)()],
	        ['creators', (0, serializers_1.option)((0, serializers_1.array)((0, _1.getCreatorSerializer)()))],
	    ], { description: 'Data' });
	}
	data.getDataSerializer = getDataSerializer;
	
	return data;
}

var dataV2 = {};

var hasRequiredDataV2;

function requireDataV2 () {
	if (hasRequiredDataV2) return dataV2;
	hasRequiredDataV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(dataV2, "__esModule", { value: true });
	dataV2.getDataV2Serializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getDataV2Serializer() {
	    return (0, serializers_1.struct)([
	        ['name', (0, serializers_1.string)()],
	        ['symbol', (0, serializers_1.string)()],
	        ['uri', (0, serializers_1.string)()],
	        ['sellerFeeBasisPoints', (0, serializers_1.u16)()],
	        ['creators', (0, serializers_1.option)((0, serializers_1.array)((0, _1.getCreatorSerializer)()))],
	        ['collection', (0, serializers_1.option)((0, _1.getCollectionSerializer)())],
	        ['uses', (0, serializers_1.option)((0, _1.getUsesSerializer)())],
	    ], { description: 'DataV2' });
	}
	dataV2.getDataV2Serializer = getDataV2Serializer;
	
	return dataV2;
}

var delegateArgs = {};

var hasRequiredDelegateArgs;

function requireDelegateArgs () {
	if (hasRequiredDelegateArgs) return delegateArgs;
	hasRequiredDelegateArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateArgs, "__esModule", { value: true });
	delegateArgs.isDelegateArgs = delegateArgs.delegateArgs = delegateArgs.getDelegateArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getDelegateArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'CollectionV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'SaleV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                amount: value.amount ?? 1,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'TransferV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                amount: value.amount ?? 1,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'DataV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'UtilityV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                amount: value.amount ?? 1,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'StakingV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                amount: value.amount ?? 1,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'StandardV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	            ]), (value) => ({ ...value, amount: value.amount ?? 1 })),
	        ],
	        [
	            'LockedTransferV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	                ['lockedAddress', (0, serializers_1.publicKey)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                amount: value.amount ?? 1,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'ProgrammableConfigV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AuthorityItemV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'DataItemV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'CollectionItemV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'ProgrammableConfigItemV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())]]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'PrintDelegateV1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'DelegateArgs' });
	}
	delegateArgs.getDelegateArgsSerializer = getDelegateArgsSerializer;
	function delegateArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	delegateArgs.delegateArgs = delegateArgs$1;
	function isDelegateArgs(kind, value) {
	    return value.__kind === kind;
	}
	delegateArgs.isDelegateArgs = isDelegateArgs;
	
	return delegateArgs;
}

var escrowAuthority$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(escrowAuthority$1, "__esModule", { value: true });
escrowAuthority$1.isEscrowAuthority = escrowAuthority$1.escrowAuthority = escrowAuthority$1.getEscrowAuthoritySerializer = void 0;
const serializers_1$1o = serializers;
function getEscrowAuthoritySerializer() {
    return (0, serializers_1$1o.dataEnum)([
        ['TokenOwner', (0, serializers_1$1o.unit)()],
        [
            'Creator',
            (0, serializers_1$1o.struct)([
                ['fields', (0, serializers_1$1o.tuple)([(0, serializers_1$1o.publicKey)()])],
            ]),
        ],
    ], { description: 'EscrowAuthority' });
}
escrowAuthority$1.getEscrowAuthoritySerializer = getEscrowAuthoritySerializer;
function escrowAuthority(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
escrowAuthority$1.escrowAuthority = escrowAuthority;
function isEscrowAuthority(kind, value) {
    return value.__kind === kind;
}
escrowAuthority$1.isEscrowAuthority = isEscrowAuthority;

var holderDelegateRole = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getHolderDelegateRoleSerializer = exports.HolderDelegateRole = void 0;
	const serializers_1 = serializers;
	var HolderDelegateRole;
	(function (HolderDelegateRole) {
	    HolderDelegateRole[HolderDelegateRole["PrintDelegate"] = 0] = "PrintDelegate";
	})(HolderDelegateRole = exports.HolderDelegateRole || (exports.HolderDelegateRole = {}));
	function getHolderDelegateRoleSerializer() {
	    return (0, serializers_1.scalarEnum)(HolderDelegateRole, {
	        description: 'HolderDelegateRole',
	    });
	}
	exports.getHolderDelegateRoleSerializer = getHolderDelegateRoleSerializer;
	
} (holderDelegateRole));

var key = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getKeySerializer = exports.Key = void 0;
	const serializers_1 = serializers;
	var Key;
	(function (Key) {
	    Key[Key["Uninitialized"] = 0] = "Uninitialized";
	    Key[Key["EditionV1"] = 1] = "EditionV1";
	    Key[Key["MasterEditionV1"] = 2] = "MasterEditionV1";
	    Key[Key["ReservationListV1"] = 3] = "ReservationListV1";
	    Key[Key["MetadataV1"] = 4] = "MetadataV1";
	    Key[Key["ReservationListV2"] = 5] = "ReservationListV2";
	    Key[Key["MasterEditionV2"] = 6] = "MasterEditionV2";
	    Key[Key["EditionMarker"] = 7] = "EditionMarker";
	    Key[Key["UseAuthorityRecord"] = 8] = "UseAuthorityRecord";
	    Key[Key["CollectionAuthorityRecord"] = 9] = "CollectionAuthorityRecord";
	    Key[Key["TokenOwnedEscrow"] = 10] = "TokenOwnedEscrow";
	    Key[Key["TokenRecord"] = 11] = "TokenRecord";
	    Key[Key["MetadataDelegate"] = 12] = "MetadataDelegate";
	    Key[Key["EditionMarkerV2"] = 13] = "EditionMarkerV2";
	    Key[Key["HolderDelegate"] = 14] = "HolderDelegate";
	})(Key = exports.Key || (exports.Key = {}));
	function getKeySerializer() {
	    return (0, serializers_1.scalarEnum)(Key, { description: 'Key' });
	}
	exports.getKeySerializer = getKeySerializer;
	
} (key));

var lockArgs = {};

var hasRequiredLockArgs;

function requireLockArgs () {
	if (hasRequiredLockArgs) return lockArgs;
	hasRequiredLockArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(lockArgs, "__esModule", { value: true });
	lockArgs.isLockArgs = lockArgs.lockArgs = lockArgs.getLockArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getLockArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'V1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'LockArgs' });
	}
	lockArgs.getLockArgsSerializer = getLockArgsSerializer;
	function lockArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	lockArgs.lockArgs = lockArgs$1;
	function isLockArgs(kind, value) {
	    return value.__kind === kind;
	}
	lockArgs.isLockArgs = isLockArgs;
	
	return lockArgs;
}

var metadataDelegateRole = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getMetadataDelegateRoleSerializer = exports.MetadataDelegateRole = void 0;
	const serializers_1 = serializers;
	var MetadataDelegateRole;
	(function (MetadataDelegateRole) {
	    MetadataDelegateRole[MetadataDelegateRole["AuthorityItem"] = 0] = "AuthorityItem";
	    MetadataDelegateRole[MetadataDelegateRole["Collection"] = 1] = "Collection";
	    MetadataDelegateRole[MetadataDelegateRole["Use"] = 2] = "Use";
	    MetadataDelegateRole[MetadataDelegateRole["Data"] = 3] = "Data";
	    MetadataDelegateRole[MetadataDelegateRole["ProgrammableConfig"] = 4] = "ProgrammableConfig";
	    MetadataDelegateRole[MetadataDelegateRole["DataItem"] = 5] = "DataItem";
	    MetadataDelegateRole[MetadataDelegateRole["CollectionItem"] = 6] = "CollectionItem";
	    MetadataDelegateRole[MetadataDelegateRole["ProgrammableConfigItem"] = 7] = "ProgrammableConfigItem";
	})(MetadataDelegateRole = exports.MetadataDelegateRole || (exports.MetadataDelegateRole = {}));
	function getMetadataDelegateRoleSerializer() {
	    return (0, serializers_1.scalarEnum)(MetadataDelegateRole, {
	        description: 'MetadataDelegateRole',
	    });
	}
	exports.getMetadataDelegateRoleSerializer = getMetadataDelegateRoleSerializer;
	
} (metadataDelegateRole));

var migrationType = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getMigrationTypeSerializer = exports.MigrationType = void 0;
	const serializers_1 = serializers;
	var MigrationType;
	(function (MigrationType) {
	    MigrationType[MigrationType["CollectionV1"] = 0] = "CollectionV1";
	    MigrationType[MigrationType["ProgrammableV1"] = 1] = "ProgrammableV1";
	})(MigrationType = exports.MigrationType || (exports.MigrationType = {}));
	function getMigrationTypeSerializer() {
	    return (0, serializers_1.scalarEnum)(MigrationType, {
	        description: 'MigrationType',
	    });
	}
	exports.getMigrationTypeSerializer = getMigrationTypeSerializer;
	
} (migrationType));

var mintArgs = {};

var hasRequiredMintArgs;

function requireMintArgs () {
	if (hasRequiredMintArgs) return mintArgs;
	hasRequiredMintArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(mintArgs, "__esModule", { value: true });
	mintArgs.isMintArgs = mintArgs.mintArgs = mintArgs.getMintArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getMintArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'V1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                amount: value.amount ?? 1,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'MintArgs' });
	}
	mintArgs.getMintArgsSerializer = getMintArgsSerializer;
	function mintArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	mintArgs.mintArgs = mintArgs$1;
	function isMintArgs(kind, value) {
	    return value.__kind === kind;
	}
	mintArgs.isMintArgs = isMintArgs;
	
	return mintArgs;
}

var mintNewEditionFromMasterEditionViaTokenArgs = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mintNewEditionFromMasterEditionViaTokenArgs, "__esModule", { value: true });
mintNewEditionFromMasterEditionViaTokenArgs.getMintNewEditionFromMasterEditionViaTokenArgsSerializer = void 0;
const serializers_1$1n = serializers;
function getMintNewEditionFromMasterEditionViaTokenArgsSerializer() {
    return (0, serializers_1$1n.struct)([['edition', (0, serializers_1$1n.u64)()]], { description: 'MintNewEditionFromMasterEditionViaTokenArgs' });
}
mintNewEditionFromMasterEditionViaTokenArgs.getMintNewEditionFromMasterEditionViaTokenArgsSerializer = getMintNewEditionFromMasterEditionViaTokenArgsSerializer;

var payload = {};

var hasRequiredPayload;

function requirePayload () {
	if (hasRequiredPayload) return payload;
	hasRequiredPayload = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(payload, "__esModule", { value: true });
	payload.getPayloadSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getPayloadSerializer() {
	    return (0, serializers_1.struct)([['map', (0, serializers_1.map)((0, serializers_1.string)(), (0, _1.getPayloadTypeSerializer)())]], {
	        description: 'Payload',
	    });
	}
	payload.getPayloadSerializer = getPayloadSerializer;
	
	return payload;
}

var payloadKey = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getPayloadKeySerializer = exports.PayloadKey = void 0;
	const serializers_1 = serializers;
	var PayloadKey;
	(function (PayloadKey) {
	    PayloadKey[PayloadKey["Amount"] = 0] = "Amount";
	    PayloadKey[PayloadKey["Authority"] = 1] = "Authority";
	    PayloadKey[PayloadKey["AuthoritySeeds"] = 2] = "AuthoritySeeds";
	    PayloadKey[PayloadKey["Delegate"] = 3] = "Delegate";
	    PayloadKey[PayloadKey["DelegateSeeds"] = 4] = "DelegateSeeds";
	    PayloadKey[PayloadKey["Destination"] = 5] = "Destination";
	    PayloadKey[PayloadKey["DestinationSeeds"] = 6] = "DestinationSeeds";
	    PayloadKey[PayloadKey["Holder"] = 7] = "Holder";
	    PayloadKey[PayloadKey["Source"] = 8] = "Source";
	    PayloadKey[PayloadKey["SourceSeeds"] = 9] = "SourceSeeds";
	})(PayloadKey = exports.PayloadKey || (exports.PayloadKey = {}));
	function getPayloadKeySerializer() {
	    return (0, serializers_1.scalarEnum)(PayloadKey, {
	        description: 'PayloadKey',
	    });
	}
	exports.getPayloadKeySerializer = getPayloadKeySerializer;
	
} (payloadKey));

var payloadType = {};

var hasRequiredPayloadType;

function requirePayloadType () {
	if (hasRequiredPayloadType) return payloadType;
	hasRequiredPayloadType = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(payloadType, "__esModule", { value: true });
	payloadType.isPayloadType = payloadType.payloadType = payloadType.getPayloadTypeSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getPayloadTypeSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'Pubkey',
	            (0, serializers_1.struct)([
	                ['fields', (0, serializers_1.tuple)([(0, serializers_1.publicKey)()])],
	            ]),
	        ],
	        [
	            'Seeds',
	            (0, serializers_1.struct)([
	                ['fields', (0, serializers_1.tuple)([(0, _1.getSeedsVecSerializer)()])],
	            ]),
	        ],
	        [
	            'MerkleProof',
	            (0, serializers_1.struct)([
	                ['fields', (0, serializers_1.tuple)([(0, _1.getProofInfoSerializer)()])],
	            ]),
	        ],
	        [
	            'Number',
	            (0, serializers_1.struct)([
	                ['fields', (0, serializers_1.tuple)([(0, serializers_1.u64)()])],
	            ]),
	        ],
	    ], { description: 'PayloadType' });
	}
	payloadType.getPayloadTypeSerializer = getPayloadTypeSerializer;
	function payloadType$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	payloadType.payloadType = payloadType$1;
	function isPayloadType(kind, value) {
	    return value.__kind === kind;
	}
	payloadType.isPayloadType = isPayloadType;
	
	return payloadType;
}

var printArgs$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(printArgs$1, "__esModule", { value: true });
printArgs$1.isPrintArgs = printArgs$1.printArgs = printArgs$1.getPrintArgsSerializer = void 0;
const serializers_1$1m = serializers;
function getPrintArgsSerializer() {
    return (0, serializers_1$1m.dataEnum)([
        [
            'V1',
            (0, serializers_1$1m.struct)([['edition', (0, serializers_1$1m.u64)()]]),
        ],
        [
            'V2',
            (0, serializers_1$1m.struct)([['edition', (0, serializers_1$1m.u64)()]]),
        ],
    ], { description: 'PrintArgs' });
}
printArgs$1.getPrintArgsSerializer = getPrintArgsSerializer;
function printArgs(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
printArgs$1.printArgs = printArgs;
function isPrintArgs(kind, value) {
    return value.__kind === kind;
}
printArgs$1.isPrintArgs = isPrintArgs;

var printSupply$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(printSupply$1, "__esModule", { value: true });
printSupply$1.isPrintSupply = printSupply$1.printSupply = printSupply$1.getPrintSupplySerializer = void 0;
const serializers_1$1l = serializers;
function getPrintSupplySerializer() {
    return (0, serializers_1$1l.dataEnum)([
        ['Zero', (0, serializers_1$1l.unit)()],
        [
            'Limited',
            (0, serializers_1$1l.struct)([
                ['fields', (0, serializers_1$1l.tuple)([(0, serializers_1$1l.u64)()])],
            ]),
        ],
        ['Unlimited', (0, serializers_1$1l.unit)()],
    ], { description: 'PrintSupply' });
}
printSupply$1.getPrintSupplySerializer = getPrintSupplySerializer;
function printSupply(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
printSupply$1.printSupply = printSupply;
function isPrintSupply(kind, value) {
    return value.__kind === kind;
}
printSupply$1.isPrintSupply = isPrintSupply;

var programmableConfig$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(programmableConfig$1, "__esModule", { value: true });
programmableConfig$1.isProgrammableConfig = programmableConfig$1.programmableConfig = programmableConfig$1.getProgrammableConfigSerializer = void 0;
const serializers_1$1k = serializers;
function getProgrammableConfigSerializer() {
    return (0, serializers_1$1k.dataEnum)([
        [
            'V1',
            (0, serializers_1$1k.struct)([
                ['ruleSet', (0, serializers_1$1k.option)((0, serializers_1$1k.publicKey)())],
            ]),
        ],
    ], { description: 'ProgrammableConfig' });
}
programmableConfig$1.getProgrammableConfigSerializer = getProgrammableConfigSerializer;
function programmableConfig(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
programmableConfig$1.programmableConfig = programmableConfig;
function isProgrammableConfig(kind, value) {
    return value.__kind === kind;
}
programmableConfig$1.isProgrammableConfig = isProgrammableConfig;

var proofInfo = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(proofInfo, "__esModule", { value: true });
proofInfo.getProofInfoSerializer = void 0;
const serializers_1$1j = serializers;
function getProofInfoSerializer() {
    return (0, serializers_1$1j.struct)([['proof', (0, serializers_1$1j.array)((0, serializers_1$1j.bytes)({ size: 32 }))]], {
        description: 'ProofInfo',
    });
}
proofInfo.getProofInfoSerializer = getProofInfoSerializer;

var reservation = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(reservation, "__esModule", { value: true });
reservation.getReservationSerializer = void 0;
const serializers_1$1i = serializers;
function getReservationSerializer() {
    return (0, serializers_1$1i.struct)([
        ['address', (0, serializers_1$1i.publicKey)()],
        ['spotsRemaining', (0, serializers_1$1i.u64)()],
        ['totalSpots', (0, serializers_1$1i.u64)()],
    ], { description: 'Reservation' });
}
reservation.getReservationSerializer = getReservationSerializer;

var reservationV1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(reservationV1, "__esModule", { value: true });
reservationV1.getReservationV1Serializer = void 0;
const serializers_1$1h = serializers;
function getReservationV1Serializer() {
    return (0, serializers_1$1h.struct)([
        ['address', (0, serializers_1$1h.publicKey)()],
        ['spotsRemaining', (0, serializers_1$1h.u8)()],
        ['totalSpots', (0, serializers_1$1h.u8)()],
    ], { description: 'ReservationV1' });
}
reservationV1.getReservationV1Serializer = getReservationV1Serializer;

var revokeArgs = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getRevokeArgsSerializer = exports.RevokeArgs = void 0;
	const serializers_1 = serializers;
	var RevokeArgs;
	(function (RevokeArgs) {
	    RevokeArgs[RevokeArgs["CollectionV1"] = 0] = "CollectionV1";
	    RevokeArgs[RevokeArgs["SaleV1"] = 1] = "SaleV1";
	    RevokeArgs[RevokeArgs["TransferV1"] = 2] = "TransferV1";
	    RevokeArgs[RevokeArgs["DataV1"] = 3] = "DataV1";
	    RevokeArgs[RevokeArgs["UtilityV1"] = 4] = "UtilityV1";
	    RevokeArgs[RevokeArgs["StakingV1"] = 5] = "StakingV1";
	    RevokeArgs[RevokeArgs["StandardV1"] = 6] = "StandardV1";
	    RevokeArgs[RevokeArgs["LockedTransferV1"] = 7] = "LockedTransferV1";
	    RevokeArgs[RevokeArgs["ProgrammableConfigV1"] = 8] = "ProgrammableConfigV1";
	    RevokeArgs[RevokeArgs["MigrationV1"] = 9] = "MigrationV1";
	    RevokeArgs[RevokeArgs["AuthorityItemV1"] = 10] = "AuthorityItemV1";
	    RevokeArgs[RevokeArgs["DataItemV1"] = 11] = "DataItemV1";
	    RevokeArgs[RevokeArgs["CollectionItemV1"] = 12] = "CollectionItemV1";
	    RevokeArgs[RevokeArgs["ProgrammableConfigItemV1"] = 13] = "ProgrammableConfigItemV1";
	    RevokeArgs[RevokeArgs["PrintDelegateV1"] = 14] = "PrintDelegateV1";
	})(RevokeArgs = exports.RevokeArgs || (exports.RevokeArgs = {}));
	function getRevokeArgsSerializer() {
	    return (0, serializers_1.scalarEnum)(RevokeArgs, {
	        description: 'RevokeArgs',
	    });
	}
	exports.getRevokeArgsSerializer = getRevokeArgsSerializer;
	
} (revokeArgs));

var ruleSetToggle$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(ruleSetToggle$1, "__esModule", { value: true });
ruleSetToggle$1.isRuleSetToggle = ruleSetToggle$1.ruleSetToggle = ruleSetToggle$1.getRuleSetToggleSerializer = void 0;
const serializers_1$1g = serializers;
function getRuleSetToggleSerializer() {
    return (0, serializers_1$1g.dataEnum)([
        ['None', (0, serializers_1$1g.unit)()],
        ['Clear', (0, serializers_1$1g.unit)()],
        [
            'Set',
            (0, serializers_1$1g.struct)([
                ['fields', (0, serializers_1$1g.tuple)([(0, serializers_1$1g.publicKey)()])],
            ]),
        ],
    ], { description: 'RuleSetToggle' });
}
ruleSetToggle$1.getRuleSetToggleSerializer = getRuleSetToggleSerializer;
function ruleSetToggle(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
ruleSetToggle$1.ruleSetToggle = ruleSetToggle;
function isRuleSetToggle(kind, value) {
    return value.__kind === kind;
}
ruleSetToggle$1.isRuleSetToggle = isRuleSetToggle;

var seedsVec = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(seedsVec, "__esModule", { value: true });
seedsVec.getSeedsVecSerializer = void 0;
const serializers_1$1f = serializers;
function getSeedsVecSerializer() {
    return (0, serializers_1$1f.struct)([['seeds', (0, serializers_1$1f.array)((0, serializers_1$1f.bytes)({ size: (0, serializers_1$1f.u32)() }))]], {
        description: 'SeedsVec',
    });
}
seedsVec.getSeedsVecSerializer = getSeedsVecSerializer;

var setCollectionSizeArgs = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(setCollectionSizeArgs, "__esModule", { value: true });
setCollectionSizeArgs.getSetCollectionSizeArgsSerializer = void 0;
const serializers_1$1e = serializers;
function getSetCollectionSizeArgsSerializer() {
    return (0, serializers_1$1e.struct)([['size', (0, serializers_1$1e.u64)()]], {
        description: 'SetCollectionSizeArgs',
    });
}
setCollectionSizeArgs.getSetCollectionSizeArgsSerializer = getSetCollectionSizeArgsSerializer;

var tokenDelegateRole = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getTokenDelegateRoleSerializer = exports.TokenDelegateRole = void 0;
	const serializers_1 = serializers;
	var TokenDelegateRole;
	(function (TokenDelegateRole) {
	    TokenDelegateRole[TokenDelegateRole["Sale"] = 0] = "Sale";
	    TokenDelegateRole[TokenDelegateRole["Transfer"] = 1] = "Transfer";
	    TokenDelegateRole[TokenDelegateRole["Utility"] = 2] = "Utility";
	    TokenDelegateRole[TokenDelegateRole["Staking"] = 3] = "Staking";
	    TokenDelegateRole[TokenDelegateRole["Standard"] = 4] = "Standard";
	    TokenDelegateRole[TokenDelegateRole["LockedTransfer"] = 5] = "LockedTransfer";
	    TokenDelegateRole[TokenDelegateRole["Migration"] = 6] = "Migration";
	})(TokenDelegateRole = exports.TokenDelegateRole || (exports.TokenDelegateRole = {}));
	function getTokenDelegateRoleSerializer() {
	    return (0, serializers_1.scalarEnum)(TokenDelegateRole, {
	        description: 'TokenDelegateRole',
	    });
	}
	exports.getTokenDelegateRoleSerializer = getTokenDelegateRoleSerializer;
	
} (tokenDelegateRole));

var tokenStandard = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getTokenStandardSerializer = exports.TokenStandard = void 0;
	const serializers_1 = serializers;
	var TokenStandard;
	(function (TokenStandard) {
	    TokenStandard[TokenStandard["NonFungible"] = 0] = "NonFungible";
	    TokenStandard[TokenStandard["FungibleAsset"] = 1] = "FungibleAsset";
	    TokenStandard[TokenStandard["Fungible"] = 2] = "Fungible";
	    TokenStandard[TokenStandard["NonFungibleEdition"] = 3] = "NonFungibleEdition";
	    TokenStandard[TokenStandard["ProgrammableNonFungible"] = 4] = "ProgrammableNonFungible";
	    TokenStandard[TokenStandard["ProgrammableNonFungibleEdition"] = 5] = "ProgrammableNonFungibleEdition";
	})(TokenStandard = exports.TokenStandard || (exports.TokenStandard = {}));
	function getTokenStandardSerializer() {
	    return (0, serializers_1.scalarEnum)(TokenStandard, {
	        description: 'TokenStandard',
	    });
	}
	exports.getTokenStandardSerializer = getTokenStandardSerializer;
	
} (tokenStandard));

var tokenState$1 = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getTokenStateSerializer = exports.TokenState = void 0;
	const serializers_1 = serializers;
	var TokenState;
	(function (TokenState) {
	    TokenState[TokenState["Unlocked"] = 0] = "Unlocked";
	    TokenState[TokenState["Locked"] = 1] = "Locked";
	    TokenState[TokenState["Listed"] = 2] = "Listed";
	})(TokenState = exports.TokenState || (exports.TokenState = {}));
	function getTokenStateSerializer() {
	    return (0, serializers_1.scalarEnum)(TokenState, {
	        description: 'TokenState',
	    });
	}
	exports.getTokenStateSerializer = getTokenStateSerializer;
	
} (tokenState$1));

var transferArgs = {};

var hasRequiredTransferArgs;

function requireTransferArgs () {
	if (hasRequiredTransferArgs) return transferArgs;
	hasRequiredTransferArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(transferArgs, "__esModule", { value: true });
	transferArgs.isTransferArgs = transferArgs.transferArgs = transferArgs.getTransferArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getTransferArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'V1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['amount', (0, serializers_1.u64)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                amount: value.amount ?? 1,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'TransferArgs' });
	}
	transferArgs.getTransferArgsSerializer = getTransferArgsSerializer;
	function transferArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	transferArgs.transferArgs = transferArgs$1;
	function isTransferArgs(kind, value) {
	    return value.__kind === kind;
	}
	transferArgs.isTransferArgs = isTransferArgs;
	
	return transferArgs;
}

var unlockArgs = {};

var hasRequiredUnlockArgs;

function requireUnlockArgs () {
	if (hasRequiredUnlockArgs) return unlockArgs;
	hasRequiredUnlockArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(unlockArgs, "__esModule", { value: true });
	unlockArgs.isUnlockArgs = unlockArgs.unlockArgs = unlockArgs.getUnlockArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getUnlockArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'V1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'UnlockArgs' });
	}
	unlockArgs.getUnlockArgsSerializer = getUnlockArgsSerializer;
	function unlockArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	unlockArgs.unlockArgs = unlockArgs$1;
	function isUnlockArgs(kind, value) {
	    return value.__kind === kind;
	}
	unlockArgs.isUnlockArgs = isUnlockArgs;
	
	return unlockArgs;
}

var updateArgs = {};

var hasRequiredUpdateArgs;

function requireUpdateArgs () {
	if (hasRequiredUpdateArgs) return updateArgs;
	hasRequiredUpdateArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateArgs, "__esModule", { value: true });
	updateArgs.isUpdateArgs = updateArgs.updateArgs = updateArgs.getUpdateArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getUpdateArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'V1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['newUpdateAuthority', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	                ['data', (0, serializers_1.option)((0, _1.getDataSerializer)())],
	                ['primarySaleHappened', (0, serializers_1.option)((0, serializers_1.bool)())],
	                ['isMutable', (0, serializers_1.option)((0, serializers_1.bool)())],
	                ['collection', (0, _1.getCollectionToggleSerializer)()],
	                ['collectionDetails', (0, _1.getCollectionDetailsToggleSerializer)()],
	                ['uses', (0, _1.getUsesToggleSerializer)()],
	                ['ruleSet', (0, _1.getRuleSetToggleSerializer)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                newUpdateAuthority: value.newUpdateAuthority ?? (0, umi_1.none)(),
	                data: value.data ?? (0, umi_1.none)(),
	                primarySaleHappened: value.primarySaleHappened ?? (0, umi_1.none)(),
	                isMutable: value.isMutable ?? (0, umi_1.none)(),
	                collection: value.collection ?? (0, _1.collectionToggle)('None'),
	                collectionDetails: value.collectionDetails ?? (0, _1.collectionDetailsToggle)('None'),
	                uses: value.uses ?? (0, _1.usesToggle)('None'),
	                ruleSet: value.ruleSet ?? (0, _1.ruleSetToggle)('None'),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsUpdateAuthorityV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['newUpdateAuthority', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	                ['data', (0, serializers_1.option)((0, _1.getDataSerializer)())],
	                ['primarySaleHappened', (0, serializers_1.option)((0, serializers_1.bool)())],
	                ['isMutable', (0, serializers_1.option)((0, serializers_1.bool)())],
	                ['collection', (0, _1.getCollectionToggleSerializer)()],
	                ['collectionDetails', (0, _1.getCollectionDetailsToggleSerializer)()],
	                ['uses', (0, _1.getUsesToggleSerializer)()],
	                ['ruleSet', (0, _1.getRuleSetToggleSerializer)()],
	                ['tokenStandard', (0, serializers_1.option)((0, _1.getTokenStandardSerializer)())],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                newUpdateAuthority: value.newUpdateAuthority ?? (0, umi_1.none)(),
	                data: value.data ?? (0, umi_1.none)(),
	                primarySaleHappened: value.primarySaleHappened ?? (0, umi_1.none)(),
	                isMutable: value.isMutable ?? (0, umi_1.none)(),
	                collection: value.collection ?? (0, _1.collectionToggle)('None'),
	                collectionDetails: value.collectionDetails ?? (0, _1.collectionDetailsToggle)('None'),
	                uses: value.uses ?? (0, _1.usesToggle)('None'),
	                ruleSet: value.ruleSet ?? (0, _1.ruleSetToggle)('None'),
	                tokenStandard: value.tokenStandard ?? (0, umi_1.none)(),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsAuthorityItemDelegateV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['newUpdateAuthority', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	                ['primarySaleHappened', (0, serializers_1.option)((0, serializers_1.bool)())],
	                ['isMutable', (0, serializers_1.option)((0, serializers_1.bool)())],
	                ['tokenStandard', (0, serializers_1.option)((0, _1.getTokenStandardSerializer)())],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                newUpdateAuthority: value.newUpdateAuthority ?? (0, umi_1.none)(),
	                primarySaleHappened: value.primarySaleHappened ?? (0, umi_1.none)(),
	                isMutable: value.isMutable ?? (0, umi_1.none)(),
	                tokenStandard: value.tokenStandard ?? (0, umi_1.none)(),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsCollectionDelegateV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['collection', (0, _1.getCollectionToggleSerializer)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                collection: value.collection ?? (0, _1.collectionToggle)('None'),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsDataDelegateV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['data', (0, serializers_1.option)((0, _1.getDataSerializer)())],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                data: value.data ?? (0, umi_1.none)(),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsProgrammableConfigDelegateV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['ruleSet', (0, _1.getRuleSetToggleSerializer)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                ruleSet: value.ruleSet ?? (0, _1.ruleSetToggle)('None'),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsDataItemDelegateV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['data', (0, serializers_1.option)((0, _1.getDataSerializer)())],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                data: value.data ?? (0, umi_1.none)(),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsCollectionItemDelegateV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['collection', (0, _1.getCollectionToggleSerializer)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                collection: value.collection ?? (0, _1.collectionToggle)('None'),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	        [
	            'AsProgrammableConfigItemDelegateV2',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['ruleSet', (0, _1.getRuleSetToggleSerializer)()],
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                ruleSet: value.ruleSet ?? (0, _1.ruleSetToggle)('None'),
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'UpdateArgs' });
	}
	updateArgs.getUpdateArgsSerializer = getUpdateArgsSerializer;
	function updateArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	updateArgs.updateArgs = updateArgs$1;
	function isUpdateArgs(kind, value) {
	    return value.__kind === kind;
	}
	updateArgs.isUpdateArgs = isUpdateArgs;
	
	return updateArgs;
}

var useArgs = {};

var hasRequiredUseArgs;

function requireUseArgs () {
	if (hasRequiredUseArgs) return useArgs;
	hasRequiredUseArgs = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(useArgs, "__esModule", { value: true });
	useArgs.isUseArgs = useArgs.useArgs = useArgs.getUseArgsSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getUseArgsSerializer() {
	    return (0, serializers_1.dataEnum)([
	        [
	            'V1',
	            (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	                ['authorizationData', (0, serializers_1.option)((0, _1.getAuthorizationDataSerializer)())],
	            ]), (value) => ({
	                ...value,
	                authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	            })),
	        ],
	    ], { description: 'UseArgs' });
	}
	useArgs.getUseArgsSerializer = getUseArgsSerializer;
	function useArgs$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	useArgs.useArgs = useArgs$1;
	function isUseArgs(kind, value) {
	    return value.__kind === kind;
	}
	useArgs.isUseArgs = isUseArgs;
	
	return useArgs;
}

var useMethod = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getUseMethodSerializer = exports.UseMethod = void 0;
	const serializers_1 = serializers;
	var UseMethod;
	(function (UseMethod) {
	    UseMethod[UseMethod["Burn"] = 0] = "Burn";
	    UseMethod[UseMethod["Multiple"] = 1] = "Multiple";
	    UseMethod[UseMethod["Single"] = 2] = "Single";
	})(UseMethod = exports.UseMethod || (exports.UseMethod = {}));
	function getUseMethodSerializer() {
	    return (0, serializers_1.scalarEnum)(UseMethod, {
	        description: 'UseMethod',
	    });
	}
	exports.getUseMethodSerializer = getUseMethodSerializer;
	
} (useMethod));

var uses = {};

var hasRequiredUses;

function requireUses () {
	if (hasRequiredUses) return uses;
	hasRequiredUses = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(uses, "__esModule", { value: true });
	uses.getUsesSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getUsesSerializer() {
	    return (0, serializers_1.struct)([
	        ['useMethod', (0, _1.getUseMethodSerializer)()],
	        ['remaining', (0, serializers_1.u64)()],
	        ['total', (0, serializers_1.u64)()],
	    ], { description: 'Uses' });
	}
	uses.getUsesSerializer = getUsesSerializer;
	
	return uses;
}

var usesToggle = {};

var hasRequiredUsesToggle;

function requireUsesToggle () {
	if (hasRequiredUsesToggle) return usesToggle;
	hasRequiredUsesToggle = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(usesToggle, "__esModule", { value: true });
	usesToggle.isUsesToggle = usesToggle.usesToggle = usesToggle.getUsesToggleSerializer = void 0;
	const serializers_1 = serializers;
	const _1 = requireTypes();
	function getUsesToggleSerializer() {
	    return (0, serializers_1.dataEnum)([
	        ['None', (0, serializers_1.unit)()],
	        ['Clear', (0, serializers_1.unit)()],
	        [
	            'Set',
	            (0, serializers_1.struct)([
	                ['fields', (0, serializers_1.tuple)([(0, _1.getUsesSerializer)()])],
	            ]),
	        ],
	    ], { description: 'UsesToggle' });
	}
	usesToggle.getUsesToggleSerializer = getUsesToggleSerializer;
	function usesToggle$1(kind, data) {
	    return Array.isArray(data)
	        ? { __kind: kind, fields: data }
	        : { __kind: kind, ...(data ?? {}) };
	}
	usesToggle.usesToggle = usesToggle$1;
	function isUsesToggle(kind, value) {
	    return value.__kind === kind;
	}
	usesToggle.isUsesToggle = isUsesToggle;
	
	return usesToggle;
}

var verificationArgs = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getVerificationArgsSerializer = exports.VerificationArgs = void 0;
	const serializers_1 = serializers;
	var VerificationArgs;
	(function (VerificationArgs) {
	    VerificationArgs[VerificationArgs["CreatorV1"] = 0] = "CreatorV1";
	    VerificationArgs[VerificationArgs["CollectionV1"] = 1] = "CollectionV1";
	})(VerificationArgs = exports.VerificationArgs || (exports.VerificationArgs = {}));
	function getVerificationArgsSerializer() {
	    return (0, serializers_1.scalarEnum)(VerificationArgs, {
	        description: 'VerificationArgs',
	    });
	}
	exports.getVerificationArgsSerializer = getVerificationArgsSerializer;
	
} (verificationArgs));

var hasRequiredTypes;

function requireTypes () {
	if (hasRequiredTypes) return types$6;
	hasRequiredTypes = 1;
	(function (exports) {
		/**
		 * This code was AUTOGENERATED using the kinobi library.
		 * Please DO NOT EDIT THIS FILE, instead use visitors
		 * to add features, then rerun kinobi to update it.
		 *
		 * @see https://github.com/metaplex-foundation/kinobi
		 */
		var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(authorityType$1, exports);
		__exportStar(requireAuthorizationData(), exports);
		__exportStar(burnArgs$1, exports);
		__exportStar(collection, exports);
		__exportStar(collectionDetails$1, exports);
		__exportStar(requireCollectionDetailsToggle(), exports);
		__exportStar(requireCollectionToggle(), exports);
		__exportStar(requireCreateArgs(), exports);
		__exportStar(creator, exports);
		__exportStar(requireData(), exports);
		__exportStar(requireDataV2(), exports);
		__exportStar(requireDelegateArgs(), exports);
		__exportStar(escrowAuthority$1, exports);
		__exportStar(holderDelegateRole, exports);
		__exportStar(key, exports);
		__exportStar(requireLockArgs(), exports);
		__exportStar(metadataDelegateRole, exports);
		__exportStar(migrationType, exports);
		__exportStar(requireMintArgs(), exports);
		__exportStar(mintNewEditionFromMasterEditionViaTokenArgs, exports);
		__exportStar(requirePayload(), exports);
		__exportStar(payloadKey, exports);
		__exportStar(requirePayloadType(), exports);
		__exportStar(printArgs$1, exports);
		__exportStar(printSupply$1, exports);
		__exportStar(programmableConfig$1, exports);
		__exportStar(proofInfo, exports);
		__exportStar(reservation, exports);
		__exportStar(reservationV1, exports);
		__exportStar(revokeArgs, exports);
		__exportStar(ruleSetToggle$1, exports);
		__exportStar(seedsVec, exports);
		__exportStar(setCollectionSizeArgs, exports);
		__exportStar(tokenDelegateRole, exports);
		__exportStar(tokenStandard, exports);
		__exportStar(tokenState$1, exports);
		__exportStar(requireTransferArgs(), exports);
		__exportStar(requireUnlockArgs(), exports);
		__exportStar(requireUpdateArgs(), exports);
		__exportStar(requireUseArgs(), exports);
		__exportStar(useMethod, exports);
		__exportStar(requireUses(), exports);
		__exportStar(requireUsesToggle(), exports);
		__exportStar(verificationArgs, exports);
		
	} (types$6));
	return types$6;
}

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(collectionAuthorityRecord, "__esModule", { value: true });
collectionAuthorityRecord.safeFetchCollectionAuthorityRecordFromSeeds = collectionAuthorityRecord.fetchCollectionAuthorityRecordFromSeeds = collectionAuthorityRecord.findCollectionAuthorityRecordPda = collectionAuthorityRecord.getCollectionAuthorityRecordGpaBuilder = collectionAuthorityRecord.safeFetchAllCollectionAuthorityRecord = collectionAuthorityRecord.fetchAllCollectionAuthorityRecord = collectionAuthorityRecord.safeFetchCollectionAuthorityRecord = collectionAuthorityRecord.fetchCollectionAuthorityRecord = collectionAuthorityRecord.deserializeCollectionAuthorityRecord = collectionAuthorityRecord.getCollectionAuthorityRecordAccountDataSerializer = void 0;
const umi_1$1t = cjs$6;
const serializers_1$1d = serializers;
const types_1$g = requireTypes();
function getCollectionAuthorityRecordAccountDataSerializer() {
    return (0, serializers_1$1d.mapSerializer)((0, serializers_1$1d.struct)([
        ['key', (0, types_1$g.getKeySerializer)()],
        ['bump', (0, serializers_1$1d.u8)()],
        ['updateAuthority', (0, serializers_1$1d.option)((0, serializers_1$1d.publicKey)())],
    ], { description: 'CollectionAuthorityRecordAccountData' }), (value) => ({ ...value, key: types_1$g.Key.CollectionAuthorityRecord }));
}
collectionAuthorityRecord.getCollectionAuthorityRecordAccountDataSerializer = getCollectionAuthorityRecordAccountDataSerializer;
function deserializeCollectionAuthorityRecord(rawAccount) {
    return (0, umi_1$1t.deserializeAccount)(rawAccount, getCollectionAuthorityRecordAccountDataSerializer());
}
collectionAuthorityRecord.deserializeCollectionAuthorityRecord = deserializeCollectionAuthorityRecord;
async function fetchCollectionAuthorityRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1t.publicKey)(publicKey, false), options);
    (0, umi_1$1t.assertAccountExists)(maybeAccount, 'CollectionAuthorityRecord');
    return deserializeCollectionAuthorityRecord(maybeAccount);
}
collectionAuthorityRecord.fetchCollectionAuthorityRecord = fetchCollectionAuthorityRecord;
async function safeFetchCollectionAuthorityRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1t.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeCollectionAuthorityRecord(maybeAccount)
        : null;
}
collectionAuthorityRecord.safeFetchCollectionAuthorityRecord = safeFetchCollectionAuthorityRecord;
async function fetchAllCollectionAuthorityRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1t.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1t.assertAccountExists)(maybeAccount, 'CollectionAuthorityRecord');
        return deserializeCollectionAuthorityRecord(maybeAccount);
    });
}
collectionAuthorityRecord.fetchAllCollectionAuthorityRecord = fetchAllCollectionAuthorityRecord;
async function safeFetchAllCollectionAuthorityRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1t.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeCollectionAuthorityRecord(maybeAccount));
}
collectionAuthorityRecord.safeFetchAllCollectionAuthorityRecord = safeFetchAllCollectionAuthorityRecord;
function getCollectionAuthorityRecordGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$1t.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$g.getKeySerializer)()],
        bump: [1, (0, serializers_1$1d.u8)()],
        updateAuthority: [2, (0, serializers_1$1d.option)((0, serializers_1$1d.publicKey)())],
    })
        .deserializeUsing((account) => deserializeCollectionAuthorityRecord(account))
        .whereField('key', types_1$g.Key.CollectionAuthorityRecord);
}
collectionAuthorityRecord.getCollectionAuthorityRecordGpaBuilder = getCollectionAuthorityRecordGpaBuilder;
function findCollectionAuthorityRecordPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$1d.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$1d.publicKey)().serialize(programId),
        (0, serializers_1$1d.publicKey)().serialize(seeds.mint),
        (0, serializers_1$1d.string)({ size: 'variable' }).serialize('collection_authority'),
        (0, serializers_1$1d.publicKey)().serialize(seeds.collectionAuthority),
    ]);
}
collectionAuthorityRecord.findCollectionAuthorityRecordPda = findCollectionAuthorityRecordPda;
async function fetchCollectionAuthorityRecordFromSeeds(context, seeds, options) {
    return fetchCollectionAuthorityRecord(context, findCollectionAuthorityRecordPda(context, seeds), options);
}
collectionAuthorityRecord.fetchCollectionAuthorityRecordFromSeeds = fetchCollectionAuthorityRecordFromSeeds;
async function safeFetchCollectionAuthorityRecordFromSeeds(context, seeds, options) {
    return safeFetchCollectionAuthorityRecord(context, findCollectionAuthorityRecordPda(context, seeds), options);
}
collectionAuthorityRecord.safeFetchCollectionAuthorityRecordFromSeeds = safeFetchCollectionAuthorityRecordFromSeeds;

var deprecatedMasterEditionV1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(deprecatedMasterEditionV1, "__esModule", { value: true });
deprecatedMasterEditionV1.safeFetchDeprecatedMasterEditionV1FromSeeds = deprecatedMasterEditionV1.fetchDeprecatedMasterEditionV1FromSeeds = deprecatedMasterEditionV1.findDeprecatedMasterEditionV1Pda = deprecatedMasterEditionV1.getDeprecatedMasterEditionV1GpaBuilder = deprecatedMasterEditionV1.safeFetchAllDeprecatedMasterEditionV1 = deprecatedMasterEditionV1.fetchAllDeprecatedMasterEditionV1 = deprecatedMasterEditionV1.safeFetchDeprecatedMasterEditionV1 = deprecatedMasterEditionV1.fetchDeprecatedMasterEditionV1 = deprecatedMasterEditionV1.deserializeDeprecatedMasterEditionV1 = deprecatedMasterEditionV1.getDeprecatedMasterEditionV1AccountDataSerializer = void 0;
const umi_1$1s = cjs$6;
const serializers_1$1c = serializers;
const types_1$f = requireTypes();
function getDeprecatedMasterEditionV1AccountDataSerializer() {
    return (0, serializers_1$1c.mapSerializer)((0, serializers_1$1c.struct)([
        ['key', (0, types_1$f.getKeySerializer)()],
        ['supply', (0, serializers_1$1c.u64)()],
        ['maxSupply', (0, serializers_1$1c.option)((0, serializers_1$1c.u64)())],
        ['printingMint', (0, serializers_1$1c.publicKey)()],
        ['oneTimePrintingAuthorizationMint', (0, serializers_1$1c.publicKey)()],
    ], { description: 'DeprecatedMasterEditionV1AccountData' }), (value) => ({ ...value, key: types_1$f.Key.MasterEditionV1 }));
}
deprecatedMasterEditionV1.getDeprecatedMasterEditionV1AccountDataSerializer = getDeprecatedMasterEditionV1AccountDataSerializer;
function deserializeDeprecatedMasterEditionV1(rawAccount) {
    return (0, umi_1$1s.deserializeAccount)(rawAccount, getDeprecatedMasterEditionV1AccountDataSerializer());
}
deprecatedMasterEditionV1.deserializeDeprecatedMasterEditionV1 = deserializeDeprecatedMasterEditionV1;
async function fetchDeprecatedMasterEditionV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1s.publicKey)(publicKey, false), options);
    (0, umi_1$1s.assertAccountExists)(maybeAccount, 'DeprecatedMasterEditionV1');
    return deserializeDeprecatedMasterEditionV1(maybeAccount);
}
deprecatedMasterEditionV1.fetchDeprecatedMasterEditionV1 = fetchDeprecatedMasterEditionV1;
async function safeFetchDeprecatedMasterEditionV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1s.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeDeprecatedMasterEditionV1(maybeAccount)
        : null;
}
deprecatedMasterEditionV1.safeFetchDeprecatedMasterEditionV1 = safeFetchDeprecatedMasterEditionV1;
async function fetchAllDeprecatedMasterEditionV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1s.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1s.assertAccountExists)(maybeAccount, 'DeprecatedMasterEditionV1');
        return deserializeDeprecatedMasterEditionV1(maybeAccount);
    });
}
deprecatedMasterEditionV1.fetchAllDeprecatedMasterEditionV1 = fetchAllDeprecatedMasterEditionV1;
async function safeFetchAllDeprecatedMasterEditionV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1s.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeDeprecatedMasterEditionV1(maybeAccount));
}
deprecatedMasterEditionV1.safeFetchAllDeprecatedMasterEditionV1 = safeFetchAllDeprecatedMasterEditionV1;
function getDeprecatedMasterEditionV1GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$1s.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$f.getKeySerializer)()],
        supply: [1, (0, serializers_1$1c.u64)()],
        maxSupply: [9, (0, serializers_1$1c.option)((0, serializers_1$1c.u64)())],
        printingMint: [null, (0, serializers_1$1c.publicKey)()],
        oneTimePrintingAuthorizationMint: [null, (0, serializers_1$1c.publicKey)()],
    })
        .deserializeUsing((account) => deserializeDeprecatedMasterEditionV1(account))
        .whereField('key', types_1$f.Key.MasterEditionV1);
}
deprecatedMasterEditionV1.getDeprecatedMasterEditionV1GpaBuilder = getDeprecatedMasterEditionV1GpaBuilder;
function findDeprecatedMasterEditionV1Pda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$1c.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$1c.publicKey)().serialize(programId),
        (0, serializers_1$1c.publicKey)().serialize(seeds.mint),
        (0, serializers_1$1c.string)({ size: 'variable' }).serialize('edition'),
    ]);
}
deprecatedMasterEditionV1.findDeprecatedMasterEditionV1Pda = findDeprecatedMasterEditionV1Pda;
async function fetchDeprecatedMasterEditionV1FromSeeds(context, seeds, options) {
    return fetchDeprecatedMasterEditionV1(context, findDeprecatedMasterEditionV1Pda(context, seeds), options);
}
deprecatedMasterEditionV1.fetchDeprecatedMasterEditionV1FromSeeds = fetchDeprecatedMasterEditionV1FromSeeds;
async function safeFetchDeprecatedMasterEditionV1FromSeeds(context, seeds, options) {
    return safeFetchDeprecatedMasterEditionV1(context, findDeprecatedMasterEditionV1Pda(context, seeds), options);
}
deprecatedMasterEditionV1.safeFetchDeprecatedMasterEditionV1FromSeeds = safeFetchDeprecatedMasterEditionV1FromSeeds;

var edition = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(edition, "__esModule", { value: true });
edition.getEditionSize = edition.getEditionGpaBuilder = edition.safeFetchAllEdition = edition.fetchAllEdition = edition.safeFetchEdition = edition.fetchEdition = edition.deserializeEdition = edition.getEditionAccountDataSerializer = void 0;
const umi_1$1r = cjs$6;
const serializers_1$1b = serializers;
const types_1$e = requireTypes();
function getEditionAccountDataSerializer() {
    return (0, serializers_1$1b.mapSerializer)((0, serializers_1$1b.struct)([
        ['key', (0, types_1$e.getKeySerializer)()],
        ['parent', (0, serializers_1$1b.publicKey)()],
        ['edition', (0, serializers_1$1b.u64)()],
    ], { description: 'EditionAccountData' }), (value) => ({ ...value, key: types_1$e.Key.EditionV1 }));
}
edition.getEditionAccountDataSerializer = getEditionAccountDataSerializer;
function deserializeEdition(rawAccount) {
    return (0, umi_1$1r.deserializeAccount)(rawAccount, getEditionAccountDataSerializer());
}
edition.deserializeEdition = deserializeEdition;
async function fetchEdition(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1r.publicKey)(publicKey, false), options);
    (0, umi_1$1r.assertAccountExists)(maybeAccount, 'Edition');
    return deserializeEdition(maybeAccount);
}
edition.fetchEdition = fetchEdition;
async function safeFetchEdition(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1r.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeEdition(maybeAccount) : null;
}
edition.safeFetchEdition = safeFetchEdition;
async function fetchAllEdition(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1r.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1r.assertAccountExists)(maybeAccount, 'Edition');
        return deserializeEdition(maybeAccount);
    });
}
edition.fetchAllEdition = fetchAllEdition;
async function safeFetchAllEdition(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1r.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeEdition(maybeAccount));
}
edition.safeFetchAllEdition = safeFetchAllEdition;
function getEditionGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$1r.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$e.getKeySerializer)()],
        parent: [1, (0, serializers_1$1b.publicKey)()],
        edition: [33, (0, serializers_1$1b.u64)()],
    })
        .deserializeUsing((account) => deserializeEdition(account))
        .whereField('key', types_1$e.Key.EditionV1);
}
edition.getEditionGpaBuilder = getEditionGpaBuilder;
function getEditionSize() {
    return 41;
}
edition.getEditionSize = getEditionSize;

var editionMarker$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(editionMarker$1, "__esModule", { value: true });
editionMarker$1.safeFetchEditionMarkerFromSeeds = editionMarker$1.fetchEditionMarkerFromSeeds = editionMarker$1.findEditionMarkerPda = editionMarker$1.getEditionMarkerSize = editionMarker$1.getEditionMarkerGpaBuilder = editionMarker$1.safeFetchAllEditionMarker = editionMarker$1.fetchAllEditionMarker = editionMarker$1.safeFetchEditionMarker = editionMarker$1.fetchEditionMarker = editionMarker$1.deserializeEditionMarker = editionMarker$1.getEditionMarkerAccountDataSerializer = void 0;
const umi_1$1q = cjs$6;
const serializers_1$1a = serializers;
const types_1$d = requireTypes();
function getEditionMarkerAccountDataSerializer() {
    return (0, serializers_1$1a.mapSerializer)((0, serializers_1$1a.struct)([
        ['key', (0, types_1$d.getKeySerializer)()],
        ['ledger', (0, serializers_1$1a.array)((0, serializers_1$1a.u8)(), { size: 31 })],
    ], { description: 'EditionMarkerAccountData' }), (value) => ({ ...value, key: types_1$d.Key.EditionMarker }));
}
editionMarker$1.getEditionMarkerAccountDataSerializer = getEditionMarkerAccountDataSerializer;
function deserializeEditionMarker(rawAccount) {
    return (0, umi_1$1q.deserializeAccount)(rawAccount, getEditionMarkerAccountDataSerializer());
}
editionMarker$1.deserializeEditionMarker = deserializeEditionMarker;
async function fetchEditionMarker(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1q.publicKey)(publicKey, false), options);
    (0, umi_1$1q.assertAccountExists)(maybeAccount, 'EditionMarker');
    return deserializeEditionMarker(maybeAccount);
}
editionMarker$1.fetchEditionMarker = fetchEditionMarker;
async function safeFetchEditionMarker(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1q.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeEditionMarker(maybeAccount) : null;
}
editionMarker$1.safeFetchEditionMarker = safeFetchEditionMarker;
async function fetchAllEditionMarker(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1q.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1q.assertAccountExists)(maybeAccount, 'EditionMarker');
        return deserializeEditionMarker(maybeAccount);
    });
}
editionMarker$1.fetchAllEditionMarker = fetchAllEditionMarker;
async function safeFetchAllEditionMarker(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1q.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeEditionMarker(maybeAccount));
}
editionMarker$1.safeFetchAllEditionMarker = safeFetchAllEditionMarker;
function getEditionMarkerGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$1q.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$d.getKeySerializer)()],
        ledger: [1, (0, serializers_1$1a.array)((0, serializers_1$1a.u8)(), { size: 31 })],
    })
        .deserializeUsing((account) => deserializeEditionMarker(account))
        .whereField('key', types_1$d.Key.EditionMarker);
}
editionMarker$1.getEditionMarkerGpaBuilder = getEditionMarkerGpaBuilder;
function getEditionMarkerSize() {
    return 32;
}
editionMarker$1.getEditionMarkerSize = getEditionMarkerSize;
function findEditionMarkerPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$1a.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$1a.publicKey)().serialize(programId),
        (0, serializers_1$1a.publicKey)().serialize(seeds.mint),
        (0, serializers_1$1a.string)({ size: 'variable' }).serialize('edition'),
        (0, serializers_1$1a.string)({ size: 'variable' }).serialize(seeds.editionMarker),
    ]);
}
editionMarker$1.findEditionMarkerPda = findEditionMarkerPda;
async function fetchEditionMarkerFromSeeds(context, seeds, options) {
    return fetchEditionMarker(context, findEditionMarkerPda(context, seeds), options);
}
editionMarker$1.fetchEditionMarkerFromSeeds = fetchEditionMarkerFromSeeds;
async function safeFetchEditionMarkerFromSeeds(context, seeds, options) {
    return safeFetchEditionMarker(context, findEditionMarkerPda(context, seeds), options);
}
editionMarker$1.safeFetchEditionMarkerFromSeeds = safeFetchEditionMarkerFromSeeds;

var editionMarkerV2 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(editionMarkerV2, "__esModule", { value: true });
editionMarkerV2.safeFetchEditionMarkerV2FromSeeds = editionMarkerV2.fetchEditionMarkerV2FromSeeds = editionMarkerV2.findEditionMarkerV2Pda = editionMarkerV2.getEditionMarkerV2GpaBuilder = editionMarkerV2.safeFetchAllEditionMarkerV2 = editionMarkerV2.fetchAllEditionMarkerV2 = editionMarkerV2.safeFetchEditionMarkerV2 = editionMarkerV2.fetchEditionMarkerV2 = editionMarkerV2.deserializeEditionMarkerV2 = editionMarkerV2.getEditionMarkerV2AccountDataSerializer = void 0;
const umi_1$1p = cjs$6;
const serializers_1$19 = serializers;
const types_1$c = requireTypes();
function getEditionMarkerV2AccountDataSerializer() {
    return (0, serializers_1$19.struct)([
        ['key', (0, types_1$c.getKeySerializer)()],
        ['ledger', (0, serializers_1$19.bytes)({ size: (0, serializers_1$19.u32)() })],
    ], { description: 'EditionMarkerV2AccountData' });
}
editionMarkerV2.getEditionMarkerV2AccountDataSerializer = getEditionMarkerV2AccountDataSerializer;
function deserializeEditionMarkerV2(rawAccount) {
    return (0, umi_1$1p.deserializeAccount)(rawAccount, getEditionMarkerV2AccountDataSerializer());
}
editionMarkerV2.deserializeEditionMarkerV2 = deserializeEditionMarkerV2;
async function fetchEditionMarkerV2(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1p.publicKey)(publicKey, false), options);
    (0, umi_1$1p.assertAccountExists)(maybeAccount, 'EditionMarkerV2');
    return deserializeEditionMarkerV2(maybeAccount);
}
editionMarkerV2.fetchEditionMarkerV2 = fetchEditionMarkerV2;
async function safeFetchEditionMarkerV2(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1p.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeEditionMarkerV2(maybeAccount) : null;
}
editionMarkerV2.safeFetchEditionMarkerV2 = safeFetchEditionMarkerV2;
async function fetchAllEditionMarkerV2(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1p.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1p.assertAccountExists)(maybeAccount, 'EditionMarkerV2');
        return deserializeEditionMarkerV2(maybeAccount);
    });
}
editionMarkerV2.fetchAllEditionMarkerV2 = fetchAllEditionMarkerV2;
async function safeFetchAllEditionMarkerV2(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1p.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeEditionMarkerV2(maybeAccount));
}
editionMarkerV2.safeFetchAllEditionMarkerV2 = safeFetchAllEditionMarkerV2;
function getEditionMarkerV2GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$1p.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$c.getKeySerializer)()],
        ledger: [1, (0, serializers_1$19.bytes)({ size: (0, serializers_1$19.u32)() })],
    })
        .deserializeUsing((account) => deserializeEditionMarkerV2(account));
}
editionMarkerV2.getEditionMarkerV2GpaBuilder = getEditionMarkerV2GpaBuilder;
function findEditionMarkerV2Pda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$19.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$19.publicKey)().serialize(programId),
        (0, serializers_1$19.publicKey)().serialize(seeds.mint),
        (0, serializers_1$19.string)({ size: 'variable' }).serialize('edition'),
        (0, serializers_1$19.string)({ size: 'variable' }).serialize('marker'),
    ]);
}
editionMarkerV2.findEditionMarkerV2Pda = findEditionMarkerV2Pda;
async function fetchEditionMarkerV2FromSeeds(context, seeds, options) {
    return fetchEditionMarkerV2(context, findEditionMarkerV2Pda(context, seeds), options);
}
editionMarkerV2.fetchEditionMarkerV2FromSeeds = fetchEditionMarkerV2FromSeeds;
async function safeFetchEditionMarkerV2FromSeeds(context, seeds, options) {
    return safeFetchEditionMarkerV2(context, findEditionMarkerV2Pda(context, seeds), options);
}
editionMarkerV2.safeFetchEditionMarkerV2FromSeeds = safeFetchEditionMarkerV2FromSeeds;

var holderDelegateRecord = {};

var hooked$1 = {};

var editionMarker = {};

var hasRequiredEditionMarker;

function requireEditionMarker () {
	if (hasRequiredEditionMarker) return editionMarker;
	hasRequiredEditionMarker = 1;
	Object.defineProperty(editionMarker, "__esModule", { value: true });
	editionMarker.findEditionMarkerFromEditionNumberPda = void 0;
	const generated_1 = requireGenerated();
	function findEditionMarkerFromEditionNumberPda(context, seeds) {
	    return (0, generated_1.findEditionMarkerPda)(context, {
	        mint: seeds.mint,
	        editionMarker: (BigInt(seeds.editionNumber) / 248n).toString(10),
	    });
	}
	editionMarker.findEditionMarkerFromEditionNumberPda = findEditionMarkerFromEditionNumberPda;
	
	return editionMarker;
}

var metadataDelegateRoleSeed = {};

var errors$2 = {};

Object.defineProperty(errors$2, "__esModule", { value: true });
errors$2.TokenMetadataError = void 0;
const umi_1$1o = cjs$6;
class TokenMetadataError extends umi_1$1o.UmiError {
    constructor(message, cause) {
        super(message, 'plugin', 'Token Metadata', cause);
        this.name = 'TokenMetadataError';
    }
}
errors$2.TokenMetadataError = TokenMetadataError;

Object.defineProperty(metadataDelegateRoleSeed, "__esModule", { value: true });
metadataDelegateRoleSeed.getMetadataDelegateRoleSeedSerializer = void 0;
const serializers_1$18 = serializers;
const errors_1$2 = errors$2;
const metadataDelegateRole_1 = metadataDelegateRole;
function getMetadataDelegateRoleSeedSerializer() {
    return (0, serializers_1$18.mapSerializer)((0, serializers_1$18.string)({ size: 'variable' }), (args) => {
        if (typeof args === 'string')
            return args;
        switch (args) {
            case metadataDelegateRole_1.MetadataDelegateRole.AuthorityItem:
                return 'authority_item_delegate';
            case metadataDelegateRole_1.MetadataDelegateRole.Collection:
                return 'collection_delegate';
            case metadataDelegateRole_1.MetadataDelegateRole.Use:
                return 'use_delegate';
            case metadataDelegateRole_1.MetadataDelegateRole.Data:
                return 'data_delegate';
            case metadataDelegateRole_1.MetadataDelegateRole.ProgrammableConfig:
                return 'programmable_config_delegate';
            case metadataDelegateRole_1.MetadataDelegateRole.DataItem:
                return 'data_item_delegate';
            case metadataDelegateRole_1.MetadataDelegateRole.CollectionItem:
                return 'collection_item_delegate';
            case metadataDelegateRole_1.MetadataDelegateRole.ProgrammableConfigItem:
                return 'prog_config_item_delegate';
            default:
                throw new errors_1$2.TokenMetadataError(`Invalid MetadataDelegateRoleArgs ${args}`);
        }
    }, (seed) => seed);
}
metadataDelegateRoleSeed.getMetadataDelegateRoleSeedSerializer = getMetadataDelegateRoleSeedSerializer;

var holderDelegateRoleSeed = {};

Object.defineProperty(holderDelegateRoleSeed, "__esModule", { value: true });
holderDelegateRoleSeed.getHolderDelegateRoleSeedSerializer = void 0;
const serializers_1$17 = serializers;
const errors_1$1 = errors$2;
const holderDelegateRole_1 = holderDelegateRole;
function getHolderDelegateRoleSeedSerializer() {
    return (0, serializers_1$17.mapSerializer)((0, serializers_1$17.string)({ size: 'variable' }), (args) => {
        if (typeof args === 'string')
            return args;
        switch (args) {
            case holderDelegateRole_1.HolderDelegateRole.PrintDelegate:
                return 'print_delegate';
            default:
                throw new errors_1$1.TokenMetadataError(`Invalid PrintDelegateRoleArgs ${args}`);
        }
    }, (seed) => seed);
}
holderDelegateRoleSeed.getHolderDelegateRoleSeedSerializer = getHolderDelegateRoleSeedSerializer;

var resolvers$1 = {};

var src = {};

var generated = {};

var accounts = {};

var addressLookupTable = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(addressLookupTable, "__esModule", { value: true });
addressLookupTable.safeFetchAddressLookupTableFromSeeds = addressLookupTable.fetchAddressLookupTableFromSeeds = addressLookupTable.findAddressLookupTablePda = addressLookupTable.getAddressLookupTableGpaBuilder = addressLookupTable.safeFetchAllAddressLookupTable = addressLookupTable.fetchAllAddressLookupTable = addressLookupTable.safeFetchAddressLookupTable = addressLookupTable.fetchAddressLookupTable = addressLookupTable.deserializeAddressLookupTable = addressLookupTable.getAddressLookupTableAccountDataSerializer = void 0;
const umi_1$1n = cjs$6;
const serializers_1$16 = serializers;
function getAddressLookupTableAccountDataSerializer() {
    return (0, serializers_1$16.mapSerializer)((0, serializers_1$16.struct)([
        ['discriminator', (0, serializers_1$16.u32)()],
        ['deactivationSlot', (0, serializers_1$16.u64)()],
        ['lastExtendedSlot', (0, serializers_1$16.u64)()],
        ['lastExtendedStartIndex', (0, serializers_1$16.u8)()],
        ['authority', (0, serializers_1$16.option)((0, serializers_1$16.publicKey)(), { fixed: true })],
        ['padding', (0, serializers_1$16.u16)()],
        ['addresses', (0, serializers_1$16.array)((0, serializers_1$16.publicKey)(), { size: 'remainder' })],
    ], { description: 'AddressLookupTableAccountData' }), (value) => ({ ...value, discriminator: 1, padding: 0 }));
}
addressLookupTable.getAddressLookupTableAccountDataSerializer = getAddressLookupTableAccountDataSerializer;
function deserializeAddressLookupTable(rawAccount) {
    return (0, umi_1$1n.deserializeAccount)(rawAccount, getAddressLookupTableAccountDataSerializer());
}
addressLookupTable.deserializeAddressLookupTable = deserializeAddressLookupTable;
async function fetchAddressLookupTable(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1n.publicKey)(publicKey, false), options);
    (0, umi_1$1n.assertAccountExists)(maybeAccount, 'AddressLookupTable');
    return deserializeAddressLookupTable(maybeAccount);
}
addressLookupTable.fetchAddressLookupTable = fetchAddressLookupTable;
async function safeFetchAddressLookupTable(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1n.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeAddressLookupTable(maybeAccount)
        : null;
}
addressLookupTable.safeFetchAddressLookupTable = safeFetchAddressLookupTable;
async function fetchAllAddressLookupTable(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1n.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1n.assertAccountExists)(maybeAccount, 'AddressLookupTable');
        return deserializeAddressLookupTable(maybeAccount);
    });
}
addressLookupTable.fetchAllAddressLookupTable = fetchAllAddressLookupTable;
async function safeFetchAllAddressLookupTable(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1n.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeAddressLookupTable(maybeAccount));
}
addressLookupTable.safeFetchAllAddressLookupTable = safeFetchAllAddressLookupTable;
function getAddressLookupTableGpaBuilder(context) {
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    return (0, umi_1$1n.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1$16.u32)()],
        deactivationSlot: [4, (0, serializers_1$16.u64)()],
        lastExtendedSlot: [12, (0, serializers_1$16.u64)()],
        lastExtendedStartIndex: [20, (0, serializers_1$16.u8)()],
        authority: [21, (0, serializers_1$16.option)((0, serializers_1$16.publicKey)(), { fixed: true })],
        padding: [54, (0, serializers_1$16.u16)()],
        addresses: [56, (0, serializers_1$16.array)((0, serializers_1$16.publicKey)(), { size: 'remainder' })],
    })
        .deserializeUsing((account) => deserializeAddressLookupTable(account))
        .whereField('discriminator', 1);
}
addressLookupTable.getAddressLookupTableGpaBuilder = getAddressLookupTableGpaBuilder;
function findAddressLookupTablePda(context, seeds) {
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$16.publicKey)().serialize(seeds.authority),
        (0, serializers_1$16.u64)().serialize(seeds.recentSlot),
    ]);
}
addressLookupTable.findAddressLookupTablePda = findAddressLookupTablePda;
async function fetchAddressLookupTableFromSeeds(context, seeds, options) {
    return fetchAddressLookupTable(context, findAddressLookupTablePda(context, seeds), options);
}
addressLookupTable.fetchAddressLookupTableFromSeeds = fetchAddressLookupTableFromSeeds;
async function safeFetchAddressLookupTableFromSeeds(context, seeds, options) {
    return safeFetchAddressLookupTable(context, findAddressLookupTablePda(context, seeds), options);
}
addressLookupTable.safeFetchAddressLookupTableFromSeeds = safeFetchAddressLookupTableFromSeeds;

var mint = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mint, "__esModule", { value: true });
mint.getMintSize = mint.getMintGpaBuilder = mint.safeFetchAllMint = mint.fetchAllMint = mint.safeFetchMint = mint.fetchMint = mint.deserializeMint = mint.getMintAccountDataSerializer = void 0;
const umi_1$1m = cjs$6;
const serializers_1$15 = serializers;
function getMintAccountDataSerializer() {
    return (0, serializers_1$15.struct)([
        [
            'mintAuthority',
            (0, serializers_1$15.option)((0, serializers_1$15.publicKey)(), { prefix: (0, serializers_1$15.u32)(), fixed: true }),
        ],
        ['supply', (0, serializers_1$15.u64)()],
        ['decimals', (0, serializers_1$15.u8)()],
        ['isInitialized', (0, serializers_1$15.bool)()],
        [
            'freezeAuthority',
            (0, serializers_1$15.option)((0, serializers_1$15.publicKey)(), { prefix: (0, serializers_1$15.u32)(), fixed: true }),
        ],
    ], { description: 'MintAccountData' });
}
mint.getMintAccountDataSerializer = getMintAccountDataSerializer;
function deserializeMint(rawAccount) {
    return (0, umi_1$1m.deserializeAccount)(rawAccount, getMintAccountDataSerializer());
}
mint.deserializeMint = deserializeMint;
async function fetchMint(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1m.publicKey)(publicKey, false), options);
    (0, umi_1$1m.assertAccountExists)(maybeAccount, 'Mint');
    return deserializeMint(maybeAccount);
}
mint.fetchMint = fetchMint;
async function safeFetchMint(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1m.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMint(maybeAccount) : null;
}
mint.safeFetchMint = safeFetchMint;
async function fetchAllMint(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1m.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1m.assertAccountExists)(maybeAccount, 'Mint');
        return deserializeMint(maybeAccount);
    });
}
mint.fetchAllMint = fetchAllMint;
async function safeFetchAllMint(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1m.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMint(maybeAccount));
}
mint.safeFetchAllMint = safeFetchAllMint;
function getMintGpaBuilder(context) {
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    return (0, umi_1$1m.gpaBuilder)(context, programId)
        .registerFields({
        mintAuthority: [
            0,
            (0, serializers_1$15.option)((0, serializers_1$15.publicKey)(), { prefix: (0, serializers_1$15.u32)(), fixed: true }),
        ],
        supply: [36, (0, serializers_1$15.u64)()],
        decimals: [44, (0, serializers_1$15.u8)()],
        isInitialized: [45, (0, serializers_1$15.bool)()],
        freezeAuthority: [
            46,
            (0, serializers_1$15.option)((0, serializers_1$15.publicKey)(), { prefix: (0, serializers_1$15.u32)(), fixed: true }),
        ],
    })
        .deserializeUsing((account) => deserializeMint(account))
        .whereSize(82);
}
mint.getMintGpaBuilder = getMintGpaBuilder;
function getMintSize() {
    return 82;
}
mint.getMintSize = getMintSize;

var multisig = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(multisig, "__esModule", { value: true });
multisig.getMultisigSize = multisig.getMultisigGpaBuilder = multisig.safeFetchAllMultisig = multisig.fetchAllMultisig = multisig.safeFetchMultisig = multisig.fetchMultisig = multisig.deserializeMultisig = multisig.getMultisigAccountDataSerializer = void 0;
const umi_1$1l = cjs$6;
const serializers_1$14 = serializers;
function getMultisigAccountDataSerializer() {
    return (0, serializers_1$14.struct)([
        ['m', (0, serializers_1$14.u8)()],
        ['n', (0, serializers_1$14.u8)()],
        ['isInitialized', (0, serializers_1$14.bool)()],
        ['signers', (0, serializers_1$14.array)((0, serializers_1$14.publicKey)(), { size: 11 })],
    ], { description: 'MultisigAccountData' });
}
multisig.getMultisigAccountDataSerializer = getMultisigAccountDataSerializer;
function deserializeMultisig(rawAccount) {
    return (0, umi_1$1l.deserializeAccount)(rawAccount, getMultisigAccountDataSerializer());
}
multisig.deserializeMultisig = deserializeMultisig;
async function fetchMultisig(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1l.publicKey)(publicKey, false), options);
    (0, umi_1$1l.assertAccountExists)(maybeAccount, 'Multisig');
    return deserializeMultisig(maybeAccount);
}
multisig.fetchMultisig = fetchMultisig;
async function safeFetchMultisig(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1l.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMultisig(maybeAccount) : null;
}
multisig.safeFetchMultisig = safeFetchMultisig;
async function fetchAllMultisig(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1l.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1l.assertAccountExists)(maybeAccount, 'Multisig');
        return deserializeMultisig(maybeAccount);
    });
}
multisig.fetchAllMultisig = fetchAllMultisig;
async function safeFetchAllMultisig(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1l.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMultisig(maybeAccount));
}
multisig.safeFetchAllMultisig = safeFetchAllMultisig;
function getMultisigGpaBuilder(context) {
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    return (0, umi_1$1l.gpaBuilder)(context, programId)
        .registerFields({
        m: [0, (0, serializers_1$14.u8)()],
        n: [1, (0, serializers_1$14.u8)()],
        isInitialized: [2, (0, serializers_1$14.bool)()],
        signers: [3, (0, serializers_1$14.array)((0, serializers_1$14.publicKey)(), { size: 11 })],
    })
        .deserializeUsing((account) => deserializeMultisig(account))
        .whereSize(355);
}
multisig.getMultisigGpaBuilder = getMultisigGpaBuilder;
function getMultisigSize() {
    return 355;
}
multisig.getMultisigSize = getMultisigSize;

var token = {};

var types$5 = {};

var authorityType = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getAuthorityTypeSerializer = exports.AuthorityType = void 0;
	const serializers_1 = serializers;
	var AuthorityType;
	(function (AuthorityType) {
	    AuthorityType[AuthorityType["MintTokens"] = 0] = "MintTokens";
	    AuthorityType[AuthorityType["FreezeAccount"] = 1] = "FreezeAccount";
	    AuthorityType[AuthorityType["AccountOwner"] = 2] = "AccountOwner";
	    AuthorityType[AuthorityType["CloseAccount"] = 3] = "CloseAccount";
	})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));
	function getAuthorityTypeSerializer() {
	    return (0, serializers_1.scalarEnum)(AuthorityType, {
	        description: 'AuthorityType',
	    });
	}
	exports.getAuthorityTypeSerializer = getAuthorityTypeSerializer;
	
} (authorityType));

var tokenState = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getTokenStateSerializer = exports.TokenState = void 0;
	const serializers_1 = serializers;
	var TokenState;
	(function (TokenState) {
	    TokenState[TokenState["Uninitialized"] = 0] = "Uninitialized";
	    TokenState[TokenState["Initialized"] = 1] = "Initialized";
	    TokenState[TokenState["Frozen"] = 2] = "Frozen";
	})(TokenState = exports.TokenState || (exports.TokenState = {}));
	function getTokenStateSerializer() {
	    return (0, serializers_1.scalarEnum)(TokenState, {
	        description: 'TokenState',
	    });
	}
	exports.getTokenStateSerializer = getTokenStateSerializer;
	
} (tokenState));

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(authorityType, exports);
	__exportStar(tokenState, exports);
	
} (types$5));

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(token, "__esModule", { value: true });
token.getTokenSize = token.getTokenGpaBuilder = token.safeFetchAllToken = token.fetchAllToken = token.safeFetchToken = token.fetchToken = token.deserializeToken = token.getTokenAccountDataSerializer = void 0;
const umi_1$1k = cjs$6;
const serializers_1$13 = serializers;
const types_1$b = types$5;
function getTokenAccountDataSerializer() {
    return (0, serializers_1$13.struct)([
        ['mint', (0, serializers_1$13.publicKey)()],
        ['owner', (0, serializers_1$13.publicKey)()],
        ['amount', (0, serializers_1$13.u64)()],
        [
            'delegate',
            (0, serializers_1$13.option)((0, serializers_1$13.publicKey)(), { prefix: (0, serializers_1$13.u32)(), fixed: true }),
        ],
        ['state', (0, types_1$b.getTokenStateSerializer)()],
        ['isNative', (0, serializers_1$13.option)((0, serializers_1$13.u64)(), { prefix: (0, serializers_1$13.u32)(), fixed: true })],
        ['delegatedAmount', (0, serializers_1$13.u64)()],
        [
            'closeAuthority',
            (0, serializers_1$13.option)((0, serializers_1$13.publicKey)(), { prefix: (0, serializers_1$13.u32)(), fixed: true }),
        ],
    ], { description: 'TokenAccountData' });
}
token.getTokenAccountDataSerializer = getTokenAccountDataSerializer;
function deserializeToken(rawAccount) {
    return (0, umi_1$1k.deserializeAccount)(rawAccount, getTokenAccountDataSerializer());
}
token.deserializeToken = deserializeToken;
async function fetchToken(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1k.publicKey)(publicKey, false), options);
    (0, umi_1$1k.assertAccountExists)(maybeAccount, 'Token');
    return deserializeToken(maybeAccount);
}
token.fetchToken = fetchToken;
async function safeFetchToken(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$1k.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeToken(maybeAccount) : null;
}
token.safeFetchToken = safeFetchToken;
async function fetchAllToken(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1k.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$1k.assertAccountExists)(maybeAccount, 'Token');
        return deserializeToken(maybeAccount);
    });
}
token.fetchAllToken = fetchAllToken;
async function safeFetchAllToken(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$1k.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeToken(maybeAccount));
}
token.safeFetchAllToken = safeFetchAllToken;
function getTokenGpaBuilder(context) {
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    return (0, umi_1$1k.gpaBuilder)(context, programId)
        .registerFields({
        mint: [0, (0, serializers_1$13.publicKey)()],
        owner: [32, (0, serializers_1$13.publicKey)()],
        amount: [64, (0, serializers_1$13.u64)()],
        delegate: [
            72,
            (0, serializers_1$13.option)((0, serializers_1$13.publicKey)(), { prefix: (0, serializers_1$13.u32)(), fixed: true }),
        ],
        state: [108, (0, types_1$b.getTokenStateSerializer)()],
        isNative: [109, (0, serializers_1$13.option)((0, serializers_1$13.u64)(), { prefix: (0, serializers_1$13.u32)(), fixed: true })],
        delegatedAmount: [121, (0, serializers_1$13.u64)()],
        closeAuthority: [
            129,
            (0, serializers_1$13.option)((0, serializers_1$13.publicKey)(), { prefix: (0, serializers_1$13.u32)(), fixed: true }),
        ],
    })
        .deserializeUsing((account) => deserializeToken(account))
        .whereSize(165);
}
token.getTokenGpaBuilder = getTokenGpaBuilder;
function getTokenSize() {
    return 165;
}
token.getTokenSize = getTokenSize;

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(addressLookupTable, exports);
	__exportStar(mint, exports);
	__exportStar(multisig, exports);
	__exportStar(token, exports);
	
} (accounts));

var errors$1 = {};

var mplSystemExtras$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mplSystemExtras$1, "__esModule", { value: true });
mplSystemExtras$1.getMplSystemExtrasErrorFromName = mplSystemExtras$1.getMplSystemExtrasErrorFromCode = mplSystemExtras$1.SysExInvalidOwnerForSourceError = mplSystemExtras$1.SysExInvalidSystemProgramError = void 0;
const umi_1$1j = cjs$6;
const codeToErrorMap$8 = new Map();
const nameToErrorMap$8 = new Map();
/** InvalidSystemProgram: Invalid System Program */
class SysExInvalidSystemProgramError extends umi_1$1j.ProgramError {
    constructor(program, cause) {
        super('Invalid System Program', program, cause);
        this.name = 'InvalidSystemProgram';
        this.code = 0x0; // 0
    }
}
mplSystemExtras$1.SysExInvalidSystemProgramError = SysExInvalidSystemProgramError;
codeToErrorMap$8.set(0x0, SysExInvalidSystemProgramError);
nameToErrorMap$8.set('InvalidSystemProgram', SysExInvalidSystemProgramError);
/** InvalidOwnerForSource: Invalid Program Owner For The Source Account */
class SysExInvalidOwnerForSourceError extends umi_1$1j.ProgramError {
    constructor(program, cause) {
        super('Invalid Program Owner For The Source Account', program, cause);
        this.name = 'InvalidOwnerForSource';
        this.code = 0x1; // 1
    }
}
mplSystemExtras$1.SysExInvalidOwnerForSourceError = SysExInvalidOwnerForSourceError;
codeToErrorMap$8.set(0x1, SysExInvalidOwnerForSourceError);
nameToErrorMap$8.set('InvalidOwnerForSource', SysExInvalidOwnerForSourceError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMplSystemExtrasErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$8.get(code);
    return constructor ? new constructor(program, cause) : null;
}
mplSystemExtras$1.getMplSystemExtrasErrorFromCode = getMplSystemExtrasErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMplSystemExtrasErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$8.get(name);
    return constructor ? new constructor(program, cause) : null;
}
mplSystemExtras$1.getMplSystemExtrasErrorFromName = getMplSystemExtrasErrorFromName;

var mplTokenExtras$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mplTokenExtras$1, "__esModule", { value: true });
mplTokenExtras$1.getMplTokenExtrasErrorFromName = mplTokenExtras$1.getMplTokenExtrasErrorFromCode = mplTokenExtras$1.TokExCannotCreateNonAssociatedTokenError = mplTokenExtras$1.TokExInvalidTokenOwnerError = mplTokenExtras$1.TokExInvalidTokenMintError = mplTokenExtras$1.TokExInvalidProgramOwnerError = mplTokenExtras$1.TokExInvalidAssociatedTokenAccountError = mplTokenExtras$1.TokExInvalidAssociatedTokenProgramError = mplTokenExtras$1.TokExInvalidTokenProgramError = mplTokenExtras$1.TokExInvalidSystemProgramError = void 0;
const umi_1$1i = cjs$6;
const codeToErrorMap$7 = new Map();
const nameToErrorMap$7 = new Map();
/** InvalidSystemProgram: Invalid System Program */
class TokExInvalidSystemProgramError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Invalid System Program', program, cause);
        this.name = 'InvalidSystemProgram';
        this.code = 0x0; // 0
    }
}
mplTokenExtras$1.TokExInvalidSystemProgramError = TokExInvalidSystemProgramError;
codeToErrorMap$7.set(0x0, TokExInvalidSystemProgramError);
nameToErrorMap$7.set('InvalidSystemProgram', TokExInvalidSystemProgramError);
/** InvalidTokenProgram: Invalid Token Program */
class TokExInvalidTokenProgramError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Invalid Token Program', program, cause);
        this.name = 'InvalidTokenProgram';
        this.code = 0x1; // 1
    }
}
mplTokenExtras$1.TokExInvalidTokenProgramError = TokExInvalidTokenProgramError;
codeToErrorMap$7.set(0x1, TokExInvalidTokenProgramError);
nameToErrorMap$7.set('InvalidTokenProgram', TokExInvalidTokenProgramError);
/** InvalidAssociatedTokenProgram: Invalid Associated Token Program */
class TokExInvalidAssociatedTokenProgramError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Invalid Associated Token Program', program, cause);
        this.name = 'InvalidAssociatedTokenProgram';
        this.code = 0x2; // 2
    }
}
mplTokenExtras$1.TokExInvalidAssociatedTokenProgramError = TokExInvalidAssociatedTokenProgramError;
codeToErrorMap$7.set(0x2, TokExInvalidAssociatedTokenProgramError);
nameToErrorMap$7.set('InvalidAssociatedTokenProgram', TokExInvalidAssociatedTokenProgramError);
/** InvalidAssociatedTokenAccount: Invalid Associated Token Account: it should derive from the provided mint and owner */
class TokExInvalidAssociatedTokenAccountError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Invalid Associated Token Account: it should derive from the provided mint and owner', program, cause);
        this.name = 'InvalidAssociatedTokenAccount';
        this.code = 0x3; // 3
    }
}
mplTokenExtras$1.TokExInvalidAssociatedTokenAccountError = TokExInvalidAssociatedTokenAccountError;
codeToErrorMap$7.set(0x3, TokExInvalidAssociatedTokenAccountError);
nameToErrorMap$7.set('InvalidAssociatedTokenAccount', TokExInvalidAssociatedTokenAccountError);
/** InvalidProgramOwner: Invalid Program Owner */
class TokExInvalidProgramOwnerError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Invalid Program Owner', program, cause);
        this.name = 'InvalidProgramOwner';
        this.code = 0x4; // 4
    }
}
mplTokenExtras$1.TokExInvalidProgramOwnerError = TokExInvalidProgramOwnerError;
codeToErrorMap$7.set(0x4, TokExInvalidProgramOwnerError);
nameToErrorMap$7.set('InvalidProgramOwner', TokExInvalidProgramOwnerError);
/** InvalidTokenMint: Invalid Token Mint: it should be the same as the provided mint account */
class TokExInvalidTokenMintError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Invalid Token Mint: it should be the same as the provided mint account', program, cause);
        this.name = 'InvalidTokenMint';
        this.code = 0x5; // 5
    }
}
mplTokenExtras$1.TokExInvalidTokenMintError = TokExInvalidTokenMintError;
codeToErrorMap$7.set(0x5, TokExInvalidTokenMintError);
nameToErrorMap$7.set('InvalidTokenMint', TokExInvalidTokenMintError);
/** InvalidTokenOwner: Invalid Program Owner: it should be the same as the provided owner account */
class TokExInvalidTokenOwnerError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Invalid Program Owner: it should be the same as the provided owner account', program, cause);
        this.name = 'InvalidTokenOwner';
        this.code = 0x6; // 6
    }
}
mplTokenExtras$1.TokExInvalidTokenOwnerError = TokExInvalidTokenOwnerError;
codeToErrorMap$7.set(0x6, TokExInvalidTokenOwnerError);
nameToErrorMap$7.set('InvalidTokenOwner', TokExInvalidTokenOwnerError);
/** CannotCreateNonAssociatedToken: Cannot create non-associated token accounts as they would need to sign the transaction. Please provide an associated token account instead */
class TokExCannotCreateNonAssociatedTokenError extends umi_1$1i.ProgramError {
    constructor(program, cause) {
        super('Cannot create non-associated token accounts as they would need to sign the transaction. Please provide an associated token account instead', program, cause);
        this.name = 'CannotCreateNonAssociatedToken';
        this.code = 0x7; // 7
    }
}
mplTokenExtras$1.TokExCannotCreateNonAssociatedTokenError = TokExCannotCreateNonAssociatedTokenError;
codeToErrorMap$7.set(0x7, TokExCannotCreateNonAssociatedTokenError);
nameToErrorMap$7.set('CannotCreateNonAssociatedToken', TokExCannotCreateNonAssociatedTokenError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMplTokenExtrasErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$7.get(code);
    return constructor ? new constructor(program, cause) : null;
}
mplTokenExtras$1.getMplTokenExtrasErrorFromCode = getMplTokenExtrasErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMplTokenExtrasErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$7.get(name);
    return constructor ? new constructor(program, cause) : null;
}
mplTokenExtras$1.getMplTokenExtrasErrorFromName = getMplTokenExtrasErrorFromName;

var splAddressLookupTable$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(splAddressLookupTable$1, "__esModule", { value: true });
splAddressLookupTable$1.getSplAddressLookupTableErrorFromName = splAddressLookupTable$1.getSplAddressLookupTableErrorFromCode = void 0;
const codeToErrorMap$6 = new Map();
const nameToErrorMap$6 = new Map();
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSplAddressLookupTableErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$6.get(code);
    return constructor ? new constructor(program, cause) : null;
}
splAddressLookupTable$1.getSplAddressLookupTableErrorFromCode = getSplAddressLookupTableErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSplAddressLookupTableErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$6.get(name);
    return constructor ? new constructor(program, cause) : null;
}
splAddressLookupTable$1.getSplAddressLookupTableErrorFromName = getSplAddressLookupTableErrorFromName;

var splAssociatedToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(splAssociatedToken$1, "__esModule", { value: true });
splAssociatedToken$1.getSplAssociatedTokenErrorFromName = splAssociatedToken$1.getSplAssociatedTokenErrorFromCode = splAssociatedToken$1.AtaInvalidOwnerError = void 0;
const umi_1$1h = cjs$6;
const codeToErrorMap$5 = new Map();
const nameToErrorMap$5 = new Map();
/** InvalidOwner: Associated token account owner does not match address derivation */
class AtaInvalidOwnerError extends umi_1$1h.ProgramError {
    constructor(program, cause) {
        super('Associated token account owner does not match address derivation', program, cause);
        this.name = 'InvalidOwner';
        this.code = 0x0; // 0
    }
}
splAssociatedToken$1.AtaInvalidOwnerError = AtaInvalidOwnerError;
codeToErrorMap$5.set(0x0, AtaInvalidOwnerError);
nameToErrorMap$5.set('InvalidOwner', AtaInvalidOwnerError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSplAssociatedTokenErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$5.get(code);
    return constructor ? new constructor(program, cause) : null;
}
splAssociatedToken$1.getSplAssociatedTokenErrorFromCode = getSplAssociatedTokenErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSplAssociatedTokenErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$5.get(name);
    return constructor ? new constructor(program, cause) : null;
}
splAssociatedToken$1.getSplAssociatedTokenErrorFromName = getSplAssociatedTokenErrorFromName;

var splComputeBudget$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(splComputeBudget$1, "__esModule", { value: true });
splComputeBudget$1.getSplComputeBudgetErrorFromName = splComputeBudget$1.getSplComputeBudgetErrorFromCode = void 0;
const codeToErrorMap$4 = new Map();
const nameToErrorMap$4 = new Map();
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSplComputeBudgetErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$4.get(code);
    return constructor ? new constructor(program, cause) : null;
}
splComputeBudget$1.getSplComputeBudgetErrorFromCode = getSplComputeBudgetErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSplComputeBudgetErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$4.get(name);
    return constructor ? new constructor(program, cause) : null;
}
splComputeBudget$1.getSplComputeBudgetErrorFromName = getSplComputeBudgetErrorFromName;

var splMemo$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(splMemo$1, "__esModule", { value: true });
splMemo$1.getSplMemoErrorFromName = splMemo$1.getSplMemoErrorFromCode = void 0;
const codeToErrorMap$3 = new Map();
const nameToErrorMap$3 = new Map();
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSplMemoErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$3.get(code);
    return constructor ? new constructor(program, cause) : null;
}
splMemo$1.getSplMemoErrorFromCode = getSplMemoErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSplMemoErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$3.get(name);
    return constructor ? new constructor(program, cause) : null;
}
splMemo$1.getSplMemoErrorFromName = getSplMemoErrorFromName;

var splSystem$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(splSystem$1, "__esModule", { value: true });
splSystem$1.getSplSystemErrorFromName = splSystem$1.getSplSystemErrorFromCode = void 0;
const codeToErrorMap$2 = new Map();
const nameToErrorMap$2 = new Map();
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSplSystemErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$2.get(code);
    return constructor ? new constructor(program, cause) : null;
}
splSystem$1.getSplSystemErrorFromCode = getSplSystemErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSplSystemErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$2.get(name);
    return constructor ? new constructor(program, cause) : null;
}
splSystem$1.getSplSystemErrorFromName = getSplSystemErrorFromName;

var splToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(splToken$1, "__esModule", { value: true });
splToken$1.getSplTokenErrorFromName = splToken$1.getSplTokenErrorFromCode = splToken$1.TokNonNativeNotSupportedError = splToken$1.TokMintDecimalsMismatchError = splToken$1.TokAccountFrozenError = splToken$1.TokMintCannotFreezeError = splToken$1.TokAuthorityTypeNotSupportedError = splToken$1.TokOverflowError = splToken$1.TokInvalidStateError = splToken$1.TokInvalidInstructionError = splToken$1.TokNonNativeHasBalanceError = splToken$1.TokNativeNotSupportedError = splToken$1.TokUninitializedStateError = splToken$1.TokInvalidNumberOfRequiredSignersError = splToken$1.TokInvalidNumberOfProvidedSignersError = splToken$1.TokAlreadyInUseError = splToken$1.TokFixedSupplyError = splToken$1.TokOwnerMismatchError = splToken$1.TokMintMismatchError = splToken$1.TokInvalidMintError = splToken$1.TokInsufficientFundsError = splToken$1.TokNotRentExemptError = void 0;
const umi_1$1g = cjs$6;
const codeToErrorMap$1 = new Map();
const nameToErrorMap$1 = new Map();
/** NotRentExempt: Lamport balance below rent-exempt threshold */
class TokNotRentExemptError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Lamport balance below rent-exempt threshold', program, cause);
        this.name = 'NotRentExempt';
        this.code = 0x0; // 0
    }
}
splToken$1.TokNotRentExemptError = TokNotRentExemptError;
codeToErrorMap$1.set(0x0, TokNotRentExemptError);
nameToErrorMap$1.set('NotRentExempt', TokNotRentExemptError);
/** InsufficientFunds: Insufficient funds */
class TokInsufficientFundsError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Insufficient funds', program, cause);
        this.name = 'InsufficientFunds';
        this.code = 0x1; // 1
    }
}
splToken$1.TokInsufficientFundsError = TokInsufficientFundsError;
codeToErrorMap$1.set(0x1, TokInsufficientFundsError);
nameToErrorMap$1.set('InsufficientFunds', TokInsufficientFundsError);
/** InvalidMint: Invalid Mint */
class TokInvalidMintError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Invalid Mint', program, cause);
        this.name = 'InvalidMint';
        this.code = 0x2; // 2
    }
}
splToken$1.TokInvalidMintError = TokInvalidMintError;
codeToErrorMap$1.set(0x2, TokInvalidMintError);
nameToErrorMap$1.set('InvalidMint', TokInvalidMintError);
/** MintMismatch: Account not associated with this Mint */
class TokMintMismatchError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Account not associated with this Mint', program, cause);
        this.name = 'MintMismatch';
        this.code = 0x3; // 3
    }
}
splToken$1.TokMintMismatchError = TokMintMismatchError;
codeToErrorMap$1.set(0x3, TokMintMismatchError);
nameToErrorMap$1.set('MintMismatch', TokMintMismatchError);
/** OwnerMismatch: Owner does not match */
class TokOwnerMismatchError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Owner does not match', program, cause);
        this.name = 'OwnerMismatch';
        this.code = 0x4; // 4
    }
}
splToken$1.TokOwnerMismatchError = TokOwnerMismatchError;
codeToErrorMap$1.set(0x4, TokOwnerMismatchError);
nameToErrorMap$1.set('OwnerMismatch', TokOwnerMismatchError);
/** FixedSupply: Fixed supply */
class TokFixedSupplyError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Fixed supply', program, cause);
        this.name = 'FixedSupply';
        this.code = 0x5; // 5
    }
}
splToken$1.TokFixedSupplyError = TokFixedSupplyError;
codeToErrorMap$1.set(0x5, TokFixedSupplyError);
nameToErrorMap$1.set('FixedSupply', TokFixedSupplyError);
/** AlreadyInUse: Already in use */
class TokAlreadyInUseError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Already in use', program, cause);
        this.name = 'AlreadyInUse';
        this.code = 0x6; // 6
    }
}
splToken$1.TokAlreadyInUseError = TokAlreadyInUseError;
codeToErrorMap$1.set(0x6, TokAlreadyInUseError);
nameToErrorMap$1.set('AlreadyInUse', TokAlreadyInUseError);
/** InvalidNumberOfProvidedSigners: Invalid number of provided signers */
class TokInvalidNumberOfProvidedSignersError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Invalid number of provided signers', program, cause);
        this.name = 'InvalidNumberOfProvidedSigners';
        this.code = 0x7; // 7
    }
}
splToken$1.TokInvalidNumberOfProvidedSignersError = TokInvalidNumberOfProvidedSignersError;
codeToErrorMap$1.set(0x7, TokInvalidNumberOfProvidedSignersError);
nameToErrorMap$1.set('InvalidNumberOfProvidedSigners', TokInvalidNumberOfProvidedSignersError);
/** InvalidNumberOfRequiredSigners: Invalid number of required signers */
class TokInvalidNumberOfRequiredSignersError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Invalid number of required signers', program, cause);
        this.name = 'InvalidNumberOfRequiredSigners';
        this.code = 0x8; // 8
    }
}
splToken$1.TokInvalidNumberOfRequiredSignersError = TokInvalidNumberOfRequiredSignersError;
codeToErrorMap$1.set(0x8, TokInvalidNumberOfRequiredSignersError);
nameToErrorMap$1.set('InvalidNumberOfRequiredSigners', TokInvalidNumberOfRequiredSignersError);
/** UninitializedState: State is unititialized */
class TokUninitializedStateError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('State is unititialized', program, cause);
        this.name = 'UninitializedState';
        this.code = 0x9; // 9
    }
}
splToken$1.TokUninitializedStateError = TokUninitializedStateError;
codeToErrorMap$1.set(0x9, TokUninitializedStateError);
nameToErrorMap$1.set('UninitializedState', TokUninitializedStateError);
/** NativeNotSupported: Instruction does not support native tokens */
class TokNativeNotSupportedError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Instruction does not support native tokens', program, cause);
        this.name = 'NativeNotSupported';
        this.code = 0xa; // 10
    }
}
splToken$1.TokNativeNotSupportedError = TokNativeNotSupportedError;
codeToErrorMap$1.set(0xa, TokNativeNotSupportedError);
nameToErrorMap$1.set('NativeNotSupported', TokNativeNotSupportedError);
/** NonNativeHasBalance: Non-native account can only be closed if its balance is zero */
class TokNonNativeHasBalanceError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Non-native account can only be closed if its balance is zero', program, cause);
        this.name = 'NonNativeHasBalance';
        this.code = 0xb; // 11
    }
}
splToken$1.TokNonNativeHasBalanceError = TokNonNativeHasBalanceError;
codeToErrorMap$1.set(0xb, TokNonNativeHasBalanceError);
nameToErrorMap$1.set('NonNativeHasBalance', TokNonNativeHasBalanceError);
/** InvalidInstruction: Invalid instruction */
class TokInvalidInstructionError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Invalid instruction', program, cause);
        this.name = 'InvalidInstruction';
        this.code = 0xc; // 12
    }
}
splToken$1.TokInvalidInstructionError = TokInvalidInstructionError;
codeToErrorMap$1.set(0xc, TokInvalidInstructionError);
nameToErrorMap$1.set('InvalidInstruction', TokInvalidInstructionError);
/** InvalidState: State is invalid for requested operation */
class TokInvalidStateError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('State is invalid for requested operation', program, cause);
        this.name = 'InvalidState';
        this.code = 0xd; // 13
    }
}
splToken$1.TokInvalidStateError = TokInvalidStateError;
codeToErrorMap$1.set(0xd, TokInvalidStateError);
nameToErrorMap$1.set('InvalidState', TokInvalidStateError);
/** Overflow: Operation overflowed */
class TokOverflowError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Operation overflowed', program, cause);
        this.name = 'Overflow';
        this.code = 0xe; // 14
    }
}
splToken$1.TokOverflowError = TokOverflowError;
codeToErrorMap$1.set(0xe, TokOverflowError);
nameToErrorMap$1.set('Overflow', TokOverflowError);
/** AuthorityTypeNotSupported: Account does not support specified authority type */
class TokAuthorityTypeNotSupportedError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Account does not support specified authority type', program, cause);
        this.name = 'AuthorityTypeNotSupported';
        this.code = 0xf; // 15
    }
}
splToken$1.TokAuthorityTypeNotSupportedError = TokAuthorityTypeNotSupportedError;
codeToErrorMap$1.set(0xf, TokAuthorityTypeNotSupportedError);
nameToErrorMap$1.set('AuthorityTypeNotSupported', TokAuthorityTypeNotSupportedError);
/** MintCannotFreeze: This token mint cannot freeze accounts */
class TokMintCannotFreezeError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('This token mint cannot freeze accounts', program, cause);
        this.name = 'MintCannotFreeze';
        this.code = 0x10; // 16
    }
}
splToken$1.TokMintCannotFreezeError = TokMintCannotFreezeError;
codeToErrorMap$1.set(0x10, TokMintCannotFreezeError);
nameToErrorMap$1.set('MintCannotFreeze', TokMintCannotFreezeError);
/** AccountFrozen: Account is frozen */
class TokAccountFrozenError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Account is frozen', program, cause);
        this.name = 'AccountFrozen';
        this.code = 0x11; // 17
    }
}
splToken$1.TokAccountFrozenError = TokAccountFrozenError;
codeToErrorMap$1.set(0x11, TokAccountFrozenError);
nameToErrorMap$1.set('AccountFrozen', TokAccountFrozenError);
/** MintDecimalsMismatch: The provided decimals value different from the Mint decimals */
class TokMintDecimalsMismatchError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('The provided decimals value different from the Mint decimals', program, cause);
        this.name = 'MintDecimalsMismatch';
        this.code = 0x12; // 18
    }
}
splToken$1.TokMintDecimalsMismatchError = TokMintDecimalsMismatchError;
codeToErrorMap$1.set(0x12, TokMintDecimalsMismatchError);
nameToErrorMap$1.set('MintDecimalsMismatch', TokMintDecimalsMismatchError);
/** NonNativeNotSupported: Instruction does not support non-native tokens */
class TokNonNativeNotSupportedError extends umi_1$1g.ProgramError {
    constructor(program, cause) {
        super('Instruction does not support non-native tokens', program, cause);
        this.name = 'NonNativeNotSupported';
        this.code = 0x13; // 19
    }
}
splToken$1.TokNonNativeNotSupportedError = TokNonNativeNotSupportedError;
codeToErrorMap$1.set(0x13, TokNonNativeNotSupportedError);
nameToErrorMap$1.set('NonNativeNotSupported', TokNonNativeNotSupportedError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSplTokenErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap$1.get(code);
    return constructor ? new constructor(program, cause) : null;
}
splToken$1.getSplTokenErrorFromCode = getSplTokenErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSplTokenErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap$1.get(name);
    return constructor ? new constructor(program, cause) : null;
}
splToken$1.getSplTokenErrorFromName = getSplTokenErrorFromName;

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(mplSystemExtras$1, exports);
	__exportStar(mplTokenExtras$1, exports);
	__exportStar(splAddressLookupTable$1, exports);
	__exportStar(splAssociatedToken$1, exports);
	__exportStar(splComputeBudget$1, exports);
	__exportStar(splMemo$1, exports);
	__exportStar(splSystem$1, exports);
	__exportStar(splToken$1, exports);
	
} (errors$1));

var instructions$1 = {};

var addMemo$1 = {};

var shared$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(shared$1, "__esModule", { value: true });
shared$1.getAccountMetasAndSigners = shared$1.expectPda = shared$1.expectPublicKey = shared$1.expectSome = void 0;
const umi_1$1f = cjs$6;
/**
 * Asserts that the given value is not null or undefined.
 * @internal
 */
function expectSome$1(value) {
    if (value == null) {
        throw new Error('Expected a value but received null or undefined.');
    }
    return value;
}
shared$1.expectSome = expectSome$1;
/**
 * Asserts that the given value is a PublicKey.
 * @internal
 */
function expectPublicKey$1(value) {
    if (!value) {
        throw new Error('Expected a PublicKey.');
    }
    return (0, umi_1$1f.publicKey)(value, false);
}
shared$1.expectPublicKey = expectPublicKey$1;
/**
 * Asserts that the given value is a PDA.
 * @internal
 */
function expectPda$1(value) {
    if (!value || !Array.isArray(value) || !(0, umi_1$1f.isPda)(value)) {
        throw new Error('Expected a PDA.');
    }
    return value;
}
shared$1.expectPda = expectPda$1;
/**
 * Get account metas and signers from resolved accounts.
 * @internal
 */
function getAccountMetasAndSigners$1(accounts, optionalAccountStrategy, programId) {
    const keys = [];
    const signers = [];
    accounts.forEach((account) => {
        if (!account.value) {
            if (optionalAccountStrategy === 'omitted')
                return;
            keys.push({ pubkey: programId, isSigner: false, isWritable: false });
            return;
        }
        if ((0, umi_1$1f.isSigner)(account.value)) {
            signers.push(account.value);
        }
        keys.push({
            pubkey: (0, umi_1$1f.publicKey)(account.value, false),
            isSigner: (0, umi_1$1f.isSigner)(account.value),
            isWritable: account.isWritable,
        });
    });
    return [keys, signers];
}
shared$1.getAccountMetasAndSigners = getAccountMetasAndSigners$1;

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(addMemo$1, "__esModule", { value: true });
addMemo$1.addMemo = addMemo$1.getAddMemoInstructionDataSerializer = void 0;
const umi_1$1e = cjs$6;
const serializers_1$12 = serializers;
const shared_1$$ = shared$1;
function getAddMemoInstructionDataSerializer() {
    return (0, serializers_1$12.struct)([['memo', (0, serializers_1$12.string)()]], {
        description: 'AddMemoInstructionData',
    });
}
addMemo$1.getAddMemoInstructionDataSerializer = getAddMemoInstructionDataSerializer;
// Instruction.
function addMemo(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splMemo', 'Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo');
    // Accounts.
    const resolvedAccounts = {};
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$$.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getAddMemoInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$1e.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
addMemo$1.addMemo = addMemo;

var amountToUiAmount$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(amountToUiAmount$1, "__esModule", { value: true });
amountToUiAmount$1.amountToUiAmount = amountToUiAmount$1.getAmountToUiAmountInstructionDataSerializer = void 0;
const umi_1$1d = cjs$6;
const serializers_1$11 = serializers;
const shared_1$_ = shared$1;
function getAmountToUiAmountInstructionDataSerializer() {
    return (0, serializers_1$11.mapSerializer)((0, serializers_1$11.struct)([
        ['discriminator', (0, serializers_1$11.u8)()],
        ['amount', (0, serializers_1$11.u64)()],
    ], { description: 'AmountToUiAmountInstructionData' }), (value) => ({ ...value, discriminator: 23 }));
}
amountToUiAmount$1.getAmountToUiAmountInstructionDataSerializer = getAmountToUiAmountInstructionDataSerializer;
// Instruction.
function amountToUiAmount(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        mint: { index: 0, isWritable: false, value: input.mint ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$_.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getAmountToUiAmountInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$1d.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
amountToUiAmount$1.amountToUiAmount = amountToUiAmount;

var approveTokenDelegate$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(approveTokenDelegate$1, "__esModule", { value: true });
approveTokenDelegate$1.approveTokenDelegate = approveTokenDelegate$1.getApproveTokenDelegateInstructionDataSerializer = void 0;
const umi_1$1c = cjs$6;
const serializers_1$10 = serializers;
const shared_1$Z = shared$1;
function getApproveTokenDelegateInstructionDataSerializer() {
    return (0, serializers_1$10.mapSerializer)((0, serializers_1$10.struct)([
        ['discriminator', (0, serializers_1$10.u8)()],
        ['amount', (0, serializers_1$10.u64)()],
    ], { description: 'ApproveTokenDelegateInstructionData' }), (value) => ({ ...value, discriminator: 4 }));
}
approveTokenDelegate$1.getApproveTokenDelegateInstructionDataSerializer = getApproveTokenDelegateInstructionDataSerializer;
// Instruction.
function approveTokenDelegate(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        source: { index: 0, isWritable: true, value: input.source ?? null },
        delegate: { index: 1, isWritable: false, value: input.delegate ?? null },
        owner: { index: 2, isWritable: false, value: input.owner ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$Z.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getApproveTokenDelegateInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$1c.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
approveTokenDelegate$1.approveTokenDelegate = approveTokenDelegate;

var approveTokenDelegateChecked$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(approveTokenDelegateChecked$1, "__esModule", { value: true });
approveTokenDelegateChecked$1.approveTokenDelegateChecked = approveTokenDelegateChecked$1.getApproveTokenDelegateCheckedInstructionDataSerializer = void 0;
const umi_1$1b = cjs$6;
const serializers_1$$ = serializers;
const shared_1$Y = shared$1;
function getApproveTokenDelegateCheckedInstructionDataSerializer() {
    return (0, serializers_1$$.mapSerializer)((0, serializers_1$$.struct)([
        ['discriminator', (0, serializers_1$$.u8)()],
        ['amount', (0, serializers_1$$.u64)()],
        ['decimals', (0, serializers_1$$.u8)()],
    ], { description: 'ApproveTokenDelegateCheckedInstructionData' }), (value) => ({ ...value, discriminator: 13 }));
}
approveTokenDelegateChecked$1.getApproveTokenDelegateCheckedInstructionDataSerializer = getApproveTokenDelegateCheckedInstructionDataSerializer;
// Instruction.
function approveTokenDelegateChecked(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        source: { index: 0, isWritable: true, value: input.source ?? null },
        mint: { index: 1, isWritable: false, value: input.mint ?? null },
        delegate: { index: 2, isWritable: false, value: input.delegate ?? null },
        owner: { index: 3, isWritable: false, value: input.owner ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$Y.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getApproveTokenDelegateCheckedInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$1b.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
approveTokenDelegateChecked$1.approveTokenDelegateChecked = approveTokenDelegateChecked;

var burnToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(burnToken$1, "__esModule", { value: true });
burnToken$1.burnToken = burnToken$1.getBurnTokenInstructionDataSerializer = void 0;
const umi_1$1a = cjs$6;
const serializers_1$_ = serializers;
const shared_1$X = shared$1;
function getBurnTokenInstructionDataSerializer() {
    return (0, serializers_1$_.mapSerializer)((0, serializers_1$_.struct)([
        ['discriminator', (0, serializers_1$_.u8)()],
        ['amount', (0, serializers_1$_.u64)()],
    ], { description: 'BurnTokenInstructionData' }), (value) => ({ ...value, discriminator: 8 }));
}
burnToken$1.getBurnTokenInstructionDataSerializer = getBurnTokenInstructionDataSerializer;
// Instruction.
function burnToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        mint: { index: 1, isWritable: true, value: input.mint ?? null },
        authority: { index: 2, isWritable: false, value: input.authority ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$X.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getBurnTokenInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$1a.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
burnToken$1.burnToken = burnToken;

var burnTokenChecked$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(burnTokenChecked$1, "__esModule", { value: true });
burnTokenChecked$1.burnTokenChecked = burnTokenChecked$1.getBurnTokenCheckedInstructionDataSerializer = void 0;
const umi_1$19 = cjs$6;
const serializers_1$Z = serializers;
const shared_1$W = shared$1;
function getBurnTokenCheckedInstructionDataSerializer() {
    return (0, serializers_1$Z.mapSerializer)((0, serializers_1$Z.struct)([
        ['discriminator', (0, serializers_1$Z.u8)()],
        ['amount', (0, serializers_1$Z.u64)()],
        ['decimals', (0, serializers_1$Z.u8)()],
    ], { description: 'BurnTokenCheckedInstructionData' }), (value) => ({ ...value, discriminator: 15 }));
}
burnTokenChecked$1.getBurnTokenCheckedInstructionDataSerializer = getBurnTokenCheckedInstructionDataSerializer;
// Instruction.
function burnTokenChecked(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        mint: { index: 1, isWritable: true, value: input.mint ?? null },
        authority: { index: 2, isWritable: false, value: input.authority ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$W.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getBurnTokenCheckedInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$19.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
burnTokenChecked$1.burnTokenChecked = burnTokenChecked;

var closeLut$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(closeLut$1, "__esModule", { value: true });
closeLut$1.closeLut = closeLut$1.getCloseLutInstructionDataSerializer = void 0;
const umi_1$18 = cjs$6;
const serializers_1$Y = serializers;
const shared_1$V = shared$1;
function getCloseLutInstructionDataSerializer() {
    return (0, serializers_1$Y.mapSerializer)((0, serializers_1$Y.struct)([['discriminator', (0, serializers_1$Y.u32)()]], {
        description: 'CloseLutInstructionData',
    }), (value) => ({ ...value, discriminator: 4 }));
}
closeLut$1.getCloseLutInstructionDataSerializer = getCloseLutInstructionDataSerializer;
// Instruction.
function closeLut(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {
        address: { index: 0, isWritable: true, value: input.address ?? null },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
        recipient: { index: 2, isWritable: true, value: input.recipient ?? null },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$V.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCloseLutInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$18.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
closeLut$1.closeLut = closeLut;

var closeToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(closeToken$1, "__esModule", { value: true });
closeToken$1.closeToken = closeToken$1.getCloseTokenInstructionDataSerializer = void 0;
const umi_1$17 = cjs$6;
const serializers_1$X = serializers;
const shared_1$U = shared$1;
function getCloseTokenInstructionDataSerializer() {
    return (0, serializers_1$X.mapSerializer)((0, serializers_1$X.struct)([['discriminator', (0, serializers_1$X.u8)()]], {
        description: 'CloseTokenInstructionData',
    }), (value) => ({ ...value, discriminator: 9 }));
}
closeToken$1.getCloseTokenInstructionDataSerializer = getCloseTokenInstructionDataSerializer;
// Instruction.
function closeToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        destination: {
            index: 1,
            isWritable: true,
            value: input.destination ?? null,
        },
        owner: { index: 2, isWritable: false, value: input.owner ?? null },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$U.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCloseTokenInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$17.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
closeToken$1.closeToken = closeToken;

var createAccount$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(createAccount$1, "__esModule", { value: true });
createAccount$1.createAccount = createAccount$1.getCreateAccountInstructionDataSerializer = void 0;
const umi_1$16 = cjs$6;
const serializers_1$W = serializers;
const shared_1$T = shared$1;
function getCreateAccountInstructionDataSerializer() {
    return (0, serializers_1$W.mapSerializer)((0, serializers_1$W.struct)([
        ['discriminator', (0, serializers_1$W.u32)()],
        ['lamports', (0, umi_1$16.mapAmountSerializer)((0, serializers_1$W.u64)(), 'SOL', 9)],
        ['space', (0, serializers_1$W.u64)()],
        ['programId', (0, serializers_1$W.publicKey)()],
    ], { description: 'CreateAccountInstructionData' }), (value) => ({ ...value, discriminator: 0 }));
}
createAccount$1.getCreateAccountInstructionDataSerializer = getCreateAccountInstructionDataSerializer;
// Instruction.
function createAccount(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {
        payer: { index: 0, isWritable: true, value: input.payer ?? null },
        newAccount: { index: 1, isWritable: true, value: input.newAccount ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$T.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCreateAccountInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = Number(input.space) + umi_1$16.ACCOUNT_HEADER_SIZE;
    return (0, umi_1$16.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
createAccount$1.createAccount = createAccount;

var createAccountWithRent$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(createAccountWithRent$1, "__esModule", { value: true });
createAccountWithRent$1.createAccountWithRent = createAccountWithRent$1.getCreateAccountWithRentInstructionDataSerializer = void 0;
const umi_1$15 = cjs$6;
const serializers_1$V = serializers;
const shared_1$S = shared$1;
function getCreateAccountWithRentInstructionDataSerializer() {
    return (0, serializers_1$V.mapSerializer)((0, serializers_1$V.struct)([
        ['discriminator', (0, serializers_1$V.u8)()],
        ['space', (0, serializers_1$V.u64)()],
        ['programId', (0, serializers_1$V.publicKey)()],
    ], { description: 'CreateAccountWithRentInstructionData' }), (value) => ({ ...value, discriminator: 0 }));
}
createAccountWithRent$1.getCreateAccountWithRentInstructionDataSerializer = getCreateAccountWithRentInstructionDataSerializer;
// Instruction.
function createAccountWithRent(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplSystemExtras', 'SysExL2WDyJi9aRZrXorrjHJut3JwHQ7R9bTyctbNNG');
    // Accounts.
    const resolvedAccounts = {
        payer: { index: 0, isWritable: true, value: input.payer ?? null },
        newAccount: { index: 1, isWritable: true, value: input.newAccount ?? null },
        systemProgram: {
            index: 2,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$S.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCreateAccountWithRentInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = Number(input.space) + umi_1$15.ACCOUNT_HEADER_SIZE;
    return (0, umi_1$15.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
createAccountWithRent$1.createAccountWithRent = createAccountWithRent;

var createAssociatedToken$1 = {};

var hooked = {};

var AssociatedToken = {};

Object.defineProperty(AssociatedToken, "__esModule", { value: true });
AssociatedToken.findAssociatedTokenPda = void 0;
const serializers_1$U = serializers;
function findAssociatedTokenPda(context, seeds) {
    const associatedTokenProgramId = context.programs.getPublicKey('splAssociatedToken');
    const tokenProgramIdResolved = seeds.tokenProgramId ?? context.programs.getPublicKey('splToken');
    return context.eddsa.findPda(associatedTokenProgramId, [
        (0, serializers_1$U.publicKey)().serialize(seeds.owner),
        (0, serializers_1$U.publicKey)().serialize(tokenProgramIdResolved),
        (0, serializers_1$U.publicKey)().serialize(seeds.mint),
    ]);
}
AssociatedToken.findAssociatedTokenPda = findAssociatedTokenPda;

var resolvers = {};

Object.defineProperty(resolvers, "__esModule", { value: true });
resolvers.resolveExtendLutBytes = void 0;
const resolveExtendLutBytes = (context, accounts, args, programId) => 32 * args.addresses.length;
resolvers.resolveExtendLutBytes = resolveExtendLutBytes;

(function (exports) {
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(AssociatedToken, exports);
	__exportStar(resolvers, exports);
	
} (hooked));

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(createAssociatedToken$1, "__esModule", { value: true });
createAssociatedToken$1.createAssociatedToken = void 0;
const umi_1$14 = cjs$6;
const hooked_1$3 = hooked;
const accounts_1$1 = accounts;
const shared_1$R = shared$1;
// Instruction.
function createAssociatedToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
    // Accounts.
    const resolvedAccounts = {
        payer: { index: 0, isWritable: true, value: input.payer ?? null },
        ata: { index: 1, isWritable: true, value: input.ata ?? null },
        owner: { index: 2, isWritable: false, value: input.owner ?? null },
        mint: { index: 3, isWritable: false, value: input.mint ?? null },
        systemProgram: {
            index: 4,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        tokenProgram: {
            index: 5,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.owner.value) {
        resolvedAccounts.owner.value = context.identity.publicKey;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.ata.value) {
        resolvedAccounts.ata.value = (0, hooked_1$3.findAssociatedTokenPda)(context, {
            owner: (0, shared_1$R.expectPublicKey)(resolvedAccounts.owner.value),
            mint: (0, shared_1$R.expectPublicKey)(resolvedAccounts.mint.value),
            tokenProgramId: (0, shared_1$R.expectPublicKey)(resolvedAccounts.tokenProgram.value),
        });
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$R.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = new Uint8Array();
    // Bytes Created On Chain.
    const bytesCreatedOnChain = (0, accounts_1$1.getTokenSize)() + umi_1$14.ACCOUNT_HEADER_SIZE;
    return (0, umi_1$14.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
createAssociatedToken$1.createAssociatedToken = createAssociatedToken;

var createEmptyLut$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(createEmptyLut$1, "__esModule", { value: true });
createEmptyLut$1.createEmptyLut = createEmptyLut$1.getCreateEmptyLutInstructionDataSerializer = void 0;
const umi_1$13 = cjs$6;
const serializers_1$T = serializers;
const accounts_1 = accounts;
const shared_1$Q = shared$1;
function getCreateEmptyLutInstructionDataSerializer() {
    return (0, serializers_1$T.mapSerializer)((0, serializers_1$T.struct)([
        ['discriminator', (0, serializers_1$T.u32)()],
        ['recentSlot', (0, serializers_1$T.u64)()],
        ['bump', (0, serializers_1$T.u8)()],
    ], { description: 'CreateEmptyLutInstructionData' }), (value) => ({ ...value, discriminator: 0 }));
}
createEmptyLut$1.getCreateEmptyLutInstructionDataSerializer = getCreateEmptyLutInstructionDataSerializer;
// Instruction.
function createEmptyLut(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {
        address: { index: 0, isWritable: true, value: input.address ?? null },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
        payer: { index: 2, isWritable: true, value: input.payer ?? null },
        systemProgram: {
            index: 3,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.address.value) {
        resolvedAccounts.address.value = (0, accounts_1.findAddressLookupTablePda)(context, {
            authority: (0, shared_1$Q.expectPublicKey)(resolvedAccounts.authority.value),
            recentSlot: (0, shared_1$Q.expectSome)(resolvedArgs.recentSlot),
        });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedArgs.bump) {
        resolvedArgs.bump = (0, shared_1$Q.expectPda)(resolvedAccounts.address.value)[1];
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$Q.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCreateEmptyLutInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 56 + umi_1$13.ACCOUNT_HEADER_SIZE;
    return (0, umi_1$13.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
createEmptyLut$1.createEmptyLut = createEmptyLut;

var createIdempotentAssociatedToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(createIdempotentAssociatedToken$1, "__esModule", { value: true });
createIdempotentAssociatedToken$1.createIdempotentAssociatedToken = void 0;
const umi_1$12 = cjs$6;
const shared_1$P = shared$1;
// Instruction.
function createIdempotentAssociatedToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
    // Accounts.
    const resolvedAccounts = {
        payer: { index: 0, isWritable: true, value: input.payer ?? null },
        ata: { index: 1, isWritable: true, value: input.ata ?? null },
        owner: { index: 2, isWritable: false, value: input.owner ?? null },
        mint: { index: 3, isWritable: false, value: input.mint ?? null },
        systemProgram: {
            index: 4,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        tokenProgram: {
            index: 5,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$P.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = new Uint8Array();
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$12.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
createIdempotentAssociatedToken$1.createIdempotentAssociatedToken = createIdempotentAssociatedToken;

var createTokenIfMissing$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(createTokenIfMissing$1, "__esModule", { value: true });
createTokenIfMissing$1.createTokenIfMissing = createTokenIfMissing$1.getCreateTokenIfMissingInstructionDataSerializer = void 0;
const umi_1$11 = cjs$6;
const serializers_1$S = serializers;
const hooked_1$2 = hooked;
const shared_1$O = shared$1;
function getCreateTokenIfMissingInstructionDataSerializer() {
    return (0, serializers_1$S.mapSerializer)((0, serializers_1$S.struct)([['discriminator', (0, serializers_1$S.u8)()]], {
        description: 'CreateTokenIfMissingInstructionData',
    }), (value) => ({ ...value, discriminator: 0 }));
}
createTokenIfMissing$1.getCreateTokenIfMissingInstructionDataSerializer = getCreateTokenIfMissingInstructionDataSerializer;
// Instruction.
function createTokenIfMissing(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenExtras', 'TokExjvjJmhKaRBShsBAsbSvEWMA1AgUNK7ps4SAc2p');
    // Accounts.
    const resolvedAccounts = {
        payer: { index: 0, isWritable: true, value: input.payer ?? null },
        token: { index: 1, isWritable: false, value: input.token ?? null },
        mint: { index: 2, isWritable: false, value: input.mint ?? null },
        owner: { index: 3, isWritable: false, value: input.owner ?? null },
        ata: { index: 4, isWritable: true, value: input.ata ?? null },
        systemProgram: {
            index: 5,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        tokenProgram: {
            index: 6,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        ataProgram: {
            index: 7,
            isWritable: false,
            value: input.ataProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.owner.value) {
        resolvedAccounts.owner.value = context.identity.publicKey;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.ata.value) {
        resolvedAccounts.ata.value = (0, hooked_1$2.findAssociatedTokenPda)(context, {
            owner: (0, shared_1$O.expectPublicKey)(resolvedAccounts.owner.value),
            mint: (0, shared_1$O.expectPublicKey)(resolvedAccounts.mint.value),
            tokenProgramId: (0, shared_1$O.expectPublicKey)(resolvedAccounts.tokenProgram.value),
        });
    }
    if (!resolvedAccounts.token.value) {
        resolvedAccounts.token.value = (0, shared_1$O.expectSome)(resolvedAccounts.ata.value);
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.ataProgram.value) {
        resolvedAccounts.ataProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
        resolvedAccounts.ataProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$O.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCreateTokenIfMissingInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$11.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
createTokenIfMissing$1.createTokenIfMissing = createTokenIfMissing;

var deactivateLut$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(deactivateLut$1, "__esModule", { value: true });
deactivateLut$1.deactivateLut = deactivateLut$1.getDeactivateLutInstructionDataSerializer = void 0;
const umi_1$10 = cjs$6;
const serializers_1$R = serializers;
const shared_1$N = shared$1;
function getDeactivateLutInstructionDataSerializer() {
    return (0, serializers_1$R.mapSerializer)((0, serializers_1$R.struct)([['discriminator', (0, serializers_1$R.u32)()]], {
        description: 'DeactivateLutInstructionData',
    }), (value) => ({ ...value, discriminator: 3 }));
}
deactivateLut$1.getDeactivateLutInstructionDataSerializer = getDeactivateLutInstructionDataSerializer;
// Instruction.
function deactivateLut(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {
        address: { index: 0, isWritable: true, value: input.address ?? null },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$N.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getDeactivateLutInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$10.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
deactivateLut$1.deactivateLut = deactivateLut;

var extendLut$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(extendLut$1, "__esModule", { value: true });
extendLut$1.extendLut = extendLut$1.getExtendLutInstructionDataSerializer = void 0;
const umi_1$$ = cjs$6;
const serializers_1$Q = serializers;
const hooked_1$1 = hooked;
const shared_1$M = shared$1;
function getExtendLutInstructionDataSerializer() {
    return (0, serializers_1$Q.mapSerializer)((0, serializers_1$Q.struct)([
        ['discriminator', (0, serializers_1$Q.u32)()],
        ['addresses', (0, serializers_1$Q.array)((0, serializers_1$Q.publicKey)(), { size: (0, serializers_1$Q.u64)() })],
    ], { description: 'ExtendLutInstructionData' }), (value) => ({ ...value, discriminator: 2 }));
}
extendLut$1.getExtendLutInstructionDataSerializer = getExtendLutInstructionDataSerializer;
// Instruction.
function extendLut(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {
        address: { index: 0, isWritable: true, value: input.address ?? null },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
        payer: { index: 2, isWritable: true, value: input.payer ?? null },
        systemProgram: {
            index: 3,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$M.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getExtendLutInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = (0, hooked_1$1.resolveExtendLutBytes)(context, resolvedAccounts, resolvedArgs, programId);
    return (0, umi_1$$.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
extendLut$1.extendLut = extendLut;

var freezeLut$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(freezeLut$1, "__esModule", { value: true });
freezeLut$1.freezeLut = freezeLut$1.getFreezeLutInstructionDataSerializer = void 0;
const umi_1$_ = cjs$6;
const serializers_1$P = serializers;
const shared_1$L = shared$1;
function getFreezeLutInstructionDataSerializer() {
    return (0, serializers_1$P.mapSerializer)((0, serializers_1$P.struct)([['discriminator', (0, serializers_1$P.u32)()]], {
        description: 'FreezeLutInstructionData',
    }), (value) => ({ ...value, discriminator: 1 }));
}
freezeLut$1.getFreezeLutInstructionDataSerializer = getFreezeLutInstructionDataSerializer;
// Instruction.
function freezeLut(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {
        address: { index: 0, isWritable: true, value: input.address ?? null },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$L.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getFreezeLutInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$_.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
freezeLut$1.freezeLut = freezeLut;

var freezeToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(freezeToken$1, "__esModule", { value: true });
freezeToken$1.freezeToken = freezeToken$1.getFreezeTokenInstructionDataSerializer = void 0;
const umi_1$Z = cjs$6;
const serializers_1$O = serializers;
const shared_1$K = shared$1;
function getFreezeTokenInstructionDataSerializer() {
    return (0, serializers_1$O.mapSerializer)((0, serializers_1$O.struct)([['discriminator', (0, serializers_1$O.u8)()]], {
        description: 'FreezeTokenInstructionData',
    }), (value) => ({ ...value, discriminator: 10 }));
}
freezeToken$1.getFreezeTokenInstructionDataSerializer = getFreezeTokenInstructionDataSerializer;
// Instruction.
function freezeToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        mint: { index: 1, isWritable: false, value: input.mint ?? null },
        owner: { index: 2, isWritable: false, value: input.owner ?? null },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$K.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getFreezeTokenInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$Z.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
freezeToken$1.freezeToken = freezeToken;

var getTokenDataSize$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(getTokenDataSize$1, "__esModule", { value: true });
getTokenDataSize$1.getTokenDataSize = getTokenDataSize$1.getGetTokenDataSizeInstructionDataSerializer = void 0;
const umi_1$Y = cjs$6;
const serializers_1$N = serializers;
const shared_1$J = shared$1;
function getGetTokenDataSizeInstructionDataSerializer() {
    return (0, serializers_1$N.mapSerializer)((0, serializers_1$N.struct)([['discriminator', (0, serializers_1$N.u8)()]], {
        description: 'GetTokenDataSizeInstructionData',
    }), (value) => ({ ...value, discriminator: 21 }));
}
getTokenDataSize$1.getGetTokenDataSizeInstructionDataSerializer = getGetTokenDataSizeInstructionDataSerializer;
// Instruction.
function getTokenDataSize(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        mint: { index: 0, isWritable: false, value: input.mint ?? null },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$J.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getGetTokenDataSizeInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$Y.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
getTokenDataSize$1.getTokenDataSize = getTokenDataSize;

var initializeImmutableOwner$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeImmutableOwner$1, "__esModule", { value: true });
initializeImmutableOwner$1.initializeImmutableOwner = initializeImmutableOwner$1.getInitializeImmutableOwnerInstructionDataSerializer = void 0;
const umi_1$X = cjs$6;
const serializers_1$M = serializers;
const shared_1$I = shared$1;
function getInitializeImmutableOwnerInstructionDataSerializer() {
    return (0, serializers_1$M.mapSerializer)((0, serializers_1$M.struct)([['discriminator', (0, serializers_1$M.u8)()]], {
        description: 'InitializeImmutableOwnerInstructionData',
    }), (value) => ({ ...value, discriminator: 22 }));
}
initializeImmutableOwner$1.getInitializeImmutableOwnerInstructionDataSerializer = getInitializeImmutableOwnerInstructionDataSerializer;
// Instruction.
function initializeImmutableOwner(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$I.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeImmutableOwnerInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$X.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeImmutableOwner$1.initializeImmutableOwner = initializeImmutableOwner;

var initializeMint$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeMint$1, "__esModule", { value: true });
initializeMint$1.initializeMint = initializeMint$1.getInitializeMintInstructionDataSerializer = void 0;
const umi_1$W = cjs$6;
const serializers_1$L = serializers;
const shared_1$H = shared$1;
function getInitializeMintInstructionDataSerializer() {
    return (0, serializers_1$L.mapSerializer)((0, serializers_1$L.struct)([
        ['discriminator', (0, serializers_1$L.u8)()],
        ['decimals', (0, serializers_1$L.u8)()],
        ['mintAuthority', (0, serializers_1$L.publicKey)()],
        ['freezeAuthority', (0, serializers_1$L.option)((0, serializers_1$L.publicKey)())],
    ], { description: 'InitializeMintInstructionData' }), (value) => ({ ...value, discriminator: 0 }));
}
initializeMint$1.getInitializeMintInstructionDataSerializer = getInitializeMintInstructionDataSerializer;
// Instruction.
function initializeMint(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        mint: { index: 0, isWritable: true, value: input.mint ?? null },
        rent: { index: 1, isWritable: false, value: input.rent ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = (0, umi_1$W.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$H.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeMintInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$W.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeMint$1.initializeMint = initializeMint;

var initializeMint2$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeMint2$1, "__esModule", { value: true });
initializeMint2$1.initializeMint2 = initializeMint2$1.getInitializeMint2InstructionDataSerializer = void 0;
const umi_1$V = cjs$6;
const serializers_1$K = serializers;
const shared_1$G = shared$1;
function getInitializeMint2InstructionDataSerializer() {
    return (0, serializers_1$K.mapSerializer)((0, serializers_1$K.struct)([
        ['discriminator', (0, serializers_1$K.u8)()],
        ['decimals', (0, serializers_1$K.u8)()],
        ['mintAuthority', (0, serializers_1$K.publicKey)()],
        ['freezeAuthority', (0, serializers_1$K.option)((0, serializers_1$K.publicKey)())],
    ], { description: 'InitializeMint2InstructionData' }), (value) => ({ ...value, discriminator: 20 }));
}
initializeMint2$1.getInitializeMint2InstructionDataSerializer = getInitializeMint2InstructionDataSerializer;
// Instruction.
function initializeMint2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        mint: { index: 0, isWritable: true, value: input.mint ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$G.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeMint2InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$V.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeMint2$1.initializeMint2 = initializeMint2;

var initializeMultisig$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeMultisig$1, "__esModule", { value: true });
initializeMultisig$1.initializeMultisig = initializeMultisig$1.getInitializeMultisigInstructionDataSerializer = void 0;
const umi_1$U = cjs$6;
const serializers_1$J = serializers;
const shared_1$F = shared$1;
function getInitializeMultisigInstructionDataSerializer() {
    return (0, serializers_1$J.mapSerializer)((0, serializers_1$J.struct)([
        ['discriminator', (0, serializers_1$J.u8)()],
        ['m', (0, serializers_1$J.u8)()],
    ], { description: 'InitializeMultisigInstructionData' }), (value) => ({ ...value, discriminator: 2 }));
}
initializeMultisig$1.getInitializeMultisigInstructionDataSerializer = getInitializeMultisigInstructionDataSerializer;
// Instruction.
function initializeMultisig(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        multisig: { index: 0, isWritable: true, value: input.multisig ?? null },
        rent: { index: 1, isWritable: false, value: input.rent ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = (0, umi_1$U.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$F.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeMultisigInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$U.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeMultisig$1.initializeMultisig = initializeMultisig;

var initializeMultisig2$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeMultisig2$1, "__esModule", { value: true });
initializeMultisig2$1.initializeMultisig2 = initializeMultisig2$1.getInitializeMultisig2InstructionDataSerializer = void 0;
const umi_1$T = cjs$6;
const serializers_1$I = serializers;
const shared_1$E = shared$1;
function getInitializeMultisig2InstructionDataSerializer() {
    return (0, serializers_1$I.mapSerializer)((0, serializers_1$I.struct)([
        ['discriminator', (0, serializers_1$I.u8)()],
        ['m', (0, serializers_1$I.u8)()],
    ], { description: 'InitializeMultisig2InstructionData' }), (value) => ({ ...value, discriminator: 19 }));
}
initializeMultisig2$1.getInitializeMultisig2InstructionDataSerializer = getInitializeMultisig2InstructionDataSerializer;
// Instruction.
function initializeMultisig2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        multisig: { index: 0, isWritable: true, value: input.multisig ?? null },
        signer: { index: 1, isWritable: false, value: input.signer ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$E.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeMultisig2InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$T.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeMultisig2$1.initializeMultisig2 = initializeMultisig2;

var initializeToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeToken$1, "__esModule", { value: true });
initializeToken$1.initializeToken = initializeToken$1.getInitializeTokenInstructionDataSerializer = void 0;
const umi_1$S = cjs$6;
const serializers_1$H = serializers;
const shared_1$D = shared$1;
function getInitializeTokenInstructionDataSerializer() {
    return (0, serializers_1$H.mapSerializer)((0, serializers_1$H.struct)([['discriminator', (0, serializers_1$H.u8)()]], {
        description: 'InitializeTokenInstructionData',
    }), (value) => ({ ...value, discriminator: 1 }));
}
initializeToken$1.getInitializeTokenInstructionDataSerializer = getInitializeTokenInstructionDataSerializer;
// Instruction.
function initializeToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        mint: { index: 1, isWritable: false, value: input.mint ?? null },
        owner: { index: 2, isWritable: false, value: input.owner ?? null },
        rent: { index: 3, isWritable: false, value: input.rent ?? null },
    };
    // Default values.
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = (0, umi_1$S.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$D.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeTokenInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$S.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeToken$1.initializeToken = initializeToken;

var initializeToken2$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeToken2$1, "__esModule", { value: true });
initializeToken2$1.initializeToken2 = initializeToken2$1.getInitializeToken2InstructionDataSerializer = void 0;
const umi_1$R = cjs$6;
const serializers_1$G = serializers;
const shared_1$C = shared$1;
function getInitializeToken2InstructionDataSerializer() {
    return (0, serializers_1$G.mapSerializer)((0, serializers_1$G.struct)([
        ['discriminator', (0, serializers_1$G.u8)()],
        ['owner', (0, serializers_1$G.publicKey)()],
    ], { description: 'InitializeToken2InstructionData' }), (value) => ({ ...value, discriminator: 16 }));
}
initializeToken2$1.getInitializeToken2InstructionDataSerializer = getInitializeToken2InstructionDataSerializer;
// Instruction.
function initializeToken2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        mint: { index: 1, isWritable: false, value: input.mint ?? null },
        rent: { index: 2, isWritable: false, value: input.rent ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = (0, umi_1$R.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$C.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeToken2InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$R.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeToken2$1.initializeToken2 = initializeToken2;

var initializeToken3$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(initializeToken3$1, "__esModule", { value: true });
initializeToken3$1.initializeToken3 = initializeToken3$1.getInitializeToken3InstructionDataSerializer = void 0;
const umi_1$Q = cjs$6;
const serializers_1$F = serializers;
const shared_1$B = shared$1;
function getInitializeToken3InstructionDataSerializer() {
    return (0, serializers_1$F.mapSerializer)((0, serializers_1$F.struct)([
        ['discriminator', (0, serializers_1$F.u8)()],
        ['owner', (0, serializers_1$F.publicKey)()],
    ], { description: 'InitializeToken3InstructionData' }), (value) => ({ ...value, discriminator: 18 }));
}
initializeToken3$1.getInitializeToken3InstructionDataSerializer = getInitializeToken3InstructionDataSerializer;
// Instruction.
function initializeToken3(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        mint: { index: 1, isWritable: false, value: input.mint ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$B.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitializeToken3InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$Q.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
initializeToken3$1.initializeToken3 = initializeToken3;

var mintTokensTo$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mintTokensTo$1, "__esModule", { value: true });
mintTokensTo$1.mintTokensTo = mintTokensTo$1.getMintTokensToInstructionDataSerializer = void 0;
const umi_1$P = cjs$6;
const serializers_1$E = serializers;
const shared_1$A = shared$1;
function getMintTokensToInstructionDataSerializer() {
    return (0, serializers_1$E.mapSerializer)((0, serializers_1$E.struct)([
        ['discriminator', (0, serializers_1$E.u8)()],
        ['amount', (0, serializers_1$E.u64)()],
    ], { description: 'MintTokensToInstructionData' }), (value) => ({ ...value, discriminator: 7 }));
}
mintTokensTo$1.getMintTokensToInstructionDataSerializer = getMintTokensToInstructionDataSerializer;
// Instruction.
function mintTokensTo(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        mint: { index: 0, isWritable: true, value: input.mint ?? null },
        token: { index: 1, isWritable: true, value: input.token ?? null },
        mintAuthority: {
            index: 2,
            isWritable: false,
            value: input.mintAuthority ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.mintAuthority.value) {
        resolvedAccounts.mintAuthority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$A.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getMintTokensToInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$P.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
mintTokensTo$1.mintTokensTo = mintTokensTo;

var mintTokensToChecked$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mintTokensToChecked$1, "__esModule", { value: true });
mintTokensToChecked$1.mintTokensToChecked = mintTokensToChecked$1.getMintTokensToCheckedInstructionDataSerializer = void 0;
const umi_1$O = cjs$6;
const serializers_1$D = serializers;
const shared_1$z = shared$1;
function getMintTokensToCheckedInstructionDataSerializer() {
    return (0, serializers_1$D.mapSerializer)((0, serializers_1$D.struct)([
        ['discriminator', (0, serializers_1$D.u8)()],
        ['amount', (0, serializers_1$D.u64)()],
        ['decimals', (0, serializers_1$D.u8)()],
    ], { description: 'MintTokensToCheckedInstructionData' }), (value) => ({ ...value, discriminator: 14 }));
}
mintTokensToChecked$1.getMintTokensToCheckedInstructionDataSerializer = getMintTokensToCheckedInstructionDataSerializer;
// Instruction.
function mintTokensToChecked(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        mint: { index: 0, isWritable: true, value: input.mint ?? null },
        token: { index: 1, isWritable: true, value: input.token ?? null },
        mintAuthority: {
            index: 2,
            isWritable: false,
            value: input.mintAuthority ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$z.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getMintTokensToCheckedInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$O.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
mintTokensToChecked$1.mintTokensToChecked = mintTokensToChecked;

var recoverNestedAssociatedToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(recoverNestedAssociatedToken$1, "__esModule", { value: true });
recoverNestedAssociatedToken$1.recoverNestedAssociatedToken = void 0;
const umi_1$N = cjs$6;
const shared_1$y = shared$1;
// Instruction.
function recoverNestedAssociatedToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
    // Accounts.
    const resolvedAccounts = {
        nestedAssociatedAccountAddress: {
            index: 0,
            isWritable: true,
            value: input.nestedAssociatedAccountAddress ?? null,
        },
        nestedTokenMintAddress: {
            index: 1,
            isWritable: false,
            value: input.nestedTokenMintAddress ?? null,
        },
        destinationAssociatedAccountAddress: {
            index: 2,
            isWritable: true,
            value: input.destinationAssociatedAccountAddress ?? null,
        },
        ownerAssociatedAccountAddress: {
            index: 3,
            isWritable: false,
            value: input.ownerAssociatedAccountAddress ?? null,
        },
        ownerTokenMintAddress: {
            index: 4,
            isWritable: false,
            value: input.ownerTokenMintAddress ?? null,
        },
        walletAddress: {
            index: 5,
            isWritable: true,
            value: input.walletAddress ?? null,
        },
        tokenProgram: {
            index: 6,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$y.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = new Uint8Array();
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$N.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
recoverNestedAssociatedToken$1.recoverNestedAssociatedToken = recoverNestedAssociatedToken;

var requestHeapFrame$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(requestHeapFrame$1, "__esModule", { value: true });
requestHeapFrame$1.requestHeapFrame = requestHeapFrame$1.getRequestHeapFrameInstructionDataSerializer = void 0;
const umi_1$M = cjs$6;
const serializers_1$C = serializers;
const shared_1$x = shared$1;
function getRequestHeapFrameInstructionDataSerializer() {
    return (0, serializers_1$C.mapSerializer)((0, serializers_1$C.struct)([
        ['discriminator', (0, serializers_1$C.u8)()],
        ['bytes', (0, serializers_1$C.u32)()],
    ], { description: 'RequestHeapFrameInstructionData' }), (value) => ({ ...value, discriminator: 1 }));
}
requestHeapFrame$1.getRequestHeapFrameInstructionDataSerializer = getRequestHeapFrameInstructionDataSerializer;
// Instruction.
function requestHeapFrame(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splComputeBudget', 'ComputeBudget111111111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {};
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$x.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getRequestHeapFrameInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$M.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
requestHeapFrame$1.requestHeapFrame = requestHeapFrame;

var requestUnits$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(requestUnits$1, "__esModule", { value: true });
requestUnits$1.requestUnits = requestUnits$1.getRequestUnitsInstructionDataSerializer = void 0;
const umi_1$L = cjs$6;
const serializers_1$B = serializers;
const shared_1$w = shared$1;
function getRequestUnitsInstructionDataSerializer() {
    return (0, serializers_1$B.mapSerializer)((0, serializers_1$B.struct)([
        ['discriminator', (0, serializers_1$B.u8)()],
        ['units', (0, serializers_1$B.u32)()],
        ['additionalFee', (0, serializers_1$B.u32)()],
    ], { description: 'RequestUnitsInstructionData' }), (value) => ({ ...value, discriminator: 0 }));
}
requestUnits$1.getRequestUnitsInstructionDataSerializer = getRequestUnitsInstructionDataSerializer;
// Instruction.
function requestUnits(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splComputeBudget', 'ComputeBudget111111111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {};
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$w.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getRequestUnitsInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$L.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
requestUnits$1.requestUnits = requestUnits;

var revokeTokenDelegate$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(revokeTokenDelegate$1, "__esModule", { value: true });
revokeTokenDelegate$1.revokeTokenDelegate = revokeTokenDelegate$1.getRevokeTokenDelegateInstructionDataSerializer = void 0;
const umi_1$K = cjs$6;
const serializers_1$A = serializers;
const shared_1$v = shared$1;
function getRevokeTokenDelegateInstructionDataSerializer() {
    return (0, serializers_1$A.mapSerializer)((0, serializers_1$A.struct)([['discriminator', (0, serializers_1$A.u8)()]], {
        description: 'RevokeTokenDelegateInstructionData',
    }), (value) => ({ ...value, discriminator: 5 }));
}
revokeTokenDelegate$1.getRevokeTokenDelegateInstructionDataSerializer = getRevokeTokenDelegateInstructionDataSerializer;
// Instruction.
function revokeTokenDelegate(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        source: { index: 0, isWritable: true, value: input.source ?? null },
        owner: { index: 1, isWritable: false, value: input.owner ?? null },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$v.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getRevokeTokenDelegateInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$K.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
revokeTokenDelegate$1.revokeTokenDelegate = revokeTokenDelegate;

var setAuthority$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(setAuthority$1, "__esModule", { value: true });
setAuthority$1.setAuthority = setAuthority$1.getSetAuthorityInstructionDataSerializer = void 0;
const umi_1$J = cjs$6;
const serializers_1$z = serializers;
const shared_1$u = shared$1;
const types_1$a = types$5;
function getSetAuthorityInstructionDataSerializer() {
    return (0, serializers_1$z.mapSerializer)((0, serializers_1$z.struct)([
        ['discriminator', (0, serializers_1$z.u8)()],
        ['authorityType', (0, types_1$a.getAuthorityTypeSerializer)()],
        ['newAuthority', (0, serializers_1$z.option)((0, serializers_1$z.publicKey)())],
    ], { description: 'SetAuthorityInstructionData' }), (value) => ({ ...value, discriminator: 6 }));
}
setAuthority$1.getSetAuthorityInstructionDataSerializer = getSetAuthorityInstructionDataSerializer;
// Instruction.
function setAuthority(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        owned: { index: 0, isWritable: true, value: input.owned ?? null },
        owner: { index: 1, isWritable: false, value: input.owner ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$u.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSetAuthorityInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$J.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
setAuthority$1.setAuthority = setAuthority;

var setComputeUnitLimit$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(setComputeUnitLimit$1, "__esModule", { value: true });
setComputeUnitLimit$1.setComputeUnitLimit = setComputeUnitLimit$1.getSetComputeUnitLimitInstructionDataSerializer = void 0;
const umi_1$I = cjs$6;
const serializers_1$y = serializers;
const shared_1$t = shared$1;
function getSetComputeUnitLimitInstructionDataSerializer() {
    return (0, serializers_1$y.mapSerializer)((0, serializers_1$y.struct)([
        ['discriminator', (0, serializers_1$y.u8)()],
        ['units', (0, serializers_1$y.u32)()],
    ], { description: 'SetComputeUnitLimitInstructionData' }), (value) => ({ ...value, discriminator: 2 }));
}
setComputeUnitLimit$1.getSetComputeUnitLimitInstructionDataSerializer = getSetComputeUnitLimitInstructionDataSerializer;
// Instruction.
function setComputeUnitLimit(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splComputeBudget', 'ComputeBudget111111111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {};
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$t.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSetComputeUnitLimitInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$I.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
setComputeUnitLimit$1.setComputeUnitLimit = setComputeUnitLimit;

var setComputeUnitPrice$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(setComputeUnitPrice$1, "__esModule", { value: true });
setComputeUnitPrice$1.setComputeUnitPrice = setComputeUnitPrice$1.getSetComputeUnitPriceInstructionDataSerializer = void 0;
const umi_1$H = cjs$6;
const serializers_1$x = serializers;
const shared_1$s = shared$1;
function getSetComputeUnitPriceInstructionDataSerializer() {
    return (0, serializers_1$x.mapSerializer)((0, serializers_1$x.struct)([
        ['discriminator', (0, serializers_1$x.u8)()],
        ['microLamports', (0, serializers_1$x.u64)()],
    ], { description: 'SetComputeUnitPriceInstructionData' }), (value) => ({ ...value, discriminator: 3 }));
}
setComputeUnitPrice$1.getSetComputeUnitPriceInstructionDataSerializer = getSetComputeUnitPriceInstructionDataSerializer;
// Instruction.
function setComputeUnitPrice(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splComputeBudget', 'ComputeBudget111111111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {};
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$s.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSetComputeUnitPriceInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$H.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
setComputeUnitPrice$1.setComputeUnitPrice = setComputeUnitPrice;

var syncNative$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(syncNative$1, "__esModule", { value: true });
syncNative$1.syncNative = syncNative$1.getSyncNativeInstructionDataSerializer = void 0;
const umi_1$G = cjs$6;
const serializers_1$w = serializers;
const shared_1$r = shared$1;
function getSyncNativeInstructionDataSerializer() {
    return (0, serializers_1$w.mapSerializer)((0, serializers_1$w.struct)([['discriminator', (0, serializers_1$w.u8)()]], {
        description: 'SyncNativeInstructionData',
    }), (value) => ({ ...value, discriminator: 17 }));
}
syncNative$1.getSyncNativeInstructionDataSerializer = getSyncNativeInstructionDataSerializer;
// Instruction.
function syncNative(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$r.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSyncNativeInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$G.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
syncNative$1.syncNative = syncNative;

var thawToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(thawToken$1, "__esModule", { value: true });
thawToken$1.thawToken = thawToken$1.getThawTokenInstructionDataSerializer = void 0;
const umi_1$F = cjs$6;
const serializers_1$v = serializers;
const shared_1$q = shared$1;
function getThawTokenInstructionDataSerializer() {
    return (0, serializers_1$v.mapSerializer)((0, serializers_1$v.struct)([['discriminator', (0, serializers_1$v.u8)()]], {
        description: 'ThawTokenInstructionData',
    }), (value) => ({ ...value, discriminator: 11 }));
}
thawToken$1.getThawTokenInstructionDataSerializer = getThawTokenInstructionDataSerializer;
// Instruction.
function thawToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        account: { index: 0, isWritable: true, value: input.account ?? null },
        mint: { index: 1, isWritable: false, value: input.mint ?? null },
        owner: { index: 2, isWritable: false, value: input.owner ?? null },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$q.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getThawTokenInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$F.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
thawToken$1.thawToken = thawToken;

var transferAllSol$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(transferAllSol$1, "__esModule", { value: true });
transferAllSol$1.transferAllSol = transferAllSol$1.getTransferAllSolInstructionDataSerializer = void 0;
const umi_1$E = cjs$6;
const serializers_1$u = serializers;
const shared_1$p = shared$1;
function getTransferAllSolInstructionDataSerializer() {
    return (0, serializers_1$u.mapSerializer)((0, serializers_1$u.struct)([['discriminator', (0, serializers_1$u.u8)()]], {
        description: 'TransferAllSolInstructionData',
    }), (value) => ({ ...value, discriminator: 1 }));
}
transferAllSol$1.getTransferAllSolInstructionDataSerializer = getTransferAllSolInstructionDataSerializer;
// Instruction.
function transferAllSol(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplSystemExtras', 'SysExL2WDyJi9aRZrXorrjHJut3JwHQ7R9bTyctbNNG');
    // Accounts.
    const resolvedAccounts = {
        source: { index: 0, isWritable: true, value: input.source ?? null },
        destination: {
            index: 1,
            isWritable: true,
            value: input.destination ?? null,
        },
        systemProgram: {
            index: 2,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.source.value) {
        resolvedAccounts.source.value = context.identity;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$p.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getTransferAllSolInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$E.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
transferAllSol$1.transferAllSol = transferAllSol;

var transferSol$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(transferSol$1, "__esModule", { value: true });
transferSol$1.transferSol = transferSol$1.getTransferSolInstructionDataSerializer = void 0;
const umi_1$D = cjs$6;
const serializers_1$t = serializers;
const shared_1$o = shared$1;
function getTransferSolInstructionDataSerializer() {
    return (0, serializers_1$t.mapSerializer)((0, serializers_1$t.struct)([
        ['discriminator', (0, serializers_1$t.u32)()],
        ['amount', (0, umi_1$D.mapAmountSerializer)((0, serializers_1$t.u64)(), 'SOL', 9)],
    ], { description: 'TransferSolInstructionData' }), (value) => ({ ...value, discriminator: 2 }));
}
transferSol$1.getTransferSolInstructionDataSerializer = getTransferSolInstructionDataSerializer;
// Instruction.
function transferSol(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
    // Accounts.
    const resolvedAccounts = {
        source: { index: 0, isWritable: true, value: input.source ?? null },
        destination: {
            index: 1,
            isWritable: true,
            value: input.destination ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.source.value) {
        resolvedAccounts.source.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$o.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getTransferSolInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$D.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
transferSol$1.transferSol = transferSol;

var transferTokens$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(transferTokens$1, "__esModule", { value: true });
transferTokens$1.transferTokens = transferTokens$1.getTransferTokensInstructionDataSerializer = void 0;
const umi_1$C = cjs$6;
const serializers_1$s = serializers;
const shared_1$n = shared$1;
function getTransferTokensInstructionDataSerializer() {
    return (0, serializers_1$s.mapSerializer)((0, serializers_1$s.struct)([
        ['discriminator', (0, serializers_1$s.u8)()],
        ['amount', (0, serializers_1$s.u64)()],
    ], { description: 'TransferTokensInstructionData' }), (value) => ({ ...value, discriminator: 3 }));
}
transferTokens$1.getTransferTokensInstructionDataSerializer = getTransferTokensInstructionDataSerializer;
// Instruction.
function transferTokens(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        source: { index: 0, isWritable: true, value: input.source ?? null },
        destination: {
            index: 1,
            isWritable: true,
            value: input.destination ?? null,
        },
        authority: { index: 2, isWritable: false, value: input.authority ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$n.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getTransferTokensInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$C.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
transferTokens$1.transferTokens = transferTokens;

var transferTokensChecked$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(transferTokensChecked$1, "__esModule", { value: true });
transferTokensChecked$1.transferTokensChecked = transferTokensChecked$1.getTransferTokensCheckedInstructionDataSerializer = void 0;
const umi_1$B = cjs$6;
const serializers_1$r = serializers;
const shared_1$m = shared$1;
function getTransferTokensCheckedInstructionDataSerializer() {
    return (0, serializers_1$r.mapSerializer)((0, serializers_1$r.struct)([
        ['discriminator', (0, serializers_1$r.u8)()],
        ['amount', (0, serializers_1$r.u64)()],
        ['decimals', (0, serializers_1$r.u8)()],
    ], { description: 'TransferTokensCheckedInstructionData' }), (value) => ({ ...value, discriminator: 12 }));
}
transferTokensChecked$1.getTransferTokensCheckedInstructionDataSerializer = getTransferTokensCheckedInstructionDataSerializer;
// Instruction.
function transferTokensChecked(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        source: { index: 0, isWritable: true, value: input.source ?? null },
        mint: { index: 1, isWritable: false, value: input.mint ?? null },
        destination: {
            index: 2,
            isWritable: true,
            value: input.destination ?? null,
        },
        authority: { index: 3, isWritable: false, value: input.authority ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$m.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getTransferTokensCheckedInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$B.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
transferTokensChecked$1.transferTokensChecked = transferTokensChecked;

var uiAmountToAmount$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(uiAmountToAmount$1, "__esModule", { value: true });
uiAmountToAmount$1.uiAmountToAmount = uiAmountToAmount$1.getUiAmountToAmountInstructionDataSerializer = void 0;
const umi_1$A = cjs$6;
const serializers_1$q = serializers;
const shared_1$l = shared$1;
function getUiAmountToAmountInstructionDataSerializer() {
    return (0, serializers_1$q.mapSerializer)((0, serializers_1$q.struct)([
        ['discriminator', (0, serializers_1$q.u8)()],
        ['uiAmount', (0, serializers_1$q.u64)()],
    ], { description: 'UiAmountToAmountInstructionData' }), (value) => ({ ...value, discriminator: 24 }));
}
uiAmountToAmount$1.getUiAmountToAmountInstructionDataSerializer = getUiAmountToAmountInstructionDataSerializer;
// Instruction.
function uiAmountToAmount(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Accounts.
    const resolvedAccounts = {
        mint: { index: 0, isWritable: false, value: input.mint ?? null },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$l.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUiAmountToAmountInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$A.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
uiAmountToAmount$1.uiAmountToAmount = uiAmountToAmount;

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(addMemo$1, exports);
	__exportStar(amountToUiAmount$1, exports);
	__exportStar(approveTokenDelegate$1, exports);
	__exportStar(approveTokenDelegateChecked$1, exports);
	__exportStar(burnToken$1, exports);
	__exportStar(burnTokenChecked$1, exports);
	__exportStar(closeLut$1, exports);
	__exportStar(closeToken$1, exports);
	__exportStar(createAccount$1, exports);
	__exportStar(createAccountWithRent$1, exports);
	__exportStar(createAssociatedToken$1, exports);
	__exportStar(createEmptyLut$1, exports);
	__exportStar(createIdempotentAssociatedToken$1, exports);
	__exportStar(createTokenIfMissing$1, exports);
	__exportStar(deactivateLut$1, exports);
	__exportStar(extendLut$1, exports);
	__exportStar(freezeLut$1, exports);
	__exportStar(freezeToken$1, exports);
	__exportStar(getTokenDataSize$1, exports);
	__exportStar(initializeImmutableOwner$1, exports);
	__exportStar(initializeMint$1, exports);
	__exportStar(initializeMint2$1, exports);
	__exportStar(initializeMultisig$1, exports);
	__exportStar(initializeMultisig2$1, exports);
	__exportStar(initializeToken$1, exports);
	__exportStar(initializeToken2$1, exports);
	__exportStar(initializeToken3$1, exports);
	__exportStar(mintTokensTo$1, exports);
	__exportStar(mintTokensToChecked$1, exports);
	__exportStar(recoverNestedAssociatedToken$1, exports);
	__exportStar(requestHeapFrame$1, exports);
	__exportStar(requestUnits$1, exports);
	__exportStar(revokeTokenDelegate$1, exports);
	__exportStar(setAuthority$1, exports);
	__exportStar(setComputeUnitLimit$1, exports);
	__exportStar(setComputeUnitPrice$1, exports);
	__exportStar(syncNative$1, exports);
	__exportStar(thawToken$1, exports);
	__exportStar(transferAllSol$1, exports);
	__exportStar(transferSol$1, exports);
	__exportStar(transferTokens$1, exports);
	__exportStar(transferTokensChecked$1, exports);
	__exportStar(uiAmountToAmount$1, exports);
	
} (instructions$1));

var programs$1 = {};

var mplSystemExtras = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getMplSystemExtrasProgramId = exports.getMplSystemExtrasProgram = exports.createMplSystemExtrasProgram = exports.MPL_SYSTEM_EXTRAS_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.MPL_SYSTEM_EXTRAS_PROGRAM_ID = 'SysExL2WDyJi9aRZrXorrjHJut3JwHQ7R9bTyctbNNG';
	function createMplSystemExtrasProgram() {
	    return {
	        name: 'mplSystemExtras',
	        publicKey: exports.MPL_SYSTEM_EXTRAS_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getMplSystemExtrasErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getMplSystemExtrasErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createMplSystemExtrasProgram = createMplSystemExtrasProgram;
	function getMplSystemExtrasProgram(context, clusterFilter) {
	    return context.programs.get('mplSystemExtras', clusterFilter);
	}
	exports.getMplSystemExtrasProgram = getMplSystemExtrasProgram;
	function getMplSystemExtrasProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('mplSystemExtras', exports.MPL_SYSTEM_EXTRAS_PROGRAM_ID, clusterFilter);
	}
	exports.getMplSystemExtrasProgramId = getMplSystemExtrasProgramId;
	
} (mplSystemExtras));

var mplTokenExtras = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getMplTokenExtrasProgramId = exports.getMplTokenExtrasProgram = exports.createMplTokenExtrasProgram = exports.MPL_TOKEN_EXTRAS_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.MPL_TOKEN_EXTRAS_PROGRAM_ID = 'TokExjvjJmhKaRBShsBAsbSvEWMA1AgUNK7ps4SAc2p';
	function createMplTokenExtrasProgram() {
	    return {
	        name: 'mplTokenExtras',
	        publicKey: exports.MPL_TOKEN_EXTRAS_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getMplTokenExtrasErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getMplTokenExtrasErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createMplTokenExtrasProgram = createMplTokenExtrasProgram;
	function getMplTokenExtrasProgram(context, clusterFilter) {
	    return context.programs.get('mplTokenExtras', clusterFilter);
	}
	exports.getMplTokenExtrasProgram = getMplTokenExtrasProgram;
	function getMplTokenExtrasProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('mplTokenExtras', exports.MPL_TOKEN_EXTRAS_PROGRAM_ID, clusterFilter);
	}
	exports.getMplTokenExtrasProgramId = getMplTokenExtrasProgramId;
	
} (mplTokenExtras));

var splAddressLookupTable = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSplAddressLookupTableProgramId = exports.getSplAddressLookupTableProgram = exports.createSplAddressLookupTableProgram = exports.SPL_ADDRESS_LOOKUP_TABLE_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.SPL_ADDRESS_LOOKUP_TABLE_PROGRAM_ID = 'AddressLookupTab1e1111111111111111111111111';
	function createSplAddressLookupTableProgram() {
	    return {
	        name: 'splAddressLookupTable',
	        publicKey: exports.SPL_ADDRESS_LOOKUP_TABLE_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getSplAddressLookupTableErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getSplAddressLookupTableErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createSplAddressLookupTableProgram = createSplAddressLookupTableProgram;
	function getSplAddressLookupTableProgram(context, clusterFilter) {
	    return context.programs.get('splAddressLookupTable', clusterFilter);
	}
	exports.getSplAddressLookupTableProgram = getSplAddressLookupTableProgram;
	function getSplAddressLookupTableProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('splAddressLookupTable', exports.SPL_ADDRESS_LOOKUP_TABLE_PROGRAM_ID, clusterFilter);
	}
	exports.getSplAddressLookupTableProgramId = getSplAddressLookupTableProgramId;
	
} (splAddressLookupTable));

var splAssociatedToken = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSplAssociatedTokenProgramId = exports.getSplAssociatedTokenProgram = exports.createSplAssociatedTokenProgram = exports.SPL_ASSOCIATED_TOKEN_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.SPL_ASSOCIATED_TOKEN_PROGRAM_ID = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL';
	function createSplAssociatedTokenProgram() {
	    return {
	        name: 'splAssociatedToken',
	        publicKey: exports.SPL_ASSOCIATED_TOKEN_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getSplAssociatedTokenErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getSplAssociatedTokenErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createSplAssociatedTokenProgram = createSplAssociatedTokenProgram;
	function getSplAssociatedTokenProgram(context, clusterFilter) {
	    return context.programs.get('splAssociatedToken', clusterFilter);
	}
	exports.getSplAssociatedTokenProgram = getSplAssociatedTokenProgram;
	function getSplAssociatedTokenProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('splAssociatedToken', exports.SPL_ASSOCIATED_TOKEN_PROGRAM_ID, clusterFilter);
	}
	exports.getSplAssociatedTokenProgramId = getSplAssociatedTokenProgramId;
	
} (splAssociatedToken));

var splComputeBudget = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSplComputeBudgetProgramId = exports.getSplComputeBudgetProgram = exports.createSplComputeBudgetProgram = exports.SPL_COMPUTE_BUDGET_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.SPL_COMPUTE_BUDGET_PROGRAM_ID = 'ComputeBudget111111111111111111111111111111';
	function createSplComputeBudgetProgram() {
	    return {
	        name: 'splComputeBudget',
	        publicKey: exports.SPL_COMPUTE_BUDGET_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getSplComputeBudgetErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getSplComputeBudgetErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createSplComputeBudgetProgram = createSplComputeBudgetProgram;
	function getSplComputeBudgetProgram(context, clusterFilter) {
	    return context.programs.get('splComputeBudget', clusterFilter);
	}
	exports.getSplComputeBudgetProgram = getSplComputeBudgetProgram;
	function getSplComputeBudgetProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('splComputeBudget', exports.SPL_COMPUTE_BUDGET_PROGRAM_ID, clusterFilter);
	}
	exports.getSplComputeBudgetProgramId = getSplComputeBudgetProgramId;
	
} (splComputeBudget));

var splMemo = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSplMemoProgramId = exports.getSplMemoProgram = exports.createSplMemoProgram = exports.SPL_MEMO_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.SPL_MEMO_PROGRAM_ID = 'Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo';
	function createSplMemoProgram() {
	    return {
	        name: 'splMemo',
	        publicKey: exports.SPL_MEMO_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getSplMemoErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getSplMemoErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createSplMemoProgram = createSplMemoProgram;
	function getSplMemoProgram(context, clusterFilter) {
	    return context.programs.get('splMemo', clusterFilter);
	}
	exports.getSplMemoProgram = getSplMemoProgram;
	function getSplMemoProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('splMemo', exports.SPL_MEMO_PROGRAM_ID, clusterFilter);
	}
	exports.getSplMemoProgramId = getSplMemoProgramId;
	
} (splMemo));

var splSystem = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSplSystemProgramId = exports.getSplSystemProgram = exports.createSplSystemProgram = exports.SPL_SYSTEM_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.SPL_SYSTEM_PROGRAM_ID = '11111111111111111111111111111111';
	function createSplSystemProgram() {
	    return {
	        name: 'splSystem',
	        publicKey: exports.SPL_SYSTEM_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getSplSystemErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getSplSystemErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createSplSystemProgram = createSplSystemProgram;
	function getSplSystemProgram(context, clusterFilter) {
	    return context.programs.get('splSystem', clusterFilter);
	}
	exports.getSplSystemProgram = getSplSystemProgram;
	function getSplSystemProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('splSystem', exports.SPL_SYSTEM_PROGRAM_ID, clusterFilter);
	}
	exports.getSplSystemProgramId = getSplSystemProgramId;
	
} (splSystem));

var splToken = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSplTokenProgramId = exports.getSplTokenProgram = exports.createSplTokenProgram = exports.SPL_TOKEN_PROGRAM_ID = void 0;
	const errors_1 = errors$1;
	exports.SPL_TOKEN_PROGRAM_ID = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
	function createSplTokenProgram() {
	    return {
	        name: 'splToken',
	        publicKey: exports.SPL_TOKEN_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getSplTokenErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getSplTokenErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createSplTokenProgram = createSplTokenProgram;
	function getSplTokenProgram(context, clusterFilter) {
	    return context.programs.get('splToken', clusterFilter);
	}
	exports.getSplTokenProgram = getSplTokenProgram;
	function getSplTokenProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('splToken', exports.SPL_TOKEN_PROGRAM_ID, clusterFilter);
	}
	exports.getSplTokenProgramId = getSplTokenProgramId;
	
} (splToken));

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(mplSystemExtras, exports);
	__exportStar(mplTokenExtras, exports);
	__exportStar(splAddressLookupTable, exports);
	__exportStar(splAssociatedToken, exports);
	__exportStar(splComputeBudget, exports);
	__exportStar(splMemo, exports);
	__exportStar(splSystem, exports);
	__exportStar(splToken, exports);
	
} (programs$1));

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(accounts, exports);
	__exportStar(errors$1, exports);
	__exportStar(instructions$1, exports);
	__exportStar(programs$1, exports);
	__exportStar(shared$1, exports);
	__exportStar(types$5, exports);
	
} (generated));

var createLut$1 = {};

Object.defineProperty(createLut$1, "__esModule", { value: true });
createLut$1.createLut = void 0;
const umi_1$z = cjs$6;
const generated_1$6 = generated;
// Instruction.
function createLut(context, input) {
    const { addresses, ...rest } = input;
    const authority = input.authority ?? context.identity;
    const address = input.address ??
        (0, generated_1$6.findAddressLookupTablePda)(context, {
            authority: authority.publicKey,
            recentSlot: input.recentSlot,
        });
    const builder = (0, umi_1$z.transactionBuilder)()
        .add((0, generated_1$6.createEmptyLut)(context, rest))
        .add((0, generated_1$6.extendLut)(context, {
        address,
        authority,
        addresses,
        payer: input.payer,
    }));
    return [builder, { publicKey: address[0], addresses }];
}
createLut$1.createLut = createLut;

var createLutForTransactionBuilder$1 = {};

Object.defineProperty(createLutForTransactionBuilder$1, "__esModule", { value: true });
createLutForTransactionBuilder$1.createLutForTransactionBuilder = void 0;
const umi_1$y = cjs$6;
const generated_1$5 = generated;
const createLutForTransactionBuilder = (context, builder, recentSlot, authority) => {
    const lutAuthority = authority ?? context.identity;
    const signerAddresses = (0, umi_1$y.uniquePublicKeys)([
        builder.getFeePayer(context).publicKey,
        ...builder.items.flatMap(({ instruction }) => instruction.keys
            .filter((meta) => meta.isSigner)
            .map((meta) => meta.pubkey)),
    ]);
    const extractableAddresses = (0, umi_1$y.uniquePublicKeys)(builder.items.flatMap(({ instruction }) => [
        instruction.programId,
        ...instruction.keys.map((meta) => meta.pubkey),
    ])).filter((address) => !signerAddresses.includes(address));
    const lutAccounts = [];
    const createLutBuilders = [];
    (0, umi_1$y.chunk)(extractableAddresses, 256).forEach((addresses, index) => {
        const localRecentSlot = recentSlot - index;
        const [lut] = (0, generated_1$5.findAddressLookupTablePda)(context, {
            authority: lutAuthority.publicKey,
            recentSlot: localRecentSlot,
        });
        lutAccounts.push({ publicKey: lut, addresses });
        createLutBuilders.push(...generatecreateLutBuilders(context, (0, generated_1$5.createEmptyLut)(context, { recentSlot: localRecentSlot }), lut, lutAuthority, addresses));
    });
    return [createLutBuilders, lutAccounts];
};
createLutForTransactionBuilder$1.createLutForTransactionBuilder = createLutForTransactionBuilder;
function generatecreateLutBuilders(context, builder, lutAddress, lutAuthority, addresses) {
    const builders = [];
    let addressesThatFit = [];
    let lastValidBuilder = builder;
    addresses.forEach((address) => {
        const newBuilder = builder.add((0, generated_1$5.extendLut)(context, {
            address: lutAddress,
            addresses: [...addressesThatFit, address],
            authority: lutAuthority,
        }));
        if (newBuilder.fitsInOneTransaction(context)) {
            addressesThatFit.push(address);
            lastValidBuilder = newBuilder;
        }
        else {
            addressesThatFit = [address];
            builders.push(lastValidBuilder);
            builder = builder.empty();
            lastValidBuilder = builder;
        }
    });
    if (addressesThatFit.length > 0) {
        builders.push(lastValidBuilder);
    }
    return builders;
}

var createMint$1 = {};

Object.defineProperty(createMint$1, "__esModule", { value: true });
createMint$1.createMint = void 0;
const umi_1$x = cjs$6;
const generated_1$4 = generated;
// Instruction.
function createMint(context, input) {
    return (0, umi_1$x.transactionBuilder)()
        .add((0, generated_1$4.createAccountWithRent)(context, {
        newAccount: input.mint,
        space: (0, generated_1$4.getMintSize)(),
        programId: context.programs.get('splToken').publicKey,
    }))
        .add((0, generated_1$4.initializeMint2)(context, {
        mint: input.mint.publicKey,
        decimals: input.decimals ?? 0,
        mintAuthority: input.mintAuthority ?? context.identity.publicKey,
        freezeAuthority: input.freezeAuthority === undefined
            ? (0, umi_1$x.some)(context.identity.publicKey)
            : input.freezeAuthority,
    }));
}
createMint$1.createMint = createMint;

var createMintWithAssociatedToken$1 = {};

Object.defineProperty(createMintWithAssociatedToken$1, "__esModule", { value: true });
createMintWithAssociatedToken$1.createMintWithAssociatedToken = void 0;
const umi_1$w = cjs$6;
const createMint_1 = createMint$1;
const generated_1$3 = generated;
const hooked_1 = hooked;
// Instruction.
function createMintWithAssociatedToken(context, input) {
    const mintAndOwner = {
        mint: input.mint.publicKey,
        owner: input.owner ?? context.identity.publicKey,
    };
    const amount = input.amount ?? 0;
    let builder = (0, umi_1$w.transactionBuilder)()
        .add((0, createMint_1.createMint)(context, {
        ...input,
        mintAuthority: input.mintAuthority
            ? (0, umi_1$w.publicKey)(input.mintAuthority, false)
            : undefined,
    }))
        .add((0, generated_1$3.createAssociatedToken)(context, mintAndOwner));
    if (amount > 0) {
        builder = builder.add((0, generated_1$3.mintTokensTo)(context, {
            amount,
            mint: input.mint.publicKey,
            token: (0, hooked_1.findAssociatedTokenPda)(context, mintAndOwner),
            mintAuthority: input.mintAuthority && (0, umi_1$w.isSigner)(input.mintAuthority)
                ? input.mintAuthority
                : undefined,
        }));
    }
    return builder;
}
createMintWithAssociatedToken$1.createMintWithAssociatedToken = createMintWithAssociatedToken;

var createToken$1 = {};

Object.defineProperty(createToken$1, "__esModule", { value: true });
createToken$1.createToken = void 0;
const umi_1$v = cjs$6;
const generated_1$2 = generated;
// Instruction.
function createToken(context, input) {
    return (0, umi_1$v.transactionBuilder)()
        .add((0, generated_1$2.createAccountWithRent)(context, {
        newAccount: input.token,
        space: (0, generated_1$2.getTokenSize)(),
        programId: context.programs.get('splToken').publicKey,
    }))
        .add((0, generated_1$2.initializeToken3)(context, {
        account: input.token.publicKey,
        mint: input.mint,
        owner: input.owner ?? context.identity.publicKey,
    }));
}
createToken$1.createToken = createToken;

var fetchAllByOwner = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fetchTokensByOwnerAndMint = exports.fetchTokensByOwner = exports.fetchAllMintByOwner = exports.fetchAllMintPublicKeyByOwner = exports.fetchAllTokenByOwnerAndMint = exports.fetchAllTokenByOwner = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const generated_1 = generated;
	const getTokenAccountsByOwnerCall = async (context, owner, tokenAmountFilter, options = {}) => {
	    const splToken = context.programs.get('splToken').publicKey;
	    const filter = options.mint
	        ? { mint: options.mint }
	        : { programId: splToken };
	    const result = await context.rpc.call('getTokenAccountsByOwner', [owner, filter], {
	        ...options,
	        extra: { encoding: 'base64' },
	    });
	    return result.value.filter(({ account }) => {
	        const data = serializers_1.base64.serialize(account.data[0]);
	        const amount = (0, serializers_1.u64)().deserialize(data.slice(64, 72))[0];
	        return tokenAmountFilter(amount);
	    });
	};
	const fetchAllTokenByOwner = async (context, owner, options = {}) => {
	    const { mint, tokenStrategy = 'getProgramAccounts', tokenAmountFilter = (amount) => amount > 0, ...rpcOptions } = options;
	    if (tokenStrategy === 'getTokenAccountsByOwner') {
	        const result = await getTokenAccountsByOwnerCall(context, owner, tokenAmountFilter, { mint, ...rpcOptions });
	        return result.map(({ pubkey, account }) => (0, generated_1.deserializeToken)({
	            ...account,
	            data: serializers_1.base64.serialize(account.data[0]),
	            publicKey: (0, umi_1.publicKey)(pubkey),
	            owner: (0, umi_1.publicKey)(account.owner),
	            lamports: (0, umi_1.lamports)(account.lamports),
	        }));
	    }
	    let builder = (0, generated_1.getTokenGpaBuilder)(context).whereField('owner', owner);
	    if (mint) {
	        builder = builder.whereField('mint', mint);
	    }
	    return (await builder.get())
	        .filter((account) => {
	        const amount = (0, serializers_1.u64)().deserialize(account.data.slice(64, 72))[0];
	        return tokenAmountFilter(amount);
	    })
	        .map((account) => (0, generated_1.deserializeToken)(account));
	};
	exports.fetchAllTokenByOwner = fetchAllTokenByOwner;
	const fetchAllTokenByOwnerAndMint = (context, owner, mint, options = {}) => (0, exports.fetchAllTokenByOwner)(context, owner, { ...options, mint });
	exports.fetchAllTokenByOwnerAndMint = fetchAllTokenByOwnerAndMint;
	const fetchAllMintPublicKeyByOwner = async (context, owner, options = {}) => {
	    const { tokenStrategy = 'getProgramAccounts', tokenAmountFilter = (amount) => amount > 0, ...rpcOptions } = options;
	    if (tokenStrategy === 'getTokenAccountsByOwner') {
	        const result = await getTokenAccountsByOwnerCall(context, owner, tokenAmountFilter, rpcOptions);
	        return result.map(({ account }) => (0, umi_1.publicKey)(serializers_1.base64.serialize(account.data[0]).slice(0, 32)));
	    }
	    return (await (0, generated_1.getTokenGpaBuilder)(context)
	        .slice(0, 72) // Includes mint, owner and amount.
	        .whereField('owner', owner)
	        .get())
	        .filter((account) => {
	        const amount = (0, serializers_1.u64)().deserialize(account.data.slice(64, 72))[0];
	        return tokenAmountFilter(amount);
	    })
	        .map((account) => (0, umi_1.publicKey)(account.data.slice(0, 32)));
	};
	exports.fetchAllMintPublicKeyByOwner = fetchAllMintPublicKeyByOwner;
	const fetchAllMintByOwner = async (context, owner, options = {}) => {
	    const { tokenStrategy, tokenAmountFilter, ...rpcOptions } = options;
	    const mints = await (0, exports.fetchAllMintPublicKeyByOwner)(context, owner, options);
	    return (0, generated_1.fetchAllMint)(context, mints, rpcOptions);
	};
	exports.fetchAllMintByOwner = fetchAllMintByOwner;
	/** @deprecated Use fetchAllTokenByOwner instead. Worry not, it has the same signature. */
	exports.fetchTokensByOwner = exports.fetchAllTokenByOwner;
	/** @deprecated Use fetchAllTokenByOwnerAndMint instead. Worry not, it has the same signature. */
	exports.fetchTokensByOwnerAndMint = exports.fetchAllTokenByOwnerAndMint;
	
} (fetchAllByOwner));

var findLargestTokensByMint$1 = {};

Object.defineProperty(findLargestTokensByMint$1, "__esModule", { value: true });
findLargestTokensByMint$1.findLargestTokensByMint = void 0;
const umi_1$u = cjs$6;
const findLargestTokensByMint = async (context, mint, options = {}) => {
    const result = await context.rpc.call('getTokenLargestAccounts', [mint], options);
    return result.value.map(({ address, amount, decimals }) => ({
        publicKey: (0, umi_1$u.publicKey)(address),
        amount: (0, umi_1$u.createAmount)(amount, 'splToken', decimals),
    }));
};
findLargestTokensByMint$1.findLargestTokensByMint = findLargestTokensByMint;

var plugin$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.mplEssentials = exports.mplToolbox = void 0;
	const umi_1 = cjs$6;
	const generated_1 = generated;
	const mplToolbox = () => ({
	    install(umi) {
	        umi.programs.add((0, generated_1.createSplSystemProgram)(), false);
	        umi.programs.add((0, generated_1.createSplMemoProgram)(), false);
	        umi.programs.add((0, generated_1.createSplTokenProgram)(), false);
	        umi.programs.add((0, generated_1.createSplAssociatedTokenProgram)(), false);
	        umi.programs.add((0, generated_1.createSplAddressLookupTableProgram)(), false);
	        umi.programs.add((0, generated_1.createMplSystemExtrasProgram)(), false);
	        umi.programs.add((0, generated_1.createMplTokenExtrasProgram)(), false);
	        // Token 2022.
	        // For now, we just register it as a splToken program for feature parity.
	        umi.programs.add({
	            ...(0, generated_1.createSplTokenProgram)(),
	            name: 'splToken2022',
	            publicKey: (0, umi_1.publicKey)('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'),
	        }, false);
	    },
	});
	exports.mplToolbox = mplToolbox;
	/** @deprecated Use `mplToolbox` instead. */
	exports.mplEssentials = exports.mplToolbox;
	
} (plugin$1));

var sysvars = {};

Object.defineProperty(sysvars, "__esModule", { value: true });
sysvars.getSysvar = void 0;
const umi_1$t = cjs$6;
const getSysvar = (sysvar) => {
    switch (sysvar) {
        case 'clock':
            return (0, umi_1$t.publicKey)('SysvarC1ock11111111111111111111111111111111');
        case 'epochSchedule':
            return (0, umi_1$t.publicKey)('SysvarEpochSchedu1e111111111111111111111111');
        case 'instructions':
            return (0, umi_1$t.publicKey)('Sysvar1nstructions1111111111111111111111111');
        case 'recentBlockhashes':
            return (0, umi_1$t.publicKey)('SysvarRecentB1ockHashes11111111111111111111');
        case 'rent':
            return (0, umi_1$t.publicKey)('SysvarRent111111111111111111111111111111111');
        case 'rewards':
            return (0, umi_1$t.publicKey)('SysvarRewards111111111111111111111111111111');
        case 'slotHashes':
            return (0, umi_1$t.publicKey)('SysvarS1otHashes111111111111111111111111111');
        case 'slotHistory':
            return (0, umi_1$t.publicKey)('SysvarS1otHistory11111111111111111111111111');
        case 'stakeHistory':
            return (0, umi_1$t.publicKey)('SysvarStakeHistory1111111111111111111111111');
        default:
            throw new umi_1$t.SdkError(`Unknown sysvar: ${sysvar}`);
    }
};
sysvars.getSysvar = getSysvar;

(function (exports) {
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(generated, exports);
	__exportStar(hooked, exports);
	__exportStar(createLut$1, exports);
	__exportStar(createLutForTransactionBuilder$1, exports);
	__exportStar(createMint$1, exports);
	__exportStar(createMintWithAssociatedToken$1, exports);
	__exportStar(createToken$1, exports);
	__exportStar(fetchAllByOwner, exports);
	__exportStar(findLargestTokensByMint$1, exports);
	__exportStar(plugin$1, exports);
	__exportStar(sysvars, exports);
	
} (src));

var digitalAsset = {};

var hasRequiredDigitalAsset;

function requireDigitalAsset () {
	if (hasRequiredDigitalAsset) return digitalAsset;
	hasRequiredDigitalAsset = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.isProgrammable = exports.isNonFungible = exports.isFungible = exports.deserializeDigitalAsset = exports.fetchAllMetadataByOwner = exports.fetchAllDigitalAssetByOwner = exports.fetchAllDigitalAssetByUpdateAuthority = exports.fetchAllDigitalAssetByVerifiedCollection = exports.fetchAllDigitalAssetByCreator = exports.fetchAllDigitalAsset = exports.fetchDigitalAssetByMetadata = exports.fetchDigitalAsset = void 0;
		const mpl_toolbox_1 = src;
		const umi_1 = cjs$6;
		const errors_1 = errors$2;
		const generated_1 = requireGenerated();
		const CREATORS_OFFSET = 326;
		const MAX_CREATOR_SIZE = 34;
		const COLLECTION_OFFSETS = [366, 400, 434, 468, 502];
		const VERIFIED_COLLECTION_OFFSET = 1;
		const COLLECTION_ADDRESS_OFFSET = 2;
		async function fetchDigitalAsset(context, mint, options) {
		    const [metadata] = (0, generated_1.findMetadataPda)(context, { mint });
		    const [edition] = (0, generated_1.findMasterEditionPda)(context, { mint });
		    const [mintAccount, metadataAccount, editionAccount] = await context.rpc.getAccounts([mint, metadata, edition], options);
		    (0, umi_1.assertAccountExists)(mintAccount, 'Mint');
		    (0, umi_1.assertAccountExists)(metadataAccount, 'Metadata');
		    return deserializeDigitalAsset(mintAccount, metadataAccount, editionAccount.exists ? editionAccount : undefined);
		}
		exports.fetchDigitalAsset = fetchDigitalAsset;
		async function fetchDigitalAssetByMetadata(context, metadata, options) {
		    const metadataAccount = await (0, generated_1.fetchMetadata)(context, metadata, options);
		    return fetchDigitalAsset(context, metadataAccount.mint, options);
		}
		exports.fetchDigitalAssetByMetadata = fetchDigitalAssetByMetadata;
		async function fetchAllDigitalAsset(context, mints, options) {
		    const accountsToFetch = mints.flatMap((mint) => [
		        mint,
		        (0, generated_1.findMetadataPda)(context, { mint })[0],
		        (0, generated_1.findMasterEditionPda)(context, { mint })[0],
		    ]);
		    const accounts = await context.rpc.getAccounts(accountsToFetch, options);
		    return (0, umi_1.chunk)(accounts, 3).flatMap(([mintAccount, metadataAccount, editionAccount]) => {
		        try {
		            (0, umi_1.assertAccountExists)(mintAccount, 'Mint');
		            (0, umi_1.assertAccountExists)(metadataAccount, 'Metadata');
		            return [
		                deserializeDigitalAsset(mintAccount, metadataAccount, editionAccount.exists ? editionAccount : undefined),
		            ];
		        }
		        catch (e) {
		            return [];
		        }
		    });
		}
		exports.fetchAllDigitalAsset = fetchAllDigitalAsset;
		async function fetchAllDigitalAssetByCreator(context, creator, options) {
		    const creatorIndex = (options?.position ?? 1) - 1;
		    const mints = await (0, generated_1.getMetadataGpaBuilder)(context)
		        .where(CREATORS_OFFSET + creatorIndex * MAX_CREATOR_SIZE, creator)
		        .sliceField('mint')
		        .getDataAsPublicKeys();
		    return fetchAllDigitalAsset(context, mints, options);
		}
		exports.fetchAllDigitalAssetByCreator = fetchAllDigitalAssetByCreator;
		/**
		 * Fetches all digital assets from a verified collection. This does not work on older nfts that do not have a tokenStandard set.
		 */
		async function fetchAllDigitalAssetByVerifiedCollection(context, collectionAddress, options) {
		    const mints = await Promise.all(COLLECTION_OFFSETS.map(async (offset) => (0, generated_1.getMetadataGpaBuilder)(context)
		        .where(offset, 1)
		        .where(offset + VERIFIED_COLLECTION_OFFSET, 1)
		        .where(offset + COLLECTION_ADDRESS_OFFSET, collectionAddress)
		        .sliceField('mint')
		        .getDataAsPublicKeys()));
		    return fetchAllDigitalAsset(context, mints.flat(), options);
		}
		exports.fetchAllDigitalAssetByVerifiedCollection = fetchAllDigitalAssetByVerifiedCollection;
		async function fetchAllDigitalAssetByUpdateAuthority(context, updateAuthority, options) {
		    const mints = await (0, generated_1.getMetadataGpaBuilder)(context)
		        .whereField('updateAuthority', updateAuthority)
		        .sliceField('mint')
		        .getDataAsPublicKeys();
		    return fetchAllDigitalAsset(context, mints, options);
		}
		exports.fetchAllDigitalAssetByUpdateAuthority = fetchAllDigitalAssetByUpdateAuthority;
		async function fetchAllDigitalAssetByOwner(context, owner, options) {
		    const mints = await (0, mpl_toolbox_1.fetchAllMintPublicKeyByOwner)(context, owner, options);
		    return fetchAllDigitalAsset(context, mints, options);
		}
		exports.fetchAllDigitalAssetByOwner = fetchAllDigitalAssetByOwner;
		async function fetchAllMetadataByOwner(context, owner, options) {
		    const mints = await (0, mpl_toolbox_1.fetchAllMintPublicKeyByOwner)(context, owner, options);
		    const publicKeys = mints.map((mint) => (0, generated_1.findMetadataPda)(context, { mint })[0]);
		    const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
		    return maybeAccounts.flatMap((maybeAccount) => {
		        try {
		            (0, umi_1.assertAccountExists)(maybeAccount, 'Metadata');
		            return [(0, generated_1.deserializeMetadata)(maybeAccount)];
		        }
		        catch (e) {
		            return [];
		        }
		    });
		}
		exports.fetchAllMetadataByOwner = fetchAllMetadataByOwner;
		function deserializeDigitalAsset(mintAccount, metadataAccount, editionAccount) {
		    const mint = (0, mpl_toolbox_1.deserializeMint)(mintAccount);
		    const metadata = (0, generated_1.deserializeMetadata)(metadataAccount);
		    const tokenStandard = (0, umi_1.unwrapOption)(metadata.tokenStandard);
		    if (tokenStandard && (0, exports.isNonFungible)(tokenStandard) && !editionAccount) {
		        // TODO(loris): Custom error.
		        throw new Error('Edition account must be provided for non-fungible assets.');
		    }
		    const digitalAsset = { publicKey: mint.publicKey, mint, metadata };
		    if (!editionAccount)
		        return digitalAsset;
		    const editionKey = (0, generated_1.getKeySerializer)().deserialize(editionAccount.data)[0];
		    let edition;
		    if (editionKey === generated_1.Key.MasterEditionV1 ||
		        editionKey === generated_1.Key.MasterEditionV2) {
		        edition = {
		            isOriginal: true,
		            ...(0, generated_1.deserializeMasterEdition)(editionAccount),
		        };
		    }
		    else if (editionKey === generated_1.Key.EditionV1) {
		        edition = {
		            isOriginal: false,
		            ...(0, generated_1.deserializeEdition)(editionAccount),
		        };
		    }
		    else {
		        throw new errors_1.TokenMetadataError(`Invalid key "${editionKey}" for edition account.`);
		    }
		    return { ...digitalAsset, edition };
		}
		exports.deserializeDigitalAsset = deserializeDigitalAsset;
		const isFungible = (tokenStandard) => tokenStandard === generated_1.TokenStandard.Fungible ||
		    tokenStandard === generated_1.TokenStandard.FungibleAsset;
		exports.isFungible = isFungible;
		const isNonFungible = (tokenStandard) => !(0, exports.isFungible)(tokenStandard);
		exports.isNonFungible = isNonFungible;
		const isProgrammable = (tokenStandard) => tokenStandard === generated_1.TokenStandard.ProgrammableNonFungible;
		exports.isProgrammable = isProgrammable;
		
	} (digitalAsset));
	return digitalAsset;
}

var hasRequiredResolvers;

function requireResolvers () {
	if (hasRequiredResolvers) return resolvers$1;
	hasRequiredResolvers = 1;
	Object.defineProperty(resolvers$1, "__esModule", { value: true });
	resolvers$1.resolveIsNonFungibleOrIsMintSigner = resolvers$1.resolveOptionalTokenOwner = resolvers$1.resolveCreateV1Bytes = resolvers$1.resolveCreators = resolvers$1.resolvePrintSupply = resolvers$1.resolveDecimals = resolvers$1.resolveIsNonFungible = resolvers$1.resolveCollectionDetails = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const digitalAsset_1 = requireDigitalAsset();
	const generated_1 = requireGenerated();
	const METADATA_SIZE = 679;
	const MASTER_EDITION_SIZE = 282;
	const resolveCollectionDetails = (context, accounts, args, ...rest) => args.isCollection ? (0, umi_1.some)((0, generated_1.collectionDetails)('V1', { size: 0 })) : (0, umi_1.none)();
	resolvers$1.resolveCollectionDetails = resolveCollectionDetails;
	const resolveIsNonFungible = (context, accounts, args, ...rest) => (0, digitalAsset_1.isNonFungible)((0, generated_1.expectSome)(args.tokenStandard));
	resolvers$1.resolveIsNonFungible = resolveIsNonFungible;
	const resolveDecimals = (context, accounts, args, ...rest) => (0, digitalAsset_1.isNonFungible)((0, generated_1.expectSome)(args.tokenStandard)) ? (0, umi_1.none)() : (0, umi_1.some)(0);
	resolvers$1.resolveDecimals = resolveDecimals;
	const resolvePrintSupply = (context, accounts, args, ...rest) => (0, digitalAsset_1.isNonFungible)((0, generated_1.expectSome)(args.tokenStandard))
	    ? (0, umi_1.some)((0, generated_1.printSupply)('Zero'))
	    : (0, umi_1.none)();
	resolvers$1.resolvePrintSupply = resolvePrintSupply;
	const resolveCreators = (context, accounts, ...rest) => (0, umi_1.some)([
	    {
	        address: (0, generated_1.expectPublicKey)(accounts.authority.value),
	        share: 100,
	        verified: true,
	    },
	]);
	resolvers$1.resolveCreators = resolveCreators;
	const resolveCreateV1Bytes = (context, accounts, args, ...rest) => {
	    const base = (0, mpl_toolbox_1.getMintSize)() + METADATA_SIZE + 2 * umi_1.ACCOUNT_HEADER_SIZE;
	    if ((0, digitalAsset_1.isNonFungible)((0, generated_1.expectSome)(args.tokenStandard))) {
	        return base + MASTER_EDITION_SIZE + umi_1.ACCOUNT_HEADER_SIZE;
	    }
	    return base;
	};
	resolvers$1.resolveCreateV1Bytes = resolveCreateV1Bytes;
	const resolveOptionalTokenOwner = (context, accounts, ...rest) => accounts.token.value
	    ? { value: null }
	    : { value: context.identity.publicKey };
	resolvers$1.resolveOptionalTokenOwner = resolveOptionalTokenOwner;
	const resolveIsNonFungibleOrIsMintSigner = (context, accounts, args, ...rest) => (0, digitalAsset_1.isNonFungible)((0, generated_1.expectSome)(args.tokenStandard)) ||
	    (0, umi_1.isSigner)((0, generated_1.expectSome)(accounts.mint.value));
	resolvers$1.resolveIsNonFungibleOrIsMintSigner = resolveIsNonFungibleOrIsMintSigner;
	
	return resolvers$1;
}

var hasRequiredHooked;

function requireHooked () {
	if (hasRequiredHooked) return hooked$1;
	hasRequiredHooked = 1;
	(function (exports) {
		var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireEditionMarker(), exports);
		__exportStar(metadataDelegateRoleSeed, exports);
		__exportStar(holderDelegateRoleSeed, exports);
		__exportStar(requireResolvers(), exports);
		
	} (hooked$1));
	return hooked$1;
}

var hasRequiredHolderDelegateRecord;

function requireHolderDelegateRecord () {
	if (hasRequiredHolderDelegateRecord) return holderDelegateRecord;
	hasRequiredHolderDelegateRecord = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(holderDelegateRecord, "__esModule", { value: true });
	holderDelegateRecord.safeFetchHolderDelegateRecordFromSeeds = holderDelegateRecord.fetchHolderDelegateRecordFromSeeds = holderDelegateRecord.findHolderDelegateRecordPda = holderDelegateRecord.getHolderDelegateRecordSize = holderDelegateRecord.getHolderDelegateRecordGpaBuilder = holderDelegateRecord.safeFetchAllHolderDelegateRecord = holderDelegateRecord.fetchAllHolderDelegateRecord = holderDelegateRecord.safeFetchHolderDelegateRecord = holderDelegateRecord.fetchHolderDelegateRecord = holderDelegateRecord.deserializeHolderDelegateRecord = holderDelegateRecord.getHolderDelegateRecordAccountDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const types_1 = requireTypes();
	function getHolderDelegateRecordAccountDataSerializer() {
	    return (0, serializers_1.struct)([
	        ['key', (0, types_1.getKeySerializer)()],
	        ['bump', (0, serializers_1.u8)()],
	        ['mint', (0, serializers_1.publicKey)()],
	        ['delegate', (0, serializers_1.publicKey)()],
	        ['updateAuthority', (0, serializers_1.publicKey)()],
	    ], { description: 'HolderDelegateRecordAccountData' });
	}
	holderDelegateRecord.getHolderDelegateRecordAccountDataSerializer = getHolderDelegateRecordAccountDataSerializer;
	function deserializeHolderDelegateRecord(rawAccount) {
	    return (0, umi_1.deserializeAccount)(rawAccount, getHolderDelegateRecordAccountDataSerializer());
	}
	holderDelegateRecord.deserializeHolderDelegateRecord = deserializeHolderDelegateRecord;
	async function fetchHolderDelegateRecord(context, publicKey, options) {
	    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
	    (0, umi_1.assertAccountExists)(maybeAccount, 'HolderDelegateRecord');
	    return deserializeHolderDelegateRecord(maybeAccount);
	}
	holderDelegateRecord.fetchHolderDelegateRecord = fetchHolderDelegateRecord;
	async function safeFetchHolderDelegateRecord(context, publicKey, options) {
	    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
	    return maybeAccount.exists
	        ? deserializeHolderDelegateRecord(maybeAccount)
	        : null;
	}
	holderDelegateRecord.safeFetchHolderDelegateRecord = safeFetchHolderDelegateRecord;
	async function fetchAllHolderDelegateRecord(context, publicKeys, options) {
	    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
	    return maybeAccounts.map((maybeAccount) => {
	        (0, umi_1.assertAccountExists)(maybeAccount, 'HolderDelegateRecord');
	        return deserializeHolderDelegateRecord(maybeAccount);
	    });
	}
	holderDelegateRecord.fetchAllHolderDelegateRecord = fetchAllHolderDelegateRecord;
	async function safeFetchAllHolderDelegateRecord(context, publicKeys, options) {
	    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
	    return maybeAccounts
	        .filter((maybeAccount) => maybeAccount.exists)
	        .map((maybeAccount) => deserializeHolderDelegateRecord(maybeAccount));
	}
	holderDelegateRecord.safeFetchAllHolderDelegateRecord = safeFetchAllHolderDelegateRecord;
	function getHolderDelegateRecordGpaBuilder(context) {
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    return (0, umi_1.gpaBuilder)(context, programId)
	        .registerFields({
	        key: [0, (0, types_1.getKeySerializer)()],
	        bump: [1, (0, serializers_1.u8)()],
	        mint: [2, (0, serializers_1.publicKey)()],
	        delegate: [34, (0, serializers_1.publicKey)()],
	        updateAuthority: [66, (0, serializers_1.publicKey)()],
	    })
	        .deserializeUsing((account) => deserializeHolderDelegateRecord(account));
	}
	holderDelegateRecord.getHolderDelegateRecordGpaBuilder = getHolderDelegateRecordGpaBuilder;
	function getHolderDelegateRecordSize() {
	    return 98;
	}
	holderDelegateRecord.getHolderDelegateRecordSize = getHolderDelegateRecordSize;
	function findHolderDelegateRecordPda(context, seeds) {
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    return context.eddsa.findPda(programId, [
	        (0, serializers_1.string)({ size: 'variable' }).serialize('metadata'),
	        (0, serializers_1.publicKey)().serialize(programId),
	        (0, serializers_1.publicKey)().serialize(seeds.mint),
	        (0, hooked_1.getHolderDelegateRoleSeedSerializer)().serialize(seeds.delegateRole),
	        (0, serializers_1.publicKey)().serialize(seeds.owner),
	        (0, serializers_1.publicKey)().serialize(seeds.delegate),
	    ]);
	}
	holderDelegateRecord.findHolderDelegateRecordPda = findHolderDelegateRecordPda;
	async function fetchHolderDelegateRecordFromSeeds(context, seeds, options) {
	    return fetchHolderDelegateRecord(context, findHolderDelegateRecordPda(context, seeds), options);
	}
	holderDelegateRecord.fetchHolderDelegateRecordFromSeeds = fetchHolderDelegateRecordFromSeeds;
	async function safeFetchHolderDelegateRecordFromSeeds(context, seeds, options) {
	    return safeFetchHolderDelegateRecord(context, findHolderDelegateRecordPda(context, seeds), options);
	}
	holderDelegateRecord.safeFetchHolderDelegateRecordFromSeeds = safeFetchHolderDelegateRecordFromSeeds;
	
	return holderDelegateRecord;
}

var masterEdition = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(masterEdition, "__esModule", { value: true });
masterEdition.safeFetchMasterEditionFromSeeds = masterEdition.fetchMasterEditionFromSeeds = masterEdition.findMasterEditionPda = masterEdition.getMasterEditionGpaBuilder = masterEdition.safeFetchAllMasterEdition = masterEdition.fetchAllMasterEdition = masterEdition.safeFetchMasterEdition = masterEdition.fetchMasterEdition = masterEdition.deserializeMasterEdition = masterEdition.getMasterEditionAccountDataSerializer = void 0;
const umi_1$s = cjs$6;
const serializers_1$p = serializers;
const types_1$9 = requireTypes();
function getMasterEditionAccountDataSerializer() {
    return (0, serializers_1$p.mapSerializer)((0, serializers_1$p.struct)([
        ['key', (0, types_1$9.getKeySerializer)()],
        ['supply', (0, serializers_1$p.u64)()],
        ['maxSupply', (0, serializers_1$p.option)((0, serializers_1$p.u64)())],
    ], { description: 'MasterEditionAccountData' }), (value) => ({ ...value, key: types_1$9.Key.MasterEditionV2 }));
}
masterEdition.getMasterEditionAccountDataSerializer = getMasterEditionAccountDataSerializer;
function deserializeMasterEdition(rawAccount) {
    return (0, umi_1$s.deserializeAccount)(rawAccount, getMasterEditionAccountDataSerializer());
}
masterEdition.deserializeMasterEdition = deserializeMasterEdition;
async function fetchMasterEdition(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$s.publicKey)(publicKey, false), options);
    (0, umi_1$s.assertAccountExists)(maybeAccount, 'MasterEdition');
    return deserializeMasterEdition(maybeAccount);
}
masterEdition.fetchMasterEdition = fetchMasterEdition;
async function safeFetchMasterEdition(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$s.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMasterEdition(maybeAccount) : null;
}
masterEdition.safeFetchMasterEdition = safeFetchMasterEdition;
async function fetchAllMasterEdition(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$s.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$s.assertAccountExists)(maybeAccount, 'MasterEdition');
        return deserializeMasterEdition(maybeAccount);
    });
}
masterEdition.fetchAllMasterEdition = fetchAllMasterEdition;
async function safeFetchAllMasterEdition(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$s.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMasterEdition(maybeAccount));
}
masterEdition.safeFetchAllMasterEdition = safeFetchAllMasterEdition;
function getMasterEditionGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$s.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$9.getKeySerializer)()],
        supply: [1, (0, serializers_1$p.u64)()],
        maxSupply: [9, (0, serializers_1$p.option)((0, serializers_1$p.u64)())],
    })
        .deserializeUsing((account) => deserializeMasterEdition(account))
        .whereField('key', types_1$9.Key.MasterEditionV2);
}
masterEdition.getMasterEditionGpaBuilder = getMasterEditionGpaBuilder;
function findMasterEditionPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$p.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$p.publicKey)().serialize(programId),
        (0, serializers_1$p.publicKey)().serialize(seeds.mint),
        (0, serializers_1$p.string)({ size: 'variable' }).serialize('edition'),
    ]);
}
masterEdition.findMasterEditionPda = findMasterEditionPda;
async function fetchMasterEditionFromSeeds(context, seeds, options) {
    return fetchMasterEdition(context, findMasterEditionPda(context, seeds), options);
}
masterEdition.fetchMasterEditionFromSeeds = fetchMasterEditionFromSeeds;
async function safeFetchMasterEditionFromSeeds(context, seeds, options) {
    return safeFetchMasterEdition(context, findMasterEditionPda(context, seeds), options);
}
masterEdition.safeFetchMasterEditionFromSeeds = safeFetchMasterEditionFromSeeds;

var metadata$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(metadata$1, "__esModule", { value: true });
metadata$1.safeFetchMetadataFromSeeds = metadata$1.fetchMetadataFromSeeds = metadata$1.findMetadataPda = metadata$1.getMetadataGpaBuilder = metadata$1.safeFetchAllMetadata = metadata$1.fetchAllMetadata = metadata$1.safeFetchMetadata = metadata$1.fetchMetadata = metadata$1.deserializeMetadata = metadata$1.getMetadataAccountDataSerializer = void 0;
const umi_1$r = cjs$6;
const serializers_1$o = serializers;
const types_1$8 = requireTypes();
function getMetadataAccountDataSerializer() {
    return (0, serializers_1$o.mapSerializer)((0, serializers_1$o.struct)([
        ['key', (0, types_1$8.getKeySerializer)()],
        ['updateAuthority', (0, serializers_1$o.publicKey)()],
        ['mint', (0, serializers_1$o.publicKey)()],
        ['name', (0, serializers_1$o.string)()],
        ['symbol', (0, serializers_1$o.string)()],
        ['uri', (0, serializers_1$o.string)()],
        ['sellerFeeBasisPoints', (0, serializers_1$o.u16)()],
        ['creators', (0, serializers_1$o.option)((0, serializers_1$o.array)((0, types_1$8.getCreatorSerializer)()))],
        ['primarySaleHappened', (0, serializers_1$o.bool)()],
        ['isMutable', (0, serializers_1$o.bool)()],
        ['editionNonce', (0, serializers_1$o.option)((0, serializers_1$o.u8)())],
        ['tokenStandard', (0, serializers_1$o.option)((0, types_1$8.getTokenStandardSerializer)())],
        ['collection', (0, serializers_1$o.option)((0, types_1$8.getCollectionSerializer)())],
        ['uses', (0, serializers_1$o.option)((0, types_1$8.getUsesSerializer)())],
        ['collectionDetails', (0, serializers_1$o.option)((0, types_1$8.getCollectionDetailsSerializer)())],
        ['programmableConfig', (0, serializers_1$o.option)((0, types_1$8.getProgrammableConfigSerializer)())],
    ], { description: 'MetadataAccountData' }), (value) => ({ ...value, key: types_1$8.Key.MetadataV1 }));
}
metadata$1.getMetadataAccountDataSerializer = getMetadataAccountDataSerializer;
function deserializeMetadata(rawAccount) {
    return (0, umi_1$r.deserializeAccount)(rawAccount, getMetadataAccountDataSerializer());
}
metadata$1.deserializeMetadata = deserializeMetadata;
async function fetchMetadata(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$r.publicKey)(publicKey, false), options);
    (0, umi_1$r.assertAccountExists)(maybeAccount, 'Metadata');
    return deserializeMetadata(maybeAccount);
}
metadata$1.fetchMetadata = fetchMetadata;
async function safeFetchMetadata(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$r.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeMetadata(maybeAccount) : null;
}
metadata$1.safeFetchMetadata = safeFetchMetadata;
async function fetchAllMetadata(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$r.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$r.assertAccountExists)(maybeAccount, 'Metadata');
        return deserializeMetadata(maybeAccount);
    });
}
metadata$1.fetchAllMetadata = fetchAllMetadata;
async function safeFetchAllMetadata(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$r.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeMetadata(maybeAccount));
}
metadata$1.safeFetchAllMetadata = safeFetchAllMetadata;
function getMetadataGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$r.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$8.getKeySerializer)()],
        updateAuthority: [1, (0, serializers_1$o.publicKey)()],
        mint: [33, (0, serializers_1$o.publicKey)()],
        name: [65, (0, serializers_1$o.string)()],
        symbol: [null, (0, serializers_1$o.string)()],
        uri: [null, (0, serializers_1$o.string)()],
        sellerFeeBasisPoints: [null, (0, serializers_1$o.u16)()],
        creators: [null, (0, serializers_1$o.option)((0, serializers_1$o.array)((0, types_1$8.getCreatorSerializer)()))],
        primarySaleHappened: [null, (0, serializers_1$o.bool)()],
        isMutable: [null, (0, serializers_1$o.bool)()],
        editionNonce: [null, (0, serializers_1$o.option)((0, serializers_1$o.u8)())],
        tokenStandard: [null, (0, serializers_1$o.option)((0, types_1$8.getTokenStandardSerializer)())],
        collection: [null, (0, serializers_1$o.option)((0, types_1$8.getCollectionSerializer)())],
        uses: [null, (0, serializers_1$o.option)((0, types_1$8.getUsesSerializer)())],
        collectionDetails: [null, (0, serializers_1$o.option)((0, types_1$8.getCollectionDetailsSerializer)())],
        programmableConfig: [null, (0, serializers_1$o.option)((0, types_1$8.getProgrammableConfigSerializer)())],
    })
        .deserializeUsing((account) => deserializeMetadata(account))
        .whereField('key', types_1$8.Key.MetadataV1);
}
metadata$1.getMetadataGpaBuilder = getMetadataGpaBuilder;
function findMetadataPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$o.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$o.publicKey)().serialize(programId),
        (0, serializers_1$o.publicKey)().serialize(seeds.mint),
    ]);
}
metadata$1.findMetadataPda = findMetadataPda;
async function fetchMetadataFromSeeds(context, seeds, options) {
    return fetchMetadata(context, findMetadataPda(context, seeds), options);
}
metadata$1.fetchMetadataFromSeeds = fetchMetadataFromSeeds;
async function safeFetchMetadataFromSeeds(context, seeds, options) {
    return safeFetchMetadata(context, findMetadataPda(context, seeds), options);
}
metadata$1.safeFetchMetadataFromSeeds = safeFetchMetadataFromSeeds;

var metadataDelegateRecord = {};

var hasRequiredMetadataDelegateRecord;

function requireMetadataDelegateRecord () {
	if (hasRequiredMetadataDelegateRecord) return metadataDelegateRecord;
	hasRequiredMetadataDelegateRecord = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(metadataDelegateRecord, "__esModule", { value: true });
	metadataDelegateRecord.safeFetchMetadataDelegateRecordFromSeeds = metadataDelegateRecord.fetchMetadataDelegateRecordFromSeeds = metadataDelegateRecord.findMetadataDelegateRecordPda = metadataDelegateRecord.getMetadataDelegateRecordSize = metadataDelegateRecord.getMetadataDelegateRecordGpaBuilder = metadataDelegateRecord.safeFetchAllMetadataDelegateRecord = metadataDelegateRecord.fetchAllMetadataDelegateRecord = metadataDelegateRecord.safeFetchMetadataDelegateRecord = metadataDelegateRecord.fetchMetadataDelegateRecord = metadataDelegateRecord.deserializeMetadataDelegateRecord = metadataDelegateRecord.getMetadataDelegateRecordAccountDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const types_1 = requireTypes();
	function getMetadataDelegateRecordAccountDataSerializer() {
	    return (0, serializers_1.struct)([
	        ['key', (0, types_1.getKeySerializer)()],
	        ['bump', (0, serializers_1.u8)()],
	        ['mint', (0, serializers_1.publicKey)()],
	        ['delegate', (0, serializers_1.publicKey)()],
	        ['updateAuthority', (0, serializers_1.publicKey)()],
	    ], { description: 'MetadataDelegateRecordAccountData' });
	}
	metadataDelegateRecord.getMetadataDelegateRecordAccountDataSerializer = getMetadataDelegateRecordAccountDataSerializer;
	function deserializeMetadataDelegateRecord(rawAccount) {
	    return (0, umi_1.deserializeAccount)(rawAccount, getMetadataDelegateRecordAccountDataSerializer());
	}
	metadataDelegateRecord.deserializeMetadataDelegateRecord = deserializeMetadataDelegateRecord;
	async function fetchMetadataDelegateRecord(context, publicKey, options) {
	    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
	    (0, umi_1.assertAccountExists)(maybeAccount, 'MetadataDelegateRecord');
	    return deserializeMetadataDelegateRecord(maybeAccount);
	}
	metadataDelegateRecord.fetchMetadataDelegateRecord = fetchMetadataDelegateRecord;
	async function safeFetchMetadataDelegateRecord(context, publicKey, options) {
	    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
	    return maybeAccount.exists
	        ? deserializeMetadataDelegateRecord(maybeAccount)
	        : null;
	}
	metadataDelegateRecord.safeFetchMetadataDelegateRecord = safeFetchMetadataDelegateRecord;
	async function fetchAllMetadataDelegateRecord(context, publicKeys, options) {
	    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
	    return maybeAccounts.map((maybeAccount) => {
	        (0, umi_1.assertAccountExists)(maybeAccount, 'MetadataDelegateRecord');
	        return deserializeMetadataDelegateRecord(maybeAccount);
	    });
	}
	metadataDelegateRecord.fetchAllMetadataDelegateRecord = fetchAllMetadataDelegateRecord;
	async function safeFetchAllMetadataDelegateRecord(context, publicKeys, options) {
	    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
	    return maybeAccounts
	        .filter((maybeAccount) => maybeAccount.exists)
	        .map((maybeAccount) => deserializeMetadataDelegateRecord(maybeAccount));
	}
	metadataDelegateRecord.safeFetchAllMetadataDelegateRecord = safeFetchAllMetadataDelegateRecord;
	function getMetadataDelegateRecordGpaBuilder(context) {
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    return (0, umi_1.gpaBuilder)(context, programId)
	        .registerFields({
	        key: [0, (0, types_1.getKeySerializer)()],
	        bump: [1, (0, serializers_1.u8)()],
	        mint: [2, (0, serializers_1.publicKey)()],
	        delegate: [34, (0, serializers_1.publicKey)()],
	        updateAuthority: [66, (0, serializers_1.publicKey)()],
	    })
	        .deserializeUsing((account) => deserializeMetadataDelegateRecord(account));
	}
	metadataDelegateRecord.getMetadataDelegateRecordGpaBuilder = getMetadataDelegateRecordGpaBuilder;
	function getMetadataDelegateRecordSize() {
	    return 98;
	}
	metadataDelegateRecord.getMetadataDelegateRecordSize = getMetadataDelegateRecordSize;
	function findMetadataDelegateRecordPda(context, seeds) {
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    return context.eddsa.findPda(programId, [
	        (0, serializers_1.string)({ size: 'variable' }).serialize('metadata'),
	        (0, serializers_1.publicKey)().serialize(programId),
	        (0, serializers_1.publicKey)().serialize(seeds.mint),
	        (0, hooked_1.getMetadataDelegateRoleSeedSerializer)().serialize(seeds.delegateRole),
	        (0, serializers_1.publicKey)().serialize(seeds.updateAuthority),
	        (0, serializers_1.publicKey)().serialize(seeds.delegate),
	    ]);
	}
	metadataDelegateRecord.findMetadataDelegateRecordPda = findMetadataDelegateRecordPda;
	async function fetchMetadataDelegateRecordFromSeeds(context, seeds, options) {
	    return fetchMetadataDelegateRecord(context, findMetadataDelegateRecordPda(context, seeds), options);
	}
	metadataDelegateRecord.fetchMetadataDelegateRecordFromSeeds = fetchMetadataDelegateRecordFromSeeds;
	async function safeFetchMetadataDelegateRecordFromSeeds(context, seeds, options) {
	    return safeFetchMetadataDelegateRecord(context, findMetadataDelegateRecordPda(context, seeds), options);
	}
	metadataDelegateRecord.safeFetchMetadataDelegateRecordFromSeeds = safeFetchMetadataDelegateRecordFromSeeds;
	
	return metadataDelegateRecord;
}

var tokenOwnedEscrow = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(tokenOwnedEscrow, "__esModule", { value: true });
tokenOwnedEscrow.getTokenOwnedEscrowGpaBuilder = tokenOwnedEscrow.safeFetchAllTokenOwnedEscrow = tokenOwnedEscrow.fetchAllTokenOwnedEscrow = tokenOwnedEscrow.safeFetchTokenOwnedEscrow = tokenOwnedEscrow.fetchTokenOwnedEscrow = tokenOwnedEscrow.deserializeTokenOwnedEscrow = tokenOwnedEscrow.getTokenOwnedEscrowAccountDataSerializer = void 0;
const umi_1$q = cjs$6;
const serializers_1$n = serializers;
const types_1$7 = requireTypes();
function getTokenOwnedEscrowAccountDataSerializer() {
    return (0, serializers_1$n.mapSerializer)((0, serializers_1$n.struct)([
        ['key', (0, types_1$7.getKeySerializer)()],
        ['baseToken', (0, serializers_1$n.publicKey)()],
        ['authority', (0, types_1$7.getEscrowAuthoritySerializer)()],
        ['bump', (0, serializers_1$n.u8)()],
    ], { description: 'TokenOwnedEscrowAccountData' }), (value) => ({ ...value, key: types_1$7.Key.TokenOwnedEscrow }));
}
tokenOwnedEscrow.getTokenOwnedEscrowAccountDataSerializer = getTokenOwnedEscrowAccountDataSerializer;
function deserializeTokenOwnedEscrow(rawAccount) {
    return (0, umi_1$q.deserializeAccount)(rawAccount, getTokenOwnedEscrowAccountDataSerializer());
}
tokenOwnedEscrow.deserializeTokenOwnedEscrow = deserializeTokenOwnedEscrow;
async function fetchTokenOwnedEscrow(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$q.publicKey)(publicKey, false), options);
    (0, umi_1$q.assertAccountExists)(maybeAccount, 'TokenOwnedEscrow');
    return deserializeTokenOwnedEscrow(maybeAccount);
}
tokenOwnedEscrow.fetchTokenOwnedEscrow = fetchTokenOwnedEscrow;
async function safeFetchTokenOwnedEscrow(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$q.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeTokenOwnedEscrow(maybeAccount) : null;
}
tokenOwnedEscrow.safeFetchTokenOwnedEscrow = safeFetchTokenOwnedEscrow;
async function fetchAllTokenOwnedEscrow(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$q.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$q.assertAccountExists)(maybeAccount, 'TokenOwnedEscrow');
        return deserializeTokenOwnedEscrow(maybeAccount);
    });
}
tokenOwnedEscrow.fetchAllTokenOwnedEscrow = fetchAllTokenOwnedEscrow;
async function safeFetchAllTokenOwnedEscrow(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$q.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeTokenOwnedEscrow(maybeAccount));
}
tokenOwnedEscrow.safeFetchAllTokenOwnedEscrow = safeFetchAllTokenOwnedEscrow;
function getTokenOwnedEscrowGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$q.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$7.getKeySerializer)()],
        baseToken: [1, (0, serializers_1$n.publicKey)()],
        authority: [33, (0, types_1$7.getEscrowAuthoritySerializer)()],
        bump: [null, (0, serializers_1$n.u8)()],
    })
        .deserializeUsing((account) => deserializeTokenOwnedEscrow(account))
        .whereField('key', types_1$7.Key.TokenOwnedEscrow);
}
tokenOwnedEscrow.getTokenOwnedEscrowGpaBuilder = getTokenOwnedEscrowGpaBuilder;

var tokenRecord = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(tokenRecord, "__esModule", { value: true });
tokenRecord.safeFetchTokenRecordFromSeeds = tokenRecord.fetchTokenRecordFromSeeds = tokenRecord.findTokenRecordPda = tokenRecord.getTokenRecordSize = tokenRecord.getTokenRecordGpaBuilder = tokenRecord.safeFetchAllTokenRecord = tokenRecord.fetchAllTokenRecord = tokenRecord.safeFetchTokenRecord = tokenRecord.fetchTokenRecord = tokenRecord.deserializeTokenRecord = tokenRecord.getTokenRecordAccountDataSerializer = void 0;
const umi_1$p = cjs$6;
const serializers_1$m = serializers;
const types_1$6 = requireTypes();
function getTokenRecordAccountDataSerializer() {
    return (0, serializers_1$m.mapSerializer)((0, serializers_1$m.struct)([
        ['key', (0, types_1$6.getKeySerializer)()],
        ['bump', (0, serializers_1$m.u8)()],
        ['state', (0, types_1$6.getTokenStateSerializer)()],
        ['ruleSetRevision', (0, serializers_1$m.option)((0, serializers_1$m.u64)())],
        ['delegate', (0, serializers_1$m.option)((0, serializers_1$m.publicKey)())],
        ['delegateRole', (0, serializers_1$m.option)((0, types_1$6.getTokenDelegateRoleSerializer)())],
        ['lockedTransfer', (0, serializers_1$m.option)((0, serializers_1$m.publicKey)())],
    ], { description: 'TokenRecordAccountData' }), (value) => ({ ...value, key: types_1$6.Key.TokenRecord }));
}
tokenRecord.getTokenRecordAccountDataSerializer = getTokenRecordAccountDataSerializer;
function deserializeTokenRecord(rawAccount) {
    return (0, umi_1$p.deserializeAccount)(rawAccount, getTokenRecordAccountDataSerializer());
}
tokenRecord.deserializeTokenRecord = deserializeTokenRecord;
async function fetchTokenRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$p.publicKey)(publicKey, false), options);
    (0, umi_1$p.assertAccountExists)(maybeAccount, 'TokenRecord');
    return deserializeTokenRecord(maybeAccount);
}
tokenRecord.fetchTokenRecord = fetchTokenRecord;
async function safeFetchTokenRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$p.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeTokenRecord(maybeAccount) : null;
}
tokenRecord.safeFetchTokenRecord = safeFetchTokenRecord;
async function fetchAllTokenRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$p.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$p.assertAccountExists)(maybeAccount, 'TokenRecord');
        return deserializeTokenRecord(maybeAccount);
    });
}
tokenRecord.fetchAllTokenRecord = fetchAllTokenRecord;
async function safeFetchAllTokenRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$p.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeTokenRecord(maybeAccount));
}
tokenRecord.safeFetchAllTokenRecord = safeFetchAllTokenRecord;
function getTokenRecordGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$p.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$6.getKeySerializer)()],
        bump: [1, (0, serializers_1$m.u8)()],
        state: [2, (0, types_1$6.getTokenStateSerializer)()],
        ruleSetRevision: [3, (0, serializers_1$m.option)((0, serializers_1$m.u64)())],
        delegate: [null, (0, serializers_1$m.option)((0, serializers_1$m.publicKey)())],
        delegateRole: [null, (0, serializers_1$m.option)((0, types_1$6.getTokenDelegateRoleSerializer)())],
        lockedTransfer: [null, (0, serializers_1$m.option)((0, serializers_1$m.publicKey)())],
    })
        .deserializeUsing((account) => deserializeTokenRecord(account))
        .whereField('key', types_1$6.Key.TokenRecord);
}
tokenRecord.getTokenRecordGpaBuilder = getTokenRecordGpaBuilder;
function getTokenRecordSize() {
    return 80;
}
tokenRecord.getTokenRecordSize = getTokenRecordSize;
function findTokenRecordPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$m.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$m.publicKey)().serialize(programId),
        (0, serializers_1$m.publicKey)().serialize(seeds.mint),
        (0, serializers_1$m.string)({ size: 'variable' }).serialize('token_record'),
        (0, serializers_1$m.publicKey)().serialize(seeds.token),
    ]);
}
tokenRecord.findTokenRecordPda = findTokenRecordPda;
async function fetchTokenRecordFromSeeds(context, seeds, options) {
    return fetchTokenRecord(context, findTokenRecordPda(context, seeds), options);
}
tokenRecord.fetchTokenRecordFromSeeds = fetchTokenRecordFromSeeds;
async function safeFetchTokenRecordFromSeeds(context, seeds, options) {
    return safeFetchTokenRecord(context, findTokenRecordPda(context, seeds), options);
}
tokenRecord.safeFetchTokenRecordFromSeeds = safeFetchTokenRecordFromSeeds;

var useAuthorityRecord = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(useAuthorityRecord, "__esModule", { value: true });
useAuthorityRecord.safeFetchUseAuthorityRecordFromSeeds = useAuthorityRecord.fetchUseAuthorityRecordFromSeeds = useAuthorityRecord.findUseAuthorityRecordPda = useAuthorityRecord.getUseAuthorityRecordSize = useAuthorityRecord.getUseAuthorityRecordGpaBuilder = useAuthorityRecord.safeFetchAllUseAuthorityRecord = useAuthorityRecord.fetchAllUseAuthorityRecord = useAuthorityRecord.safeFetchUseAuthorityRecord = useAuthorityRecord.fetchUseAuthorityRecord = useAuthorityRecord.deserializeUseAuthorityRecord = useAuthorityRecord.getUseAuthorityRecordAccountDataSerializer = void 0;
const umi_1$o = cjs$6;
const serializers_1$l = serializers;
const types_1$5 = requireTypes();
function getUseAuthorityRecordAccountDataSerializer() {
    return (0, serializers_1$l.mapSerializer)((0, serializers_1$l.struct)([
        ['key', (0, types_1$5.getKeySerializer)()],
        ['allowedUses', (0, serializers_1$l.u64)()],
        ['bump', (0, serializers_1$l.u8)()],
    ], { description: 'UseAuthorityRecordAccountData' }), (value) => ({ ...value, key: types_1$5.Key.UseAuthorityRecord }));
}
useAuthorityRecord.getUseAuthorityRecordAccountDataSerializer = getUseAuthorityRecordAccountDataSerializer;
function deserializeUseAuthorityRecord(rawAccount) {
    return (0, umi_1$o.deserializeAccount)(rawAccount, getUseAuthorityRecordAccountDataSerializer());
}
useAuthorityRecord.deserializeUseAuthorityRecord = deserializeUseAuthorityRecord;
async function fetchUseAuthorityRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$o.publicKey)(publicKey, false), options);
    (0, umi_1$o.assertAccountExists)(maybeAccount, 'UseAuthorityRecord');
    return deserializeUseAuthorityRecord(maybeAccount);
}
useAuthorityRecord.fetchUseAuthorityRecord = fetchUseAuthorityRecord;
async function safeFetchUseAuthorityRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1$o.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeUseAuthorityRecord(maybeAccount)
        : null;
}
useAuthorityRecord.safeFetchUseAuthorityRecord = safeFetchUseAuthorityRecord;
async function fetchAllUseAuthorityRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$o.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1$o.assertAccountExists)(maybeAccount, 'UseAuthorityRecord');
        return deserializeUseAuthorityRecord(maybeAccount);
    });
}
useAuthorityRecord.fetchAllUseAuthorityRecord = fetchAllUseAuthorityRecord;
async function safeFetchAllUseAuthorityRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1$o.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeUseAuthorityRecord(maybeAccount));
}
useAuthorityRecord.safeFetchAllUseAuthorityRecord = safeFetchAllUseAuthorityRecord;
function getUseAuthorityRecordGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1$o.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1$5.getKeySerializer)()],
        allowedUses: [1, (0, serializers_1$l.u64)()],
        bump: [9, (0, serializers_1$l.u8)()],
    })
        .deserializeUsing((account) => deserializeUseAuthorityRecord(account))
        .whereField('key', types_1$5.Key.UseAuthorityRecord);
}
useAuthorityRecord.getUseAuthorityRecordGpaBuilder = getUseAuthorityRecordGpaBuilder;
function getUseAuthorityRecordSize() {
    return 10;
}
useAuthorityRecord.getUseAuthorityRecordSize = getUseAuthorityRecordSize;
function findUseAuthorityRecordPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1$l.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1$l.publicKey)().serialize(programId),
        (0, serializers_1$l.publicKey)().serialize(seeds.mint),
        (0, serializers_1$l.string)({ size: 'variable' }).serialize('user'),
        (0, serializers_1$l.publicKey)().serialize(seeds.useAuthority),
    ]);
}
useAuthorityRecord.findUseAuthorityRecordPda = findUseAuthorityRecordPda;
async function fetchUseAuthorityRecordFromSeeds(context, seeds, options) {
    return fetchUseAuthorityRecord(context, findUseAuthorityRecordPda(context, seeds), options);
}
useAuthorityRecord.fetchUseAuthorityRecordFromSeeds = fetchUseAuthorityRecordFromSeeds;
async function safeFetchUseAuthorityRecordFromSeeds(context, seeds, options) {
    return safeFetchUseAuthorityRecord(context, findUseAuthorityRecordPda(context, seeds), options);
}
useAuthorityRecord.safeFetchUseAuthorityRecordFromSeeds = safeFetchUseAuthorityRecordFromSeeds;

var hasRequiredAccounts;

function requireAccounts () {
	if (hasRequiredAccounts) return accounts$1;
	hasRequiredAccounts = 1;
	(function (exports) {
		/**
		 * This code was AUTOGENERATED using the kinobi library.
		 * Please DO NOT EDIT THIS FILE, instead use visitors
		 * to add features, then rerun kinobi to update it.
		 *
		 * @see https://github.com/metaplex-foundation/kinobi
		 */
		var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(collectionAuthorityRecord, exports);
		__exportStar(deprecatedMasterEditionV1, exports);
		__exportStar(edition, exports);
		__exportStar(editionMarker$1, exports);
		__exportStar(editionMarkerV2, exports);
		__exportStar(requireHolderDelegateRecord(), exports);
		__exportStar(masterEdition, exports);
		__exportStar(metadata$1, exports);
		__exportStar(requireMetadataDelegateRecord(), exports);
		__exportStar(tokenOwnedEscrow, exports);
		__exportStar(tokenRecord, exports);
		__exportStar(useAuthorityRecord, exports);
		
	} (accounts$1));
	return accounts$1;
}

var errors = {};

var mplTokenMetadata$2 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mplTokenMetadata$2, "__esModule", { value: true });
mplTokenMetadata$2.ReservationAlreadyMadeError = mplTokenMetadata$2.ReservationNotSetError = mplTokenMetadata$2.ReservationDoesNotExistError = mplTokenMetadata$2.ReservationExistsError = mplTokenMetadata$2.ShareTotalMustBe100Error = mplTokenMetadata$2.NoBalanceInAccountForAuthorizationError = mplTokenMetadata$2.OwnerMismatchError = mplTokenMetadata$2.PrimarySaleCanOnlyBeFlippedToTrueError = mplTokenMetadata$2.InvalidBasisPointsError = mplTokenMetadata$2.CreatorNotFoundError = mplTokenMetadata$2.NoCreatorsPresentOnMetadataError = mplTokenMetadata$2.MustBeOneOfCreatorsError = mplTokenMetadata$2.CreatorsMustBeAtleastOneError = mplTokenMetadata$2.CreatorsTooLongError = mplTokenMetadata$2.DisabledError = mplTokenMetadata$2.AuthorizationTokenAccountOwnerMismatchError = mplTokenMetadata$2.PrintingMintAuthorizationAccountMismatchError = mplTokenMetadata$2.NotEnoughTokensError = mplTokenMetadata$2.TokenAccountMintMismatchV2Error = mplTokenMetadata$2.TokenAccountMintMismatchError = mplTokenMetadata$2.OneTimePrintingAuthMintMismatchError = mplTokenMetadata$2.PrintingMintMismatchError = mplTokenMetadata$2.DerivedKeyInvalidError = mplTokenMetadata$2.TokenAccountOneTimeAuthMintMismatchError = mplTokenMetadata$2.TokenBurnFailedError = mplTokenMetadata$2.EditionMintDecimalsShouldBeZeroError = mplTokenMetadata$2.OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError = mplTokenMetadata$2.PrintingMintDecimalsShouldBeZeroError = mplTokenMetadata$2.EditionAlreadyMintedError = mplTokenMetadata$2.DestinationMintMismatchError = mplTokenMetadata$2.MasterRecordMismatchError = mplTokenMetadata$2.TokenMintToFailedError = mplTokenMetadata$2.MaxEditionsMintedAlreadyError = mplTokenMetadata$2.EditionsMustHaveExactlyOneTokenError = mplTokenMetadata$2.MintMismatchError = mplTokenMetadata$2.UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError = mplTokenMetadata$2.UriTooLongError = mplTokenMetadata$2.SymbolTooLongError = mplTokenMetadata$2.NameTooLongError = mplTokenMetadata$2.InvalidMintAuthorityError = mplTokenMetadata$2.NotMintAuthorityError = mplTokenMetadata$2.UpdateAuthorityIsNotSignerError = mplTokenMetadata$2.UpdateAuthorityIncorrectError = mplTokenMetadata$2.InvalidEditionKeyError = mplTokenMetadata$2.InvalidMetadataKeyError = mplTokenMetadata$2.UninitializedError = mplTokenMetadata$2.AlreadyInitializedError = mplTokenMetadata$2.NotRentExemptError = mplTokenMetadata$2.InstructionPackErrorError = mplTokenMetadata$2.InstructionUnpackErrorError = void 0;
mplTokenMetadata$2.RevokeCollectionAuthoritySignerIncorrectError = mplTokenMetadata$2.InvalidUserError = mplTokenMetadata$2.EditionOverrideCannotBeZeroError = mplTokenMetadata$2.NotAllowedToChangeSellerFeeBasisPointsError = mplTokenMetadata$2.CannotWipeVerifiedCreatorsError = mplTokenMetadata$2.CannotRemoveVerifiedCreatorError = mplTokenMetadata$2.CannotAdjustVerifiedCreatorError = mplTokenMetadata$2.InvalidDelegateError = mplTokenMetadata$2.InvalidFreezeAuthorityError = mplTokenMetadata$2.InvalidCollectionAuthorityRecordError = mplTokenMetadata$2.InvalidUseAuthorityRecordError = mplTokenMetadata$2.CollectionAuthorityDoesNotExistError = mplTokenMetadata$2.CollectionAuthorityRecordAlreadyExistsError = mplTokenMetadata$2.NotEnoughUsesError = mplTokenMetadata$2.UnusableError = mplTokenMetadata$2.UseAuthorityRecordAlreadyRevokedError = mplTokenMetadata$2.UseAuthorityRecordAlreadyExistsError = mplTokenMetadata$2.CollectionMustBeAUniqueMasterEditionError = mplTokenMetadata$2.InvalidCollectionUpdateAuthorityError = mplTokenMetadata$2.CollectionNotFoundError = mplTokenMetadata$2.CannotChangeUsesAfterFirstUseError = mplTokenMetadata$2.CannotChangeUseMethodAfterFirstUseError = mplTokenMetadata$2.InvalidUseMethodError = mplTokenMetadata$2.MustBeBurnedError = mplTokenMetadata$2.RemovedError = mplTokenMetadata$2.CollectionCannotBeVerifiedInThisInstructionError = mplTokenMetadata$2.IsMutableCanOnlyBeFlippedToFalseError = mplTokenMetadata$2.ReservationArrayShouldBeSizeOneError = mplTokenMetadata$2.InvalidEditionIndexError = mplTokenMetadata$2.OneTimeAuthMintSupplyMustBeZeroForConversionError = mplTokenMetadata$2.PrintingMintSupplyMustBeZeroForConversionError = mplTokenMetadata$2.InvalidOwnerError = mplTokenMetadata$2.InvalidOperationError = mplTokenMetadata$2.TriedToReplaceAnExistingReservationError = mplTokenMetadata$2.ReservationNotCompleteError = mplTokenMetadata$2.BeyondAlottedAddressSizeError = mplTokenMetadata$2.DataTypeMismatchError = mplTokenMetadata$2.InvalidTokenProgramError = mplTokenMetadata$2.ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError = mplTokenMetadata$2.DuplicateCreatorAddressError = mplTokenMetadata$2.DataIsImmutableError = mplTokenMetadata$2.PrintingWouldBreachMaximumSupplyError = mplTokenMetadata$2.IncorrectOwnerError = mplTokenMetadata$2.SpotMismatchError = mplTokenMetadata$2.CannotUnverifyAnotherCreatorError = mplTokenMetadata$2.CannotVerifyAnotherCreatorError = mplTokenMetadata$2.AddressNotInReservationError = mplTokenMetadata$2.ReservationBreachesMaximumSupplyError = mplTokenMetadata$2.NumericalOverflowErrorError = mplTokenMetadata$2.BeyondMaxAddressSizeError = void 0;
mplTokenMetadata$2.MissingSplTokenProgramError = mplTokenMetadata$2.MissingTokenAccountError = mplTokenMetadata$2.OnlySaleDelegateCanTransferError = mplTokenMetadata$2.InvalidSystemWalletError = mplTokenMetadata$2.FeatureNotSupportedError = mplTokenMetadata$2.MissingArgumentInBuilderError = mplTokenMetadata$2.MissingAccountInBuilderError = mplTokenMetadata$2.DelegateNotFoundError = mplTokenMetadata$2.DelegateAlreadyExistsError = mplTokenMetadata$2.InvalidProgrammableConfigError = mplTokenMetadata$2.MissingProgrammableConfigError = mplTokenMetadata$2.MissingAuthorizationRulesError = mplTokenMetadata$2.InvalidAuthorizationRulesError = mplTokenMetadata$2.InvalidMintForTokenStandardError = mplTokenMetadata$2.InvalidTokenStandardError = mplTokenMetadata$2.MintIsNotSignerError = mplTokenMetadata$2.EscrowParentHasDelegateError = mplTokenMetadata$2.InvalidBubblegumSignerError = mplTokenMetadata$2.InvalidCollectionSizeChangeError = mplTokenMetadata$2.NoFreezeAuthoritySetError = mplTokenMetadata$2.BorshSerializationErrorError = mplTokenMetadata$2.InsufficientTokensError = mplTokenMetadata$2.MustBeNonFungibleError = mplTokenMetadata$2.InvalidSystemProgramError = mplTokenMetadata$2.MustBeEscrowAuthorityError = mplTokenMetadata$2.InvalidEscrowBumpSeedError = mplTokenMetadata$2.MustUnverifyError = mplTokenMetadata$2.EditionNumberGreaterThanMaxSupplyError = mplTokenMetadata$2.PrintEditionDoesNotMatchMasterEditionError = mplTokenMetadata$2.ReservationListDeprecatedError = mplTokenMetadata$2.InvalidEditionMarkerError = mplTokenMetadata$2.InvalidPrintEditionError = mplTokenMetadata$2.InvalidMasterEditionError = mplTokenMetadata$2.NotAPrintEditionError = mplTokenMetadata$2.AlreadyUnverifiedError = mplTokenMetadata$2.AlreadyVerifiedError = mplTokenMetadata$2.CollectionMasterEditionAccountInvalidError = mplTokenMetadata$2.CannotUpdateVerifiedCollectionError = mplTokenMetadata$2.BorshDeserializationErrorError = mplTokenMetadata$2.MasterEditionHasPrintsError = mplTokenMetadata$2.NotAMasterEditionError = mplTokenMetadata$2.MissingEditionAccountError = mplTokenMetadata$2.CouldNotDetermineTokenStandardError = mplTokenMetadata$2.NotACollectionParentError = mplTokenMetadata$2.NotVerifiedMemberOfCollectionError = mplTokenMetadata$2.NotAMemberOfCollectionError = mplTokenMetadata$2.MissingCollectionMetadataError = mplTokenMetadata$2.SizedCollectionError = mplTokenMetadata$2.UnsizedCollectionError = mplTokenMetadata$2.TokenCloseFailedError = void 0;
mplTokenMetadata$2.getMplTokenMetadataErrorFromCode = mplTokenMetadata$2.MissingImmutableOwnerExtensionError = mplTokenMetadata$2.InvalidTokenExtensionTypeError = mplTokenMetadata$2.InvalidMetadataPointerError = mplTokenMetadata$2.InvalidMintCloseAuthorityError = mplTokenMetadata$2.InvalidMintExtensionTypeError = mplTokenMetadata$2.CannotChangeUpdateAuthorityWithDelegateError = mplTokenMetadata$2.InvalidMetadataFlagsError = mplTokenMetadata$2.InvalidFeeAccountError = mplTokenMetadata$2.MissingDelegateRecordError = mplTokenMetadata$2.InvalidInstructionError = mplTokenMetadata$2.InvalidCloseAuthorityError = mplTokenMetadata$2.InvalidTokenRecordError = mplTokenMetadata$2.MissingCollectionMasterEditionError = mplTokenMetadata$2.MissingCollectionMintError = mplTokenMetadata$2.InsufficientTokenBalanceError = mplTokenMetadata$2.InvalidUpdateArgsError = mplTokenMetadata$2.InvalidParentAccountsError = mplTokenMetadata$2.InvalidInstructionsSysvarError = mplTokenMetadata$2.InvalidAssociatedTokenAccountProgramError = mplTokenMetadata$2.MissingEditionError = mplTokenMetadata$2.CannotBurnWithDelegateError = mplTokenMetadata$2.MissingEditionMarkerAccountError = mplTokenMetadata$2.MissingMasterEditionTokenAccountError = mplTokenMetadata$2.MissingMasterEditionMintAccountError = mplTokenMetadata$2.InvalidAmountError = mplTokenMetadata$2.CannotUpdateAssetWithDelegateError = mplTokenMetadata$2.DataIncrementLimitExceededError = mplTokenMetadata$2.InvalidLockedTransferAddressError = mplTokenMetadata$2.MissingLockedTransferAddressError = mplTokenMetadata$2.InvalidDelegateArgsError = mplTokenMetadata$2.AmountMustBeGreaterThanZeroError = mplTokenMetadata$2.MissingMasterEditionAccountError = mplTokenMetadata$2.MissingPrintSupplyError = mplTokenMetadata$2.InvalidDelegateRoleError = mplTokenMetadata$2.IncorrectTokenStateError = mplTokenMetadata$2.InvalidMasterEditionAccountLengthError = mplTokenMetadata$2.MissingTokenOwnerAccountError = mplTokenMetadata$2.DataIsEmptyOrZeroedError = mplTokenMetadata$2.MintSupplyMustBeZeroError = mplTokenMetadata$2.MissingTokenRecordError = mplTokenMetadata$2.InvalidAuthorityTypeError = mplTokenMetadata$2.MissingDelegateRoleError = mplTokenMetadata$2.UnlockedTokenError = mplTokenMetadata$2.LockedTokenError = mplTokenMetadata$2.KeyMismatchError = mplTokenMetadata$2.InstructionNotSupportedError = mplTokenMetadata$2.InvalidTransferAuthorityError = mplTokenMetadata$2.InvalidDelegateRoleForTransferError = mplTokenMetadata$2.MissingAuthorizationRulesProgramError = void 0;
mplTokenMetadata$2.getMplTokenMetadataErrorFromName = void 0;
const umi_1$n = cjs$6;
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** InstructionUnpackError */
class InstructionUnpackErrorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'InstructionUnpackError';
        this.code = 0x0; // 0
    }
}
mplTokenMetadata$2.InstructionUnpackErrorError = InstructionUnpackErrorError;
codeToErrorMap.set(0x0, InstructionUnpackErrorError);
nameToErrorMap.set('InstructionUnpackError', InstructionUnpackErrorError);
/** InstructionPackError */
class InstructionPackErrorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'InstructionPackError';
        this.code = 0x1; // 1
    }
}
mplTokenMetadata$2.InstructionPackErrorError = InstructionPackErrorError;
codeToErrorMap.set(0x1, InstructionPackErrorError);
nameToErrorMap.set('InstructionPackError', InstructionPackErrorError);
/** NotRentExempt: Lamport balance below rent-exempt threshold */
class NotRentExemptError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Lamport balance below rent-exempt threshold', program, cause);
        this.name = 'NotRentExempt';
        this.code = 0x2; // 2
    }
}
mplTokenMetadata$2.NotRentExemptError = NotRentExemptError;
codeToErrorMap.set(0x2, NotRentExemptError);
nameToErrorMap.set('NotRentExempt', NotRentExemptError);
/** AlreadyInitialized: Already initialized */
class AlreadyInitializedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Already initialized', program, cause);
        this.name = 'AlreadyInitialized';
        this.code = 0x3; // 3
    }
}
mplTokenMetadata$2.AlreadyInitializedError = AlreadyInitializedError;
codeToErrorMap.set(0x3, AlreadyInitializedError);
nameToErrorMap.set('AlreadyInitialized', AlreadyInitializedError);
/** Uninitialized: Uninitialized */
class UninitializedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Uninitialized', program, cause);
        this.name = 'Uninitialized';
        this.code = 0x4; // 4
    }
}
mplTokenMetadata$2.UninitializedError = UninitializedError;
codeToErrorMap.set(0x4, UninitializedError);
nameToErrorMap.set('Uninitialized', UninitializedError);
/** InvalidMetadataKey:  Metadata's key must match seed of ['metadata', program id, mint] provided */
class InvalidMetadataKeyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super(" Metadata's key must match seed of ['metadata', program id, mint] provided", program, cause);
        this.name = 'InvalidMetadataKey';
        this.code = 0x5; // 5
    }
}
mplTokenMetadata$2.InvalidMetadataKeyError = InvalidMetadataKeyError;
codeToErrorMap.set(0x5, InvalidMetadataKeyError);
nameToErrorMap.set('InvalidMetadataKey', InvalidMetadataKeyError);
/** InvalidEditionKey: Edition's key must match seed of ['metadata', program id, name, 'edition'] provided */
class InvalidEditionKeyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super("Edition's key must match seed of ['metadata', program id, name, 'edition'] provided", program, cause);
        this.name = 'InvalidEditionKey';
        this.code = 0x6; // 6
    }
}
mplTokenMetadata$2.InvalidEditionKeyError = InvalidEditionKeyError;
codeToErrorMap.set(0x6, InvalidEditionKeyError);
nameToErrorMap.set('InvalidEditionKey', InvalidEditionKeyError);
/** UpdateAuthorityIncorrect: Update Authority given does not match */
class UpdateAuthorityIncorrectError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Update Authority given does not match', program, cause);
        this.name = 'UpdateAuthorityIncorrect';
        this.code = 0x7; // 7
    }
}
mplTokenMetadata$2.UpdateAuthorityIncorrectError = UpdateAuthorityIncorrectError;
codeToErrorMap.set(0x7, UpdateAuthorityIncorrectError);
nameToErrorMap.set('UpdateAuthorityIncorrect', UpdateAuthorityIncorrectError);
/** UpdateAuthorityIsNotSigner: Update Authority needs to be signer to update metadata */
class UpdateAuthorityIsNotSignerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Update Authority needs to be signer to update metadata', program, cause);
        this.name = 'UpdateAuthorityIsNotSigner';
        this.code = 0x8; // 8
    }
}
mplTokenMetadata$2.UpdateAuthorityIsNotSignerError = UpdateAuthorityIsNotSignerError;
codeToErrorMap.set(0x8, UpdateAuthorityIsNotSignerError);
nameToErrorMap.set('UpdateAuthorityIsNotSigner', UpdateAuthorityIsNotSignerError);
/** NotMintAuthority: You must be the mint authority and signer on this transaction */
class NotMintAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('You must be the mint authority and signer on this transaction', program, cause);
        this.name = 'NotMintAuthority';
        this.code = 0x9; // 9
    }
}
mplTokenMetadata$2.NotMintAuthorityError = NotMintAuthorityError;
codeToErrorMap.set(0x9, NotMintAuthorityError);
nameToErrorMap.set('NotMintAuthority', NotMintAuthorityError);
/** InvalidMintAuthority: Mint authority provided does not match the authority on the mint */
class InvalidMintAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Mint authority provided does not match the authority on the mint', program, cause);
        this.name = 'InvalidMintAuthority';
        this.code = 0xa; // 10
    }
}
mplTokenMetadata$2.InvalidMintAuthorityError = InvalidMintAuthorityError;
codeToErrorMap.set(0xa, InvalidMintAuthorityError);
nameToErrorMap.set('InvalidMintAuthority', InvalidMintAuthorityError);
/** NameTooLong: Name too long */
class NameTooLongError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Name too long', program, cause);
        this.name = 'NameTooLong';
        this.code = 0xb; // 11
    }
}
mplTokenMetadata$2.NameTooLongError = NameTooLongError;
codeToErrorMap.set(0xb, NameTooLongError);
nameToErrorMap.set('NameTooLong', NameTooLongError);
/** SymbolTooLong: Symbol too long */
class SymbolTooLongError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Symbol too long', program, cause);
        this.name = 'SymbolTooLong';
        this.code = 0xc; // 12
    }
}
mplTokenMetadata$2.SymbolTooLongError = SymbolTooLongError;
codeToErrorMap.set(0xc, SymbolTooLongError);
nameToErrorMap.set('SymbolTooLong', SymbolTooLongError);
/** UriTooLong: URI too long */
class UriTooLongError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('URI too long', program, cause);
        this.name = 'UriTooLong';
        this.code = 0xd; // 13
    }
}
mplTokenMetadata$2.UriTooLongError = UriTooLongError;
codeToErrorMap.set(0xd, UriTooLongError);
nameToErrorMap.set('UriTooLong', UriTooLongError);
/** UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner */
class UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner';
        this.code = 0xe; // 14
    }
}
mplTokenMetadata$2.UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError = UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError;
codeToErrorMap.set(0xe, UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError);
nameToErrorMap.set('UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner', UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError);
/** MintMismatch: Mint given does not match mint on Metadata */
class MintMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Mint given does not match mint on Metadata', program, cause);
        this.name = 'MintMismatch';
        this.code = 0xf; // 15
    }
}
mplTokenMetadata$2.MintMismatchError = MintMismatchError;
codeToErrorMap.set(0xf, MintMismatchError);
nameToErrorMap.set('MintMismatch', MintMismatchError);
/** EditionsMustHaveExactlyOneToken: Editions must have exactly one token */
class EditionsMustHaveExactlyOneTokenError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Editions must have exactly one token', program, cause);
        this.name = 'EditionsMustHaveExactlyOneToken';
        this.code = 0x10; // 16
    }
}
mplTokenMetadata$2.EditionsMustHaveExactlyOneTokenError = EditionsMustHaveExactlyOneTokenError;
codeToErrorMap.set(0x10, EditionsMustHaveExactlyOneTokenError);
nameToErrorMap.set('EditionsMustHaveExactlyOneToken', EditionsMustHaveExactlyOneTokenError);
/** MaxEditionsMintedAlready */
class MaxEditionsMintedAlreadyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'MaxEditionsMintedAlready';
        this.code = 0x11; // 17
    }
}
mplTokenMetadata$2.MaxEditionsMintedAlreadyError = MaxEditionsMintedAlreadyError;
codeToErrorMap.set(0x11, MaxEditionsMintedAlreadyError);
nameToErrorMap.set('MaxEditionsMintedAlready', MaxEditionsMintedAlreadyError);
/** TokenMintToFailed */
class TokenMintToFailedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'TokenMintToFailed';
        this.code = 0x12; // 18
    }
}
mplTokenMetadata$2.TokenMintToFailedError = TokenMintToFailedError;
codeToErrorMap.set(0x12, TokenMintToFailedError);
nameToErrorMap.set('TokenMintToFailed', TokenMintToFailedError);
/** MasterRecordMismatch */
class MasterRecordMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'MasterRecordMismatch';
        this.code = 0x13; // 19
    }
}
mplTokenMetadata$2.MasterRecordMismatchError = MasterRecordMismatchError;
codeToErrorMap.set(0x13, MasterRecordMismatchError);
nameToErrorMap.set('MasterRecordMismatch', MasterRecordMismatchError);
/** DestinationMintMismatch */
class DestinationMintMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'DestinationMintMismatch';
        this.code = 0x14; // 20
    }
}
mplTokenMetadata$2.DestinationMintMismatchError = DestinationMintMismatchError;
codeToErrorMap.set(0x14, DestinationMintMismatchError);
nameToErrorMap.set('DestinationMintMismatch', DestinationMintMismatchError);
/** EditionAlreadyMinted */
class EditionAlreadyMintedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'EditionAlreadyMinted';
        this.code = 0x15; // 21
    }
}
mplTokenMetadata$2.EditionAlreadyMintedError = EditionAlreadyMintedError;
codeToErrorMap.set(0x15, EditionAlreadyMintedError);
nameToErrorMap.set('EditionAlreadyMinted', EditionAlreadyMintedError);
/** PrintingMintDecimalsShouldBeZero */
class PrintingMintDecimalsShouldBeZeroError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'PrintingMintDecimalsShouldBeZero';
        this.code = 0x16; // 22
    }
}
mplTokenMetadata$2.PrintingMintDecimalsShouldBeZeroError = PrintingMintDecimalsShouldBeZeroError;
codeToErrorMap.set(0x16, PrintingMintDecimalsShouldBeZeroError);
nameToErrorMap.set('PrintingMintDecimalsShouldBeZero', PrintingMintDecimalsShouldBeZeroError);
/** OneTimePrintingAuthorizationMintDecimalsShouldBeZero */
class OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'OneTimePrintingAuthorizationMintDecimalsShouldBeZero';
        this.code = 0x17; // 23
    }
}
mplTokenMetadata$2.OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError = OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError;
codeToErrorMap.set(0x17, OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError);
nameToErrorMap.set('OneTimePrintingAuthorizationMintDecimalsShouldBeZero', OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError);
/** EditionMintDecimalsShouldBeZero: EditionMintDecimalsShouldBeZero */
class EditionMintDecimalsShouldBeZeroError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('EditionMintDecimalsShouldBeZero', program, cause);
        this.name = 'EditionMintDecimalsShouldBeZero';
        this.code = 0x18; // 24
    }
}
mplTokenMetadata$2.EditionMintDecimalsShouldBeZeroError = EditionMintDecimalsShouldBeZeroError;
codeToErrorMap.set(0x18, EditionMintDecimalsShouldBeZeroError);
nameToErrorMap.set('EditionMintDecimalsShouldBeZero', EditionMintDecimalsShouldBeZeroError);
/** TokenBurnFailed */
class TokenBurnFailedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'TokenBurnFailed';
        this.code = 0x19; // 25
    }
}
mplTokenMetadata$2.TokenBurnFailedError = TokenBurnFailedError;
codeToErrorMap.set(0x19, TokenBurnFailedError);
nameToErrorMap.set('TokenBurnFailed', TokenBurnFailedError);
/** TokenAccountOneTimeAuthMintMismatch */
class TokenAccountOneTimeAuthMintMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'TokenAccountOneTimeAuthMintMismatch';
        this.code = 0x1a; // 26
    }
}
mplTokenMetadata$2.TokenAccountOneTimeAuthMintMismatchError = TokenAccountOneTimeAuthMintMismatchError;
codeToErrorMap.set(0x1a, TokenAccountOneTimeAuthMintMismatchError);
nameToErrorMap.set('TokenAccountOneTimeAuthMintMismatch', TokenAccountOneTimeAuthMintMismatchError);
/** DerivedKeyInvalid: Derived key invalid */
class DerivedKeyInvalidError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Derived key invalid', program, cause);
        this.name = 'DerivedKeyInvalid';
        this.code = 0x1b; // 27
    }
}
mplTokenMetadata$2.DerivedKeyInvalidError = DerivedKeyInvalidError;
codeToErrorMap.set(0x1b, DerivedKeyInvalidError);
nameToErrorMap.set('DerivedKeyInvalid', DerivedKeyInvalidError);
/** PrintingMintMismatch: The Printing mint does not match that on the master edition! */
class PrintingMintMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('The Printing mint does not match that on the master edition!', program, cause);
        this.name = 'PrintingMintMismatch';
        this.code = 0x1c; // 28
    }
}
mplTokenMetadata$2.PrintingMintMismatchError = PrintingMintMismatchError;
codeToErrorMap.set(0x1c, PrintingMintMismatchError);
nameToErrorMap.set('PrintingMintMismatch', PrintingMintMismatchError);
/** OneTimePrintingAuthMintMismatch: The One Time Printing Auth mint does not match that on the master edition! */
class OneTimePrintingAuthMintMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('The One Time Printing Auth mint does not match that on the master edition!', program, cause);
        this.name = 'OneTimePrintingAuthMintMismatch';
        this.code = 0x1d; // 29
    }
}
mplTokenMetadata$2.OneTimePrintingAuthMintMismatchError = OneTimePrintingAuthMintMismatchError;
codeToErrorMap.set(0x1d, OneTimePrintingAuthMintMismatchError);
nameToErrorMap.set('OneTimePrintingAuthMintMismatch', OneTimePrintingAuthMintMismatchError);
/** TokenAccountMintMismatch: The mint of the token account does not match the Printing mint! */
class TokenAccountMintMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('The mint of the token account does not match the Printing mint!', program, cause);
        this.name = 'TokenAccountMintMismatch';
        this.code = 0x1e; // 30
    }
}
mplTokenMetadata$2.TokenAccountMintMismatchError = TokenAccountMintMismatchError;
codeToErrorMap.set(0x1e, TokenAccountMintMismatchError);
nameToErrorMap.set('TokenAccountMintMismatch', TokenAccountMintMismatchError);
/** TokenAccountMintMismatchV2: The mint of the token account does not match the master metadata mint! */
class TokenAccountMintMismatchV2Error extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('The mint of the token account does not match the master metadata mint!', program, cause);
        this.name = 'TokenAccountMintMismatchV2';
        this.code = 0x1f; // 31
    }
}
mplTokenMetadata$2.TokenAccountMintMismatchV2Error = TokenAccountMintMismatchV2Error;
codeToErrorMap.set(0x1f, TokenAccountMintMismatchV2Error);
nameToErrorMap.set('TokenAccountMintMismatchV2', TokenAccountMintMismatchV2Error);
/** NotEnoughTokens: Not enough tokens to mint a limited edition */
class NotEnoughTokensError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Not enough tokens to mint a limited edition', program, cause);
        this.name = 'NotEnoughTokens';
        this.code = 0x20; // 32
    }
}
mplTokenMetadata$2.NotEnoughTokensError = NotEnoughTokensError;
codeToErrorMap.set(0x20, NotEnoughTokensError);
nameToErrorMap.set('NotEnoughTokens', NotEnoughTokensError);
/** PrintingMintAuthorizationAccountMismatch */
class PrintingMintAuthorizationAccountMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'PrintingMintAuthorizationAccountMismatch';
        this.code = 0x21; // 33
    }
}
mplTokenMetadata$2.PrintingMintAuthorizationAccountMismatchError = PrintingMintAuthorizationAccountMismatchError;
codeToErrorMap.set(0x21, PrintingMintAuthorizationAccountMismatchError);
nameToErrorMap.set('PrintingMintAuthorizationAccountMismatch', PrintingMintAuthorizationAccountMismatchError);
/** AuthorizationTokenAccountOwnerMismatch */
class AuthorizationTokenAccountOwnerMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'AuthorizationTokenAccountOwnerMismatch';
        this.code = 0x22; // 34
    }
}
mplTokenMetadata$2.AuthorizationTokenAccountOwnerMismatchError = AuthorizationTokenAccountOwnerMismatchError;
codeToErrorMap.set(0x22, AuthorizationTokenAccountOwnerMismatchError);
nameToErrorMap.set('AuthorizationTokenAccountOwnerMismatch', AuthorizationTokenAccountOwnerMismatchError);
/** Disabled */
class DisabledError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'Disabled';
        this.code = 0x23; // 35
    }
}
mplTokenMetadata$2.DisabledError = DisabledError;
codeToErrorMap.set(0x23, DisabledError);
nameToErrorMap.set('Disabled', DisabledError);
/** CreatorsTooLong: Creators list too long */
class CreatorsTooLongError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Creators list too long', program, cause);
        this.name = 'CreatorsTooLong';
        this.code = 0x24; // 36
    }
}
mplTokenMetadata$2.CreatorsTooLongError = CreatorsTooLongError;
codeToErrorMap.set(0x24, CreatorsTooLongError);
nameToErrorMap.set('CreatorsTooLong', CreatorsTooLongError);
/** CreatorsMustBeAtleastOne: Creators must be at least one if set */
class CreatorsMustBeAtleastOneError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Creators must be at least one if set', program, cause);
        this.name = 'CreatorsMustBeAtleastOne';
        this.code = 0x25; // 37
    }
}
mplTokenMetadata$2.CreatorsMustBeAtleastOneError = CreatorsMustBeAtleastOneError;
codeToErrorMap.set(0x25, CreatorsMustBeAtleastOneError);
nameToErrorMap.set('CreatorsMustBeAtleastOne', CreatorsMustBeAtleastOneError);
/** MustBeOneOfCreators */
class MustBeOneOfCreatorsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'MustBeOneOfCreators';
        this.code = 0x26; // 38
    }
}
mplTokenMetadata$2.MustBeOneOfCreatorsError = MustBeOneOfCreatorsError;
codeToErrorMap.set(0x26, MustBeOneOfCreatorsError);
nameToErrorMap.set('MustBeOneOfCreators', MustBeOneOfCreatorsError);
/** NoCreatorsPresentOnMetadata: This metadata does not have creators */
class NoCreatorsPresentOnMetadataError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This metadata does not have creators', program, cause);
        this.name = 'NoCreatorsPresentOnMetadata';
        this.code = 0x27; // 39
    }
}
mplTokenMetadata$2.NoCreatorsPresentOnMetadataError = NoCreatorsPresentOnMetadataError;
codeToErrorMap.set(0x27, NoCreatorsPresentOnMetadataError);
nameToErrorMap.set('NoCreatorsPresentOnMetadata', NoCreatorsPresentOnMetadataError);
/** CreatorNotFound: This creator address was not found */
class CreatorNotFoundError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This creator address was not found', program, cause);
        this.name = 'CreatorNotFound';
        this.code = 0x28; // 40
    }
}
mplTokenMetadata$2.CreatorNotFoundError = CreatorNotFoundError;
codeToErrorMap.set(0x28, CreatorNotFoundError);
nameToErrorMap.set('CreatorNotFound', CreatorNotFoundError);
/** InvalidBasisPoints: Basis points cannot be more than 10000 */
class InvalidBasisPointsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Basis points cannot be more than 10000', program, cause);
        this.name = 'InvalidBasisPoints';
        this.code = 0x29; // 41
    }
}
mplTokenMetadata$2.InvalidBasisPointsError = InvalidBasisPointsError;
codeToErrorMap.set(0x29, InvalidBasisPointsError);
nameToErrorMap.set('InvalidBasisPoints', InvalidBasisPointsError);
/** PrimarySaleCanOnlyBeFlippedToTrue: Primary sale can only be flipped to true and is immutable */
class PrimarySaleCanOnlyBeFlippedToTrueError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Primary sale can only be flipped to true and is immutable', program, cause);
        this.name = 'PrimarySaleCanOnlyBeFlippedToTrue';
        this.code = 0x2a; // 42
    }
}
mplTokenMetadata$2.PrimarySaleCanOnlyBeFlippedToTrueError = PrimarySaleCanOnlyBeFlippedToTrueError;
codeToErrorMap.set(0x2a, PrimarySaleCanOnlyBeFlippedToTrueError);
nameToErrorMap.set('PrimarySaleCanOnlyBeFlippedToTrue', PrimarySaleCanOnlyBeFlippedToTrueError);
/** OwnerMismatch: Owner does not match that on the account given */
class OwnerMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Owner does not match that on the account given', program, cause);
        this.name = 'OwnerMismatch';
        this.code = 0x2b; // 43
    }
}
mplTokenMetadata$2.OwnerMismatchError = OwnerMismatchError;
codeToErrorMap.set(0x2b, OwnerMismatchError);
nameToErrorMap.set('OwnerMismatch', OwnerMismatchError);
/** NoBalanceInAccountForAuthorization: This account has no tokens to be used for authorization */
class NoBalanceInAccountForAuthorizationError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This account has no tokens to be used for authorization', program, cause);
        this.name = 'NoBalanceInAccountForAuthorization';
        this.code = 0x2c; // 44
    }
}
mplTokenMetadata$2.NoBalanceInAccountForAuthorizationError = NoBalanceInAccountForAuthorizationError;
codeToErrorMap.set(0x2c, NoBalanceInAccountForAuthorizationError);
nameToErrorMap.set('NoBalanceInAccountForAuthorization', NoBalanceInAccountForAuthorizationError);
/** ShareTotalMustBe100: Share total must equal 100 for creator array */
class ShareTotalMustBe100Error extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Share total must equal 100 for creator array', program, cause);
        this.name = 'ShareTotalMustBe100';
        this.code = 0x2d; // 45
    }
}
mplTokenMetadata$2.ShareTotalMustBe100Error = ShareTotalMustBe100Error;
codeToErrorMap.set(0x2d, ShareTotalMustBe100Error);
nameToErrorMap.set('ShareTotalMustBe100', ShareTotalMustBe100Error);
/** ReservationExists */
class ReservationExistsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationExists';
        this.code = 0x2e; // 46
    }
}
mplTokenMetadata$2.ReservationExistsError = ReservationExistsError;
codeToErrorMap.set(0x2e, ReservationExistsError);
nameToErrorMap.set('ReservationExists', ReservationExistsError);
/** ReservationDoesNotExist */
class ReservationDoesNotExistError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationDoesNotExist';
        this.code = 0x2f; // 47
    }
}
mplTokenMetadata$2.ReservationDoesNotExistError = ReservationDoesNotExistError;
codeToErrorMap.set(0x2f, ReservationDoesNotExistError);
nameToErrorMap.set('ReservationDoesNotExist', ReservationDoesNotExistError);
/** ReservationNotSet */
class ReservationNotSetError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationNotSet';
        this.code = 0x30; // 48
    }
}
mplTokenMetadata$2.ReservationNotSetError = ReservationNotSetError;
codeToErrorMap.set(0x30, ReservationNotSetError);
nameToErrorMap.set('ReservationNotSet', ReservationNotSetError);
/** ReservationAlreadyMade */
class ReservationAlreadyMadeError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationAlreadyMade';
        this.code = 0x31; // 49
    }
}
mplTokenMetadata$2.ReservationAlreadyMadeError = ReservationAlreadyMadeError;
codeToErrorMap.set(0x31, ReservationAlreadyMadeError);
nameToErrorMap.set('ReservationAlreadyMade', ReservationAlreadyMadeError);
/** BeyondMaxAddressSize */
class BeyondMaxAddressSizeError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'BeyondMaxAddressSize';
        this.code = 0x32; // 50
    }
}
mplTokenMetadata$2.BeyondMaxAddressSizeError = BeyondMaxAddressSizeError;
codeToErrorMap.set(0x32, BeyondMaxAddressSizeError);
nameToErrorMap.set('BeyondMaxAddressSize', BeyondMaxAddressSizeError);
/** NumericalOverflowError: NumericalOverflowError */
class NumericalOverflowErrorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('NumericalOverflowError', program, cause);
        this.name = 'NumericalOverflowError';
        this.code = 0x33; // 51
    }
}
mplTokenMetadata$2.NumericalOverflowErrorError = NumericalOverflowErrorError;
codeToErrorMap.set(0x33, NumericalOverflowErrorError);
nameToErrorMap.set('NumericalOverflowError', NumericalOverflowErrorError);
/** ReservationBreachesMaximumSupply */
class ReservationBreachesMaximumSupplyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationBreachesMaximumSupply';
        this.code = 0x34; // 52
    }
}
mplTokenMetadata$2.ReservationBreachesMaximumSupplyError = ReservationBreachesMaximumSupplyError;
codeToErrorMap.set(0x34, ReservationBreachesMaximumSupplyError);
nameToErrorMap.set('ReservationBreachesMaximumSupply', ReservationBreachesMaximumSupplyError);
/** AddressNotInReservation */
class AddressNotInReservationError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'AddressNotInReservation';
        this.code = 0x35; // 53
    }
}
mplTokenMetadata$2.AddressNotInReservationError = AddressNotInReservationError;
codeToErrorMap.set(0x35, AddressNotInReservationError);
nameToErrorMap.set('AddressNotInReservation', AddressNotInReservationError);
/** CannotVerifyAnotherCreator: You cannot unilaterally verify another creator, they must sign */
class CannotVerifyAnotherCreatorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('You cannot unilaterally verify another creator, they must sign', program, cause);
        this.name = 'CannotVerifyAnotherCreator';
        this.code = 0x36; // 54
    }
}
mplTokenMetadata$2.CannotVerifyAnotherCreatorError = CannotVerifyAnotherCreatorError;
codeToErrorMap.set(0x36, CannotVerifyAnotherCreatorError);
nameToErrorMap.set('CannotVerifyAnotherCreator', CannotVerifyAnotherCreatorError);
/** CannotUnverifyAnotherCreator: You cannot unilaterally unverify another creator */
class CannotUnverifyAnotherCreatorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('You cannot unilaterally unverify another creator', program, cause);
        this.name = 'CannotUnverifyAnotherCreator';
        this.code = 0x37; // 55
    }
}
mplTokenMetadata$2.CannotUnverifyAnotherCreatorError = CannotUnverifyAnotherCreatorError;
codeToErrorMap.set(0x37, CannotUnverifyAnotherCreatorError);
nameToErrorMap.set('CannotUnverifyAnotherCreator', CannotUnverifyAnotherCreatorError);
/** SpotMismatch */
class SpotMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'SpotMismatch';
        this.code = 0x38; // 56
    }
}
mplTokenMetadata$2.SpotMismatchError = SpotMismatchError;
codeToErrorMap.set(0x38, SpotMismatchError);
nameToErrorMap.set('SpotMismatch', SpotMismatchError);
/** IncorrectOwner: Incorrect account owner */
class IncorrectOwnerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Incorrect account owner', program, cause);
        this.name = 'IncorrectOwner';
        this.code = 0x39; // 57
    }
}
mplTokenMetadata$2.IncorrectOwnerError = IncorrectOwnerError;
codeToErrorMap.set(0x39, IncorrectOwnerError);
nameToErrorMap.set('IncorrectOwner', IncorrectOwnerError);
/** PrintingWouldBreachMaximumSupply */
class PrintingWouldBreachMaximumSupplyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'PrintingWouldBreachMaximumSupply';
        this.code = 0x3a; // 58
    }
}
mplTokenMetadata$2.PrintingWouldBreachMaximumSupplyError = PrintingWouldBreachMaximumSupplyError;
codeToErrorMap.set(0x3a, PrintingWouldBreachMaximumSupplyError);
nameToErrorMap.set('PrintingWouldBreachMaximumSupply', PrintingWouldBreachMaximumSupplyError);
/** DataIsImmutable: Data is immutable */
class DataIsImmutableError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Data is immutable', program, cause);
        this.name = 'DataIsImmutable';
        this.code = 0x3b; // 59
    }
}
mplTokenMetadata$2.DataIsImmutableError = DataIsImmutableError;
codeToErrorMap.set(0x3b, DataIsImmutableError);
nameToErrorMap.set('DataIsImmutable', DataIsImmutableError);
/** DuplicateCreatorAddress: No duplicate creator addresses */
class DuplicateCreatorAddressError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('No duplicate creator addresses', program, cause);
        this.name = 'DuplicateCreatorAddress';
        this.code = 0x3c; // 60
    }
}
mplTokenMetadata$2.DuplicateCreatorAddressError = DuplicateCreatorAddressError;
codeToErrorMap.set(0x3c, DuplicateCreatorAddressError);
nameToErrorMap.set('DuplicateCreatorAddress', DuplicateCreatorAddressError);
/** ReservationSpotsRemainingShouldMatchTotalSpotsAtStart */
class ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationSpotsRemainingShouldMatchTotalSpotsAtStart';
        this.code = 0x3d; // 61
    }
}
mplTokenMetadata$2.ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError = ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError;
codeToErrorMap.set(0x3d, ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError);
nameToErrorMap.set('ReservationSpotsRemainingShouldMatchTotalSpotsAtStart', ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError);
/** InvalidTokenProgram: Invalid token program */
class InvalidTokenProgramError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid token program', program, cause);
        this.name = 'InvalidTokenProgram';
        this.code = 0x3e; // 62
    }
}
mplTokenMetadata$2.InvalidTokenProgramError = InvalidTokenProgramError;
codeToErrorMap.set(0x3e, InvalidTokenProgramError);
nameToErrorMap.set('InvalidTokenProgram', InvalidTokenProgramError);
/** DataTypeMismatch: Data type mismatch */
class DataTypeMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Data type mismatch', program, cause);
        this.name = 'DataTypeMismatch';
        this.code = 0x3f; // 63
    }
}
mplTokenMetadata$2.DataTypeMismatchError = DataTypeMismatchError;
codeToErrorMap.set(0x3f, DataTypeMismatchError);
nameToErrorMap.set('DataTypeMismatch', DataTypeMismatchError);
/** BeyondAlottedAddressSize */
class BeyondAlottedAddressSizeError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'BeyondAlottedAddressSize';
        this.code = 0x40; // 64
    }
}
mplTokenMetadata$2.BeyondAlottedAddressSizeError = BeyondAlottedAddressSizeError;
codeToErrorMap.set(0x40, BeyondAlottedAddressSizeError);
nameToErrorMap.set('BeyondAlottedAddressSize', BeyondAlottedAddressSizeError);
/** ReservationNotComplete */
class ReservationNotCompleteError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationNotComplete';
        this.code = 0x41; // 65
    }
}
mplTokenMetadata$2.ReservationNotCompleteError = ReservationNotCompleteError;
codeToErrorMap.set(0x41, ReservationNotCompleteError);
nameToErrorMap.set('ReservationNotComplete', ReservationNotCompleteError);
/** TriedToReplaceAnExistingReservation */
class TriedToReplaceAnExistingReservationError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'TriedToReplaceAnExistingReservation';
        this.code = 0x42; // 66
    }
}
mplTokenMetadata$2.TriedToReplaceAnExistingReservationError = TriedToReplaceAnExistingReservationError;
codeToErrorMap.set(0x42, TriedToReplaceAnExistingReservationError);
nameToErrorMap.set('TriedToReplaceAnExistingReservation', TriedToReplaceAnExistingReservationError);
/** InvalidOperation: Invalid operation */
class InvalidOperationError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid operation', program, cause);
        this.name = 'InvalidOperation';
        this.code = 0x43; // 67
    }
}
mplTokenMetadata$2.InvalidOperationError = InvalidOperationError;
codeToErrorMap.set(0x43, InvalidOperationError);
nameToErrorMap.set('InvalidOperation', InvalidOperationError);
/** InvalidOwner: Invalid Owner */
class InvalidOwnerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid Owner', program, cause);
        this.name = 'InvalidOwner';
        this.code = 0x44; // 68
    }
}
mplTokenMetadata$2.InvalidOwnerError = InvalidOwnerError;
codeToErrorMap.set(0x44, InvalidOwnerError);
nameToErrorMap.set('InvalidOwner', InvalidOwnerError);
/** PrintingMintSupplyMustBeZeroForConversion: Printing mint supply must be zero for conversion */
class PrintingMintSupplyMustBeZeroForConversionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Printing mint supply must be zero for conversion', program, cause);
        this.name = 'PrintingMintSupplyMustBeZeroForConversion';
        this.code = 0x45; // 69
    }
}
mplTokenMetadata$2.PrintingMintSupplyMustBeZeroForConversionError = PrintingMintSupplyMustBeZeroForConversionError;
codeToErrorMap.set(0x45, PrintingMintSupplyMustBeZeroForConversionError);
nameToErrorMap.set('PrintingMintSupplyMustBeZeroForConversion', PrintingMintSupplyMustBeZeroForConversionError);
/** OneTimeAuthMintSupplyMustBeZeroForConversion: One Time Auth mint supply must be zero for conversion */
class OneTimeAuthMintSupplyMustBeZeroForConversionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('One Time Auth mint supply must be zero for conversion', program, cause);
        this.name = 'OneTimeAuthMintSupplyMustBeZeroForConversion';
        this.code = 0x46; // 70
    }
}
mplTokenMetadata$2.OneTimeAuthMintSupplyMustBeZeroForConversionError = OneTimeAuthMintSupplyMustBeZeroForConversionError;
codeToErrorMap.set(0x46, OneTimeAuthMintSupplyMustBeZeroForConversionError);
nameToErrorMap.set('OneTimeAuthMintSupplyMustBeZeroForConversion', OneTimeAuthMintSupplyMustBeZeroForConversionError);
/** InvalidEditionIndex: You tried to insert one edition too many into an edition mark pda */
class InvalidEditionIndexError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('You tried to insert one edition too many into an edition mark pda', program, cause);
        this.name = 'InvalidEditionIndex';
        this.code = 0x47; // 71
    }
}
mplTokenMetadata$2.InvalidEditionIndexError = InvalidEditionIndexError;
codeToErrorMap.set(0x47, InvalidEditionIndexError);
nameToErrorMap.set('InvalidEditionIndex', InvalidEditionIndexError);
/** ReservationArrayShouldBeSizeOne */
class ReservationArrayShouldBeSizeOneError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'ReservationArrayShouldBeSizeOne';
        this.code = 0x48; // 72
    }
}
mplTokenMetadata$2.ReservationArrayShouldBeSizeOneError = ReservationArrayShouldBeSizeOneError;
codeToErrorMap.set(0x48, ReservationArrayShouldBeSizeOneError);
nameToErrorMap.set('ReservationArrayShouldBeSizeOne', ReservationArrayShouldBeSizeOneError);
/** IsMutableCanOnlyBeFlippedToFalse: Is Mutable can only be flipped to false */
class IsMutableCanOnlyBeFlippedToFalseError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Is Mutable can only be flipped to false', program, cause);
        this.name = 'IsMutableCanOnlyBeFlippedToFalse';
        this.code = 0x49; // 73
    }
}
mplTokenMetadata$2.IsMutableCanOnlyBeFlippedToFalseError = IsMutableCanOnlyBeFlippedToFalseError;
codeToErrorMap.set(0x49, IsMutableCanOnlyBeFlippedToFalseError);
nameToErrorMap.set('IsMutableCanOnlyBeFlippedToFalse', IsMutableCanOnlyBeFlippedToFalseError);
/** CollectionCannotBeVerifiedInThisInstruction: Collection cannot be verified in this instruction */
class CollectionCannotBeVerifiedInThisInstructionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Collection cannot be verified in this instruction', program, cause);
        this.name = 'CollectionCannotBeVerifiedInThisInstruction';
        this.code = 0x4a; // 74
    }
}
mplTokenMetadata$2.CollectionCannotBeVerifiedInThisInstructionError = CollectionCannotBeVerifiedInThisInstructionError;
codeToErrorMap.set(0x4a, CollectionCannotBeVerifiedInThisInstructionError);
nameToErrorMap.set('CollectionCannotBeVerifiedInThisInstruction', CollectionCannotBeVerifiedInThisInstructionError);
/** Removed: This instruction was deprecated in a previous release and is now removed */
class RemovedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This instruction was deprecated in a previous release and is now removed', program, cause);
        this.name = 'Removed';
        this.code = 0x4b; // 75
    }
}
mplTokenMetadata$2.RemovedError = RemovedError;
codeToErrorMap.set(0x4b, RemovedError);
nameToErrorMap.set('Removed', RemovedError);
/** MustBeBurned */
class MustBeBurnedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'MustBeBurned';
        this.code = 0x4c; // 76
    }
}
mplTokenMetadata$2.MustBeBurnedError = MustBeBurnedError;
codeToErrorMap.set(0x4c, MustBeBurnedError);
nameToErrorMap.set('MustBeBurned', MustBeBurnedError);
/** InvalidUseMethod: This use method is invalid */
class InvalidUseMethodError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This use method is invalid', program, cause);
        this.name = 'InvalidUseMethod';
        this.code = 0x4d; // 77
    }
}
mplTokenMetadata$2.InvalidUseMethodError = InvalidUseMethodError;
codeToErrorMap.set(0x4d, InvalidUseMethodError);
nameToErrorMap.set('InvalidUseMethod', InvalidUseMethodError);
/** CannotChangeUseMethodAfterFirstUse: Cannot Change Use Method after the first use */
class CannotChangeUseMethodAfterFirstUseError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Cannot Change Use Method after the first use', program, cause);
        this.name = 'CannotChangeUseMethodAfterFirstUse';
        this.code = 0x4e; // 78
    }
}
mplTokenMetadata$2.CannotChangeUseMethodAfterFirstUseError = CannotChangeUseMethodAfterFirstUseError;
codeToErrorMap.set(0x4e, CannotChangeUseMethodAfterFirstUseError);
nameToErrorMap.set('CannotChangeUseMethodAfterFirstUse', CannotChangeUseMethodAfterFirstUseError);
/** CannotChangeUsesAfterFirstUse: Cannot Change Remaining or Available uses after the first use */
class CannotChangeUsesAfterFirstUseError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Cannot Change Remaining or Available uses after the first use', program, cause);
        this.name = 'CannotChangeUsesAfterFirstUse';
        this.code = 0x4f; // 79
    }
}
mplTokenMetadata$2.CannotChangeUsesAfterFirstUseError = CannotChangeUsesAfterFirstUseError;
codeToErrorMap.set(0x4f, CannotChangeUsesAfterFirstUseError);
nameToErrorMap.set('CannotChangeUsesAfterFirstUse', CannotChangeUsesAfterFirstUseError);
/** CollectionNotFound: Collection Not Found on Metadata */
class CollectionNotFoundError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Collection Not Found on Metadata', program, cause);
        this.name = 'CollectionNotFound';
        this.code = 0x50; // 80
    }
}
mplTokenMetadata$2.CollectionNotFoundError = CollectionNotFoundError;
codeToErrorMap.set(0x50, CollectionNotFoundError);
nameToErrorMap.set('CollectionNotFound', CollectionNotFoundError);
/** InvalidCollectionUpdateAuthority: Collection Update Authority is invalid */
class InvalidCollectionUpdateAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Collection Update Authority is invalid', program, cause);
        this.name = 'InvalidCollectionUpdateAuthority';
        this.code = 0x51; // 81
    }
}
mplTokenMetadata$2.InvalidCollectionUpdateAuthorityError = InvalidCollectionUpdateAuthorityError;
codeToErrorMap.set(0x51, InvalidCollectionUpdateAuthorityError);
nameToErrorMap.set('InvalidCollectionUpdateAuthority', InvalidCollectionUpdateAuthorityError);
/** CollectionMustBeAUniqueMasterEdition: Collection Must Be a Unique Master Edition v2 */
class CollectionMustBeAUniqueMasterEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Collection Must Be a Unique Master Edition v2', program, cause);
        this.name = 'CollectionMustBeAUniqueMasterEdition';
        this.code = 0x52; // 82
    }
}
mplTokenMetadata$2.CollectionMustBeAUniqueMasterEditionError = CollectionMustBeAUniqueMasterEditionError;
codeToErrorMap.set(0x52, CollectionMustBeAUniqueMasterEditionError);
nameToErrorMap.set('CollectionMustBeAUniqueMasterEdition', CollectionMustBeAUniqueMasterEditionError);
/** UseAuthorityRecordAlreadyExists: The Use Authority Record Already Exists, to modify it Revoke, then Approve */
class UseAuthorityRecordAlreadyExistsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('The Use Authority Record Already Exists, to modify it Revoke, then Approve', program, cause);
        this.name = 'UseAuthorityRecordAlreadyExists';
        this.code = 0x53; // 83
    }
}
mplTokenMetadata$2.UseAuthorityRecordAlreadyExistsError = UseAuthorityRecordAlreadyExistsError;
codeToErrorMap.set(0x53, UseAuthorityRecordAlreadyExistsError);
nameToErrorMap.set('UseAuthorityRecordAlreadyExists', UseAuthorityRecordAlreadyExistsError);
/** UseAuthorityRecordAlreadyRevoked: The Use Authority Record is empty or already revoked */
class UseAuthorityRecordAlreadyRevokedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('The Use Authority Record is empty or already revoked', program, cause);
        this.name = 'UseAuthorityRecordAlreadyRevoked';
        this.code = 0x54; // 84
    }
}
mplTokenMetadata$2.UseAuthorityRecordAlreadyRevokedError = UseAuthorityRecordAlreadyRevokedError;
codeToErrorMap.set(0x54, UseAuthorityRecordAlreadyRevokedError);
nameToErrorMap.set('UseAuthorityRecordAlreadyRevoked', UseAuthorityRecordAlreadyRevokedError);
/** Unusable: This token has no uses */
class UnusableError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This token has no uses', program, cause);
        this.name = 'Unusable';
        this.code = 0x55; // 85
    }
}
mplTokenMetadata$2.UnusableError = UnusableError;
codeToErrorMap.set(0x55, UnusableError);
nameToErrorMap.set('Unusable', UnusableError);
/** NotEnoughUses: There are not enough Uses left on this token. */
class NotEnoughUsesError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('There are not enough Uses left on this token.', program, cause);
        this.name = 'NotEnoughUses';
        this.code = 0x56; // 86
    }
}
mplTokenMetadata$2.NotEnoughUsesError = NotEnoughUsesError;
codeToErrorMap.set(0x56, NotEnoughUsesError);
nameToErrorMap.set('NotEnoughUses', NotEnoughUsesError);
/** CollectionAuthorityRecordAlreadyExists: This Collection Authority Record Already Exists. */
class CollectionAuthorityRecordAlreadyExistsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This Collection Authority Record Already Exists.', program, cause);
        this.name = 'CollectionAuthorityRecordAlreadyExists';
        this.code = 0x57; // 87
    }
}
mplTokenMetadata$2.CollectionAuthorityRecordAlreadyExistsError = CollectionAuthorityRecordAlreadyExistsError;
codeToErrorMap.set(0x57, CollectionAuthorityRecordAlreadyExistsError);
nameToErrorMap.set('CollectionAuthorityRecordAlreadyExists', CollectionAuthorityRecordAlreadyExistsError);
/** CollectionAuthorityDoesNotExist: This Collection Authority Record Does Not Exist. */
class CollectionAuthorityDoesNotExistError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This Collection Authority Record Does Not Exist.', program, cause);
        this.name = 'CollectionAuthorityDoesNotExist';
        this.code = 0x58; // 88
    }
}
mplTokenMetadata$2.CollectionAuthorityDoesNotExistError = CollectionAuthorityDoesNotExistError;
codeToErrorMap.set(0x58, CollectionAuthorityDoesNotExistError);
nameToErrorMap.set('CollectionAuthorityDoesNotExist', CollectionAuthorityDoesNotExistError);
/** InvalidUseAuthorityRecord: This Use Authority Record is invalid. */
class InvalidUseAuthorityRecordError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This Use Authority Record is invalid.', program, cause);
        this.name = 'InvalidUseAuthorityRecord';
        this.code = 0x59; // 89
    }
}
mplTokenMetadata$2.InvalidUseAuthorityRecordError = InvalidUseAuthorityRecordError;
codeToErrorMap.set(0x59, InvalidUseAuthorityRecordError);
nameToErrorMap.set('InvalidUseAuthorityRecord', InvalidUseAuthorityRecordError);
/** InvalidCollectionAuthorityRecord */
class InvalidCollectionAuthorityRecordError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'InvalidCollectionAuthorityRecord';
        this.code = 0x5a; // 90
    }
}
mplTokenMetadata$2.InvalidCollectionAuthorityRecordError = InvalidCollectionAuthorityRecordError;
codeToErrorMap.set(0x5a, InvalidCollectionAuthorityRecordError);
nameToErrorMap.set('InvalidCollectionAuthorityRecord', InvalidCollectionAuthorityRecordError);
/** InvalidFreezeAuthority: Metadata does not match the freeze authority on the mint */
class InvalidFreezeAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Metadata does not match the freeze authority on the mint', program, cause);
        this.name = 'InvalidFreezeAuthority';
        this.code = 0x5b; // 91
    }
}
mplTokenMetadata$2.InvalidFreezeAuthorityError = InvalidFreezeAuthorityError;
codeToErrorMap.set(0x5b, InvalidFreezeAuthorityError);
nameToErrorMap.set('InvalidFreezeAuthority', InvalidFreezeAuthorityError);
/** InvalidDelegate: All tokens in this account have not been delegated to this user. */
class InvalidDelegateError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('All tokens in this account have not been delegated to this user.', program, cause);
        this.name = 'InvalidDelegate';
        this.code = 0x5c; // 92
    }
}
mplTokenMetadata$2.InvalidDelegateError = InvalidDelegateError;
codeToErrorMap.set(0x5c, InvalidDelegateError);
nameToErrorMap.set('InvalidDelegate', InvalidDelegateError);
/** CannotAdjustVerifiedCreator */
class CannotAdjustVerifiedCreatorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'CannotAdjustVerifiedCreator';
        this.code = 0x5d; // 93
    }
}
mplTokenMetadata$2.CannotAdjustVerifiedCreatorError = CannotAdjustVerifiedCreatorError;
codeToErrorMap.set(0x5d, CannotAdjustVerifiedCreatorError);
nameToErrorMap.set('CannotAdjustVerifiedCreator', CannotAdjustVerifiedCreatorError);
/** CannotRemoveVerifiedCreator: Verified creators cannot be removed. */
class CannotRemoveVerifiedCreatorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Verified creators cannot be removed.', program, cause);
        this.name = 'CannotRemoveVerifiedCreator';
        this.code = 0x5e; // 94
    }
}
mplTokenMetadata$2.CannotRemoveVerifiedCreatorError = CannotRemoveVerifiedCreatorError;
codeToErrorMap.set(0x5e, CannotRemoveVerifiedCreatorError);
nameToErrorMap.set('CannotRemoveVerifiedCreator', CannotRemoveVerifiedCreatorError);
/** CannotWipeVerifiedCreators */
class CannotWipeVerifiedCreatorsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'CannotWipeVerifiedCreators';
        this.code = 0x5f; // 95
    }
}
mplTokenMetadata$2.CannotWipeVerifiedCreatorsError = CannotWipeVerifiedCreatorsError;
codeToErrorMap.set(0x5f, CannotWipeVerifiedCreatorsError);
nameToErrorMap.set('CannotWipeVerifiedCreators', CannotWipeVerifiedCreatorsError);
/** NotAllowedToChangeSellerFeeBasisPoints */
class NotAllowedToChangeSellerFeeBasisPointsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'NotAllowedToChangeSellerFeeBasisPoints';
        this.code = 0x60; // 96
    }
}
mplTokenMetadata$2.NotAllowedToChangeSellerFeeBasisPointsError = NotAllowedToChangeSellerFeeBasisPointsError;
codeToErrorMap.set(0x60, NotAllowedToChangeSellerFeeBasisPointsError);
nameToErrorMap.set('NotAllowedToChangeSellerFeeBasisPoints', NotAllowedToChangeSellerFeeBasisPointsError);
/** EditionOverrideCannotBeZero: Edition override cannot be zero */
class EditionOverrideCannotBeZeroError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Edition override cannot be zero', program, cause);
        this.name = 'EditionOverrideCannotBeZero';
        this.code = 0x61; // 97
    }
}
mplTokenMetadata$2.EditionOverrideCannotBeZeroError = EditionOverrideCannotBeZeroError;
codeToErrorMap.set(0x61, EditionOverrideCannotBeZeroError);
nameToErrorMap.set('EditionOverrideCannotBeZero', EditionOverrideCannotBeZeroError);
/** InvalidUser: Invalid User */
class InvalidUserError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid User', program, cause);
        this.name = 'InvalidUser';
        this.code = 0x62; // 98
    }
}
mplTokenMetadata$2.InvalidUserError = InvalidUserError;
codeToErrorMap.set(0x62, InvalidUserError);
nameToErrorMap.set('InvalidUser', InvalidUserError);
/** RevokeCollectionAuthoritySignerIncorrect: Revoke Collection Authority signer is incorrect */
class RevokeCollectionAuthoritySignerIncorrectError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Revoke Collection Authority signer is incorrect', program, cause);
        this.name = 'RevokeCollectionAuthoritySignerIncorrect';
        this.code = 0x63; // 99
    }
}
mplTokenMetadata$2.RevokeCollectionAuthoritySignerIncorrectError = RevokeCollectionAuthoritySignerIncorrectError;
codeToErrorMap.set(0x63, RevokeCollectionAuthoritySignerIncorrectError);
nameToErrorMap.set('RevokeCollectionAuthoritySignerIncorrect', RevokeCollectionAuthoritySignerIncorrectError);
/** TokenCloseFailed */
class TokenCloseFailedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'TokenCloseFailed';
        this.code = 0x64; // 100
    }
}
mplTokenMetadata$2.TokenCloseFailedError = TokenCloseFailedError;
codeToErrorMap.set(0x64, TokenCloseFailedError);
nameToErrorMap.set('TokenCloseFailed', TokenCloseFailedError);
/** UnsizedCollection: Can't use this function on unsized collection */
class UnsizedCollectionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super("Can't use this function on unsized collection", program, cause);
        this.name = 'UnsizedCollection';
        this.code = 0x65; // 101
    }
}
mplTokenMetadata$2.UnsizedCollectionError = UnsizedCollectionError;
codeToErrorMap.set(0x65, UnsizedCollectionError);
nameToErrorMap.set('UnsizedCollection', UnsizedCollectionError);
/** SizedCollection: Can't use this function on a sized collection */
class SizedCollectionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super("Can't use this function on a sized collection", program, cause);
        this.name = 'SizedCollection';
        this.code = 0x66; // 102
    }
}
mplTokenMetadata$2.SizedCollectionError = SizedCollectionError;
codeToErrorMap.set(0x66, SizedCollectionError);
nameToErrorMap.set('SizedCollection', SizedCollectionError);
/** MissingCollectionMetadata: Missing collection metadata account */
class MissingCollectionMetadataError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing collection metadata account', program, cause);
        this.name = 'MissingCollectionMetadata';
        this.code = 0x67; // 103
    }
}
mplTokenMetadata$2.MissingCollectionMetadataError = MissingCollectionMetadataError;
codeToErrorMap.set(0x67, MissingCollectionMetadataError);
nameToErrorMap.set('MissingCollectionMetadata', MissingCollectionMetadataError);
/** NotAMemberOfCollection: This NFT is not a member of the specified collection. */
class NotAMemberOfCollectionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This NFT is not a member of the specified collection.', program, cause);
        this.name = 'NotAMemberOfCollection';
        this.code = 0x68; // 104
    }
}
mplTokenMetadata$2.NotAMemberOfCollectionError = NotAMemberOfCollectionError;
codeToErrorMap.set(0x68, NotAMemberOfCollectionError);
nameToErrorMap.set('NotAMemberOfCollection', NotAMemberOfCollectionError);
/** NotVerifiedMemberOfCollection: This NFT is not a verified member of the specified collection. */
class NotVerifiedMemberOfCollectionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This NFT is not a verified member of the specified collection.', program, cause);
        this.name = 'NotVerifiedMemberOfCollection';
        this.code = 0x69; // 105
    }
}
mplTokenMetadata$2.NotVerifiedMemberOfCollectionError = NotVerifiedMemberOfCollectionError;
codeToErrorMap.set(0x69, NotVerifiedMemberOfCollectionError);
nameToErrorMap.set('NotVerifiedMemberOfCollection', NotVerifiedMemberOfCollectionError);
/** NotACollectionParent: This NFT is not a collection parent NFT. */
class NotACollectionParentError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This NFT is not a collection parent NFT.', program, cause);
        this.name = 'NotACollectionParent';
        this.code = 0x6a; // 106
    }
}
mplTokenMetadata$2.NotACollectionParentError = NotACollectionParentError;
codeToErrorMap.set(0x6a, NotACollectionParentError);
nameToErrorMap.set('NotACollectionParent', NotACollectionParentError);
/** CouldNotDetermineTokenStandard: Could not determine a TokenStandard type. */
class CouldNotDetermineTokenStandardError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Could not determine a TokenStandard type.', program, cause);
        this.name = 'CouldNotDetermineTokenStandard';
        this.code = 0x6b; // 107
    }
}
mplTokenMetadata$2.CouldNotDetermineTokenStandardError = CouldNotDetermineTokenStandardError;
codeToErrorMap.set(0x6b, CouldNotDetermineTokenStandardError);
nameToErrorMap.set('CouldNotDetermineTokenStandard', CouldNotDetermineTokenStandardError);
/** MissingEditionAccount: This mint account has an edition but none was provided. */
class MissingEditionAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This mint account has an edition but none was provided.', program, cause);
        this.name = 'MissingEditionAccount';
        this.code = 0x6c; // 108
    }
}
mplTokenMetadata$2.MissingEditionAccountError = MissingEditionAccountError;
codeToErrorMap.set(0x6c, MissingEditionAccountError);
nameToErrorMap.set('MissingEditionAccount', MissingEditionAccountError);
/** NotAMasterEdition: This edition is not a Master Edition */
class NotAMasterEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This edition is not a Master Edition', program, cause);
        this.name = 'NotAMasterEdition';
        this.code = 0x6d; // 109
    }
}
mplTokenMetadata$2.NotAMasterEditionError = NotAMasterEditionError;
codeToErrorMap.set(0x6d, NotAMasterEditionError);
nameToErrorMap.set('NotAMasterEdition', NotAMasterEditionError);
/** MasterEditionHasPrints: This Master Edition has existing prints */
class MasterEditionHasPrintsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This Master Edition has existing prints', program, cause);
        this.name = 'MasterEditionHasPrints';
        this.code = 0x6e; // 110
    }
}
mplTokenMetadata$2.MasterEditionHasPrintsError = MasterEditionHasPrintsError;
codeToErrorMap.set(0x6e, MasterEditionHasPrintsError);
nameToErrorMap.set('MasterEditionHasPrints', MasterEditionHasPrintsError);
/** BorshDeserializationError */
class BorshDeserializationErrorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'BorshDeserializationError';
        this.code = 0x6f; // 111
    }
}
mplTokenMetadata$2.BorshDeserializationErrorError = BorshDeserializationErrorError;
codeToErrorMap.set(0x6f, BorshDeserializationErrorError);
nameToErrorMap.set('BorshDeserializationError', BorshDeserializationErrorError);
/** CannotUpdateVerifiedCollection: Cannot update a verified collection in this command */
class CannotUpdateVerifiedCollectionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Cannot update a verified collection in this command', program, cause);
        this.name = 'CannotUpdateVerifiedCollection';
        this.code = 0x70; // 112
    }
}
mplTokenMetadata$2.CannotUpdateVerifiedCollectionError = CannotUpdateVerifiedCollectionError;
codeToErrorMap.set(0x70, CannotUpdateVerifiedCollectionError);
nameToErrorMap.set('CannotUpdateVerifiedCollection', CannotUpdateVerifiedCollectionError);
/** CollectionMasterEditionAccountInvalid: Edition account doesnt match collection  */
class CollectionMasterEditionAccountInvalidError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Edition account doesnt match collection ', program, cause);
        this.name = 'CollectionMasterEditionAccountInvalid';
        this.code = 0x71; // 113
    }
}
mplTokenMetadata$2.CollectionMasterEditionAccountInvalidError = CollectionMasterEditionAccountInvalidError;
codeToErrorMap.set(0x71, CollectionMasterEditionAccountInvalidError);
nameToErrorMap.set('CollectionMasterEditionAccountInvalid', CollectionMasterEditionAccountInvalidError);
/** AlreadyVerified: Item is already verified. */
class AlreadyVerifiedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Item is already verified.', program, cause);
        this.name = 'AlreadyVerified';
        this.code = 0x72; // 114
    }
}
mplTokenMetadata$2.AlreadyVerifiedError = AlreadyVerifiedError;
codeToErrorMap.set(0x72, AlreadyVerifiedError);
nameToErrorMap.set('AlreadyVerified', AlreadyVerifiedError);
/** AlreadyUnverified */
class AlreadyUnverifiedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'AlreadyUnverified';
        this.code = 0x73; // 115
    }
}
mplTokenMetadata$2.AlreadyUnverifiedError = AlreadyUnverifiedError;
codeToErrorMap.set(0x73, AlreadyUnverifiedError);
nameToErrorMap.set('AlreadyUnverified', AlreadyUnverifiedError);
/** NotAPrintEdition: This edition is not a Print Edition */
class NotAPrintEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('This edition is not a Print Edition', program, cause);
        this.name = 'NotAPrintEdition';
        this.code = 0x74; // 116
    }
}
mplTokenMetadata$2.NotAPrintEditionError = NotAPrintEditionError;
codeToErrorMap.set(0x74, NotAPrintEditionError);
nameToErrorMap.set('NotAPrintEdition', NotAPrintEditionError);
/** InvalidMasterEdition: Invalid Master Edition */
class InvalidMasterEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid Master Edition', program, cause);
        this.name = 'InvalidMasterEdition';
        this.code = 0x75; // 117
    }
}
mplTokenMetadata$2.InvalidMasterEditionError = InvalidMasterEditionError;
codeToErrorMap.set(0x75, InvalidMasterEditionError);
nameToErrorMap.set('InvalidMasterEdition', InvalidMasterEditionError);
/** InvalidPrintEdition: Invalid Print Edition */
class InvalidPrintEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid Print Edition', program, cause);
        this.name = 'InvalidPrintEdition';
        this.code = 0x76; // 118
    }
}
mplTokenMetadata$2.InvalidPrintEditionError = InvalidPrintEditionError;
codeToErrorMap.set(0x76, InvalidPrintEditionError);
nameToErrorMap.set('InvalidPrintEdition', InvalidPrintEditionError);
/** InvalidEditionMarker: Invalid Edition Marker */
class InvalidEditionMarkerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid Edition Marker', program, cause);
        this.name = 'InvalidEditionMarker';
        this.code = 0x77; // 119
    }
}
mplTokenMetadata$2.InvalidEditionMarkerError = InvalidEditionMarkerError;
codeToErrorMap.set(0x77, InvalidEditionMarkerError);
nameToErrorMap.set('InvalidEditionMarker', InvalidEditionMarkerError);
/** ReservationListDeprecated: Reservation List is Deprecated */
class ReservationListDeprecatedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Reservation List is Deprecated', program, cause);
        this.name = 'ReservationListDeprecated';
        this.code = 0x78; // 120
    }
}
mplTokenMetadata$2.ReservationListDeprecatedError = ReservationListDeprecatedError;
codeToErrorMap.set(0x78, ReservationListDeprecatedError);
nameToErrorMap.set('ReservationListDeprecated', ReservationListDeprecatedError);
/** PrintEditionDoesNotMatchMasterEdition: Print Edition does not match Master Edition */
class PrintEditionDoesNotMatchMasterEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Print Edition does not match Master Edition', program, cause);
        this.name = 'PrintEditionDoesNotMatchMasterEdition';
        this.code = 0x79; // 121
    }
}
mplTokenMetadata$2.PrintEditionDoesNotMatchMasterEditionError = PrintEditionDoesNotMatchMasterEditionError;
codeToErrorMap.set(0x79, PrintEditionDoesNotMatchMasterEditionError);
nameToErrorMap.set('PrintEditionDoesNotMatchMasterEdition', PrintEditionDoesNotMatchMasterEditionError);
/** EditionNumberGreaterThanMaxSupply: Edition Number greater than max supply */
class EditionNumberGreaterThanMaxSupplyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Edition Number greater than max supply', program, cause);
        this.name = 'EditionNumberGreaterThanMaxSupply';
        this.code = 0x7a; // 122
    }
}
mplTokenMetadata$2.EditionNumberGreaterThanMaxSupplyError = EditionNumberGreaterThanMaxSupplyError;
codeToErrorMap.set(0x7a, EditionNumberGreaterThanMaxSupplyError);
nameToErrorMap.set('EditionNumberGreaterThanMaxSupply', EditionNumberGreaterThanMaxSupplyError);
/** MustUnverify: Must unverify before migrating collections. */
class MustUnverifyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Must unverify before migrating collections.', program, cause);
        this.name = 'MustUnverify';
        this.code = 0x7b; // 123
    }
}
mplTokenMetadata$2.MustUnverifyError = MustUnverifyError;
codeToErrorMap.set(0x7b, MustUnverifyError);
nameToErrorMap.set('MustUnverify', MustUnverifyError);
/** InvalidEscrowBumpSeed: Invalid Escrow Account Bump Seed */
class InvalidEscrowBumpSeedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid Escrow Account Bump Seed', program, cause);
        this.name = 'InvalidEscrowBumpSeed';
        this.code = 0x7c; // 124
    }
}
mplTokenMetadata$2.InvalidEscrowBumpSeedError = InvalidEscrowBumpSeedError;
codeToErrorMap.set(0x7c, InvalidEscrowBumpSeedError);
nameToErrorMap.set('InvalidEscrowBumpSeed', InvalidEscrowBumpSeedError);
/** MustBeEscrowAuthority: Must Escrow Authority */
class MustBeEscrowAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Must Escrow Authority', program, cause);
        this.name = 'MustBeEscrowAuthority';
        this.code = 0x7d; // 125
    }
}
mplTokenMetadata$2.MustBeEscrowAuthorityError = MustBeEscrowAuthorityError;
codeToErrorMap.set(0x7d, MustBeEscrowAuthorityError);
nameToErrorMap.set('MustBeEscrowAuthority', MustBeEscrowAuthorityError);
/** InvalidSystemProgram: Invalid System Program */
class InvalidSystemProgramError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid System Program', program, cause);
        this.name = 'InvalidSystemProgram';
        this.code = 0x7e; // 126
    }
}
mplTokenMetadata$2.InvalidSystemProgramError = InvalidSystemProgramError;
codeToErrorMap.set(0x7e, InvalidSystemProgramError);
nameToErrorMap.set('InvalidSystemProgram', InvalidSystemProgramError);
/** MustBeNonFungible: Must be a Non Fungible Token */
class MustBeNonFungibleError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Must be a Non Fungible Token', program, cause);
        this.name = 'MustBeNonFungible';
        this.code = 0x7f; // 127
    }
}
mplTokenMetadata$2.MustBeNonFungibleError = MustBeNonFungibleError;
codeToErrorMap.set(0x7f, MustBeNonFungibleError);
nameToErrorMap.set('MustBeNonFungible', MustBeNonFungibleError);
/** InsufficientTokens: Insufficient tokens for transfer */
class InsufficientTokensError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Insufficient tokens for transfer', program, cause);
        this.name = 'InsufficientTokens';
        this.code = 0x80; // 128
    }
}
mplTokenMetadata$2.InsufficientTokensError = InsufficientTokensError;
codeToErrorMap.set(0x80, InsufficientTokensError);
nameToErrorMap.set('InsufficientTokens', InsufficientTokensError);
/** BorshSerializationError: Borsh Serialization Error */
class BorshSerializationErrorError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Borsh Serialization Error', program, cause);
        this.name = 'BorshSerializationError';
        this.code = 0x81; // 129
    }
}
mplTokenMetadata$2.BorshSerializationErrorError = BorshSerializationErrorError;
codeToErrorMap.set(0x81, BorshSerializationErrorError);
nameToErrorMap.set('BorshSerializationError', BorshSerializationErrorError);
/** NoFreezeAuthoritySet: Cannot create NFT with no Freeze Authority. */
class NoFreezeAuthoritySetError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Cannot create NFT with no Freeze Authority.', program, cause);
        this.name = 'NoFreezeAuthoritySet';
        this.code = 0x82; // 130
    }
}
mplTokenMetadata$2.NoFreezeAuthoritySetError = NoFreezeAuthoritySetError;
codeToErrorMap.set(0x82, NoFreezeAuthoritySetError);
nameToErrorMap.set('NoFreezeAuthoritySet', NoFreezeAuthoritySetError);
/** InvalidCollectionSizeChange: Invalid collection size change */
class InvalidCollectionSizeChangeError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid collection size change', program, cause);
        this.name = 'InvalidCollectionSizeChange';
        this.code = 0x83; // 131
    }
}
mplTokenMetadata$2.InvalidCollectionSizeChangeError = InvalidCollectionSizeChangeError;
codeToErrorMap.set(0x83, InvalidCollectionSizeChangeError);
nameToErrorMap.set('InvalidCollectionSizeChange', InvalidCollectionSizeChangeError);
/** InvalidBubblegumSigner: Invalid bubblegum signer */
class InvalidBubblegumSignerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid bubblegum signer', program, cause);
        this.name = 'InvalidBubblegumSigner';
        this.code = 0x84; // 132
    }
}
mplTokenMetadata$2.InvalidBubblegumSignerError = InvalidBubblegumSignerError;
codeToErrorMap.set(0x84, InvalidBubblegumSignerError);
nameToErrorMap.set('InvalidBubblegumSigner', InvalidBubblegumSignerError);
/** EscrowParentHasDelegate: Escrow parent cannot have a delegate */
class EscrowParentHasDelegateError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Escrow parent cannot have a delegate', program, cause);
        this.name = 'EscrowParentHasDelegate';
        this.code = 0x85; // 133
    }
}
mplTokenMetadata$2.EscrowParentHasDelegateError = EscrowParentHasDelegateError;
codeToErrorMap.set(0x85, EscrowParentHasDelegateError);
nameToErrorMap.set('EscrowParentHasDelegate', EscrowParentHasDelegateError);
/** MintIsNotSigner: Mint needs to be signer to initialize the account */
class MintIsNotSignerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Mint needs to be signer to initialize the account', program, cause);
        this.name = 'MintIsNotSigner';
        this.code = 0x86; // 134
    }
}
mplTokenMetadata$2.MintIsNotSignerError = MintIsNotSignerError;
codeToErrorMap.set(0x86, MintIsNotSignerError);
nameToErrorMap.set('MintIsNotSigner', MintIsNotSignerError);
/** InvalidTokenStandard: Invalid token standard */
class InvalidTokenStandardError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid token standard', program, cause);
        this.name = 'InvalidTokenStandard';
        this.code = 0x87; // 135
    }
}
mplTokenMetadata$2.InvalidTokenStandardError = InvalidTokenStandardError;
codeToErrorMap.set(0x87, InvalidTokenStandardError);
nameToErrorMap.set('InvalidTokenStandard', InvalidTokenStandardError);
/** InvalidMintForTokenStandard: Invalid mint account for specified token standard */
class InvalidMintForTokenStandardError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid mint account for specified token standard', program, cause);
        this.name = 'InvalidMintForTokenStandard';
        this.code = 0x88; // 136
    }
}
mplTokenMetadata$2.InvalidMintForTokenStandardError = InvalidMintForTokenStandardError;
codeToErrorMap.set(0x88, InvalidMintForTokenStandardError);
nameToErrorMap.set('InvalidMintForTokenStandard', InvalidMintForTokenStandardError);
/** InvalidAuthorizationRules: Invalid authorization rules account */
class InvalidAuthorizationRulesError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid authorization rules account', program, cause);
        this.name = 'InvalidAuthorizationRules';
        this.code = 0x89; // 137
    }
}
mplTokenMetadata$2.InvalidAuthorizationRulesError = InvalidAuthorizationRulesError;
codeToErrorMap.set(0x89, InvalidAuthorizationRulesError);
nameToErrorMap.set('InvalidAuthorizationRules', InvalidAuthorizationRulesError);
/** MissingAuthorizationRules: Missing authorization rules account */
class MissingAuthorizationRulesError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing authorization rules account', program, cause);
        this.name = 'MissingAuthorizationRules';
        this.code = 0x8a; // 138
    }
}
mplTokenMetadata$2.MissingAuthorizationRulesError = MissingAuthorizationRulesError;
codeToErrorMap.set(0x8a, MissingAuthorizationRulesError);
nameToErrorMap.set('MissingAuthorizationRules', MissingAuthorizationRulesError);
/** MissingProgrammableConfig: Missing programmable configuration */
class MissingProgrammableConfigError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing programmable configuration', program, cause);
        this.name = 'MissingProgrammableConfig';
        this.code = 0x8b; // 139
    }
}
mplTokenMetadata$2.MissingProgrammableConfigError = MissingProgrammableConfigError;
codeToErrorMap.set(0x8b, MissingProgrammableConfigError);
nameToErrorMap.set('MissingProgrammableConfig', MissingProgrammableConfigError);
/** InvalidProgrammableConfig: Invalid programmable configuration */
class InvalidProgrammableConfigError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid programmable configuration', program, cause);
        this.name = 'InvalidProgrammableConfig';
        this.code = 0x8c; // 140
    }
}
mplTokenMetadata$2.InvalidProgrammableConfigError = InvalidProgrammableConfigError;
codeToErrorMap.set(0x8c, InvalidProgrammableConfigError);
nameToErrorMap.set('InvalidProgrammableConfig', InvalidProgrammableConfigError);
/** DelegateAlreadyExists: Delegate already exists */
class DelegateAlreadyExistsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Delegate already exists', program, cause);
        this.name = 'DelegateAlreadyExists';
        this.code = 0x8d; // 141
    }
}
mplTokenMetadata$2.DelegateAlreadyExistsError = DelegateAlreadyExistsError;
codeToErrorMap.set(0x8d, DelegateAlreadyExistsError);
nameToErrorMap.set('DelegateAlreadyExists', DelegateAlreadyExistsError);
/** DelegateNotFound: Delegate not found */
class DelegateNotFoundError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Delegate not found', program, cause);
        this.name = 'DelegateNotFound';
        this.code = 0x8e; // 142
    }
}
mplTokenMetadata$2.DelegateNotFoundError = DelegateNotFoundError;
codeToErrorMap.set(0x8e, DelegateNotFoundError);
nameToErrorMap.set('DelegateNotFound', DelegateNotFoundError);
/** MissingAccountInBuilder: Required account not set in instruction builder */
class MissingAccountInBuilderError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Required account not set in instruction builder', program, cause);
        this.name = 'MissingAccountInBuilder';
        this.code = 0x8f; // 143
    }
}
mplTokenMetadata$2.MissingAccountInBuilderError = MissingAccountInBuilderError;
codeToErrorMap.set(0x8f, MissingAccountInBuilderError);
nameToErrorMap.set('MissingAccountInBuilder', MissingAccountInBuilderError);
/** MissingArgumentInBuilder: Required argument not set in instruction builder */
class MissingArgumentInBuilderError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Required argument not set in instruction builder', program, cause);
        this.name = 'MissingArgumentInBuilder';
        this.code = 0x90; // 144
    }
}
mplTokenMetadata$2.MissingArgumentInBuilderError = MissingArgumentInBuilderError;
codeToErrorMap.set(0x90, MissingArgumentInBuilderError);
nameToErrorMap.set('MissingArgumentInBuilder', MissingArgumentInBuilderError);
/** FeatureNotSupported: Feature not supported currently */
class FeatureNotSupportedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Feature not supported currently', program, cause);
        this.name = 'FeatureNotSupported';
        this.code = 0x91; // 145
    }
}
mplTokenMetadata$2.FeatureNotSupportedError = FeatureNotSupportedError;
codeToErrorMap.set(0x91, FeatureNotSupportedError);
nameToErrorMap.set('FeatureNotSupported', FeatureNotSupportedError);
/** InvalidSystemWallet: Invalid system wallet */
class InvalidSystemWalletError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid system wallet', program, cause);
        this.name = 'InvalidSystemWallet';
        this.code = 0x92; // 146
    }
}
mplTokenMetadata$2.InvalidSystemWalletError = InvalidSystemWalletError;
codeToErrorMap.set(0x92, InvalidSystemWalletError);
nameToErrorMap.set('InvalidSystemWallet', InvalidSystemWalletError);
/** OnlySaleDelegateCanTransfer: Only the sale delegate can transfer while its set */
class OnlySaleDelegateCanTransferError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Only the sale delegate can transfer while its set', program, cause);
        this.name = 'OnlySaleDelegateCanTransfer';
        this.code = 0x93; // 147
    }
}
mplTokenMetadata$2.OnlySaleDelegateCanTransferError = OnlySaleDelegateCanTransferError;
codeToErrorMap.set(0x93, OnlySaleDelegateCanTransferError);
nameToErrorMap.set('OnlySaleDelegateCanTransfer', OnlySaleDelegateCanTransferError);
/** MissingTokenAccount: Missing token account */
class MissingTokenAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing token account', program, cause);
        this.name = 'MissingTokenAccount';
        this.code = 0x94; // 148
    }
}
mplTokenMetadata$2.MissingTokenAccountError = MissingTokenAccountError;
codeToErrorMap.set(0x94, MissingTokenAccountError);
nameToErrorMap.set('MissingTokenAccount', MissingTokenAccountError);
/** MissingSplTokenProgram: Missing SPL token program */
class MissingSplTokenProgramError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing SPL token program', program, cause);
        this.name = 'MissingSplTokenProgram';
        this.code = 0x95; // 149
    }
}
mplTokenMetadata$2.MissingSplTokenProgramError = MissingSplTokenProgramError;
codeToErrorMap.set(0x95, MissingSplTokenProgramError);
nameToErrorMap.set('MissingSplTokenProgram', MissingSplTokenProgramError);
/** MissingAuthorizationRulesProgram: Missing authorization rules program */
class MissingAuthorizationRulesProgramError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing authorization rules program', program, cause);
        this.name = 'MissingAuthorizationRulesProgram';
        this.code = 0x96; // 150
    }
}
mplTokenMetadata$2.MissingAuthorizationRulesProgramError = MissingAuthorizationRulesProgramError;
codeToErrorMap.set(0x96, MissingAuthorizationRulesProgramError);
nameToErrorMap.set('MissingAuthorizationRulesProgram', MissingAuthorizationRulesProgramError);
/** InvalidDelegateRoleForTransfer: Invalid delegate role for transfer */
class InvalidDelegateRoleForTransferError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid delegate role for transfer', program, cause);
        this.name = 'InvalidDelegateRoleForTransfer';
        this.code = 0x97; // 151
    }
}
mplTokenMetadata$2.InvalidDelegateRoleForTransferError = InvalidDelegateRoleForTransferError;
codeToErrorMap.set(0x97, InvalidDelegateRoleForTransferError);
nameToErrorMap.set('InvalidDelegateRoleForTransfer', InvalidDelegateRoleForTransferError);
/** InvalidTransferAuthority: Invalid transfer authority */
class InvalidTransferAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid transfer authority', program, cause);
        this.name = 'InvalidTransferAuthority';
        this.code = 0x98; // 152
    }
}
mplTokenMetadata$2.InvalidTransferAuthorityError = InvalidTransferAuthorityError;
codeToErrorMap.set(0x98, InvalidTransferAuthorityError);
nameToErrorMap.set('InvalidTransferAuthority', InvalidTransferAuthorityError);
/** InstructionNotSupported: Instruction not supported for ProgrammableNonFungible assets */
class InstructionNotSupportedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Instruction not supported for ProgrammableNonFungible assets', program, cause);
        this.name = 'InstructionNotSupported';
        this.code = 0x99; // 153
    }
}
mplTokenMetadata$2.InstructionNotSupportedError = InstructionNotSupportedError;
codeToErrorMap.set(0x99, InstructionNotSupportedError);
nameToErrorMap.set('InstructionNotSupported', InstructionNotSupportedError);
/** KeyMismatch: Public key does not match expected value */
class KeyMismatchError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Public key does not match expected value', program, cause);
        this.name = 'KeyMismatch';
        this.code = 0x9a; // 154
    }
}
mplTokenMetadata$2.KeyMismatchError = KeyMismatchError;
codeToErrorMap.set(0x9a, KeyMismatchError);
nameToErrorMap.set('KeyMismatch', KeyMismatchError);
/** LockedToken: Token is locked */
class LockedTokenError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Token is locked', program, cause);
        this.name = 'LockedToken';
        this.code = 0x9b; // 155
    }
}
mplTokenMetadata$2.LockedTokenError = LockedTokenError;
codeToErrorMap.set(0x9b, LockedTokenError);
nameToErrorMap.set('LockedToken', LockedTokenError);
/** UnlockedToken: Token is unlocked */
class UnlockedTokenError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Token is unlocked', program, cause);
        this.name = 'UnlockedToken';
        this.code = 0x9c; // 156
    }
}
mplTokenMetadata$2.UnlockedTokenError = UnlockedTokenError;
codeToErrorMap.set(0x9c, UnlockedTokenError);
nameToErrorMap.set('UnlockedToken', UnlockedTokenError);
/** MissingDelegateRole: Missing delegate role */
class MissingDelegateRoleError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing delegate role', program, cause);
        this.name = 'MissingDelegateRole';
        this.code = 0x9d; // 157
    }
}
mplTokenMetadata$2.MissingDelegateRoleError = MissingDelegateRoleError;
codeToErrorMap.set(0x9d, MissingDelegateRoleError);
nameToErrorMap.set('MissingDelegateRole', MissingDelegateRoleError);
/** InvalidAuthorityType: Invalid authority type */
class InvalidAuthorityTypeError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid authority type', program, cause);
        this.name = 'InvalidAuthorityType';
        this.code = 0x9e; // 158
    }
}
mplTokenMetadata$2.InvalidAuthorityTypeError = InvalidAuthorityTypeError;
codeToErrorMap.set(0x9e, InvalidAuthorityTypeError);
nameToErrorMap.set('InvalidAuthorityType', InvalidAuthorityTypeError);
/** MissingTokenRecord: Missing token record account */
class MissingTokenRecordError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing token record account', program, cause);
        this.name = 'MissingTokenRecord';
        this.code = 0x9f; // 159
    }
}
mplTokenMetadata$2.MissingTokenRecordError = MissingTokenRecordError;
codeToErrorMap.set(0x9f, MissingTokenRecordError);
nameToErrorMap.set('MissingTokenRecord', MissingTokenRecordError);
/** MintSupplyMustBeZero: Mint supply must be zero for programmable assets */
class MintSupplyMustBeZeroError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Mint supply must be zero for programmable assets', program, cause);
        this.name = 'MintSupplyMustBeZero';
        this.code = 0xa0; // 160
    }
}
mplTokenMetadata$2.MintSupplyMustBeZeroError = MintSupplyMustBeZeroError;
codeToErrorMap.set(0xa0, MintSupplyMustBeZeroError);
nameToErrorMap.set('MintSupplyMustBeZero', MintSupplyMustBeZeroError);
/** DataIsEmptyOrZeroed: Data is empty or zeroed */
class DataIsEmptyOrZeroedError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Data is empty or zeroed', program, cause);
        this.name = 'DataIsEmptyOrZeroed';
        this.code = 0xa1; // 161
    }
}
mplTokenMetadata$2.DataIsEmptyOrZeroedError = DataIsEmptyOrZeroedError;
codeToErrorMap.set(0xa1, DataIsEmptyOrZeroedError);
nameToErrorMap.set('DataIsEmptyOrZeroed', DataIsEmptyOrZeroedError);
/** MissingTokenOwnerAccount: Missing token owner */
class MissingTokenOwnerAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing token owner', program, cause);
        this.name = 'MissingTokenOwnerAccount';
        this.code = 0xa2; // 162
    }
}
mplTokenMetadata$2.MissingTokenOwnerAccountError = MissingTokenOwnerAccountError;
codeToErrorMap.set(0xa2, MissingTokenOwnerAccountError);
nameToErrorMap.set('MissingTokenOwnerAccount', MissingTokenOwnerAccountError);
/** InvalidMasterEditionAccountLength: Master edition account has an invalid length */
class InvalidMasterEditionAccountLengthError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Master edition account has an invalid length', program, cause);
        this.name = 'InvalidMasterEditionAccountLength';
        this.code = 0xa3; // 163
    }
}
mplTokenMetadata$2.InvalidMasterEditionAccountLengthError = InvalidMasterEditionAccountLengthError;
codeToErrorMap.set(0xa3, InvalidMasterEditionAccountLengthError);
nameToErrorMap.set('InvalidMasterEditionAccountLength', InvalidMasterEditionAccountLengthError);
/** IncorrectTokenState: Incorrect token state */
class IncorrectTokenStateError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Incorrect token state', program, cause);
        this.name = 'IncorrectTokenState';
        this.code = 0xa4; // 164
    }
}
mplTokenMetadata$2.IncorrectTokenStateError = IncorrectTokenStateError;
codeToErrorMap.set(0xa4, IncorrectTokenStateError);
nameToErrorMap.set('IncorrectTokenState', IncorrectTokenStateError);
/** InvalidDelegateRole: Invalid delegate role */
class InvalidDelegateRoleError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid delegate role', program, cause);
        this.name = 'InvalidDelegateRole';
        this.code = 0xa5; // 165
    }
}
mplTokenMetadata$2.InvalidDelegateRoleError = InvalidDelegateRoleError;
codeToErrorMap.set(0xa5, InvalidDelegateRoleError);
nameToErrorMap.set('InvalidDelegateRole', InvalidDelegateRoleError);
/** MissingPrintSupply: Print supply is required for non-fungibles */
class MissingPrintSupplyError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Print supply is required for non-fungibles', program, cause);
        this.name = 'MissingPrintSupply';
        this.code = 0xa6; // 166
    }
}
mplTokenMetadata$2.MissingPrintSupplyError = MissingPrintSupplyError;
codeToErrorMap.set(0xa6, MissingPrintSupplyError);
nameToErrorMap.set('MissingPrintSupply', MissingPrintSupplyError);
/** MissingMasterEditionAccount: Missing master edition account */
class MissingMasterEditionAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing master edition account', program, cause);
        this.name = 'MissingMasterEditionAccount';
        this.code = 0xa7; // 167
    }
}
mplTokenMetadata$2.MissingMasterEditionAccountError = MissingMasterEditionAccountError;
codeToErrorMap.set(0xa7, MissingMasterEditionAccountError);
nameToErrorMap.set('MissingMasterEditionAccount', MissingMasterEditionAccountError);
/** AmountMustBeGreaterThanZero: Amount must be greater than zero */
class AmountMustBeGreaterThanZeroError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Amount must be greater than zero', program, cause);
        this.name = 'AmountMustBeGreaterThanZero';
        this.code = 0xa8; // 168
    }
}
mplTokenMetadata$2.AmountMustBeGreaterThanZeroError = AmountMustBeGreaterThanZeroError;
codeToErrorMap.set(0xa8, AmountMustBeGreaterThanZeroError);
nameToErrorMap.set('AmountMustBeGreaterThanZero', AmountMustBeGreaterThanZeroError);
/** InvalidDelegateArgs: Invalid delegate args */
class InvalidDelegateArgsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid delegate args', program, cause);
        this.name = 'InvalidDelegateArgs';
        this.code = 0xa9; // 169
    }
}
mplTokenMetadata$2.InvalidDelegateArgsError = InvalidDelegateArgsError;
codeToErrorMap.set(0xa9, InvalidDelegateArgsError);
nameToErrorMap.set('InvalidDelegateArgs', InvalidDelegateArgsError);
/** MissingLockedTransferAddress: Missing address for locked transfer */
class MissingLockedTransferAddressError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing address for locked transfer', program, cause);
        this.name = 'MissingLockedTransferAddress';
        this.code = 0xaa; // 170
    }
}
mplTokenMetadata$2.MissingLockedTransferAddressError = MissingLockedTransferAddressError;
codeToErrorMap.set(0xaa, MissingLockedTransferAddressError);
nameToErrorMap.set('MissingLockedTransferAddress', MissingLockedTransferAddressError);
/** InvalidLockedTransferAddress: Invalid destination address for locked transfer */
class InvalidLockedTransferAddressError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid destination address for locked transfer', program, cause);
        this.name = 'InvalidLockedTransferAddress';
        this.code = 0xab; // 171
    }
}
mplTokenMetadata$2.InvalidLockedTransferAddressError = InvalidLockedTransferAddressError;
codeToErrorMap.set(0xab, InvalidLockedTransferAddressError);
nameToErrorMap.set('InvalidLockedTransferAddress', InvalidLockedTransferAddressError);
/** DataIncrementLimitExceeded: Exceeded account realloc increase limit */
class DataIncrementLimitExceededError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Exceeded account realloc increase limit', program, cause);
        this.name = 'DataIncrementLimitExceeded';
        this.code = 0xac; // 172
    }
}
mplTokenMetadata$2.DataIncrementLimitExceededError = DataIncrementLimitExceededError;
codeToErrorMap.set(0xac, DataIncrementLimitExceededError);
nameToErrorMap.set('DataIncrementLimitExceeded', DataIncrementLimitExceededError);
/** CannotUpdateAssetWithDelegate: Cannot update the rule set of a programmable asset that has a delegate */
class CannotUpdateAssetWithDelegateError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Cannot update the rule set of a programmable asset that has a delegate', program, cause);
        this.name = 'CannotUpdateAssetWithDelegate';
        this.code = 0xad; // 173
    }
}
mplTokenMetadata$2.CannotUpdateAssetWithDelegateError = CannotUpdateAssetWithDelegateError;
codeToErrorMap.set(0xad, CannotUpdateAssetWithDelegateError);
nameToErrorMap.set('CannotUpdateAssetWithDelegate', CannotUpdateAssetWithDelegateError);
/** InvalidAmount: Invalid token amount for this operation or token standard */
class InvalidAmountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid token amount for this operation or token standard', program, cause);
        this.name = 'InvalidAmount';
        this.code = 0xae; // 174
    }
}
mplTokenMetadata$2.InvalidAmountError = InvalidAmountError;
codeToErrorMap.set(0xae, InvalidAmountError);
nameToErrorMap.set('InvalidAmount', InvalidAmountError);
/** MissingMasterEditionMintAccount: Missing master edition mint account */
class MissingMasterEditionMintAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing master edition mint account', program, cause);
        this.name = 'MissingMasterEditionMintAccount';
        this.code = 0xaf; // 175
    }
}
mplTokenMetadata$2.MissingMasterEditionMintAccountError = MissingMasterEditionMintAccountError;
codeToErrorMap.set(0xaf, MissingMasterEditionMintAccountError);
nameToErrorMap.set('MissingMasterEditionMintAccount', MissingMasterEditionMintAccountError);
/** MissingMasterEditionTokenAccount: Missing master edition token account */
class MissingMasterEditionTokenAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing master edition token account', program, cause);
        this.name = 'MissingMasterEditionTokenAccount';
        this.code = 0xb0; // 176
    }
}
mplTokenMetadata$2.MissingMasterEditionTokenAccountError = MissingMasterEditionTokenAccountError;
codeToErrorMap.set(0xb0, MissingMasterEditionTokenAccountError);
nameToErrorMap.set('MissingMasterEditionTokenAccount', MissingMasterEditionTokenAccountError);
/** MissingEditionMarkerAccount: Missing edition marker account */
class MissingEditionMarkerAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing edition marker account', program, cause);
        this.name = 'MissingEditionMarkerAccount';
        this.code = 0xb1; // 177
    }
}
mplTokenMetadata$2.MissingEditionMarkerAccountError = MissingEditionMarkerAccountError;
codeToErrorMap.set(0xb1, MissingEditionMarkerAccountError);
nameToErrorMap.set('MissingEditionMarkerAccount', MissingEditionMarkerAccountError);
/** CannotBurnWithDelegate: Cannot burn while persistent delegate is set */
class CannotBurnWithDelegateError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Cannot burn while persistent delegate is set', program, cause);
        this.name = 'CannotBurnWithDelegate';
        this.code = 0xb2; // 178
    }
}
mplTokenMetadata$2.CannotBurnWithDelegateError = CannotBurnWithDelegateError;
codeToErrorMap.set(0xb2, CannotBurnWithDelegateError);
nameToErrorMap.set('CannotBurnWithDelegate', CannotBurnWithDelegateError);
/** MissingEdition: Missing edition account */
class MissingEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing edition account', program, cause);
        this.name = 'MissingEdition';
        this.code = 0xb3; // 179
    }
}
mplTokenMetadata$2.MissingEditionError = MissingEditionError;
codeToErrorMap.set(0xb3, MissingEditionError);
nameToErrorMap.set('MissingEdition', MissingEditionError);
/** InvalidAssociatedTokenAccountProgram: Invalid Associated Token Account Program */
class InvalidAssociatedTokenAccountProgramError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid Associated Token Account Program', program, cause);
        this.name = 'InvalidAssociatedTokenAccountProgram';
        this.code = 0xb4; // 180
    }
}
mplTokenMetadata$2.InvalidAssociatedTokenAccountProgramError = InvalidAssociatedTokenAccountProgramError;
codeToErrorMap.set(0xb4, InvalidAssociatedTokenAccountProgramError);
nameToErrorMap.set('InvalidAssociatedTokenAccountProgram', InvalidAssociatedTokenAccountProgramError);
/** InvalidInstructionsSysvar: Invalid InstructionsSysvar */
class InvalidInstructionsSysvarError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid InstructionsSysvar', program, cause);
        this.name = 'InvalidInstructionsSysvar';
        this.code = 0xb5; // 181
    }
}
mplTokenMetadata$2.InvalidInstructionsSysvarError = InvalidInstructionsSysvarError;
codeToErrorMap.set(0xb5, InvalidInstructionsSysvarError);
nameToErrorMap.set('InvalidInstructionsSysvar', InvalidInstructionsSysvarError);
/** InvalidParentAccounts: Invalid or Unneeded parent accounts */
class InvalidParentAccountsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid or Unneeded parent accounts', program, cause);
        this.name = 'InvalidParentAccounts';
        this.code = 0xb6; // 182
    }
}
mplTokenMetadata$2.InvalidParentAccountsError = InvalidParentAccountsError;
codeToErrorMap.set(0xb6, InvalidParentAccountsError);
nameToErrorMap.set('InvalidParentAccounts', InvalidParentAccountsError);
/** InvalidUpdateArgs: Authority cannot apply all update args */
class InvalidUpdateArgsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Authority cannot apply all update args', program, cause);
        this.name = 'InvalidUpdateArgs';
        this.code = 0xb7; // 183
    }
}
mplTokenMetadata$2.InvalidUpdateArgsError = InvalidUpdateArgsError;
codeToErrorMap.set(0xb7, InvalidUpdateArgsError);
nameToErrorMap.set('InvalidUpdateArgs', InvalidUpdateArgsError);
/** InsufficientTokenBalance: Token account does not have enough tokens */
class InsufficientTokenBalanceError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Token account does not have enough tokens', program, cause);
        this.name = 'InsufficientTokenBalance';
        this.code = 0xb8; // 184
    }
}
mplTokenMetadata$2.InsufficientTokenBalanceError = InsufficientTokenBalanceError;
codeToErrorMap.set(0xb8, InsufficientTokenBalanceError);
nameToErrorMap.set('InsufficientTokenBalance', InsufficientTokenBalanceError);
/** MissingCollectionMint: Missing collection account */
class MissingCollectionMintError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing collection account', program, cause);
        this.name = 'MissingCollectionMint';
        this.code = 0xb9; // 185
    }
}
mplTokenMetadata$2.MissingCollectionMintError = MissingCollectionMintError;
codeToErrorMap.set(0xb9, MissingCollectionMintError);
nameToErrorMap.set('MissingCollectionMint', MissingCollectionMintError);
/** MissingCollectionMasterEdition: Missing collection master edition account */
class MissingCollectionMasterEditionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing collection master edition account', program, cause);
        this.name = 'MissingCollectionMasterEdition';
        this.code = 0xba; // 186
    }
}
mplTokenMetadata$2.MissingCollectionMasterEditionError = MissingCollectionMasterEditionError;
codeToErrorMap.set(0xba, MissingCollectionMasterEditionError);
nameToErrorMap.set('MissingCollectionMasterEdition', MissingCollectionMasterEditionError);
/** InvalidTokenRecord: Invalid token record account */
class InvalidTokenRecordError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid token record account', program, cause);
        this.name = 'InvalidTokenRecord';
        this.code = 0xbb; // 187
    }
}
mplTokenMetadata$2.InvalidTokenRecordError = InvalidTokenRecordError;
codeToErrorMap.set(0xbb, InvalidTokenRecordError);
nameToErrorMap.set('InvalidTokenRecord', InvalidTokenRecordError);
/** InvalidCloseAuthority: The close authority needs to be revoked by the Utility Delegate */
class InvalidCloseAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('The close authority needs to be revoked by the Utility Delegate', program, cause);
        this.name = 'InvalidCloseAuthority';
        this.code = 0xbc; // 188
    }
}
mplTokenMetadata$2.InvalidCloseAuthorityError = InvalidCloseAuthorityError;
codeToErrorMap.set(0xbc, InvalidCloseAuthorityError);
nameToErrorMap.set('InvalidCloseAuthority', InvalidCloseAuthorityError);
/** InvalidInstruction: Invalid or removed instruction */
class InvalidInstructionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid or removed instruction', program, cause);
        this.name = 'InvalidInstruction';
        this.code = 0xbd; // 189
    }
}
mplTokenMetadata$2.InvalidInstructionError = InvalidInstructionError;
codeToErrorMap.set(0xbd, InvalidInstructionError);
nameToErrorMap.set('InvalidInstruction', InvalidInstructionError);
/** MissingDelegateRecord: Missing delegate record */
class MissingDelegateRecordError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing delegate record', program, cause);
        this.name = 'MissingDelegateRecord';
        this.code = 0xbe; // 190
    }
}
mplTokenMetadata$2.MissingDelegateRecordError = MissingDelegateRecordError;
codeToErrorMap.set(0xbe, MissingDelegateRecordError);
nameToErrorMap.set('MissingDelegateRecord', MissingDelegateRecordError);
/** InvalidFeeAccount */
class InvalidFeeAccountError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'InvalidFeeAccount';
        this.code = 0xbf; // 191
    }
}
mplTokenMetadata$2.InvalidFeeAccountError = InvalidFeeAccountError;
codeToErrorMap.set(0xbf, InvalidFeeAccountError);
nameToErrorMap.set('InvalidFeeAccount', InvalidFeeAccountError);
/** InvalidMetadataFlags */
class InvalidMetadataFlagsError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('', program, cause);
        this.name = 'InvalidMetadataFlags';
        this.code = 0xc0; // 192
    }
}
mplTokenMetadata$2.InvalidMetadataFlagsError = InvalidMetadataFlagsError;
codeToErrorMap.set(0xc0, InvalidMetadataFlagsError);
nameToErrorMap.set('InvalidMetadataFlags', InvalidMetadataFlagsError);
/** CannotChangeUpdateAuthorityWithDelegate: Cannot change the update authority with a delegate */
class CannotChangeUpdateAuthorityWithDelegateError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Cannot change the update authority with a delegate', program, cause);
        this.name = 'CannotChangeUpdateAuthorityWithDelegate';
        this.code = 0xc1; // 193
    }
}
mplTokenMetadata$2.CannotChangeUpdateAuthorityWithDelegateError = CannotChangeUpdateAuthorityWithDelegateError;
codeToErrorMap.set(0xc1, CannotChangeUpdateAuthorityWithDelegateError);
nameToErrorMap.set('CannotChangeUpdateAuthorityWithDelegate', CannotChangeUpdateAuthorityWithDelegateError);
/** InvalidMintExtensionType: Invalid mint extension type */
class InvalidMintExtensionTypeError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid mint extension type', program, cause);
        this.name = 'InvalidMintExtensionType';
        this.code = 0xc2; // 194
    }
}
mplTokenMetadata$2.InvalidMintExtensionTypeError = InvalidMintExtensionTypeError;
codeToErrorMap.set(0xc2, InvalidMintExtensionTypeError);
nameToErrorMap.set('InvalidMintExtensionType', InvalidMintExtensionTypeError);
/** InvalidMintCloseAuthority: Invalid mint close authority */
class InvalidMintCloseAuthorityError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid mint close authority', program, cause);
        this.name = 'InvalidMintCloseAuthority';
        this.code = 0xc3; // 195
    }
}
mplTokenMetadata$2.InvalidMintCloseAuthorityError = InvalidMintCloseAuthorityError;
codeToErrorMap.set(0xc3, InvalidMintCloseAuthorityError);
nameToErrorMap.set('InvalidMintCloseAuthority', InvalidMintCloseAuthorityError);
/** InvalidMetadataPointer: Invalid metadata pointer */
class InvalidMetadataPointerError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid metadata pointer', program, cause);
        this.name = 'InvalidMetadataPointer';
        this.code = 0xc4; // 196
    }
}
mplTokenMetadata$2.InvalidMetadataPointerError = InvalidMetadataPointerError;
codeToErrorMap.set(0xc4, InvalidMetadataPointerError);
nameToErrorMap.set('InvalidMetadataPointer', InvalidMetadataPointerError);
/** InvalidTokenExtensionType: Invalid token extension type */
class InvalidTokenExtensionTypeError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Invalid token extension type', program, cause);
        this.name = 'InvalidTokenExtensionType';
        this.code = 0xc5; // 197
    }
}
mplTokenMetadata$2.InvalidTokenExtensionTypeError = InvalidTokenExtensionTypeError;
codeToErrorMap.set(0xc5, InvalidTokenExtensionTypeError);
nameToErrorMap.set('InvalidTokenExtensionType', InvalidTokenExtensionTypeError);
/** MissingImmutableOwnerExtension: Missing immutable owner extension */
class MissingImmutableOwnerExtensionError extends umi_1$n.ProgramError {
    constructor(program, cause) {
        super('Missing immutable owner extension', program, cause);
        this.name = 'MissingImmutableOwnerExtension';
        this.code = 0xc6; // 198
    }
}
mplTokenMetadata$2.MissingImmutableOwnerExtensionError = MissingImmutableOwnerExtensionError;
codeToErrorMap.set(0xc6, MissingImmutableOwnerExtensionError);
nameToErrorMap.set('MissingImmutableOwnerExtension', MissingImmutableOwnerExtensionError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMplTokenMetadataErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
mplTokenMetadata$2.getMplTokenMetadataErrorFromCode = getMplTokenMetadataErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMplTokenMetadataErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
mplTokenMetadata$2.getMplTokenMetadataErrorFromName = getMplTokenMetadataErrorFromName;

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(mplTokenMetadata$2, exports);
	
} (errors));

var instructions = {};

var approveCollectionAuthority = {};

var shared = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(shared, "__esModule", { value: true });
shared.getAccountMetasAndSigners = shared.expectPda = shared.expectPublicKey = shared.expectSome = void 0;
const umi_1$m = cjs$6;
/**
 * Asserts that the given value is not null or undefined.
 * @internal
 */
function expectSome(value) {
    if (value == null) {
        throw new Error('Expected a value but received null or undefined.');
    }
    return value;
}
shared.expectSome = expectSome;
/**
 * Asserts that the given value is a PublicKey.
 * @internal
 */
function expectPublicKey(value) {
    if (!value) {
        throw new Error('Expected a PublicKey.');
    }
    return (0, umi_1$m.publicKey)(value, false);
}
shared.expectPublicKey = expectPublicKey;
/**
 * Asserts that the given value is a PDA.
 * @internal
 */
function expectPda(value) {
    if (!value || !Array.isArray(value) || !(0, umi_1$m.isPda)(value)) {
        throw new Error('Expected a PDA.');
    }
    return value;
}
shared.expectPda = expectPda;
/**
 * Get account metas and signers from resolved accounts.
 * @internal
 */
function getAccountMetasAndSigners(accounts, optionalAccountStrategy, programId) {
    const keys = [];
    const signers = [];
    accounts.forEach((account) => {
        if (!account.value) {
            if (optionalAccountStrategy === 'omitted')
                return;
            keys.push({ pubkey: programId, isSigner: false, isWritable: false });
            return;
        }
        if ((0, umi_1$m.isSigner)(account.value)) {
            signers.push(account.value);
        }
        keys.push({
            pubkey: (0, umi_1$m.publicKey)(account.value, false),
            isSigner: (0, umi_1$m.isSigner)(account.value),
            isWritable: account.isWritable,
        });
    });
    return [keys, signers];
}
shared.getAccountMetasAndSigners = getAccountMetasAndSigners;

var hasRequiredApproveCollectionAuthority;

function requireApproveCollectionAuthority () {
	if (hasRequiredApproveCollectionAuthority) return approveCollectionAuthority;
	hasRequiredApproveCollectionAuthority = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(approveCollectionAuthority, "__esModule", { value: true });
	approveCollectionAuthority.approveCollectionAuthority = approveCollectionAuthority.getApproveCollectionAuthorityInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getApproveCollectionAuthorityInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], { description: 'ApproveCollectionAuthorityInstructionData' }), (value) => ({ ...value, discriminator: 23 }));
	}
	approveCollectionAuthority.getApproveCollectionAuthorityInstructionDataSerializer = getApproveCollectionAuthorityInstructionDataSerializer;
	// Instruction.
	function approveCollectionAuthority$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        collectionAuthorityRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.collectionAuthorityRecord ?? null,
	        },
	        newCollectionAuthority: {
	            index: 1,
	            isWritable: false,
	            value: input.newCollectionAuthority ?? null,
	        },
	        updateAuthority: {
	            index: 2,
	            isWritable: true,
	            value: input.updateAuthority ?? null,
	        },
	        payer: {
	            index: 3,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        metadata: {
	            index: 4,
	            isWritable: false,
	            value: input.metadata ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        systemProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        rent: { index: 7, isWritable: false, value: input.rent ?? null },
	    };
	    // Default values.
	    if (!resolvedAccounts.updateAuthority.value) {
	        resolvedAccounts.updateAuthority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getApproveCollectionAuthorityInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	approveCollectionAuthority.approveCollectionAuthority = approveCollectionAuthority$1;
	
	return approveCollectionAuthority;
}

var approveUseAuthority = {};

var hasRequiredApproveUseAuthority;

function requireApproveUseAuthority () {
	if (hasRequiredApproveUseAuthority) return approveUseAuthority;
	hasRequiredApproveUseAuthority = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(approveUseAuthority, "__esModule", { value: true });
	approveUseAuthority.approveUseAuthority = approveUseAuthority.getApproveUseAuthorityInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getApproveUseAuthorityInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['numberOfUses', (0, serializers_1.u64)()],
	    ], { description: 'ApproveUseAuthorityInstructionData' }), (value) => ({ ...value, discriminator: 20 }));
	}
	approveUseAuthority.getApproveUseAuthorityInstructionDataSerializer = getApproveUseAuthorityInstructionDataSerializer;
	// Instruction.
	function approveUseAuthority$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        useAuthorityRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.useAuthorityRecord ?? null,
	        },
	        owner: {
	            index: 1,
	            isWritable: true,
	            value: input.owner ?? null,
	        },
	        payer: {
	            index: 2,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        user: { index: 3, isWritable: false, value: input.user ?? null },
	        ownerTokenAccount: {
	            index: 4,
	            isWritable: true,
	            value: input.ownerTokenAccount ?? null,
	        },
	        metadata: {
	            index: 5,
	            isWritable: false,
	            value: input.metadata ?? null,
	        },
	        mint: { index: 6, isWritable: false, value: input.mint ?? null },
	        burner: {
	            index: 7,
	            isWritable: false,
	            value: input.burner ?? null,
	        },
	        tokenProgram: {
	            index: 8,
	            isWritable: false,
	            value: input.tokenProgram ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        rent: {
	            index: 10,
	            isWritable: false,
	            value: input.rent ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.tokenProgram.value) {
	        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.tokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getApproveUseAuthorityInstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	approveUseAuthority.approveUseAuthority = approveUseAuthority$1;
	
	return approveUseAuthority;
}

var bubblegumSetCollectionSize$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(bubblegumSetCollectionSize$1, "__esModule", { value: true });
bubblegumSetCollectionSize$1.bubblegumSetCollectionSize = bubblegumSetCollectionSize$1.getBubblegumSetCollectionSizeInstructionDataSerializer = void 0;
const umi_1$l = cjs$6;
const serializers_1$k = serializers;
const shared_1$k = shared;
const types_1$4 = requireTypes();
function getBubblegumSetCollectionSizeInstructionDataSerializer() {
    return (0, serializers_1$k.mapSerializer)((0, serializers_1$k.struct)([
        ['discriminator', (0, serializers_1$k.u8)()],
        ['setCollectionSizeArgs', (0, types_1$4.getSetCollectionSizeArgsSerializer)()],
    ], { description: 'BubblegumSetCollectionSizeInstructionData' }), (value) => ({ ...value, discriminator: 36 }));
}
bubblegumSetCollectionSize$1.getBubblegumSetCollectionSizeInstructionDataSerializer = getBubblegumSetCollectionSizeInstructionDataSerializer;
// Instruction.
function bubblegumSetCollectionSize(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        collectionMetadata: {
            index: 0,
            isWritable: true,
            value: input.collectionMetadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: false,
            value: input.collectionAuthority ?? null,
        },
        collectionMint: {
            index: 2,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        bubblegumSigner: {
            index: 3,
            isWritable: false,
            value: input.bubblegumSigner ?? null,
        },
        collectionAuthorityRecord: {
            index: 4,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$k.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getBubblegumSetCollectionSizeInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$l.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
bubblegumSetCollectionSize$1.bubblegumSetCollectionSize = bubblegumSetCollectionSize;

var burnEditionNft$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(burnEditionNft$1, "__esModule", { value: true });
burnEditionNft$1.burnEditionNft = burnEditionNft$1.getBurnEditionNftInstructionDataSerializer = void 0;
const umi_1$k = cjs$6;
const serializers_1$j = serializers;
const shared_1$j = shared;
function getBurnEditionNftInstructionDataSerializer() {
    return (0, serializers_1$j.mapSerializer)((0, serializers_1$j.struct)([['discriminator', (0, serializers_1$j.u8)()]], {
        description: 'BurnEditionNftInstructionData',
    }), (value) => ({ ...value, discriminator: 37 }));
}
burnEditionNft$1.getBurnEditionNftInstructionDataSerializer = getBurnEditionNftInstructionDataSerializer;
// Instruction.
function burnEditionNft(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        owner: {
            index: 1,
            isWritable: true,
            value: input.owner ?? null,
        },
        printEditionMint: {
            index: 2,
            isWritable: true,
            value: input.printEditionMint ?? null,
        },
        masterEditionMint: {
            index: 3,
            isWritable: false,
            value: input.masterEditionMint ?? null,
        },
        printEditionTokenAccount: {
            index: 4,
            isWritable: true,
            value: input.printEditionTokenAccount ?? null,
        },
        masterEditionTokenAccount: {
            index: 5,
            isWritable: false,
            value: input.masterEditionTokenAccount ?? null,
        },
        masterEditionAccount: {
            index: 6,
            isWritable: true,
            value: input.masterEditionAccount ?? null,
        },
        printEditionAccount: {
            index: 7,
            isWritable: true,
            value: input.printEditionAccount ?? null,
        },
        editionMarkerAccount: {
            index: 8,
            isWritable: true,
            value: input.editionMarkerAccount ?? null,
        },
        splTokenProgram: {
            index: 9,
            isWritable: false,
            value: input.splTokenProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.splTokenProgram.value) {
        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.splTokenProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$j.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getBurnEditionNftInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$k.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
burnEditionNft$1.burnEditionNft = burnEditionNft;

var burnNft = {};

var hasRequiredBurnNft;

function requireBurnNft () {
	if (hasRequiredBurnNft) return burnNft;
	hasRequiredBurnNft = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(burnNft, "__esModule", { value: true });
	burnNft.burnNft = burnNft.getBurnNftInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getBurnNftInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'BurnNftInstructionData',
	    }), (value) => ({ ...value, discriminator: 29 }));
	}
	burnNft.getBurnNftInstructionDataSerializer = getBurnNftInstructionDataSerializer;
	// Instruction.
	function burnNft$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        metadata: {
	            index: 0,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        owner: {
	            index: 1,
	            isWritable: true,
	            value: input.owner ?? null,
	        },
	        mint: { index: 2, isWritable: true, value: input.mint ?? null },
	        tokenAccount: {
	            index: 3,
	            isWritable: true,
	            value: input.tokenAccount ?? null,
	        },
	        masterEditionAccount: {
	            index: 4,
	            isWritable: true,
	            value: input.masterEditionAccount ?? null,
	        },
	        splTokenProgram: {
	            index: 5,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        collectionMetadata: {
	            index: 6,
	            isWritable: true,
	            value: input.collectionMetadata ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getBurnNftInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	burnNft.burnNft = burnNft$1;
	
	return burnNft;
}

var burnV1 = {};

var hasRequiredBurnV1;

function requireBurnV1 () {
	if (hasRequiredBurnV1) return burnV1;
	hasRequiredBurnV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(burnV1, "__esModule", { value: true });
	burnV1.burnV1 = burnV1.getBurnV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getBurnV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['burnV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	    ], { description: 'BurnV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 41,
	        burnV1Discriminator: 0,
	        amount: value.amount ?? 1,
	    }));
	}
	burnV1.getBurnV1InstructionDataSerializer = getBurnV1InstructionDataSerializer;
	// Instruction.
	function burnV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: true,
	            value: input.authority ?? null,
	        },
	        collectionMetadata: {
	            index: 1,
	            isWritable: true,
	            value: input.collectionMetadata ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 3,
	            isWritable: true,
	            value: input.edition ?? null,
	        },
	        mint: { index: 4, isWritable: true, value: input.mint ?? null },
	        token: {
	            index: 5,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        masterEdition: {
	            index: 6,
	            isWritable: true,
	            value: input.masterEdition ?? null,
	        },
	        masterEditionMint: {
	            index: 7,
	            isWritable: false,
	            value: input.masterEditionMint ?? null,
	        },
	        masterEditionToken: {
	            index: 8,
	            isWritable: false,
	            value: input.masterEditionToken ?? null,
	        },
	        editionMarker: {
	            index: 9,
	            isWritable: true,
	            value: input.editionMarker ?? null,
	        },
	        tokenRecord: {
	            index: 10,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        systemProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 12,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 13,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, true)) {
	            resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if (resolvedAccounts.masterEditionMint.value) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.masterEditionMint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getBurnV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	burnV1.burnV1 = burnV1$1;
	
	return burnV1;
}

var closeEscrowAccount = {};

var hasRequiredCloseEscrowAccount;

function requireCloseEscrowAccount () {
	if (hasRequiredCloseEscrowAccount) return closeEscrowAccount;
	hasRequiredCloseEscrowAccount = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(closeEscrowAccount, "__esModule", { value: true });
	closeEscrowAccount.closeEscrowAccount = closeEscrowAccount.getCloseEscrowAccountInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getCloseEscrowAccountInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'CloseEscrowAccountInstructionData',
	    }), (value) => ({ ...value, discriminator: 39 }));
	}
	closeEscrowAccount.getCloseEscrowAccountInstructionDataSerializer = getCloseEscrowAccountInstructionDataSerializer;
	// Instruction.
	function closeEscrowAccount$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        escrow: {
	            index: 0,
	            isWritable: true,
	            value: input.escrow ?? null,
	        },
	        metadata: {
	            index: 1,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        mint: { index: 2, isWritable: false, value: input.mint ?? null },
	        tokenAccount: {
	            index: 3,
	            isWritable: false,
	            value: input.tokenAccount ?? null,
	        },
	        edition: {
	            index: 4,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 5,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 7,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getCloseEscrowAccountInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	closeEscrowAccount.closeEscrowAccount = closeEscrowAccount$1;
	
	return closeEscrowAccount;
}

var collect$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(collect$1, "__esModule", { value: true });
collect$1.collect = collect$1.getCollectInstructionDataSerializer = void 0;
const umi_1$j = cjs$6;
const serializers_1$i = serializers;
const shared_1$i = shared;
function getCollectInstructionDataSerializer() {
    return (0, serializers_1$i.mapSerializer)((0, serializers_1$i.struct)([['discriminator', (0, serializers_1$i.u8)()]], {
        description: 'CollectInstructionData',
    }), (value) => ({ ...value, discriminator: 54 }));
}
collect$1.getCollectInstructionDataSerializer = getCollectInstructionDataSerializer;
// Instruction.
function collect(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        authority: {
            index: 0,
            isWritable: false,
            value: input.authority ?? null,
        },
        recipient: {
            index: 1,
            isWritable: false,
            value: input.recipient ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$i.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCollectInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$j.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
collect$1.collect = collect;

var convertMasterEditionV1ToV2$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(convertMasterEditionV1ToV2$1, "__esModule", { value: true });
convertMasterEditionV1ToV2$1.convertMasterEditionV1ToV2 = convertMasterEditionV1ToV2$1.getConvertMasterEditionV1ToV2InstructionDataSerializer = void 0;
const umi_1$i = cjs$6;
const serializers_1$h = serializers;
const shared_1$h = shared;
function getConvertMasterEditionV1ToV2InstructionDataSerializer() {
    return (0, serializers_1$h.mapSerializer)((0, serializers_1$h.struct)([['discriminator', (0, serializers_1$h.u8)()]], { description: 'ConvertMasterEditionV1ToV2InstructionData' }), (value) => ({ ...value, discriminator: 12 }));
}
convertMasterEditionV1ToV2$1.getConvertMasterEditionV1ToV2InstructionDataSerializer = getConvertMasterEditionV1ToV2InstructionDataSerializer;
// Instruction.
function convertMasterEditionV1ToV2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        masterEdition: {
            index: 0,
            isWritable: true,
            value: input.masterEdition ?? null,
        },
        oneTimeAuth: {
            index: 1,
            isWritable: true,
            value: input.oneTimeAuth ?? null,
        },
        printingMint: {
            index: 2,
            isWritable: true,
            value: input.printingMint ?? null,
        },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$h.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getConvertMasterEditionV1ToV2InstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$i.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
convertMasterEditionV1ToV2$1.convertMasterEditionV1ToV2 = convertMasterEditionV1ToV2;

var createEscrowAccount = {};

var hasRequiredCreateEscrowAccount;

function requireCreateEscrowAccount () {
	if (hasRequiredCreateEscrowAccount) return createEscrowAccount;
	hasRequiredCreateEscrowAccount = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(createEscrowAccount, "__esModule", { value: true });
	createEscrowAccount.createEscrowAccount = createEscrowAccount.getCreateEscrowAccountInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getCreateEscrowAccountInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'CreateEscrowAccountInstructionData',
	    }), (value) => ({ ...value, discriminator: 38 }));
	}
	createEscrowAccount.getCreateEscrowAccountInstructionDataSerializer = getCreateEscrowAccountInstructionDataSerializer;
	// Instruction.
	function createEscrowAccount$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        escrow: {
	            index: 0,
	            isWritable: true,
	            value: input.escrow ?? null,
	        },
	        metadata: {
	            index: 1,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        mint: { index: 2, isWritable: false, value: input.mint ?? null },
	        tokenAccount: {
	            index: 3,
	            isWritable: false,
	            value: input.tokenAccount ?? null,
	        },
	        edition: {
	            index: 4,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 5,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 7,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authority: {
	            index: 8,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getCreateEscrowAccountInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	createEscrowAccount.createEscrowAccount = createEscrowAccount$1;
	
	return createEscrowAccount;
}

var createMasterEditionV3 = {};

var hasRequiredCreateMasterEditionV3;

function requireCreateMasterEditionV3 () {
	if (hasRequiredCreateMasterEditionV3) return createMasterEditionV3;
	hasRequiredCreateMasterEditionV3 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(createMasterEditionV3, "__esModule", { value: true });
	createMasterEditionV3.createMasterEditionV3 = createMasterEditionV3.getCreateMasterEditionV3InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getCreateMasterEditionV3InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['maxSupply', (0, serializers_1.option)((0, serializers_1.u64)())],
	    ], { description: 'CreateMasterEditionV3InstructionData' }), (value) => ({ ...value, discriminator: 17 }));
	}
	createMasterEditionV3.getCreateMasterEditionV3InstructionDataSerializer = getCreateMasterEditionV3InstructionDataSerializer;
	// Instruction.
	function createMasterEditionV3$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        edition: {
	            index: 0,
	            isWritable: true,
	            value: input.edition ?? null,
	        },
	        mint: { index: 1, isWritable: true, value: input.mint ?? null },
	        updateAuthority: {
	            index: 2,
	            isWritable: false,
	            value: input.updateAuthority ?? null,
	        },
	        mintAuthority: {
	            index: 3,
	            isWritable: false,
	            value: input.mintAuthority ?? null,
	        },
	        payer: {
	            index: 4,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        metadata: {
	            index: 5,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        tokenProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.tokenProgram ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        rent: { index: 8, isWritable: false, value: input.rent ?? null },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.updateAuthority.value) {
	        resolvedAccounts.updateAuthority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.tokenProgram.value) {
	        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.tokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getCreateMasterEditionV3InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	createMasterEditionV3.createMasterEditionV3 = createMasterEditionV3$1;
	
	return createMasterEditionV3;
}

var createMetadataAccountV3 = {};

var hasRequiredCreateMetadataAccountV3;

function requireCreateMetadataAccountV3 () {
	if (hasRequiredCreateMetadataAccountV3) return createMetadataAccountV3;
	hasRequiredCreateMetadataAccountV3 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(createMetadataAccountV3, "__esModule", { value: true });
	createMetadataAccountV3.createMetadataAccountV3 = createMetadataAccountV3.getCreateMetadataAccountV3InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getCreateMetadataAccountV3InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['data', (0, types_1.getDataV2Serializer)()],
	        ['isMutable', (0, serializers_1.bool)()],
	        ['collectionDetails', (0, serializers_1.option)((0, types_1.getCollectionDetailsSerializer)())],
	    ], { description: 'CreateMetadataAccountV3InstructionData' }), (value) => ({ ...value, discriminator: 33 }));
	}
	createMetadataAccountV3.getCreateMetadataAccountV3InstructionDataSerializer = getCreateMetadataAccountV3InstructionDataSerializer;
	// Instruction.
	function createMetadataAccountV3$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        metadata: {
	            index: 0,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        mint: { index: 1, isWritable: false, value: input.mint ?? null },
	        mintAuthority: {
	            index: 2,
	            isWritable: false,
	            value: input.mintAuthority ?? null,
	        },
	        payer: {
	            index: 3,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        updateAuthority: {
	            index: 4,
	            isWritable: false,
	            value: input.updateAuthority ?? null,
	        },
	        systemProgram: {
	            index: 5,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        rent: { index: 6, isWritable: false, value: input.rent ?? null },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.updateAuthority.value) {
	        resolvedAccounts.updateAuthority.value = context.identity;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getCreateMetadataAccountV3InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	createMetadataAccountV3.createMetadataAccountV3 = createMetadataAccountV3$1;
	
	return createMetadataAccountV3;
}

var createV1 = {};

var hasRequiredCreateV1;

function requireCreateV1 () {
	if (hasRequiredCreateV1) return createV1;
	hasRequiredCreateV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(createV1, "__esModule", { value: true });
	createV1.createV1 = createV1.getCreateV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getCreateV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['createV1Discriminator', (0, serializers_1.u8)()],
	        ['name', (0, serializers_1.string)()],
	        ['symbol', (0, serializers_1.string)()],
	        ['uri', (0, serializers_1.string)()],
	        ['sellerFeeBasisPoints', (0, umi_1.mapAmountSerializer)((0, serializers_1.u16)(), '%', 2)],
	        ['creators', (0, serializers_1.option)((0, serializers_1.array)((0, types_1.getCreatorSerializer)()))],
	        ['primarySaleHappened', (0, serializers_1.bool)()],
	        ['isMutable', (0, serializers_1.bool)()],
	        ['tokenStandard', (0, types_1.getTokenStandardSerializer)()],
	        ['collection', (0, serializers_1.option)((0, types_1.getCollectionSerializer)())],
	        ['uses', (0, serializers_1.option)((0, types_1.getUsesSerializer)())],
	        ['collectionDetails', (0, serializers_1.option)((0, types_1.getCollectionDetailsSerializer)())],
	        ['ruleSet', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	        ['decimals', (0, serializers_1.option)((0, serializers_1.u8)())],
	        ['printSupply', (0, serializers_1.option)((0, types_1.getPrintSupplySerializer)())],
	    ], { description: 'CreateV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 42,
	        createV1Discriminator: 0,
	        symbol: value.symbol ?? '',
	        primarySaleHappened: value.primarySaleHappened ?? false,
	        isMutable: value.isMutable ?? true,
	        tokenStandard: value.tokenStandard ?? types_1.TokenStandard.NonFungible,
	        collection: value.collection ?? (0, umi_1.none)(),
	        uses: value.uses ?? (0, umi_1.none)(),
	        ruleSet: value.ruleSet ?? (0, umi_1.none)(),
	    }));
	}
	createV1.getCreateV1InstructionDataSerializer = getCreateV1InstructionDataSerializer;
	// Instruction.
	function createV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        metadata: {
	            index: 0,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 1,
	            isWritable: true,
	            value: input.masterEdition ?? null,
	        },
	        mint: { index: 2, isWritable: true, value: input.mint ?? null },
	        authority: {
	            index: 3,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 4,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        updateAuthority: {
	            index: 5,
	            isWritable: false,
	            value: input.updateAuthority ?? null,
	        },
	        systemProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 7,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 8,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedArgs.tokenStandard) {
	        resolvedArgs.tokenStandard = types_1.TokenStandard.NonFungible;
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, true)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.updateAuthority.value) {
	        resolvedAccounts.updateAuthority.value = (0, shared_1.expectSome)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        if ((0, hooked_1.resolveIsNonFungibleOrIsMintSigner)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	            resolvedAccounts.splTokenProgram.isWritable = false;
	        }
	    }
	    if (!resolvedArgs.creators) {
	        resolvedArgs.creators = (0, hooked_1.resolveCreators)(context, resolvedAccounts, resolvedArgs, programId, false);
	    }
	    if (!resolvedArgs.isCollection) {
	        resolvedArgs.isCollection = false;
	    }
	    if (!resolvedArgs.collectionDetails) {
	        resolvedArgs.collectionDetails = (0, hooked_1.resolveCollectionDetails)(context, resolvedAccounts, resolvedArgs, programId, false);
	    }
	    if (!resolvedArgs.decimals) {
	        resolvedArgs.decimals = (0, hooked_1.resolveDecimals)(context, resolvedAccounts, resolvedArgs, programId, false);
	    }
	    if (!resolvedArgs.printSupply) {
	        resolvedArgs.printSupply = (0, hooked_1.resolvePrintSupply)(context, resolvedAccounts, resolvedArgs, programId, false);
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getCreateV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = (0, hooked_1.resolveCreateV1Bytes)(context, resolvedAccounts, resolvedArgs, programId);
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	createV1.createV1 = createV1$1;
	
	return createV1;
}

var delegateAuthorityItemV1 = {};

var hasRequiredDelegateAuthorityItemV1;

function requireDelegateAuthorityItemV1 () {
	if (hasRequiredDelegateAuthorityItemV1) return delegateAuthorityItemV1;
	hasRequiredDelegateAuthorityItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateAuthorityItemV1, "__esModule", { value: true });
	delegateAuthorityItemV1.delegateAuthorityItemV1 = delegateAuthorityItemV1.getDelegateAuthorityItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateAuthorityItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateAuthorityItemV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateAuthorityItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateAuthorityItemV1Discriminator: 9,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateAuthorityItemV1.getDelegateAuthorityItemV1InstructionDataSerializer = getDelegateAuthorityItemV1InstructionDataSerializer;
	// Instruction.
	function delegateAuthorityItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.AuthorityItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateAuthorityItemV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateAuthorityItemV1.delegateAuthorityItemV1 = delegateAuthorityItemV1$1;
	
	return delegateAuthorityItemV1;
}

var delegateCollectionItemV1 = {};

var hasRequiredDelegateCollectionItemV1;

function requireDelegateCollectionItemV1 () {
	if (hasRequiredDelegateCollectionItemV1) return delegateCollectionItemV1;
	hasRequiredDelegateCollectionItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateCollectionItemV1, "__esModule", { value: true });
	delegateCollectionItemV1.delegateCollectionItemV1 = delegateCollectionItemV1.getDelegateCollectionItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateCollectionItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateCollectionItemV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateCollectionItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateCollectionItemV1Discriminator: 11,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateCollectionItemV1.getDelegateCollectionItemV1InstructionDataSerializer = getDelegateCollectionItemV1InstructionDataSerializer;
	// Instruction.
	function delegateCollectionItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.CollectionItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateCollectionItemV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateCollectionItemV1.delegateCollectionItemV1 = delegateCollectionItemV1$1;
	
	return delegateCollectionItemV1;
}

var delegateCollectionV1 = {};

var hasRequiredDelegateCollectionV1;

function requireDelegateCollectionV1 () {
	if (hasRequiredDelegateCollectionV1) return delegateCollectionV1;
	hasRequiredDelegateCollectionV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateCollectionV1, "__esModule", { value: true });
	delegateCollectionV1.delegateCollectionV1 = delegateCollectionV1.getDelegateCollectionV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateCollectionV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateCollectionV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateCollectionV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateCollectionV1Discriminator: 0,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateCollectionV1.getDelegateCollectionV1InstructionDataSerializer = getDelegateCollectionV1InstructionDataSerializer;
	// Instruction.
	function delegateCollectionV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.Collection,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateCollectionV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateCollectionV1.delegateCollectionV1 = delegateCollectionV1$1;
	
	return delegateCollectionV1;
}

var delegateDataItemV1 = {};

var hasRequiredDelegateDataItemV1;

function requireDelegateDataItemV1 () {
	if (hasRequiredDelegateDataItemV1) return delegateDataItemV1;
	hasRequiredDelegateDataItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateDataItemV1, "__esModule", { value: true });
	delegateDataItemV1.delegateDataItemV1 = delegateDataItemV1.getDelegateDataItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateDataItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateDataItemV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateDataItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateDataItemV1Discriminator: 10,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateDataItemV1.getDelegateDataItemV1InstructionDataSerializer = getDelegateDataItemV1InstructionDataSerializer;
	// Instruction.
	function delegateDataItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.DataItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateDataItemV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateDataItemV1.delegateDataItemV1 = delegateDataItemV1$1;
	
	return delegateDataItemV1;
}

var delegateDataV1 = {};

var hasRequiredDelegateDataV1;

function requireDelegateDataV1 () {
	if (hasRequiredDelegateDataV1) return delegateDataV1;
	hasRequiredDelegateDataV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateDataV1, "__esModule", { value: true });
	delegateDataV1.delegateDataV1 = delegateDataV1.getDelegateDataV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateDataV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateDataV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateDataV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateDataV1Discriminator: 3,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateDataV1.getDelegateDataV1InstructionDataSerializer = getDelegateDataV1InstructionDataSerializer;
	// Instruction.
	function delegateDataV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.Data,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateDataV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateDataV1.delegateDataV1 = delegateDataV1$1;
	
	return delegateDataV1;
}

var delegateLockedTransferV1 = {};

var hasRequiredDelegateLockedTransferV1;

function requireDelegateLockedTransferV1 () {
	if (hasRequiredDelegateLockedTransferV1) return delegateLockedTransferV1;
	hasRequiredDelegateLockedTransferV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateLockedTransferV1, "__esModule", { value: true });
	delegateLockedTransferV1.delegateLockedTransferV1 = delegateLockedTransferV1.getDelegateLockedTransferV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateLockedTransferV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateLockedTransferV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	        ['lockedAddress', (0, serializers_1.publicKey)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateLockedTransferV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateLockedTransferV1Discriminator: 7,
	        amount: value.amount ?? 1,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateLockedTransferV1.getDelegateLockedTransferV1InstructionDataSerializer = getDelegateLockedTransferV1InstructionDataSerializer;
	// Instruction.
	function delegateLockedTransferV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateLockedTransferV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateLockedTransferV1.delegateLockedTransferV1 = delegateLockedTransferV1$1;
	
	return delegateLockedTransferV1;
}

var delegatePrintDelegateV1 = {};

var hasRequiredDelegatePrintDelegateV1;

function requireDelegatePrintDelegateV1 () {
	if (hasRequiredDelegatePrintDelegateV1) return delegatePrintDelegateV1;
	hasRequiredDelegatePrintDelegateV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegatePrintDelegateV1, "__esModule", { value: true });
	delegatePrintDelegateV1.delegatePrintDelegateV1 = delegatePrintDelegateV1.getDelegatePrintDelegateV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegatePrintDelegateV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegatePrintDelegateV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegatePrintDelegateV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegatePrintDelegateV1Discriminator: 13,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegatePrintDelegateV1.getDelegatePrintDelegateV1InstructionDataSerializer = getDelegatePrintDelegateV1InstructionDataSerializer;
	// Instruction.
	function delegatePrintDelegateV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegatePrintDelegateV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegatePrintDelegateV1.delegatePrintDelegateV1 = delegatePrintDelegateV1$1;
	
	return delegatePrintDelegateV1;
}

var delegateProgrammableConfigItemV1 = {};

var hasRequiredDelegateProgrammableConfigItemV1;

function requireDelegateProgrammableConfigItemV1 () {
	if (hasRequiredDelegateProgrammableConfigItemV1) return delegateProgrammableConfigItemV1;
	hasRequiredDelegateProgrammableConfigItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateProgrammableConfigItemV1, "__esModule", { value: true });
	delegateProgrammableConfigItemV1.delegateProgrammableConfigItemV1 = delegateProgrammableConfigItemV1.getDelegateProgrammableConfigItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateProgrammableConfigItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateProgrammableConfigItemV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateProgrammableConfigItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateProgrammableConfigItemV1Discriminator: 12,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateProgrammableConfigItemV1.getDelegateProgrammableConfigItemV1InstructionDataSerializer = getDelegateProgrammableConfigItemV1InstructionDataSerializer;
	// Instruction.
	function delegateProgrammableConfigItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = {
	        ...input,
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.ProgrammableConfigItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateProgrammableConfigItemV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateProgrammableConfigItemV1.delegateProgrammableConfigItemV1 = delegateProgrammableConfigItemV1$1;
	
	return delegateProgrammableConfigItemV1;
}

var delegateProgrammableConfigV1 = {};

var hasRequiredDelegateProgrammableConfigV1;

function requireDelegateProgrammableConfigV1 () {
	if (hasRequiredDelegateProgrammableConfigV1) return delegateProgrammableConfigV1;
	hasRequiredDelegateProgrammableConfigV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateProgrammableConfigV1, "__esModule", { value: true });
	delegateProgrammableConfigV1.delegateProgrammableConfigV1 = delegateProgrammableConfigV1.getDelegateProgrammableConfigV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateProgrammableConfigV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateProgrammableConfigV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateProgrammableConfigV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateProgrammableConfigV1Discriminator: 8,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateProgrammableConfigV1.getDelegateProgrammableConfigV1InstructionDataSerializer = getDelegateProgrammableConfigV1InstructionDataSerializer;
	// Instruction.
	function delegateProgrammableConfigV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = {
	        ...input,
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.ProgrammableConfig,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateProgrammableConfigV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateProgrammableConfigV1.delegateProgrammableConfigV1 = delegateProgrammableConfigV1$1;
	
	return delegateProgrammableConfigV1;
}

var delegateSaleV1 = {};

var hasRequiredDelegateSaleV1;

function requireDelegateSaleV1 () {
	if (hasRequiredDelegateSaleV1) return delegateSaleV1;
	hasRequiredDelegateSaleV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateSaleV1, "__esModule", { value: true });
	delegateSaleV1.delegateSaleV1 = delegateSaleV1.getDelegateSaleV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateSaleV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateSaleV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateSaleV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateSaleV1Discriminator: 1,
	        amount: value.amount ?? 1,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateSaleV1.getDelegateSaleV1InstructionDataSerializer = getDelegateSaleV1InstructionDataSerializer;
	// Instruction.
	function delegateSaleV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateSaleV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateSaleV1.delegateSaleV1 = delegateSaleV1$1;
	
	return delegateSaleV1;
}

var delegateStakingV1 = {};

var hasRequiredDelegateStakingV1;

function requireDelegateStakingV1 () {
	if (hasRequiredDelegateStakingV1) return delegateStakingV1;
	hasRequiredDelegateStakingV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateStakingV1, "__esModule", { value: true });
	delegateStakingV1.delegateStakingV1 = delegateStakingV1.getDelegateStakingV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateStakingV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateStakingV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateStakingV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateStakingV1Discriminator: 5,
	        amount: value.amount ?? 1,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateStakingV1.getDelegateStakingV1InstructionDataSerializer = getDelegateStakingV1InstructionDataSerializer;
	// Instruction.
	function delegateStakingV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateStakingV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateStakingV1.delegateStakingV1 = delegateStakingV1$1;
	
	return delegateStakingV1;
}

var delegateStandardV1 = {};

var hasRequiredDelegateStandardV1;

function requireDelegateStandardV1 () {
	if (hasRequiredDelegateStandardV1) return delegateStandardV1;
	hasRequiredDelegateStandardV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateStandardV1, "__esModule", { value: true });
	delegateStandardV1.delegateStandardV1 = delegateStandardV1.getDelegateStandardV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getDelegateStandardV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateStandardV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	    ], { description: 'DelegateStandardV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateStandardV1Discriminator: 6,
	        amount: value.amount ?? 1,
	    }));
	}
	delegateStandardV1.getDelegateStandardV1InstructionDataSerializer = getDelegateStandardV1InstructionDataSerializer;
	// Instruction.
	function delegateStandardV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateStandardV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateStandardV1.delegateStandardV1 = delegateStandardV1$1;
	
	return delegateStandardV1;
}

var delegateTransferV1 = {};

var hasRequiredDelegateTransferV1;

function requireDelegateTransferV1 () {
	if (hasRequiredDelegateTransferV1) return delegateTransferV1;
	hasRequiredDelegateTransferV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateTransferV1, "__esModule", { value: true });
	delegateTransferV1.delegateTransferV1 = delegateTransferV1.getDelegateTransferV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateTransferV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateTransferV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateTransferV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateTransferV1Discriminator: 2,
	        amount: value.amount ?? 1,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateTransferV1.getDelegateTransferV1InstructionDataSerializer = getDelegateTransferV1InstructionDataSerializer;
	// Instruction.
	function delegateTransferV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateTransferV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateTransferV1.delegateTransferV1 = delegateTransferV1$1;
	
	return delegateTransferV1;
}

var delegateUtilityV1 = {};

var hasRequiredDelegateUtilityV1;

function requireDelegateUtilityV1 () {
	if (hasRequiredDelegateUtilityV1) return delegateUtilityV1;
	hasRequiredDelegateUtilityV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(delegateUtilityV1, "__esModule", { value: true });
	delegateUtilityV1.delegateUtilityV1 = delegateUtilityV1.getDelegateUtilityV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getDelegateUtilityV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['delegateUtilityV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'DelegateUtilityV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 44,
	        delegateUtilityV1Discriminator: 4,
	        amount: value.amount ?? 1,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	delegateUtilityV1.getDelegateUtilityV1InstructionDataSerializer = getDelegateUtilityV1InstructionDataSerializer;
	// Instruction.
	function delegateUtilityV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getDelegateUtilityV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	delegateUtilityV1.delegateUtilityV1 = delegateUtilityV1$1;
	
	return delegateUtilityV1;
}

var deprecatedMintNewEditionFromMasterEditionViaPrintingToken = {};

var hasRequiredDeprecatedMintNewEditionFromMasterEditionViaPrintingToken;

function requireDeprecatedMintNewEditionFromMasterEditionViaPrintingToken () {
	if (hasRequiredDeprecatedMintNewEditionFromMasterEditionViaPrintingToken) return deprecatedMintNewEditionFromMasterEditionViaPrintingToken;
	hasRequiredDeprecatedMintNewEditionFromMasterEditionViaPrintingToken = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(deprecatedMintNewEditionFromMasterEditionViaPrintingToken, "__esModule", { value: true });
	deprecatedMintNewEditionFromMasterEditionViaPrintingToken.deprecatedMintNewEditionFromMasterEditionViaPrintingToken = deprecatedMintNewEditionFromMasterEditionViaPrintingToken.getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData',
	    }), (value) => ({ ...value, discriminator: 3 }));
	}
	deprecatedMintNewEditionFromMasterEditionViaPrintingToken.getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer = getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer;
	// Instruction.
	function deprecatedMintNewEditionFromMasterEditionViaPrintingToken$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        metadata: {
	            index: 0,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 1,
	            isWritable: true,
	            value: input.edition ?? null,
	        },
	        masterEdition: {
	            index: 2,
	            isWritable: true,
	            value: input.masterEdition ?? null,
	        },
	        mint: { index: 3, isWritable: true, value: input.mint ?? null },
	        mintAuthority: {
	            index: 4,
	            isWritable: false,
	            value: input.mintAuthority ?? null,
	        },
	        printingMint: {
	            index: 5,
	            isWritable: true,
	            value: input.printingMint ?? null,
	        },
	        masterTokenAccount: {
	            index: 6,
	            isWritable: true,
	            value: input.masterTokenAccount ?? null,
	        },
	        editionMarker: {
	            index: 7,
	            isWritable: true,
	            value: input.editionMarker ?? null,
	        },
	        burnAuthority: {
	            index: 8,
	            isWritable: false,
	            value: input.burnAuthority ?? null,
	        },
	        payer: {
	            index: 9,
	            isWritable: false,
	            value: input.payer ?? null,
	        },
	        masterUpdateAuthority: {
	            index: 10,
	            isWritable: false,
	            value: input.masterUpdateAuthority ?? null,
	        },
	        masterMetadata: {
	            index: 11,
	            isWritable: false,
	            value: input.masterMetadata ?? null,
	        },
	        tokenProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.tokenProgram ?? null,
	        },
	        systemProgram: {
	            index: 13,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        rent: {
	            index: 14,
	            isWritable: false,
	            value: input.rent ?? null,
	        },
	        reservationList: {
	            index: 15,
	            isWritable: true,
	            value: input.reservationList ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.editionMarker.value) {
	        resolvedAccounts.editionMarker.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.tokenProgram.value) {
	        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.tokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.rent.value) {
	        resolvedAccounts.rent.value = (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111');
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	deprecatedMintNewEditionFromMasterEditionViaPrintingToken.deprecatedMintNewEditionFromMasterEditionViaPrintingToken = deprecatedMintNewEditionFromMasterEditionViaPrintingToken$1;
	
	return deprecatedMintNewEditionFromMasterEditionViaPrintingToken;
}

var freezeDelegatedAccount = {};

var hasRequiredFreezeDelegatedAccount;

function requireFreezeDelegatedAccount () {
	if (hasRequiredFreezeDelegatedAccount) return freezeDelegatedAccount;
	hasRequiredFreezeDelegatedAccount = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(freezeDelegatedAccount, "__esModule", { value: true });
	freezeDelegatedAccount.freezeDelegatedAccount = freezeDelegatedAccount.getFreezeDelegatedAccountInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getFreezeDelegatedAccountInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'FreezeDelegatedAccountInstructionData',
	    }), (value) => ({ ...value, discriminator: 26 }));
	}
	freezeDelegatedAccount.getFreezeDelegatedAccountInstructionDataSerializer = getFreezeDelegatedAccountInstructionDataSerializer;
	// Instruction.
	function freezeDelegatedAccount$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegate: {
	            index: 0,
	            isWritable: true,
	            value: input.delegate ?? null,
	        },
	        tokenAccount: {
	            index: 1,
	            isWritable: true,
	            value: input.tokenAccount ?? null,
	        },
	        edition: {
	            index: 2,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        tokenProgram: {
	            index: 4,
	            isWritable: false,
	            value: input.tokenProgram ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.tokenProgram.value) {
	        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.tokenProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getFreezeDelegatedAccountInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	freezeDelegatedAccount.freezeDelegatedAccount = freezeDelegatedAccount$1;
	
	return freezeDelegatedAccount;
}

var lockV1 = {};

var hasRequiredLockV1;

function requireLockV1 () {
	if (hasRequiredLockV1) return lockV1;
	hasRequiredLockV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(lockV1, "__esModule", { value: true });
	lockV1.lockV1 = lockV1.getLockV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getLockV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['lockV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'LockV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 46,
	        lockV1Discriminator: 0,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	lockV1.getLockV1InstructionDataSerializer = getLockV1InstructionDataSerializer;
	// Instruction.
	function lockV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        tokenOwner: {
	            index: 1,
	            isWritable: false,
	            value: input.tokenOwner ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        tokenRecord: {
	            index: 6,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        payer: {
	            index: 7,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 8,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 9,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 10,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.tokenOwner.value) {
	        resolvedAccounts.tokenOwner = {
	            ...resolvedAccounts.tokenOwner,
	            ...(0, hooked_1.resolveOptionalTokenOwner)(context, resolvedAccounts, resolvedArgs, programId, false),
	        };
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.tokenOwner.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        if (resolvedArgs.tokenStandard !== types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	            resolvedAccounts.splTokenProgram.isWritable = false;
	        }
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getLockV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	lockV1.lockV1 = lockV1$1;
	
	return lockV1;
}

var migrate = {};

var hasRequiredMigrate;

function requireMigrate () {
	if (hasRequiredMigrate) return migrate;
	hasRequiredMigrate = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(migrate, "__esModule", { value: true });
	migrate.migrate = migrate.getMigrateInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getMigrateInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'MigrateInstructionData',
	    }), (value) => ({ ...value, discriminator: 48 }));
	}
	migrate.getMigrateInstructionDataSerializer = getMigrateInstructionDataSerializer;
	// Instruction.
	function migrate$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        metadata: {
	            index: 0,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 1,
	            isWritable: true,
	            value: input.edition ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        tokenOwner: {
	            index: 3,
	            isWritable: false,
	            value: input.tokenOwner ?? null,
	        },
	        mint: { index: 4, isWritable: false, value: input.mint ?? null },
	        payer: {
	            index: 5,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        authority: {
	            index: 6,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        collectionMetadata: {
	            index: 7,
	            isWritable: false,
	            value: input.collectionMetadata ?? null,
	        },
	        delegateRecord: {
	            index: 8,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        tokenRecord: {
	            index: 9,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        systemProgram: {
	            index: 10,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 11,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 14,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getMigrateInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	migrate.migrate = migrate$1;
	
	return migrate;
}

var mintNewEditionFromMasterEditionViaToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mintNewEditionFromMasterEditionViaToken$1, "__esModule", { value: true });
mintNewEditionFromMasterEditionViaToken$1.mintNewEditionFromMasterEditionViaToken = mintNewEditionFromMasterEditionViaToken$1.getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer = void 0;
const umi_1$h = cjs$6;
const serializers_1$g = serializers;
const shared_1$g = shared;
const types_1$3 = requireTypes();
function getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer() {
    return (0, serializers_1$g.mapSerializer)((0, serializers_1$g.struct)([
        ['discriminator', (0, serializers_1$g.u8)()],
        [
            'mintNewEditionFromMasterEditionViaTokenArgs',
            (0, types_1$3.getMintNewEditionFromMasterEditionViaTokenArgsSerializer)(),
        ],
    ], { description: 'MintNewEditionFromMasterEditionViaTokenInstructionData' }), (value) => ({ ...value, discriminator: 11 }));
}
mintNewEditionFromMasterEditionViaToken$1.getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer = getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer;
// Instruction.
function mintNewEditionFromMasterEditionViaToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        newMetadata: {
            index: 0,
            isWritable: true,
            value: input.newMetadata ?? null,
        },
        newEdition: {
            index: 1,
            isWritable: true,
            value: input.newEdition ?? null,
        },
        masterEdition: {
            index: 2,
            isWritable: true,
            value: input.masterEdition ?? null,
        },
        newMint: {
            index: 3,
            isWritable: true,
            value: input.newMint ?? null,
        },
        editionMarkPda: {
            index: 4,
            isWritable: true,
            value: input.editionMarkPda ?? null,
        },
        newMintAuthority: {
            index: 5,
            isWritable: false,
            value: input.newMintAuthority ?? null,
        },
        payer: {
            index: 6,
            isWritable: true,
            value: input.payer ?? null,
        },
        tokenAccountOwner: {
            index: 7,
            isWritable: false,
            value: input.tokenAccountOwner ?? null,
        },
        tokenAccount: {
            index: 8,
            isWritable: false,
            value: input.tokenAccount ?? null,
        },
        newMetadataUpdateAuthority: {
            index: 9,
            isWritable: false,
            value: input.newMetadataUpdateAuthority ?? null,
        },
        metadata: {
            index: 10,
            isWritable: false,
            value: input.metadata ?? null,
        },
        tokenProgram: {
            index: 11,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        systemProgram: {
            index: 12,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        rent: {
            index: 13,
            isWritable: false,
            value: input.rent ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = {
        ...input,
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$g.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$h.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
mintNewEditionFromMasterEditionViaToken$1.mintNewEditionFromMasterEditionViaToken = mintNewEditionFromMasterEditionViaToken;

var mintNewEditionFromMasterEditionViaVaultProxy$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(mintNewEditionFromMasterEditionViaVaultProxy$1, "__esModule", { value: true });
mintNewEditionFromMasterEditionViaVaultProxy$1.mintNewEditionFromMasterEditionViaVaultProxy = mintNewEditionFromMasterEditionViaVaultProxy$1.getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer = void 0;
const umi_1$g = cjs$6;
const serializers_1$f = serializers;
const shared_1$f = shared;
const types_1$2 = requireTypes();
function getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer() {
    return (0, serializers_1$f.mapSerializer)((0, serializers_1$f.struct)([
        ['discriminator', (0, serializers_1$f.u8)()],
        [
            'mintNewEditionFromMasterEditionViaTokenArgs',
            (0, types_1$2.getMintNewEditionFromMasterEditionViaTokenArgsSerializer)(),
        ],
    ], {
        description: 'MintNewEditionFromMasterEditionViaVaultProxyInstructionData',
    }), (value) => ({ ...value, discriminator: 13 }));
}
mintNewEditionFromMasterEditionViaVaultProxy$1.getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer = getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer;
// Instruction.
function mintNewEditionFromMasterEditionViaVaultProxy(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        newMetadata: {
            index: 0,
            isWritable: true,
            value: input.newMetadata ?? null,
        },
        newEdition: {
            index: 1,
            isWritable: true,
            value: input.newEdition ?? null,
        },
        masterEdition: {
            index: 2,
            isWritable: true,
            value: input.masterEdition ?? null,
        },
        newMint: {
            index: 3,
            isWritable: true,
            value: input.newMint ?? null,
        },
        editionMarkPda: {
            index: 4,
            isWritable: true,
            value: input.editionMarkPda ?? null,
        },
        newMintAuthority: {
            index: 5,
            isWritable: false,
            value: input.newMintAuthority ?? null,
        },
        payer: {
            index: 6,
            isWritable: true,
            value: input.payer ?? null,
        },
        vaultAuthority: {
            index: 7,
            isWritable: false,
            value: input.vaultAuthority ?? null,
        },
        safetyDepositStore: {
            index: 8,
            isWritable: false,
            value: input.safetyDepositStore ?? null,
        },
        safetyDepositBox: {
            index: 9,
            isWritable: false,
            value: input.safetyDepositBox ?? null,
        },
        vault: {
            index: 10,
            isWritable: false,
            value: input.vault ?? null,
        },
        newMetadataUpdateAuthority: {
            index: 11,
            isWritable: false,
            value: input.newMetadataUpdateAuthority ?? null,
        },
        metadata: {
            index: 12,
            isWritable: false,
            value: input.metadata ?? null,
        },
        tokenProgram: {
            index: 13,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        tokenVaultProgram: {
            index: 14,
            isWritable: false,
            value: input.tokenVaultProgram ?? null,
        },
        systemProgram: {
            index: 15,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        rent: {
            index: 16,
            isWritable: false,
            value: input.rent ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$f.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$g.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
mintNewEditionFromMasterEditionViaVaultProxy$1.mintNewEditionFromMasterEditionViaVaultProxy = mintNewEditionFromMasterEditionViaVaultProxy;

var mintV1 = {};

var hasRequiredMintV1;

function requireMintV1 () {
	if (hasRequiredMintV1) return mintV1;
	hasRequiredMintV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(mintV1, "__esModule", { value: true });
	mintV1.mintV1 = mintV1.getMintV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getMintV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['mintV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'MintV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 43,
	        mintV1Discriminator: 0,
	        amount: value.amount ?? 1,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	mintV1.getMintV1InstructionDataSerializer = getMintV1InstructionDataSerializer;
	// Instruction.
	function mintV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        token: {
	            index: 0,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        tokenOwner: {
	            index: 1,
	            isWritable: false,
	            value: input.tokenOwner ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: false,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: true,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: true, value: input.mint ?? null },
	        authority: {
	            index: 6,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 7,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        splAtaProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.splAtaProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 14,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.tokenOwner.value) {
	        resolvedAccounts.tokenOwner = {
	            ...resolvedAccounts.tokenOwner,
	            ...(0, hooked_1.resolveOptionalTokenOwner)(context, resolvedAccounts, resolvedArgs, programId, false),
	        };
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.tokenOwner.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, true)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.splAtaProgram.value) {
	        resolvedAccounts.splAtaProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
	        resolvedAccounts.splAtaProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getMintV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 468;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	mintV1.mintV1 = mintV1$1;
	
	return mintV1;
}

var printV1 = {};

var hasRequiredPrintV1;

function requirePrintV1 () {
	if (hasRequiredPrintV1) return printV1;
	hasRequiredPrintV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(printV1, "__esModule", { value: true });
	printV1.printV1 = printV1.getPrintV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getPrintV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['printV1Discriminator', (0, serializers_1.u8)()],
	        ['editionNumber', (0, serializers_1.u64)()],
	    ], { description: 'PrintV1InstructionData' }), (value) => ({ ...value, discriminator: 55, printV1Discriminator: 0 }));
	}
	printV1.getPrintV1InstructionDataSerializer = getPrintV1InstructionDataSerializer;
	// Instruction.
	function printV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        editionMetadata: {
	            index: 0,
	            isWritable: true,
	            value: input.editionMetadata ?? null,
	        },
	        edition: {
	            index: 1,
	            isWritable: true,
	            value: input.edition ?? null,
	        },
	        editionMint: {
	            index: 2,
	            isWritable: true,
	            value: input.editionMint ?? null,
	        },
	        editionTokenAccountOwner: {
	            index: 3,
	            isWritable: false,
	            value: input.editionTokenAccountOwner ?? null,
	        },
	        editionTokenAccount: {
	            index: 4,
	            isWritable: true,
	            value: input.editionTokenAccount ?? null,
	        },
	        editionMintAuthority: {
	            index: 5,
	            isWritable: false,
	            value: input.editionMintAuthority ?? null,
	        },
	        editionTokenRecord: {
	            index: 6,
	            isWritable: true,
	            value: input.editionTokenRecord ?? null,
	        },
	        masterEdition: {
	            index: 7,
	            isWritable: true,
	            value: input.masterEdition ?? null,
	        },
	        editionMarkerPda: {
	            index: 8,
	            isWritable: true,
	            value: input.editionMarkerPda ?? null,
	        },
	        payer: {
	            index: 9,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        masterTokenAccountOwner: {
	            index: 10,
	            isWritable: false,
	            value: input.masterTokenAccountOwner ?? null,
	        },
	        masterTokenAccount: {
	            index: 11,
	            isWritable: false,
	            value: input.masterTokenAccount ?? null,
	        },
	        masterMetadata: {
	            index: 12,
	            isWritable: false,
	            value: input.masterMetadata ?? null,
	        },
	        updateAuthority: {
	            index: 13,
	            isWritable: false,
	            value: input.updateAuthority ?? null,
	        },
	        splTokenProgram: {
	            index: 14,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        splAtaProgram: {
	            index: 15,
	            isWritable: false,
	            value: input.splAtaProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 16,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        systemProgram: {
	            index: 17,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.editionMetadata.value) {
	        resolvedAccounts.editionMetadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	        });
	    }
	    if (!resolvedAccounts.editionTokenAccountOwner.value) {
	        resolvedAccounts.editionTokenAccountOwner.value =
	            context.identity.publicKey;
	    }
	    if (!resolvedAccounts.editionTokenAccount.value) {
	        resolvedAccounts.editionTokenAccount.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.editionTokenAccountOwner.value),
	        });
	    }
	    if (!resolvedAccounts.masterTokenAccountOwner.value) {
	        resolvedAccounts.masterTokenAccountOwner.value = context.identity;
	    }
	    if (!resolvedAccounts.editionMintAuthority.value) {
	        resolvedAccounts.editionMintAuthority.value = (0, shared_1.expectSome)(resolvedAccounts.masterTokenAccountOwner.value);
	    }
	    if (!resolvedAccounts.editionTokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.editionTokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.editionTokenAccount.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	        });
	    }
	    if (!resolvedAccounts.editionMarkerPda.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.editionMarkerPda.value = (0, accounts_1.findEditionMarkerV2Pda)(context, { mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint) });
	        }
	        else {
	            resolvedAccounts.editionMarkerPda.value =
	                (0, hooked_1.findEditionMarkerFromEditionNumberPda)(context, {
	                    mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	                    editionNumber: (0, shared_1.expectSome)(resolvedArgs.editionNumber),
	                });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.masterTokenAccount.value) {
	        resolvedAccounts.masterTokenAccount.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.masterTokenAccountOwner.value),
	        });
	    }
	    if (!resolvedAccounts.masterMetadata.value) {
	        resolvedAccounts.masterMetadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	        });
	    }
	    if (!resolvedAccounts.updateAuthority.value) {
	        resolvedAccounts.updateAuthority.value = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.splAtaProgram.value) {
	        resolvedAccounts.splAtaProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
	        resolvedAccounts.splAtaProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getPrintV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	printV1.printV1 = printV1$1;
	
	return printV1;
}

var printV2 = {};

var hasRequiredPrintV2;

function requirePrintV2 () {
	if (hasRequiredPrintV2) return printV2;
	hasRequiredPrintV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(printV2, "__esModule", { value: true });
	printV2.printV2 = printV2.getPrintV2InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getPrintV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['printV2Discriminator', (0, serializers_1.u8)()],
	        ['editionNumber', (0, serializers_1.u64)()],
	    ], { description: 'PrintV2InstructionData' }), (value) => ({ ...value, discriminator: 55, printV2Discriminator: 1 }));
	}
	printV2.getPrintV2InstructionDataSerializer = getPrintV2InstructionDataSerializer;
	// Instruction.
	function printV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        editionMetadata: {
	            index: 0,
	            isWritable: true,
	            value: input.editionMetadata ?? null,
	        },
	        edition: {
	            index: 1,
	            isWritable: true,
	            value: input.edition ?? null,
	        },
	        editionMint: {
	            index: 2,
	            isWritable: true,
	            value: input.editionMint ?? null,
	        },
	        editionTokenAccountOwner: {
	            index: 3,
	            isWritable: false,
	            value: input.editionTokenAccountOwner ?? null,
	        },
	        editionTokenAccount: {
	            index: 4,
	            isWritable: true,
	            value: input.editionTokenAccount ?? null,
	        },
	        editionMintAuthority: {
	            index: 5,
	            isWritable: false,
	            value: input.editionMintAuthority ?? null,
	        },
	        editionTokenRecord: {
	            index: 6,
	            isWritable: true,
	            value: input.editionTokenRecord ?? null,
	        },
	        masterEdition: {
	            index: 7,
	            isWritable: true,
	            value: input.masterEdition ?? null,
	        },
	        editionMarkerPda: {
	            index: 8,
	            isWritable: true,
	            value: input.editionMarkerPda ?? null,
	        },
	        payer: {
	            index: 9,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        masterTokenAccountOwner: {
	            index: 10,
	            isWritable: false,
	            value: input.masterTokenAccountOwner ?? null,
	        },
	        masterTokenAccount: {
	            index: 11,
	            isWritable: false,
	            value: input.masterTokenAccount ?? null,
	        },
	        masterMetadata: {
	            index: 12,
	            isWritable: false,
	            value: input.masterMetadata ?? null,
	        },
	        updateAuthority: {
	            index: 13,
	            isWritable: false,
	            value: input.updateAuthority ?? null,
	        },
	        splTokenProgram: {
	            index: 14,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        splAtaProgram: {
	            index: 15,
	            isWritable: false,
	            value: input.splAtaProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 16,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        systemProgram: {
	            index: 17,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        holderDelegateRecord: {
	            index: 18,
	            isWritable: false,
	            value: input.holderDelegateRecord ?? null,
	        },
	        delegate: {
	            index: 19,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.editionMetadata.value) {
	        resolvedAccounts.editionMetadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	        });
	    }
	    if (!resolvedAccounts.editionTokenAccountOwner.value) {
	        resolvedAccounts.editionTokenAccountOwner.value =
	            context.identity.publicKey;
	    }
	    if (!resolvedAccounts.editionTokenAccount.value) {
	        resolvedAccounts.editionTokenAccount.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.editionTokenAccountOwner.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.editionMintAuthority.value) {
	        if (resolvedAccounts.holderDelegateRecord.value) {
	            if (resolvedAccounts.delegate.value) {
	                resolvedAccounts.editionMintAuthority.value = (0, shared_1.expectSome)(resolvedAccounts.delegate.value);
	            }
	            else {
	                resolvedAccounts.editionMintAuthority.value = (0, shared_1.expectSome)(resolvedAccounts.payer.value);
	            }
	        }
	        else {
	            resolvedAccounts.editionMintAuthority.value = context.identity;
	        }
	    }
	    if (!resolvedAccounts.editionTokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.editionTokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.editionMint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.editionTokenAccount.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	        });
	    }
	    if (!resolvedAccounts.editionMarkerPda.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.editionMarkerPda.value = (0, accounts_1.findEditionMarkerV2Pda)(context, { mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint) });
	        }
	        else {
	            resolvedAccounts.editionMarkerPda.value =
	                (0, hooked_1.findEditionMarkerFromEditionNumberPda)(context, {
	                    mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	                    editionNumber: (0, shared_1.expectSome)(resolvedArgs.editionNumber),
	                });
	        }
	    }
	    if (!resolvedAccounts.masterTokenAccountOwner.value) {
	        if (!resolvedAccounts.holderDelegateRecord.value) {
	            resolvedAccounts.masterTokenAccountOwner.value = context.identity;
	        }
	    }
	    if (!resolvedAccounts.masterTokenAccount.value) {
	        resolvedAccounts.masterTokenAccount.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.masterTokenAccountOwner.value),
	        });
	    }
	    if (!resolvedAccounts.masterMetadata.value) {
	        resolvedAccounts.masterMetadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.masterEditionMint),
	        });
	    }
	    if (!resolvedAccounts.updateAuthority.value) {
	        resolvedAccounts.updateAuthority.value = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.splAtaProgram.value) {
	        resolvedAccounts.splAtaProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
	        resolvedAccounts.splAtaProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getPrintV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	printV2.printV2 = printV2$1;
	
	return printV2;
}

var puffMetadata$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(puffMetadata$1, "__esModule", { value: true });
puffMetadata$1.puffMetadata = puffMetadata$1.getPuffMetadataInstructionDataSerializer = void 0;
const umi_1$f = cjs$6;
const serializers_1$e = serializers;
const shared_1$e = shared;
function getPuffMetadataInstructionDataSerializer() {
    return (0, serializers_1$e.mapSerializer)((0, serializers_1$e.struct)([['discriminator', (0, serializers_1$e.u8)()]], {
        description: 'PuffMetadataInstructionData',
    }), (value) => ({ ...value, discriminator: 14 }));
}
puffMetadata$1.getPuffMetadataInstructionDataSerializer = getPuffMetadataInstructionDataSerializer;
// Instruction.
function puffMetadata(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$e.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getPuffMetadataInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$f.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
puffMetadata$1.puffMetadata = puffMetadata;

var removeCreatorVerification$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(removeCreatorVerification$1, "__esModule", { value: true });
removeCreatorVerification$1.removeCreatorVerification = removeCreatorVerification$1.getRemoveCreatorVerificationInstructionDataSerializer = void 0;
const umi_1$e = cjs$6;
const serializers_1$d = serializers;
const shared_1$d = shared;
function getRemoveCreatorVerificationInstructionDataSerializer() {
    return (0, serializers_1$d.mapSerializer)((0, serializers_1$d.struct)([['discriminator', (0, serializers_1$d.u8)()]], { description: 'RemoveCreatorVerificationInstructionData' }), (value) => ({ ...value, discriminator: 28 }));
}
removeCreatorVerification$1.getRemoveCreatorVerificationInstructionDataSerializer = getRemoveCreatorVerificationInstructionDataSerializer;
// Instruction.
function removeCreatorVerification(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        creator: {
            index: 1,
            isWritable: false,
            value: input.creator ?? null,
        },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$d.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getRemoveCreatorVerificationInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$e.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
removeCreatorVerification$1.removeCreatorVerification = removeCreatorVerification;

var revokeAuthorityItemV1 = {};

var hasRequiredRevokeAuthorityItemV1;

function requireRevokeAuthorityItemV1 () {
	if (hasRequiredRevokeAuthorityItemV1) return revokeAuthorityItemV1;
	hasRequiredRevokeAuthorityItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeAuthorityItemV1, "__esModule", { value: true });
	revokeAuthorityItemV1.revokeAuthorityItemV1 = revokeAuthorityItemV1.getRevokeAuthorityItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeAuthorityItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeAuthorityItemV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeAuthorityItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeAuthorityItemV1Discriminator: 10,
	    }));
	}
	revokeAuthorityItemV1.getRevokeAuthorityItemV1InstructionDataSerializer = getRevokeAuthorityItemV1InstructionDataSerializer;
	// Instruction.
	function revokeAuthorityItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.AuthorityItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeAuthorityItemV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeAuthorityItemV1.revokeAuthorityItemV1 = revokeAuthorityItemV1$1;
	
	return revokeAuthorityItemV1;
}

var revokeCollectionAuthority = {};

var hasRequiredRevokeCollectionAuthority;

function requireRevokeCollectionAuthority () {
	if (hasRequiredRevokeCollectionAuthority) return revokeCollectionAuthority;
	hasRequiredRevokeCollectionAuthority = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeCollectionAuthority, "__esModule", { value: true });
	revokeCollectionAuthority.revokeCollectionAuthority = revokeCollectionAuthority.getRevokeCollectionAuthorityInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getRevokeCollectionAuthorityInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], { description: 'RevokeCollectionAuthorityInstructionData' }), (value) => ({ ...value, discriminator: 24 }));
	}
	revokeCollectionAuthority.getRevokeCollectionAuthorityInstructionDataSerializer = getRevokeCollectionAuthorityInstructionDataSerializer;
	// Instruction.
	function revokeCollectionAuthority$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        collectionAuthorityRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.collectionAuthorityRecord ?? null,
	        },
	        delegateAuthority: {
	            index: 1,
	            isWritable: true,
	            value: input.delegateAuthority ?? null,
	        },
	        revokeAuthority: {
	            index: 2,
	            isWritable: true,
	            value: input.revokeAuthority ?? null,
	        },
	        metadata: {
	            index: 3,
	            isWritable: false,
	            value: input.metadata ?? null,
	        },
	        mint: { index: 4, isWritable: false, value: input.mint ?? null },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeCollectionAuthorityInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeCollectionAuthority.revokeCollectionAuthority = revokeCollectionAuthority$1;
	
	return revokeCollectionAuthority;
}

var revokeCollectionItemV1 = {};

var hasRequiredRevokeCollectionItemV1;

function requireRevokeCollectionItemV1 () {
	if (hasRequiredRevokeCollectionItemV1) return revokeCollectionItemV1;
	hasRequiredRevokeCollectionItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeCollectionItemV1, "__esModule", { value: true });
	revokeCollectionItemV1.revokeCollectionItemV1 = revokeCollectionItemV1.getRevokeCollectionItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeCollectionItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeCollectionItemV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeCollectionItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeCollectionItemV1Discriminator: 12,
	    }));
	}
	revokeCollectionItemV1.getRevokeCollectionItemV1InstructionDataSerializer = getRevokeCollectionItemV1InstructionDataSerializer;
	// Instruction.
	function revokeCollectionItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.CollectionItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeCollectionItemV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeCollectionItemV1.revokeCollectionItemV1 = revokeCollectionItemV1$1;
	
	return revokeCollectionItemV1;
}

var revokeCollectionV1 = {};

var hasRequiredRevokeCollectionV1;

function requireRevokeCollectionV1 () {
	if (hasRequiredRevokeCollectionV1) return revokeCollectionV1;
	hasRequiredRevokeCollectionV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeCollectionV1, "__esModule", { value: true });
	revokeCollectionV1.revokeCollectionV1 = revokeCollectionV1.getRevokeCollectionV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeCollectionV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeCollectionV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeCollectionV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeCollectionV1Discriminator: 0,
	    }));
	}
	revokeCollectionV1.getRevokeCollectionV1InstructionDataSerializer = getRevokeCollectionV1InstructionDataSerializer;
	// Instruction.
	function revokeCollectionV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.Collection,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeCollectionV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeCollectionV1.revokeCollectionV1 = revokeCollectionV1$1;
	
	return revokeCollectionV1;
}

var revokeDataItemV1 = {};

var hasRequiredRevokeDataItemV1;

function requireRevokeDataItemV1 () {
	if (hasRequiredRevokeDataItemV1) return revokeDataItemV1;
	hasRequiredRevokeDataItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeDataItemV1, "__esModule", { value: true });
	revokeDataItemV1.revokeDataItemV1 = revokeDataItemV1.getRevokeDataItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeDataItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeDataItemV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeDataItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeDataItemV1Discriminator: 11,
	    }));
	}
	revokeDataItemV1.getRevokeDataItemV1InstructionDataSerializer = getRevokeDataItemV1InstructionDataSerializer;
	// Instruction.
	function revokeDataItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.DataItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeDataItemV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeDataItemV1.revokeDataItemV1 = revokeDataItemV1$1;
	
	return revokeDataItemV1;
}

var revokeDataV1 = {};

var hasRequiredRevokeDataV1;

function requireRevokeDataV1 () {
	if (hasRequiredRevokeDataV1) return revokeDataV1;
	hasRequiredRevokeDataV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeDataV1, "__esModule", { value: true });
	revokeDataV1.revokeDataV1 = revokeDataV1.getRevokeDataV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeDataV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeDataV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeDataV1InstructionData' }), (value) => ({ ...value, discriminator: 45, revokeDataV1Discriminator: 3 }));
	}
	revokeDataV1.getRevokeDataV1InstructionDataSerializer = getRevokeDataV1InstructionDataSerializer;
	// Instruction.
	function revokeDataV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.Data,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeDataV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeDataV1.revokeDataV1 = revokeDataV1$1;
	
	return revokeDataV1;
}

var revokeLockedTransferV1 = {};

var hasRequiredRevokeLockedTransferV1;

function requireRevokeLockedTransferV1 () {
	if (hasRequiredRevokeLockedTransferV1) return revokeLockedTransferV1;
	hasRequiredRevokeLockedTransferV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeLockedTransferV1, "__esModule", { value: true });
	revokeLockedTransferV1.revokeLockedTransferV1 = revokeLockedTransferV1.getRevokeLockedTransferV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeLockedTransferV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeLockedTransferV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeLockedTransferV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeLockedTransferV1Discriminator: 7,
	    }));
	}
	revokeLockedTransferV1.getRevokeLockedTransferV1InstructionDataSerializer = getRevokeLockedTransferV1InstructionDataSerializer;
	// Instruction.
	function revokeLockedTransferV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeLockedTransferV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeLockedTransferV1.revokeLockedTransferV1 = revokeLockedTransferV1$1;
	
	return revokeLockedTransferV1;
}

var revokeMigrationV1 = {};

var hasRequiredRevokeMigrationV1;

function requireRevokeMigrationV1 () {
	if (hasRequiredRevokeMigrationV1) return revokeMigrationV1;
	hasRequiredRevokeMigrationV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeMigrationV1, "__esModule", { value: true });
	revokeMigrationV1.revokeMigrationV1 = revokeMigrationV1.getRevokeMigrationV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeMigrationV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeMigrationV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeMigrationV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeMigrationV1Discriminator: 9,
	    }));
	}
	revokeMigrationV1.getRevokeMigrationV1InstructionDataSerializer = getRevokeMigrationV1InstructionDataSerializer;
	// Instruction.
	function revokeMigrationV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeMigrationV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeMigrationV1.revokeMigrationV1 = revokeMigrationV1$1;
	
	return revokeMigrationV1;
}

var revokePrintDelegateV1 = {};

var hasRequiredRevokePrintDelegateV1;

function requireRevokePrintDelegateV1 () {
	if (hasRequiredRevokePrintDelegateV1) return revokePrintDelegateV1;
	hasRequiredRevokePrintDelegateV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokePrintDelegateV1, "__esModule", { value: true });
	revokePrintDelegateV1.revokePrintDelegateV1 = revokePrintDelegateV1.getRevokePrintDelegateV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getRevokePrintDelegateV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokePrintDelegateV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokePrintDelegateV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokePrintDelegateV1Discriminator: 14,
	    }));
	}
	revokePrintDelegateV1.getRevokePrintDelegateV1InstructionDataSerializer = getRevokePrintDelegateV1InstructionDataSerializer;
	// Instruction.
	function revokePrintDelegateV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, input, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokePrintDelegateV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokePrintDelegateV1.revokePrintDelegateV1 = revokePrintDelegateV1$1;
	
	return revokePrintDelegateV1;
}

var revokeProgrammableConfigItemV1 = {};

var hasRequiredRevokeProgrammableConfigItemV1;

function requireRevokeProgrammableConfigItemV1 () {
	if (hasRequiredRevokeProgrammableConfigItemV1) return revokeProgrammableConfigItemV1;
	hasRequiredRevokeProgrammableConfigItemV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeProgrammableConfigItemV1, "__esModule", { value: true });
	revokeProgrammableConfigItemV1.revokeProgrammableConfigItemV1 = revokeProgrammableConfigItemV1.getRevokeProgrammableConfigItemV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeProgrammableConfigItemV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeProgrammableConfigItemV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeProgrammableConfigItemV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeProgrammableConfigItemV1Discriminator: 13,
	    }));
	}
	revokeProgrammableConfigItemV1.getRevokeProgrammableConfigItemV1InstructionDataSerializer = getRevokeProgrammableConfigItemV1InstructionDataSerializer;
	// Instruction.
	function revokeProgrammableConfigItemV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = {
	        ...input,
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.ProgrammableConfigItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeProgrammableConfigItemV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeProgrammableConfigItemV1.revokeProgrammableConfigItemV1 = revokeProgrammableConfigItemV1$1;
	
	return revokeProgrammableConfigItemV1;
}

var revokeProgrammableConfigV1 = {};

var hasRequiredRevokeProgrammableConfigV1;

function requireRevokeProgrammableConfigV1 () {
	if (hasRequiredRevokeProgrammableConfigV1) return revokeProgrammableConfigV1;
	hasRequiredRevokeProgrammableConfigV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeProgrammableConfigV1, "__esModule", { value: true });
	revokeProgrammableConfigV1.revokeProgrammableConfigV1 = revokeProgrammableConfigV1.getRevokeProgrammableConfigV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeProgrammableConfigV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeProgrammableConfigV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeProgrammableConfigV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeProgrammableConfigV1Discriminator: 8,
	    }));
	}
	revokeProgrammableConfigV1.getRevokeProgrammableConfigV1InstructionDataSerializer = getRevokeProgrammableConfigV1InstructionDataSerializer;
	// Instruction.
	function revokeProgrammableConfigV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value);
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.ProgrammableConfig,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.delegate.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeProgrammableConfigV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeProgrammableConfigV1.revokeProgrammableConfigV1 = revokeProgrammableConfigV1$1;
	
	return revokeProgrammableConfigV1;
}

var revokeSaleV1 = {};

var hasRequiredRevokeSaleV1;

function requireRevokeSaleV1 () {
	if (hasRequiredRevokeSaleV1) return revokeSaleV1;
	hasRequiredRevokeSaleV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeSaleV1, "__esModule", { value: true });
	revokeSaleV1.revokeSaleV1 = revokeSaleV1.getRevokeSaleV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeSaleV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeSaleV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeSaleV1InstructionData' }), (value) => ({ ...value, discriminator: 45, revokeSaleV1Discriminator: 1 }));
	}
	revokeSaleV1.getRevokeSaleV1InstructionDataSerializer = getRevokeSaleV1InstructionDataSerializer;
	// Instruction.
	function revokeSaleV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeSaleV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeSaleV1.revokeSaleV1 = revokeSaleV1$1;
	
	return revokeSaleV1;
}

var revokeStakingV1 = {};

var hasRequiredRevokeStakingV1;

function requireRevokeStakingV1 () {
	if (hasRequiredRevokeStakingV1) return revokeStakingV1;
	hasRequiredRevokeStakingV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeStakingV1, "__esModule", { value: true });
	revokeStakingV1.revokeStakingV1 = revokeStakingV1.getRevokeStakingV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeStakingV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeStakingV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeStakingV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeStakingV1Discriminator: 5,
	    }));
	}
	revokeStakingV1.getRevokeStakingV1InstructionDataSerializer = getRevokeStakingV1InstructionDataSerializer;
	// Instruction.
	function revokeStakingV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeStakingV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeStakingV1.revokeStakingV1 = revokeStakingV1$1;
	
	return revokeStakingV1;
}

var revokeStandardV1 = {};

var hasRequiredRevokeStandardV1;

function requireRevokeStandardV1 () {
	if (hasRequiredRevokeStandardV1) return revokeStandardV1;
	hasRequiredRevokeStandardV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeStandardV1, "__esModule", { value: true });
	revokeStandardV1.revokeStandardV1 = revokeStandardV1.getRevokeStandardV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getRevokeStandardV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeStandardV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeStandardV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeStandardV1Discriminator: 6,
	    }));
	}
	revokeStandardV1.getRevokeStandardV1InstructionDataSerializer = getRevokeStandardV1InstructionDataSerializer;
	// Instruction.
	function revokeStandardV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeStandardV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeStandardV1.revokeStandardV1 = revokeStandardV1$1;
	
	return revokeStandardV1;
}

var revokeTransferV1 = {};

var hasRequiredRevokeTransferV1;

function requireRevokeTransferV1 () {
	if (hasRequiredRevokeTransferV1) return revokeTransferV1;
	hasRequiredRevokeTransferV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeTransferV1, "__esModule", { value: true });
	revokeTransferV1.revokeTransferV1 = revokeTransferV1.getRevokeTransferV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeTransferV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeTransferV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeTransferV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeTransferV1Discriminator: 2,
	    }));
	}
	revokeTransferV1.getRevokeTransferV1InstructionDataSerializer = getRevokeTransferV1InstructionDataSerializer;
	// Instruction.
	function revokeTransferV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeTransferV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeTransferV1.revokeTransferV1 = revokeTransferV1$1;
	
	return revokeTransferV1;
}

var revokeUseAuthority = {};

var hasRequiredRevokeUseAuthority;

function requireRevokeUseAuthority () {
	if (hasRequiredRevokeUseAuthority) return revokeUseAuthority;
	hasRequiredRevokeUseAuthority = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeUseAuthority, "__esModule", { value: true });
	revokeUseAuthority.revokeUseAuthority = revokeUseAuthority.getRevokeUseAuthorityInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getRevokeUseAuthorityInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'RevokeUseAuthorityInstructionData',
	    }), (value) => ({ ...value, discriminator: 21 }));
	}
	revokeUseAuthority.getRevokeUseAuthorityInstructionDataSerializer = getRevokeUseAuthorityInstructionDataSerializer;
	// Instruction.
	function revokeUseAuthority$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        useAuthorityRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.useAuthorityRecord ?? null,
	        },
	        owner: {
	            index: 1,
	            isWritable: true,
	            value: input.owner ?? null,
	        },
	        user: { index: 2, isWritable: false, value: input.user ?? null },
	        ownerTokenAccount: {
	            index: 3,
	            isWritable: true,
	            value: input.ownerTokenAccount ?? null,
	        },
	        mint: { index: 4, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 5,
	            isWritable: false,
	            value: input.metadata ?? null,
	        },
	        tokenProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.tokenProgram ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        rent: { index: 8, isWritable: false, value: input.rent ?? null },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.tokenProgram.value) {
	        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.tokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getRevokeUseAuthorityInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeUseAuthority.revokeUseAuthority = revokeUseAuthority$1;
	
	return revokeUseAuthority;
}

var revokeUtilityV1 = {};

var hasRequiredRevokeUtilityV1;

function requireRevokeUtilityV1 () {
	if (hasRequiredRevokeUtilityV1) return revokeUtilityV1;
	hasRequiredRevokeUtilityV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(revokeUtilityV1, "__esModule", { value: true });
	revokeUtilityV1.revokeUtilityV1 = revokeUtilityV1.getRevokeUtilityV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getRevokeUtilityV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['revokeUtilityV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'RevokeUtilityV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 45,
	        revokeUtilityV1Discriminator: 4,
	    }));
	}
	revokeUtilityV1.getRevokeUtilityV1InstructionDataSerializer = getRevokeUtilityV1InstructionDataSerializer;
	// Instruction.
	function revokeUtilityV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegateRecord: {
	            index: 0,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        delegate: {
	            index: 1,
	            isWritable: false,
	            value: input.delegate ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        masterEdition: {
	            index: 3,
	            isWritable: false,
	            value: input.masterEdition ?? null,
	        },
	        tokenRecord: {
	            index: 4,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        mint: { index: 5, isWritable: false, value: input.mint ?? null },
	        token: {
	            index: 6,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        authority: {
	            index: 7,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 8,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 10,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 13,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedArgs.tokenOwner) {
	        resolvedArgs.tokenOwner = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectSome)(resolvedArgs.tokenOwner),
	        });
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.masterEdition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.masterEdition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getRevokeUtilityV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	revokeUtilityV1.revokeUtilityV1 = revokeUtilityV1$1;
	
	return revokeUtilityV1;
}

var setAndVerifyCollection$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(setAndVerifyCollection$1, "__esModule", { value: true });
setAndVerifyCollection$1.setAndVerifyCollection = setAndVerifyCollection$1.getSetAndVerifyCollectionInstructionDataSerializer = void 0;
const umi_1$d = cjs$6;
const serializers_1$c = serializers;
const shared_1$c = shared;
function getSetAndVerifyCollectionInstructionDataSerializer() {
    return (0, serializers_1$c.mapSerializer)((0, serializers_1$c.struct)([['discriminator', (0, serializers_1$c.u8)()]], {
        description: 'SetAndVerifyCollectionInstructionData',
    }), (value) => ({ ...value, discriminator: 25 }));
}
setAndVerifyCollection$1.getSetAndVerifyCollectionInstructionDataSerializer = getSetAndVerifyCollectionInstructionDataSerializer;
// Instruction.
function setAndVerifyCollection(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: true,
            value: input.collectionAuthority ?? null,
        },
        payer: {
            index: 2,
            isWritable: true,
            value: input.payer ?? null,
        },
        updateAuthority: {
            index: 3,
            isWritable: false,
            value: input.updateAuthority ?? null,
        },
        collectionMint: {
            index: 4,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collection: {
            index: 5,
            isWritable: false,
            value: input.collection ?? null,
        },
        collectionMasterEditionAccount: {
            index: 6,
            isWritable: false,
            value: input.collectionMasterEditionAccount ?? null,
        },
        collectionAuthorityRecord: {
            index: 7,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.updateAuthority.value) {
        resolvedAccounts.updateAuthority.value = context.identity.publicKey;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$c.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getSetAndVerifyCollectionInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$d.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
setAndVerifyCollection$1.setAndVerifyCollection = setAndVerifyCollection;

var setAndVerifySizedCollectionItem$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(setAndVerifySizedCollectionItem$1, "__esModule", { value: true });
setAndVerifySizedCollectionItem$1.setAndVerifySizedCollectionItem = setAndVerifySizedCollectionItem$1.getSetAndVerifySizedCollectionItemInstructionDataSerializer = void 0;
const umi_1$c = cjs$6;
const serializers_1$b = serializers;
const shared_1$b = shared;
function getSetAndVerifySizedCollectionItemInstructionDataSerializer() {
    return (0, serializers_1$b.mapSerializer)((0, serializers_1$b.struct)([['discriminator', (0, serializers_1$b.u8)()]], { description: 'SetAndVerifySizedCollectionItemInstructionData' }), (value) => ({ ...value, discriminator: 32 }));
}
setAndVerifySizedCollectionItem$1.getSetAndVerifySizedCollectionItemInstructionDataSerializer = getSetAndVerifySizedCollectionItemInstructionDataSerializer;
// Instruction.
function setAndVerifySizedCollectionItem(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: false,
            value: input.collectionAuthority ?? null,
        },
        payer: {
            index: 2,
            isWritable: true,
            value: input.payer ?? null,
        },
        updateAuthority: {
            index: 3,
            isWritable: false,
            value: input.updateAuthority ?? null,
        },
        collectionMint: {
            index: 4,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collection: {
            index: 5,
            isWritable: true,
            value: input.collection ?? null,
        },
        collectionMasterEditionAccount: {
            index: 6,
            isWritable: false,
            value: input.collectionMasterEditionAccount ?? null,
        },
        collectionAuthorityRecord: {
            index: 7,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.updateAuthority.value) {
        resolvedAccounts.updateAuthority.value = context.identity.publicKey;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$b.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getSetAndVerifySizedCollectionItemInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$c.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
setAndVerifySizedCollectionItem$1.setAndVerifySizedCollectionItem = setAndVerifySizedCollectionItem;

var setCollectionSize$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(setCollectionSize$1, "__esModule", { value: true });
setCollectionSize$1.setCollectionSize = setCollectionSize$1.getSetCollectionSizeInstructionDataSerializer = void 0;
const umi_1$b = cjs$6;
const serializers_1$a = serializers;
const shared_1$a = shared;
const types_1$1 = requireTypes();
function getSetCollectionSizeInstructionDataSerializer() {
    return (0, serializers_1$a.mapSerializer)((0, serializers_1$a.struct)([
        ['discriminator', (0, serializers_1$a.u8)()],
        ['setCollectionSizeArgs', (0, types_1$1.getSetCollectionSizeArgsSerializer)()],
    ], { description: 'SetCollectionSizeInstructionData' }), (value) => ({ ...value, discriminator: 34 }));
}
setCollectionSize$1.getSetCollectionSizeInstructionDataSerializer = getSetCollectionSizeInstructionDataSerializer;
// Instruction.
function setCollectionSize(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        collectionMetadata: {
            index: 0,
            isWritable: true,
            value: input.collectionMetadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: true,
            value: input.collectionAuthority ?? null,
        },
        collectionMint: {
            index: 2,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collectionAuthorityRecord: {
            index: 3,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$a.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getSetCollectionSizeInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$b.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
setCollectionSize$1.setCollectionSize = setCollectionSize;

var setTokenStandard = {};

var hasRequiredSetTokenStandard;

function requireSetTokenStandard () {
	if (hasRequiredSetTokenStandard) return setTokenStandard;
	hasRequiredSetTokenStandard = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(setTokenStandard, "__esModule", { value: true });
	setTokenStandard.setTokenStandard = setTokenStandard.getSetTokenStandardInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getSetTokenStandardInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'SetTokenStandardInstructionData',
	    }), (value) => ({ ...value, discriminator: 35 }));
	}
	setTokenStandard.getSetTokenStandardInstructionDataSerializer = getSetTokenStandardInstructionDataSerializer;
	// Instruction.
	function setTokenStandard$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        metadata: {
	            index: 0,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        updateAuthority: {
	            index: 1,
	            isWritable: false,
	            value: input.updateAuthority ?? null,
	        },
	        mint: { index: 2, isWritable: false, value: input.mint ?? null },
	        edition: {
	            index: 3,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.updateAuthority.value) {
	        resolvedAccounts.updateAuthority.value = context.identity;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getSetTokenStandardInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	setTokenStandard.setTokenStandard = setTokenStandard$1;
	
	return setTokenStandard;
}

var signMetadata$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(signMetadata$1, "__esModule", { value: true });
signMetadata$1.signMetadata = signMetadata$1.getSignMetadataInstructionDataSerializer = void 0;
const umi_1$a = cjs$6;
const serializers_1$9 = serializers;
const shared_1$9 = shared;
function getSignMetadataInstructionDataSerializer() {
    return (0, serializers_1$9.mapSerializer)((0, serializers_1$9.struct)([['discriminator', (0, serializers_1$9.u8)()]], {
        description: 'SignMetadataInstructionData',
    }), (value) => ({ ...value, discriminator: 7 }));
}
signMetadata$1.getSignMetadataInstructionDataSerializer = getSignMetadataInstructionDataSerializer;
// Instruction.
function signMetadata(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        creator: {
            index: 1,
            isWritable: false,
            value: input.creator ?? null,
        },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$9.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSignMetadataInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$a.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
signMetadata$1.signMetadata = signMetadata;

var thawDelegatedAccount = {};

var hasRequiredThawDelegatedAccount;

function requireThawDelegatedAccount () {
	if (hasRequiredThawDelegatedAccount) return thawDelegatedAccount;
	hasRequiredThawDelegatedAccount = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(thawDelegatedAccount, "__esModule", { value: true });
	thawDelegatedAccount.thawDelegatedAccount = thawDelegatedAccount.getThawDelegatedAccountInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getThawDelegatedAccountInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
	        description: 'ThawDelegatedAccountInstructionData',
	    }), (value) => ({ ...value, discriminator: 27 }));
	}
	thawDelegatedAccount.getThawDelegatedAccountInstructionDataSerializer = getThawDelegatedAccountInstructionDataSerializer;
	// Instruction.
	function thawDelegatedAccount$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        delegate: {
	            index: 0,
	            isWritable: true,
	            value: input.delegate ?? null,
	        },
	        tokenAccount: {
	            index: 1,
	            isWritable: true,
	            value: input.tokenAccount ?? null,
	        },
	        edition: {
	            index: 2,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        tokenProgram: {
	            index: 4,
	            isWritable: false,
	            value: input.tokenProgram ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.edition.value) {
	        resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.tokenProgram.value) {
	        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.tokenProgram.isWritable = false;
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getThawDelegatedAccountInstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	thawDelegatedAccount.thawDelegatedAccount = thawDelegatedAccount$1;
	
	return thawDelegatedAccount;
}

var transferOutOfEscrow$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(transferOutOfEscrow$1, "__esModule", { value: true });
transferOutOfEscrow$1.transferOutOfEscrow = transferOutOfEscrow$1.getTransferOutOfEscrowInstructionDataSerializer = void 0;
const umi_1$9 = cjs$6;
const serializers_1$8 = serializers;
const shared_1$8 = shared;
function getTransferOutOfEscrowInstructionDataSerializer() {
    return (0, serializers_1$8.mapSerializer)((0, serializers_1$8.struct)([
        ['discriminator', (0, serializers_1$8.u8)()],
        ['amount', (0, serializers_1$8.u64)()],
    ], { description: 'TransferOutOfEscrowInstructionData' }), (value) => ({ ...value, discriminator: 40, amount: value.amount ?? 1 }));
}
transferOutOfEscrow$1.getTransferOutOfEscrowInstructionDataSerializer = getTransferOutOfEscrowInstructionDataSerializer;
// Instruction.
function transferOutOfEscrow(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        escrow: {
            index: 0,
            isWritable: false,
            value: input.escrow ?? null,
        },
        metadata: {
            index: 1,
            isWritable: true,
            value: input.metadata ?? null,
        },
        payer: {
            index: 2,
            isWritable: true,
            value: input.payer ?? null,
        },
        attributeMint: {
            index: 3,
            isWritable: false,
            value: input.attributeMint ?? null,
        },
        attributeSrc: {
            index: 4,
            isWritable: true,
            value: input.attributeSrc ?? null,
        },
        attributeDst: {
            index: 5,
            isWritable: true,
            value: input.attributeDst ?? null,
        },
        escrowMint: {
            index: 6,
            isWritable: false,
            value: input.escrowMint ?? null,
        },
        escrowAccount: {
            index: 7,
            isWritable: false,
            value: input.escrowAccount ?? null,
        },
        systemProgram: {
            index: 8,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        ataProgram: {
            index: 9,
            isWritable: false,
            value: input.ataProgram ?? null,
        },
        tokenProgram: {
            index: 10,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        sysvarInstructions: {
            index: 11,
            isWritable: false,
            value: input.sysvarInstructions ?? null,
        },
        authority: {
            index: 12,
            isWritable: false,
            value: input.authority ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.ataProgram.value) {
        resolvedAccounts.ataProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
        resolvedAccounts.ataProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarInstructions.value) {
        resolvedAccounts.sysvarInstructions.value = (0, umi_1$9.publicKey)('Sysvar1nstructions1111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$8.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getTransferOutOfEscrowInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$9.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
transferOutOfEscrow$1.transferOutOfEscrow = transferOutOfEscrow;

var transferV1 = {};

var hasRequiredTransferV1;

function requireTransferV1 () {
	if (hasRequiredTransferV1) return transferV1;
	hasRequiredTransferV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(transferV1, "__esModule", { value: true });
	transferV1.transferV1 = transferV1.getTransferV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getTransferV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['transferV1Discriminator', (0, serializers_1.u8)()],
	        ['amount', (0, serializers_1.u64)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'TransferV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 49,
	        transferV1Discriminator: 0,
	        amount: value.amount ?? 1,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	transferV1.getTransferV1InstructionDataSerializer = getTransferV1InstructionDataSerializer;
	// Instruction.
	function transferV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        token: {
	            index: 0,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        tokenOwner: {
	            index: 1,
	            isWritable: false,
	            value: input.tokenOwner ?? null,
	        },
	        destinationToken: {
	            index: 2,
	            isWritable: true,
	            value: input.destinationToken ?? null,
	        },
	        destinationOwner: {
	            index: 3,
	            isWritable: false,
	            value: input.destinationOwner ?? null,
	        },
	        mint: { index: 4, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 5,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 6,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        tokenRecord: {
	            index: 7,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        destinationTokenRecord: {
	            index: 8,
	            isWritable: true,
	            value: input.destinationTokenRecord ?? null,
	        },
	        authority: {
	            index: 9,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        payer: {
	            index: 10,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 12,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 13,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        splAtaProgram: {
	            index: 14,
	            isWritable: false,
	            value: input.splAtaProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 15,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 16,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.tokenOwner.value) {
	        resolvedAccounts.tokenOwner.value = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.tokenOwner.value),
	        });
	    }
	    if (!resolvedAccounts.destinationToken.value) {
	        resolvedAccounts.destinationToken.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.destinationOwner.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.destinationTokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.destinationTokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.destinationToken.value),
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.splTokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.splAtaProgram.value) {
	        resolvedAccounts.splAtaProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
	        resolvedAccounts.splAtaProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getTransferV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	transferV1.transferV1 = transferV1$1;
	
	return transferV1;
}

var unlockV1 = {};

var hasRequiredUnlockV1;

function requireUnlockV1 () {
	if (hasRequiredUnlockV1) return unlockV1;
	hasRequiredUnlockV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(unlockV1, "__esModule", { value: true });
	unlockV1.unlockV1 = unlockV1.getUnlockV1InstructionDataSerializer = void 0;
	const mpl_toolbox_1 = src;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const hooked_1 = requireHooked();
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUnlockV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['unlockV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UnlockV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 47,
	        unlockV1Discriminator: 0,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	unlockV1.getUnlockV1InstructionDataSerializer = getUnlockV1InstructionDataSerializer;
	// Instruction.
	function unlockV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        tokenOwner: {
	            index: 1,
	            isWritable: false,
	            value: input.tokenOwner ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        tokenRecord: {
	            index: 6,
	            isWritable: true,
	            value: input.tokenRecord ?? null,
	        },
	        payer: {
	            index: 7,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 8,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 9,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 10,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 11,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 12,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.tokenOwner.value) {
	        resolvedAccounts.tokenOwner = {
	            ...resolvedAccounts.tokenOwner,
	            ...(0, hooked_1.resolveOptionalTokenOwner)(context, resolvedAccounts, resolvedArgs, programId, false),
	        };
	    }
	    if (!resolvedAccounts.token.value) {
	        resolvedAccounts.token.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.tokenOwner.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.edition.value) {
	        if ((0, hooked_1.resolveIsNonFungible)(context, resolvedAccounts, resolvedArgs, programId, false)) {
	            resolvedAccounts.edition.value = (0, accounts_1.findMasterEditionPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.tokenRecord.value) {
	        if (resolvedArgs.tokenStandard === types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.tokenRecord.value = (0, accounts_1.findTokenRecordPda)(context, {
	                mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	                token: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
	            });
	        }
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.splTokenProgram.value) {
	        if (resolvedArgs.tokenStandard !== types_1.TokenStandard.ProgrammableNonFungible) {
	            resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	            resolvedAccounts.splTokenProgram.isWritable = false;
	        }
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUnlockV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	unlockV1.unlockV1 = unlockV1$1;
	
	return unlockV1;
}

var unverifyCollection$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(unverifyCollection$1, "__esModule", { value: true });
unverifyCollection$1.unverifyCollection = unverifyCollection$1.getUnverifyCollectionInstructionDataSerializer = void 0;
const umi_1$8 = cjs$6;
const serializers_1$7 = serializers;
const shared_1$7 = shared;
function getUnverifyCollectionInstructionDataSerializer() {
    return (0, serializers_1$7.mapSerializer)((0, serializers_1$7.struct)([['discriminator', (0, serializers_1$7.u8)()]], {
        description: 'UnverifyCollectionInstructionData',
    }), (value) => ({ ...value, discriminator: 22 }));
}
unverifyCollection$1.getUnverifyCollectionInstructionDataSerializer = getUnverifyCollectionInstructionDataSerializer;
// Instruction.
function unverifyCollection(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: true,
            value: input.collectionAuthority ?? null,
        },
        collectionMint: {
            index: 2,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collection: {
            index: 3,
            isWritable: false,
            value: input.collection ?? null,
        },
        collectionMasterEditionAccount: {
            index: 4,
            isWritable: false,
            value: input.collectionMasterEditionAccount ?? null,
        },
        collectionAuthorityRecord: {
            index: 5,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$7.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getUnverifyCollectionInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$8.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
unverifyCollection$1.unverifyCollection = unverifyCollection;

var unverifyCollectionV1 = {};

var hasRequiredUnverifyCollectionV1;

function requireUnverifyCollectionV1 () {
	if (hasRequiredUnverifyCollectionV1) return unverifyCollectionV1;
	hasRequiredUnverifyCollectionV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(unverifyCollectionV1, "__esModule", { value: true });
	unverifyCollectionV1.unverifyCollectionV1 = unverifyCollectionV1.getUnverifyCollectionV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getUnverifyCollectionV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['unverifyCollectionV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'UnverifyCollectionV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 53,
	        unverifyCollectionV1Discriminator: 1,
	    }));
	}
	unverifyCollectionV1.getUnverifyCollectionV1InstructionDataSerializer = getUnverifyCollectionV1InstructionDataSerializer;
	// Instruction.
	function unverifyCollectionV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        collectionMint: {
	            index: 3,
	            isWritable: false,
	            value: input.collectionMint ?? null,
	        },
	        collectionMetadata: {
	            index: 4,
	            isWritable: true,
	            value: input.collectionMetadata ?? null,
	        },
	        systemProgram: {
	            index: 5,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 6,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.collectionMetadata.value) {
	        resolvedAccounts.collectionMetadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionMint.value),
	        });
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUnverifyCollectionV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	unverifyCollectionV1.unverifyCollectionV1 = unverifyCollectionV1$1;
	
	return unverifyCollectionV1;
}

var unverifyCreatorV1$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(unverifyCreatorV1$1, "__esModule", { value: true });
unverifyCreatorV1$1.unverifyCreatorV1 = unverifyCreatorV1$1.getUnverifyCreatorV1InstructionDataSerializer = void 0;
const umi_1$7 = cjs$6;
const serializers_1$6 = serializers;
const shared_1$6 = shared;
function getUnverifyCreatorV1InstructionDataSerializer() {
    return (0, serializers_1$6.mapSerializer)((0, serializers_1$6.struct)([
        ['discriminator', (0, serializers_1$6.u8)()],
        ['unverifyCreatorV1Discriminator', (0, serializers_1$6.u8)()],
    ], { description: 'UnverifyCreatorV1InstructionData' }), (value) => ({
        ...value,
        discriminator: 53,
        unverifyCreatorV1Discriminator: 0,
    }));
}
unverifyCreatorV1$1.getUnverifyCreatorV1InstructionDataSerializer = getUnverifyCreatorV1InstructionDataSerializer;
// Instruction.
function unverifyCreatorV1(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        authority: {
            index: 0,
            isWritable: false,
            value: input.authority ?? null,
        },
        delegateRecord: {
            index: 1,
            isWritable: false,
            value: input.delegateRecord ?? null,
        },
        metadata: {
            index: 2,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionMint: {
            index: 3,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collectionMetadata: {
            index: 4,
            isWritable: true,
            value: input.collectionMetadata ?? null,
        },
        systemProgram: {
            index: 5,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        sysvarInstructions: {
            index: 6,
            isWritable: false,
            value: input.sysvarInstructions ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarInstructions.value) {
        resolvedAccounts.sysvarInstructions.value = (0, umi_1$7.publicKey)('Sysvar1nstructions1111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$6.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUnverifyCreatorV1InstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$7.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
unverifyCreatorV1$1.unverifyCreatorV1 = unverifyCreatorV1;

var unverifySizedCollectionItem$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(unverifySizedCollectionItem$1, "__esModule", { value: true });
unverifySizedCollectionItem$1.unverifySizedCollectionItem = unverifySizedCollectionItem$1.getUnverifySizedCollectionItemInstructionDataSerializer = void 0;
const umi_1$6 = cjs$6;
const serializers_1$5 = serializers;
const shared_1$5 = shared;
function getUnverifySizedCollectionItemInstructionDataSerializer() {
    return (0, serializers_1$5.mapSerializer)((0, serializers_1$5.struct)([['discriminator', (0, serializers_1$5.u8)()]], { description: 'UnverifySizedCollectionItemInstructionData' }), (value) => ({ ...value, discriminator: 31 }));
}
unverifySizedCollectionItem$1.getUnverifySizedCollectionItemInstructionDataSerializer = getUnverifySizedCollectionItemInstructionDataSerializer;
// Instruction.
function unverifySizedCollectionItem(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: false,
            value: input.collectionAuthority ?? null,
        },
        payer: {
            index: 2,
            isWritable: true,
            value: input.payer ?? null,
        },
        collectionMint: {
            index: 3,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collection: {
            index: 4,
            isWritable: true,
            value: input.collection ?? null,
        },
        collectionMasterEditionAccount: {
            index: 5,
            isWritable: false,
            value: input.collectionMasterEditionAccount ?? null,
        },
        collectionAuthorityRecord: {
            index: 6,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$5.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getUnverifySizedCollectionItemInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$6.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
unverifySizedCollectionItem$1.unverifySizedCollectionItem = unverifySizedCollectionItem;

var updateAsAuthorityItemDelegateV2 = {};

var hasRequiredUpdateAsAuthorityItemDelegateV2;

function requireUpdateAsAuthorityItemDelegateV2 () {
	if (hasRequiredUpdateAsAuthorityItemDelegateV2) return updateAsAuthorityItemDelegateV2;
	hasRequiredUpdateAsAuthorityItemDelegateV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsAuthorityItemDelegateV2, "__esModule", { value: true });
	updateAsAuthorityItemDelegateV2.updateAsAuthorityItemDelegateV2 = updateAsAuthorityItemDelegateV2.getUpdateAsAuthorityItemDelegateV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsAuthorityItemDelegateV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsAuthorityItemDelegateV2Discriminator', (0, serializers_1.u8)()],
	        ['newUpdateAuthority', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	        ['primarySaleHappened', (0, serializers_1.option)((0, serializers_1.bool)())],
	        ['isMutable', (0, serializers_1.option)((0, serializers_1.bool)())],
	        ['tokenStandard', (0, serializers_1.option)((0, types_1.getTokenStandardSerializer)())],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsAuthorityItemDelegateV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsAuthorityItemDelegateV2Discriminator: 2,
	        newUpdateAuthority: value.newUpdateAuthority ?? (0, umi_1.none)(),
	        primarySaleHappened: value.primarySaleHappened ?? (0, umi_1.none)(),
	        isMutable: value.isMutable ?? (0, umi_1.none)(),
	        tokenStandard: value.tokenStandard ?? (0, umi_1.none)(),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsAuthorityItemDelegateV2.getUpdateAsAuthorityItemDelegateV2InstructionDataSerializer = getUpdateAsAuthorityItemDelegateV2InstructionDataSerializer;
	// Instruction.
	function updateAsAuthorityItemDelegateV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = {
	        ...input,
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.AuthorityItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsAuthorityItemDelegateV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsAuthorityItemDelegateV2.updateAsAuthorityItemDelegateV2 = updateAsAuthorityItemDelegateV2$1;
	
	return updateAsAuthorityItemDelegateV2;
}

var updateAsCollectionDelegateV2 = {};

var hasRequiredUpdateAsCollectionDelegateV2;

function requireUpdateAsCollectionDelegateV2 () {
	if (hasRequiredUpdateAsCollectionDelegateV2) return updateAsCollectionDelegateV2;
	hasRequiredUpdateAsCollectionDelegateV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsCollectionDelegateV2, "__esModule", { value: true });
	updateAsCollectionDelegateV2.updateAsCollectionDelegateV2 = updateAsCollectionDelegateV2.getUpdateAsCollectionDelegateV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsCollectionDelegateV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsCollectionDelegateV2Discriminator', (0, serializers_1.u8)()],
	        ['collection', (0, types_1.getCollectionToggleSerializer)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsCollectionDelegateV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsCollectionDelegateV2Discriminator: 3,
	        collection: value.collection ?? (0, types_1.collectionToggle)('None'),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsCollectionDelegateV2.getUpdateAsCollectionDelegateV2InstructionDataSerializer = getUpdateAsCollectionDelegateV2InstructionDataSerializer;
	// Instruction.
	function updateAsCollectionDelegateV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = {
	        ...input,
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.delegateMint) {
	        resolvedArgs.delegateMint = (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value);
	    }
	    if (!resolvedArgs.delegateUpdateAuthority) {
	        resolvedArgs.delegateUpdateAuthority = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.delegateMint),
	            delegateRole: types_1.MetadataDelegateRole.Collection,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.delegateUpdateAuthority),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsCollectionDelegateV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsCollectionDelegateV2.updateAsCollectionDelegateV2 = updateAsCollectionDelegateV2$1;
	
	return updateAsCollectionDelegateV2;
}

var updateAsCollectionItemDelegateV2 = {};

var hasRequiredUpdateAsCollectionItemDelegateV2;

function requireUpdateAsCollectionItemDelegateV2 () {
	if (hasRequiredUpdateAsCollectionItemDelegateV2) return updateAsCollectionItemDelegateV2;
	hasRequiredUpdateAsCollectionItemDelegateV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsCollectionItemDelegateV2, "__esModule", { value: true });
	updateAsCollectionItemDelegateV2.updateAsCollectionItemDelegateV2 = updateAsCollectionItemDelegateV2.getUpdateAsCollectionItemDelegateV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsCollectionItemDelegateV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsCollectionItemDelegateV2Discriminator', (0, serializers_1.u8)()],
	        ['collection', (0, types_1.getCollectionToggleSerializer)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsCollectionItemDelegateV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsCollectionItemDelegateV2Discriminator: 7,
	        collection: value.collection ?? (0, types_1.collectionToggle)('None'),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsCollectionItemDelegateV2.getUpdateAsCollectionItemDelegateV2InstructionDataSerializer = getUpdateAsCollectionItemDelegateV2InstructionDataSerializer;
	// Instruction.
	function updateAsCollectionItemDelegateV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = {
	        ...input,
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.CollectionItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsCollectionItemDelegateV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsCollectionItemDelegateV2.updateAsCollectionItemDelegateV2 = updateAsCollectionItemDelegateV2$1;
	
	return updateAsCollectionItemDelegateV2;
}

var updateAsDataDelegateV2 = {};

var hasRequiredUpdateAsDataDelegateV2;

function requireUpdateAsDataDelegateV2 () {
	if (hasRequiredUpdateAsDataDelegateV2) return updateAsDataDelegateV2;
	hasRequiredUpdateAsDataDelegateV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsDataDelegateV2, "__esModule", { value: true });
	updateAsDataDelegateV2.updateAsDataDelegateV2 = updateAsDataDelegateV2.getUpdateAsDataDelegateV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsDataDelegateV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsDataDelegateV2Discriminator', (0, serializers_1.u8)()],
	        ['data', (0, serializers_1.option)((0, types_1.getDataSerializer)())],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsDataDelegateV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsDataDelegateV2Discriminator: 4,
	        data: value.data ?? (0, umi_1.none)(),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsDataDelegateV2.getUpdateAsDataDelegateV2InstructionDataSerializer = getUpdateAsDataDelegateV2InstructionDataSerializer;
	// Instruction.
	function updateAsDataDelegateV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.delegateMint) {
	        resolvedArgs.delegateMint = (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value);
	    }
	    if (!resolvedArgs.delegateUpdateAuthority) {
	        resolvedArgs.delegateUpdateAuthority = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.delegateMint),
	            delegateRole: types_1.MetadataDelegateRole.Data,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.delegateUpdateAuthority),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsDataDelegateV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsDataDelegateV2.updateAsDataDelegateV2 = updateAsDataDelegateV2$1;
	
	return updateAsDataDelegateV2;
}

var updateAsDataItemDelegateV2 = {};

var hasRequiredUpdateAsDataItemDelegateV2;

function requireUpdateAsDataItemDelegateV2 () {
	if (hasRequiredUpdateAsDataItemDelegateV2) return updateAsDataItemDelegateV2;
	hasRequiredUpdateAsDataItemDelegateV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsDataItemDelegateV2, "__esModule", { value: true });
	updateAsDataItemDelegateV2.updateAsDataItemDelegateV2 = updateAsDataItemDelegateV2.getUpdateAsDataItemDelegateV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsDataItemDelegateV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsDataItemDelegateV2Discriminator', (0, serializers_1.u8)()],
	        ['data', (0, serializers_1.option)((0, types_1.getDataSerializer)())],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsDataItemDelegateV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsDataItemDelegateV2Discriminator: 6,
	        data: value.data ?? (0, umi_1.none)(),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsDataItemDelegateV2.getUpdateAsDataItemDelegateV2InstructionDataSerializer = getUpdateAsDataItemDelegateV2InstructionDataSerializer;
	// Instruction.
	function updateAsDataItemDelegateV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.DataItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsDataItemDelegateV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsDataItemDelegateV2.updateAsDataItemDelegateV2 = updateAsDataItemDelegateV2$1;
	
	return updateAsDataItemDelegateV2;
}

var updateAsProgrammableConfigDelegateV2 = {};

var hasRequiredUpdateAsProgrammableConfigDelegateV2;

function requireUpdateAsProgrammableConfigDelegateV2 () {
	if (hasRequiredUpdateAsProgrammableConfigDelegateV2) return updateAsProgrammableConfigDelegateV2;
	hasRequiredUpdateAsProgrammableConfigDelegateV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsProgrammableConfigDelegateV2, "__esModule", { value: true });
	updateAsProgrammableConfigDelegateV2.updateAsProgrammableConfigDelegateV2 = updateAsProgrammableConfigDelegateV2.getUpdateAsProgrammableConfigDelegateV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsProgrammableConfigDelegateV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsProgrammableConfigDelegateV2Discriminator', (0, serializers_1.u8)()],
	        ['ruleSet', (0, types_1.getRuleSetToggleSerializer)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsProgrammableConfigDelegateV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsProgrammableConfigDelegateV2Discriminator: 5,
	        ruleSet: value.ruleSet ?? (0, types_1.ruleSetToggle)('None'),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsProgrammableConfigDelegateV2.getUpdateAsProgrammableConfigDelegateV2InstructionDataSerializer = getUpdateAsProgrammableConfigDelegateV2InstructionDataSerializer;
	// Instruction.
	function updateAsProgrammableConfigDelegateV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = {
	        ...input,
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.delegateMint) {
	        resolvedArgs.delegateMint = (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value);
	    }
	    if (!resolvedArgs.delegateUpdateAuthority) {
	        resolvedArgs.delegateUpdateAuthority = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            mint: (0, shared_1.expectSome)(resolvedArgs.delegateMint),
	            delegateRole: types_1.MetadataDelegateRole.ProgrammableConfig,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.delegateUpdateAuthority),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsProgrammableConfigDelegateV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsProgrammableConfigDelegateV2.updateAsProgrammableConfigDelegateV2 = updateAsProgrammableConfigDelegateV2$1;
	
	return updateAsProgrammableConfigDelegateV2;
}

var updateAsProgrammableConfigItemDelegateV2 = {};

var hasRequiredUpdateAsProgrammableConfigItemDelegateV2;

function requireUpdateAsProgrammableConfigItemDelegateV2 () {
	if (hasRequiredUpdateAsProgrammableConfigItemDelegateV2) return updateAsProgrammableConfigItemDelegateV2;
	hasRequiredUpdateAsProgrammableConfigItemDelegateV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsProgrammableConfigItemDelegateV2, "__esModule", { value: true });
	updateAsProgrammableConfigItemDelegateV2.updateAsProgrammableConfigItemDelegateV2 = updateAsProgrammableConfigItemDelegateV2.getUpdateAsProgrammableConfigItemDelegateV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsProgrammableConfigItemDelegateV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsProgrammableConfigItemDelegateV2Discriminator', (0, serializers_1.u8)()],
	        ['ruleSet', (0, types_1.getRuleSetToggleSerializer)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsProgrammableConfigItemDelegateV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsProgrammableConfigItemDelegateV2Discriminator: 8,
	        ruleSet: value.ruleSet ?? (0, types_1.ruleSetToggle)('None'),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsProgrammableConfigItemDelegateV2.getUpdateAsProgrammableConfigItemDelegateV2InstructionDataSerializer = getUpdateAsProgrammableConfigItemDelegateV2InstructionDataSerializer;
	// Instruction.
	function updateAsProgrammableConfigItemDelegateV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedArgs.updateAuthority) {
	        resolvedArgs.updateAuthority = context.identity.publicKey;
	    }
	    if (!resolvedAccounts.delegateRecord.value) {
	        resolvedAccounts.delegateRecord.value = (0, accounts_1.findMetadataDelegateRecordPda)(context, {
	            delegateRole: types_1.MetadataDelegateRole.ProgrammableConfigItem,
	            updateAuthority: (0, shared_1.expectSome)(resolvedArgs.updateAuthority),
	            delegate: (0, shared_1.expectPublicKey)(resolvedAccounts.authority.value),
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsProgrammableConfigItemDelegateV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsProgrammableConfigItemDelegateV2.updateAsProgrammableConfigItemDelegateV2 = updateAsProgrammableConfigItemDelegateV2$1;
	
	return updateAsProgrammableConfigItemDelegateV2;
}

var updateAsUpdateAuthorityV2 = {};

var hasRequiredUpdateAsUpdateAuthorityV2;

function requireUpdateAsUpdateAuthorityV2 () {
	if (hasRequiredUpdateAsUpdateAuthorityV2) return updateAsUpdateAuthorityV2;
	hasRequiredUpdateAsUpdateAuthorityV2 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateAsUpdateAuthorityV2, "__esModule", { value: true });
	updateAsUpdateAuthorityV2.updateAsUpdateAuthorityV2 = updateAsUpdateAuthorityV2.getUpdateAsUpdateAuthorityV2InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateAsUpdateAuthorityV2InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateAsUpdateAuthorityV2Discriminator', (0, serializers_1.u8)()],
	        ['newUpdateAuthority', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	        ['data', (0, serializers_1.option)((0, types_1.getDataSerializer)())],
	        ['primarySaleHappened', (0, serializers_1.option)((0, serializers_1.bool)())],
	        ['isMutable', (0, serializers_1.option)((0, serializers_1.bool)())],
	        ['collection', (0, types_1.getCollectionToggleSerializer)()],
	        ['collectionDetails', (0, types_1.getCollectionDetailsToggleSerializer)()],
	        ['uses', (0, types_1.getUsesToggleSerializer)()],
	        ['ruleSet', (0, types_1.getRuleSetToggleSerializer)()],
	        ['tokenStandard', (0, serializers_1.option)((0, types_1.getTokenStandardSerializer)())],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateAsUpdateAuthorityV2InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateAsUpdateAuthorityV2Discriminator: 1,
	        newUpdateAuthority: value.newUpdateAuthority ?? (0, umi_1.none)(),
	        data: value.data ?? (0, umi_1.none)(),
	        primarySaleHappened: value.primarySaleHappened ?? (0, umi_1.none)(),
	        isMutable: value.isMutable ?? (0, umi_1.none)(),
	        collection: value.collection ?? (0, types_1.collectionToggle)('None'),
	        collectionDetails: value.collectionDetails ?? (0, types_1.collectionDetailsToggle)('None'),
	        uses: value.uses ?? (0, types_1.usesToggle)('None'),
	        ruleSet: value.ruleSet ?? (0, types_1.ruleSetToggle)('None'),
	        tokenStandard: value.tokenStandard ?? (0, umi_1.none)(),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateAsUpdateAuthorityV2.getUpdateAsUpdateAuthorityV2InstructionDataSerializer = getUpdateAsUpdateAuthorityV2InstructionDataSerializer;
	// Instruction.
	function updateAsUpdateAuthorityV2$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateAsUpdateAuthorityV2InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateAsUpdateAuthorityV2.updateAsUpdateAuthorityV2 = updateAsUpdateAuthorityV2$1;
	
	return updateAsUpdateAuthorityV2;
}

var updateMetadataAccountV2$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(updateMetadataAccountV2$1, "__esModule", { value: true });
updateMetadataAccountV2$1.updateMetadataAccountV2 = updateMetadataAccountV2$1.getUpdateMetadataAccountV2InstructionDataSerializer = void 0;
const umi_1$5 = cjs$6;
const serializers_1$4 = serializers;
const shared_1$4 = shared;
const types_1 = requireTypes();
function getUpdateMetadataAccountV2InstructionDataSerializer() {
    return (0, serializers_1$4.mapSerializer)((0, serializers_1$4.struct)([
        ['discriminator', (0, serializers_1$4.u8)()],
        ['data', (0, serializers_1$4.option)((0, types_1.getDataV2Serializer)())],
        ['newUpdateAuthority', (0, serializers_1$4.option)((0, serializers_1$4.publicKey)())],
        ['primarySaleHappened', (0, serializers_1$4.option)((0, serializers_1$4.bool)())],
        ['isMutable', (0, serializers_1$4.option)((0, serializers_1$4.bool)())],
    ], { description: 'UpdateMetadataAccountV2InstructionData' }), (value) => ({
        ...value,
        discriminator: 15,
        data: value.data ?? (0, umi_1$5.none)(),
        newUpdateAuthority: value.newUpdateAuthority ?? (0, umi_1$5.none)(),
        primarySaleHappened: value.primarySaleHappened ?? (0, umi_1$5.none)(),
        isMutable: value.isMutable ?? (0, umi_1$5.none)(),
    }));
}
updateMetadataAccountV2$1.getUpdateMetadataAccountV2InstructionDataSerializer = getUpdateMetadataAccountV2InstructionDataSerializer;
// Instruction.
function updateMetadataAccountV2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        updateAuthority: {
            index: 1,
            isWritable: false,
            value: input.updateAuthority ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.updateAuthority.value) {
        resolvedAccounts.updateAuthority.value = context.identity;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$4.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUpdateMetadataAccountV2InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$5.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
updateMetadataAccountV2$1.updateMetadataAccountV2 = updateMetadataAccountV2;

var updatePrimarySaleHappenedViaToken$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(updatePrimarySaleHappenedViaToken$1, "__esModule", { value: true });
updatePrimarySaleHappenedViaToken$1.updatePrimarySaleHappenedViaToken = updatePrimarySaleHappenedViaToken$1.getUpdatePrimarySaleHappenedViaTokenInstructionDataSerializer = void 0;
const umi_1$4 = cjs$6;
const serializers_1$3 = serializers;
const shared_1$3 = shared;
function getUpdatePrimarySaleHappenedViaTokenInstructionDataSerializer() {
    return (0, serializers_1$3.mapSerializer)((0, serializers_1$3.struct)([['discriminator', (0, serializers_1$3.u8)()]], { description: 'UpdatePrimarySaleHappenedViaTokenInstructionData' }), (value) => ({ ...value, discriminator: 4 }));
}
updatePrimarySaleHappenedViaToken$1.getUpdatePrimarySaleHappenedViaTokenInstructionDataSerializer = getUpdatePrimarySaleHappenedViaTokenInstructionDataSerializer;
// Instruction.
function updatePrimarySaleHappenedViaToken(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        owner: {
            index: 1,
            isWritable: false,
            value: input.owner ?? null,
        },
        token: {
            index: 2,
            isWritable: false,
            value: input.token ?? null,
        },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$3.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUpdatePrimarySaleHappenedViaTokenInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$4.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
updatePrimarySaleHappenedViaToken$1.updatePrimarySaleHappenedViaToken = updatePrimarySaleHappenedViaToken;

var updateV1 = {};

var hasRequiredUpdateV1;

function requireUpdateV1 () {
	if (hasRequiredUpdateV1) return updateV1;
	hasRequiredUpdateV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(updateV1, "__esModule", { value: true });
	updateV1.updateV1 = updateV1.getUpdateV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUpdateV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['updateV1Discriminator', (0, serializers_1.u8)()],
	        ['newUpdateAuthority', (0, serializers_1.option)((0, serializers_1.publicKey)())],
	        ['data', (0, serializers_1.option)((0, types_1.getDataSerializer)())],
	        ['primarySaleHappened', (0, serializers_1.option)((0, serializers_1.bool)())],
	        ['isMutable', (0, serializers_1.option)((0, serializers_1.bool)())],
	        ['collection', (0, types_1.getCollectionToggleSerializer)()],
	        ['collectionDetails', (0, types_1.getCollectionDetailsToggleSerializer)()],
	        ['uses', (0, types_1.getUsesToggleSerializer)()],
	        ['ruleSet', (0, types_1.getRuleSetToggleSerializer)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UpdateV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 50,
	        updateV1Discriminator: 0,
	        newUpdateAuthority: value.newUpdateAuthority ?? (0, umi_1.none)(),
	        data: value.data ?? (0, umi_1.none)(),
	        primarySaleHappened: value.primarySaleHappened ?? (0, umi_1.none)(),
	        isMutable: value.isMutable ?? (0, umi_1.none)(),
	        collection: value.collection ?? (0, types_1.collectionToggle)('None'),
	        collectionDetails: value.collectionDetails ?? (0, types_1.collectionDetailsToggle)('None'),
	        uses: value.uses ?? (0, types_1.usesToggle)('None'),
	        ruleSet: value.ruleSet ?? (0, types_1.ruleSetToggle)('None'),
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	updateV1.getUpdateV1InstructionDataSerializer = getUpdateV1InstructionDataSerializer;
	// Instruction.
	function updateV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: false,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: false,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: true,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUpdateV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	updateV1.updateV1 = updateV1$1;
	
	return updateV1;
}

var useV1 = {};

var hasRequiredUseV1;

function requireUseV1 () {
	if (hasRequiredUseV1) return useV1;
	hasRequiredUseV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(useV1, "__esModule", { value: true });
	useV1.useV1 = useV1.getUseV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	const types_1 = requireTypes();
	function getUseV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['useV1Discriminator', (0, serializers_1.u8)()],
	        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
	    ], { description: 'UseV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 51,
	        useV1Discriminator: 0,
	        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
	    }));
	}
	useV1.getUseV1InstructionDataSerializer = getUseV1InstructionDataSerializer;
	// Instruction.
	function useV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: true,
	            value: input.delegateRecord ?? null,
	        },
	        token: {
	            index: 2,
	            isWritable: true,
	            value: input.token ?? null,
	        },
	        mint: { index: 3, isWritable: false, value: input.mint ?? null },
	        metadata: {
	            index: 4,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        edition: {
	            index: 5,
	            isWritable: true,
	            value: input.edition ?? null,
	        },
	        payer: {
	            index: 6,
	            isWritable: false,
	            value: input.payer ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 8,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	        splTokenProgram: {
	            index: 9,
	            isWritable: false,
	            value: input.splTokenProgram ?? null,
	        },
	        authorizationRulesProgram: {
	            index: 10,
	            isWritable: false,
	            value: input.authorizationRulesProgram ?? null,
	        },
	        authorizationRules: {
	            index: 11,
	            isWritable: false,
	            value: input.authorizationRules ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.payer.value) {
	        resolvedAccounts.payer.value = context.payer;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    if (!resolvedAccounts.authorizationRulesProgram.value) {
	        if (resolvedAccounts.authorizationRules.value) {
	            resolvedAccounts.authorizationRulesProgram.value =
	                context.programs.getPublicKey('mplTokenAuthRules', 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');
	            resolvedAccounts.authorizationRulesProgram.isWritable = false;
	        }
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getUseV1InstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	useV1.useV1 = useV1$1;
	
	return useV1;
}

var utilize = {};

var hasRequiredUtilize;

function requireUtilize () {
	if (hasRequiredUtilize) return utilize;
	hasRequiredUtilize = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(utilize, "__esModule", { value: true });
	utilize.utilize = utilize.getUtilizeInstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getUtilizeInstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['numberOfUses', (0, serializers_1.u64)()],
	    ], { description: 'UtilizeInstructionData' }), (value) => ({ ...value, discriminator: 19 }));
	}
	utilize.getUtilizeInstructionDataSerializer = getUtilizeInstructionDataSerializer;
	// Instruction.
	function utilize$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        metadata: {
	            index: 0,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        tokenAccount: {
	            index: 1,
	            isWritable: true,
	            value: input.tokenAccount ?? null,
	        },
	        mint: { index: 2, isWritable: true, value: input.mint ?? null },
	        useAuthority: {
	            index: 3,
	            isWritable: true,
	            value: input.useAuthority ?? null,
	        },
	        owner: {
	            index: 4,
	            isWritable: false,
	            value: input.owner ?? null,
	        },
	        tokenProgram: {
	            index: 5,
	            isWritable: false,
	            value: input.tokenProgram ?? null,
	        },
	        ataProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.ataProgram ?? null,
	        },
	        systemProgram: {
	            index: 7,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        rent: { index: 8, isWritable: false, value: input.rent ?? null },
	        useAuthorityRecord: {
	            index: 9,
	            isWritable: true,
	            value: input.useAuthorityRecord ?? null,
	        },
	        burner: {
	            index: 10,
	            isWritable: false,
	            value: input.burner ?? null,
	        },
	    };
	    // Arguments.
	    const resolvedArgs = { ...input };
	    // Default values.
	    if (!resolvedAccounts.metadata.value) {
	        resolvedAccounts.metadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.mint.value),
	        });
	    }
	    if (!resolvedAccounts.tokenProgram.value) {
	        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
	        resolvedAccounts.tokenProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.ataProgram.value) {
	        resolvedAccounts.ataProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
	        resolvedAccounts.ataProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.rent.value) {
	        resolvedAccounts.rent.value = (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111');
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
	    // Data.
	    const data = getUtilizeInstructionDataSerializer().serialize(resolvedArgs);
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	utilize.utilize = utilize$1;
	
	return utilize;
}

var verifyCollection$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(verifyCollection$1, "__esModule", { value: true });
verifyCollection$1.verifyCollection = verifyCollection$1.getVerifyCollectionInstructionDataSerializer = void 0;
const umi_1$3 = cjs$6;
const serializers_1$2 = serializers;
const shared_1$2 = shared;
function getVerifyCollectionInstructionDataSerializer() {
    return (0, serializers_1$2.mapSerializer)((0, serializers_1$2.struct)([['discriminator', (0, serializers_1$2.u8)()]], {
        description: 'VerifyCollectionInstructionData',
    }), (value) => ({ ...value, discriminator: 18 }));
}
verifyCollection$1.getVerifyCollectionInstructionDataSerializer = getVerifyCollectionInstructionDataSerializer;
// Instruction.
function verifyCollection(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: true,
            value: input.collectionAuthority ?? null,
        },
        payer: {
            index: 2,
            isWritable: true,
            value: input.payer ?? null,
        },
        collectionMint: {
            index: 3,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collection: {
            index: 4,
            isWritable: false,
            value: input.collection ?? null,
        },
        collectionMasterEditionAccount: {
            index: 5,
            isWritable: false,
            value: input.collectionMasterEditionAccount ?? null,
        },
        collectionAuthorityRecord: {
            index: 6,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$2.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getVerifyCollectionInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$3.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
verifyCollection$1.verifyCollection = verifyCollection;

var verifyCollectionV1 = {};

var hasRequiredVerifyCollectionV1;

function requireVerifyCollectionV1 () {
	if (hasRequiredVerifyCollectionV1) return verifyCollectionV1;
	hasRequiredVerifyCollectionV1 = 1;
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(verifyCollectionV1, "__esModule", { value: true });
	verifyCollectionV1.verifyCollectionV1 = verifyCollectionV1.getVerifyCollectionV1InstructionDataSerializer = void 0;
	const umi_1 = cjs$6;
	const serializers_1 = serializers;
	const accounts_1 = requireAccounts();
	const shared_1 = shared;
	function getVerifyCollectionV1InstructionDataSerializer() {
	    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
	        ['discriminator', (0, serializers_1.u8)()],
	        ['verifyCollectionV1Discriminator', (0, serializers_1.u8)()],
	    ], { description: 'VerifyCollectionV1InstructionData' }), (value) => ({
	        ...value,
	        discriminator: 52,
	        verifyCollectionV1Discriminator: 1,
	    }));
	}
	verifyCollectionV1.getVerifyCollectionV1InstructionDataSerializer = getVerifyCollectionV1InstructionDataSerializer;
	// Instruction.
	function verifyCollectionV1$1(context, input) {
	    // Program ID.
	    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
	    // Accounts.
	    const resolvedAccounts = {
	        authority: {
	            index: 0,
	            isWritable: false,
	            value: input.authority ?? null,
	        },
	        delegateRecord: {
	            index: 1,
	            isWritable: false,
	            value: input.delegateRecord ?? null,
	        },
	        metadata: {
	            index: 2,
	            isWritable: true,
	            value: input.metadata ?? null,
	        },
	        collectionMint: {
	            index: 3,
	            isWritable: false,
	            value: input.collectionMint ?? null,
	        },
	        collectionMetadata: {
	            index: 4,
	            isWritable: true,
	            value: input.collectionMetadata ?? null,
	        },
	        collectionMasterEdition: {
	            index: 5,
	            isWritable: false,
	            value: input.collectionMasterEdition ?? null,
	        },
	        systemProgram: {
	            index: 6,
	            isWritable: false,
	            value: input.systemProgram ?? null,
	        },
	        sysvarInstructions: {
	            index: 7,
	            isWritable: false,
	            value: input.sysvarInstructions ?? null,
	        },
	    };
	    // Default values.
	    if (!resolvedAccounts.authority.value) {
	        resolvedAccounts.authority.value = context.identity;
	    }
	    if (!resolvedAccounts.collectionMetadata.value) {
	        resolvedAccounts.collectionMetadata.value = (0, accounts_1.findMetadataPda)(context, {
	            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionMint.value),
	        });
	    }
	    if (!resolvedAccounts.collectionMasterEdition.value) {
	        resolvedAccounts.collectionMasterEdition.value = (0, accounts_1.findMasterEditionPda)(context, { mint: (0, shared_1.expectPublicKey)(resolvedAccounts.collectionMint.value) });
	    }
	    if (!resolvedAccounts.systemProgram.value) {
	        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
	        resolvedAccounts.systemProgram.isWritable = false;
	    }
	    if (!resolvedAccounts.sysvarInstructions.value) {
	        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
	    }
	    // Accounts in order.
	    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
	    // Keys and Signers.
	    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
	    // Data.
	    const data = getVerifyCollectionV1InstructionDataSerializer().serialize({});
	    // Bytes Created On Chain.
	    const bytesCreatedOnChain = 0;
	    return (0, umi_1.transactionBuilder)([
	        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
	    ]);
	}
	verifyCollectionV1.verifyCollectionV1 = verifyCollectionV1$1;
	
	return verifyCollectionV1;
}

var verifyCreatorV1$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(verifyCreatorV1$1, "__esModule", { value: true });
verifyCreatorV1$1.verifyCreatorV1 = verifyCreatorV1$1.getVerifyCreatorV1InstructionDataSerializer = void 0;
const umi_1$2 = cjs$6;
const serializers_1$1 = serializers;
const shared_1$1 = shared;
function getVerifyCreatorV1InstructionDataSerializer() {
    return (0, serializers_1$1.mapSerializer)((0, serializers_1$1.struct)([
        ['discriminator', (0, serializers_1$1.u8)()],
        ['verifyCreatorV1Discriminator', (0, serializers_1$1.u8)()],
    ], { description: 'VerifyCreatorV1InstructionData' }), (value) => ({
        ...value,
        discriminator: 52,
        verifyCreatorV1Discriminator: 0,
    }));
}
verifyCreatorV1$1.getVerifyCreatorV1InstructionDataSerializer = getVerifyCreatorV1InstructionDataSerializer;
// Instruction.
function verifyCreatorV1(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        authority: {
            index: 0,
            isWritable: false,
            value: input.authority ?? null,
        },
        delegateRecord: {
            index: 1,
            isWritable: false,
            value: input.delegateRecord ?? null,
        },
        metadata: {
            index: 2,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionMint: {
            index: 3,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collectionMetadata: {
            index: 4,
            isWritable: true,
            value: input.collectionMetadata ?? null,
        },
        collectionMasterEdition: {
            index: 5,
            isWritable: false,
            value: input.collectionMasterEdition ?? null,
        },
        systemProgram: {
            index: 6,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        sysvarInstructions: {
            index: 7,
            isWritable: false,
            value: input.sysvarInstructions ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarInstructions.value) {
        resolvedAccounts.sysvarInstructions.value = (0, umi_1$2.publicKey)('Sysvar1nstructions1111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1$1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getVerifyCreatorV1InstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$2.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
verifyCreatorV1$1.verifyCreatorV1 = verifyCreatorV1;

var verifySizedCollectionItem$1 = {};

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(verifySizedCollectionItem$1, "__esModule", { value: true });
verifySizedCollectionItem$1.verifySizedCollectionItem = verifySizedCollectionItem$1.getVerifySizedCollectionItemInstructionDataSerializer = void 0;
const umi_1$1 = cjs$6;
const serializers_1 = serializers;
const shared_1 = shared;
function getVerifySizedCollectionItemInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], { description: 'VerifySizedCollectionItemInstructionData' }), (value) => ({ ...value, discriminator: 30 }));
}
verifySizedCollectionItem$1.getVerifySizedCollectionItemInstructionDataSerializer = getVerifySizedCollectionItemInstructionDataSerializer;
// Instruction.
function verifySizedCollectionItem(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        metadata: {
            index: 0,
            isWritable: true,
            value: input.metadata ?? null,
        },
        collectionAuthority: {
            index: 1,
            isWritable: false,
            value: input.collectionAuthority ?? null,
        },
        payer: {
            index: 2,
            isWritable: true,
            value: input.payer ?? null,
        },
        collectionMint: {
            index: 3,
            isWritable: false,
            value: input.collectionMint ?? null,
        },
        collection: {
            index: 4,
            isWritable: true,
            value: input.collection ?? null,
        },
        collectionMasterEditionAccount: {
            index: 5,
            isWritable: false,
            value: input.collectionMasterEditionAccount ?? null,
        },
        collectionAuthorityRecord: {
            index: 6,
            isWritable: false,
            value: input.collectionAuthorityRecord ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getVerifySizedCollectionItemInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1$1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
verifySizedCollectionItem$1.verifySizedCollectionItem = verifySizedCollectionItem;

var hasRequiredInstructions;

function requireInstructions () {
	if (hasRequiredInstructions) return instructions;
	hasRequiredInstructions = 1;
	(function (exports) {
		/**
		 * This code was AUTOGENERATED using the kinobi library.
		 * Please DO NOT EDIT THIS FILE, instead use visitors
		 * to add features, then rerun kinobi to update it.
		 *
		 * @see https://github.com/metaplex-foundation/kinobi
		 */
		var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireApproveCollectionAuthority(), exports);
		__exportStar(requireApproveUseAuthority(), exports);
		__exportStar(bubblegumSetCollectionSize$1, exports);
		__exportStar(burnEditionNft$1, exports);
		__exportStar(requireBurnNft(), exports);
		__exportStar(requireBurnV1(), exports);
		__exportStar(requireCloseEscrowAccount(), exports);
		__exportStar(collect$1, exports);
		__exportStar(convertMasterEditionV1ToV2$1, exports);
		__exportStar(requireCreateEscrowAccount(), exports);
		__exportStar(requireCreateMasterEditionV3(), exports);
		__exportStar(requireCreateMetadataAccountV3(), exports);
		__exportStar(requireCreateV1(), exports);
		__exportStar(requireDelegateAuthorityItemV1(), exports);
		__exportStar(requireDelegateCollectionItemV1(), exports);
		__exportStar(requireDelegateCollectionV1(), exports);
		__exportStar(requireDelegateDataItemV1(), exports);
		__exportStar(requireDelegateDataV1(), exports);
		__exportStar(requireDelegateLockedTransferV1(), exports);
		__exportStar(requireDelegatePrintDelegateV1(), exports);
		__exportStar(requireDelegateProgrammableConfigItemV1(), exports);
		__exportStar(requireDelegateProgrammableConfigV1(), exports);
		__exportStar(requireDelegateSaleV1(), exports);
		__exportStar(requireDelegateStakingV1(), exports);
		__exportStar(requireDelegateStandardV1(), exports);
		__exportStar(requireDelegateTransferV1(), exports);
		__exportStar(requireDelegateUtilityV1(), exports);
		__exportStar(requireDeprecatedMintNewEditionFromMasterEditionViaPrintingToken(), exports);
		__exportStar(requireFreezeDelegatedAccount(), exports);
		__exportStar(requireLockV1(), exports);
		__exportStar(requireMigrate(), exports);
		__exportStar(mintNewEditionFromMasterEditionViaToken$1, exports);
		__exportStar(mintNewEditionFromMasterEditionViaVaultProxy$1, exports);
		__exportStar(requireMintV1(), exports);
		__exportStar(requirePrintV1(), exports);
		__exportStar(requirePrintV2(), exports);
		__exportStar(puffMetadata$1, exports);
		__exportStar(removeCreatorVerification$1, exports);
		__exportStar(requireRevokeAuthorityItemV1(), exports);
		__exportStar(requireRevokeCollectionAuthority(), exports);
		__exportStar(requireRevokeCollectionItemV1(), exports);
		__exportStar(requireRevokeCollectionV1(), exports);
		__exportStar(requireRevokeDataItemV1(), exports);
		__exportStar(requireRevokeDataV1(), exports);
		__exportStar(requireRevokeLockedTransferV1(), exports);
		__exportStar(requireRevokeMigrationV1(), exports);
		__exportStar(requireRevokePrintDelegateV1(), exports);
		__exportStar(requireRevokeProgrammableConfigItemV1(), exports);
		__exportStar(requireRevokeProgrammableConfigV1(), exports);
		__exportStar(requireRevokeSaleV1(), exports);
		__exportStar(requireRevokeStakingV1(), exports);
		__exportStar(requireRevokeStandardV1(), exports);
		__exportStar(requireRevokeTransferV1(), exports);
		__exportStar(requireRevokeUseAuthority(), exports);
		__exportStar(requireRevokeUtilityV1(), exports);
		__exportStar(setAndVerifyCollection$1, exports);
		__exportStar(setAndVerifySizedCollectionItem$1, exports);
		__exportStar(setCollectionSize$1, exports);
		__exportStar(requireSetTokenStandard(), exports);
		__exportStar(signMetadata$1, exports);
		__exportStar(requireThawDelegatedAccount(), exports);
		__exportStar(transferOutOfEscrow$1, exports);
		__exportStar(requireTransferV1(), exports);
		__exportStar(requireUnlockV1(), exports);
		__exportStar(unverifyCollection$1, exports);
		__exportStar(requireUnverifyCollectionV1(), exports);
		__exportStar(unverifyCreatorV1$1, exports);
		__exportStar(unverifySizedCollectionItem$1, exports);
		__exportStar(requireUpdateAsAuthorityItemDelegateV2(), exports);
		__exportStar(requireUpdateAsCollectionDelegateV2(), exports);
		__exportStar(requireUpdateAsCollectionItemDelegateV2(), exports);
		__exportStar(requireUpdateAsDataDelegateV2(), exports);
		__exportStar(requireUpdateAsDataItemDelegateV2(), exports);
		__exportStar(requireUpdateAsProgrammableConfigDelegateV2(), exports);
		__exportStar(requireUpdateAsProgrammableConfigItemDelegateV2(), exports);
		__exportStar(requireUpdateAsUpdateAuthorityV2(), exports);
		__exportStar(updateMetadataAccountV2$1, exports);
		__exportStar(updatePrimarySaleHappenedViaToken$1, exports);
		__exportStar(requireUpdateV1(), exports);
		__exportStar(requireUseV1(), exports);
		__exportStar(requireUtilize(), exports);
		__exportStar(verifyCollection$1, exports);
		__exportStar(requireVerifyCollectionV1(), exports);
		__exportStar(verifyCreatorV1$1, exports);
		__exportStar(verifySizedCollectionItem$1, exports);
		
	} (instructions));
	return instructions;
}

var programs = {};

var mplTokenMetadata$1 = {};

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getMplTokenMetadataProgramId = exports.getMplTokenMetadataProgram = exports.createMplTokenMetadataProgram = exports.MPL_TOKEN_METADATA_PROGRAM_ID = void 0;
	const errors_1 = errors;
	exports.MPL_TOKEN_METADATA_PROGRAM_ID = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s';
	function createMplTokenMetadataProgram() {
	    return {
	        name: 'mplTokenMetadata',
	        publicKey: exports.MPL_TOKEN_METADATA_PROGRAM_ID,
	        getErrorFromCode(code, cause) {
	            return (0, errors_1.getMplTokenMetadataErrorFromCode)(code, this, cause);
	        },
	        getErrorFromName(name, cause) {
	            return (0, errors_1.getMplTokenMetadataErrorFromName)(name, this, cause);
	        },
	        isOnCluster() {
	            return true;
	        },
	    };
	}
	exports.createMplTokenMetadataProgram = createMplTokenMetadataProgram;
	function getMplTokenMetadataProgram(context, clusterFilter) {
	    return context.programs.get('mplTokenMetadata', clusterFilter);
	}
	exports.getMplTokenMetadataProgram = getMplTokenMetadataProgram;
	function getMplTokenMetadataProgramId(context, clusterFilter) {
	    return context.programs.getPublicKey('mplTokenMetadata', exports.MPL_TOKEN_METADATA_PROGRAM_ID, clusterFilter);
	}
	exports.getMplTokenMetadataProgramId = getMplTokenMetadataProgramId;
	
} (mplTokenMetadata$1));

(function (exports) {
	/**
	 * This code was AUTOGENERATED using the kinobi library.
	 * Please DO NOT EDIT THIS FILE, instead use visitors
	 * to add features, then rerun kinobi to update it.
	 *
	 * @see https://github.com/metaplex-foundation/kinobi
	 */
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(mplTokenMetadata$1, exports);
	
} (programs));

var hasRequiredGenerated;

function requireGenerated () {
	if (hasRequiredGenerated) return generated$1;
	hasRequiredGenerated = 1;
	(function (exports) {
		/**
		 * This code was AUTOGENERATED using the kinobi library.
		 * Please DO NOT EDIT THIS FILE, instead use visitors
		 * to add features, then rerun kinobi to update it.
		 *
		 * @see https://github.com/metaplex-foundation/kinobi
		 */
		var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(requireAccounts(), exports);
		__exportStar(errors, exports);
		__exportStar(requireInstructions(), exports);
		__exportStar(programs, exports);
		__exportStar(shared, exports);
		__exportStar(requireTypes(), exports);
		
	} (generated$1));
	return generated$1;
}

var createHelpers = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createFungibleAsset = exports.createFungible = exports.createProgrammableNft = exports.createNft = exports.createAndMint = void 0;
	const umi_1 = cjs$6;
	const generated_1 = requireGenerated();
	const createAndMint = (context, input) => (0, umi_1.transactionBuilder)()
	    .add((0, generated_1.createV1)(context, input))
	    .add((0, generated_1.mintV1)(context, { ...input, mint: (0, umi_1.publicKey)(input.mint) }));
	exports.createAndMint = createAndMint;
	const createNft = (context, input) => (0, exports.createAndMint)(context, {
	    ...input,
	    tokenStandard: generated_1.TokenStandard.NonFungible,
	    amount: 1,
	});
	exports.createNft = createNft;
	const createProgrammableNft = (context, input) => (0, exports.createAndMint)(context, {
	    ...input,
	    tokenStandard: generated_1.TokenStandard.ProgrammableNonFungible,
	    amount: 1,
	});
	exports.createProgrammableNft = createProgrammableNft;
	const createFungible = (context, input) => (0, generated_1.createV1)(context, {
	    ...input,
	    tokenStandard: generated_1.TokenStandard.Fungible,
	});
	exports.createFungible = createFungible;
	const createFungibleAsset = (context, input) => (0, generated_1.createV1)(context, {
	    ...input,
	    tokenStandard: generated_1.TokenStandard.FungibleAsset,
	});
	exports.createFungibleAsset = createFungibleAsset;
	
} (createHelpers));

var digitalAssetWithToken = {};

Object.defineProperty(digitalAssetWithToken, "__esModule", { value: true });
digitalAssetWithToken.deserializeDigitalAssetWithToken = digitalAssetWithToken.fetchAllDigitalAssetWithTokenByMint = digitalAssetWithToken.fetchAllDigitalAssetWithTokenByOwnerAndMint = digitalAssetWithToken.fetchAllDigitalAssetWithTokenByOwner = digitalAssetWithToken.fetchDigitalAssetWithTokenByMint = digitalAssetWithToken.fetchDigitalAssetWithAssociatedToken = digitalAssetWithToken.fetchDigitalAssetWithToken = void 0;
const umi_1 = cjs$6;
const mpl_toolbox_1$1 = src;
const digitalAsset_1 = requireDigitalAsset();
const generated_1$1 = requireGenerated();
async function fetchDigitalAssetWithToken(context, mint, token, options) {
    const [mintAccount, metadataAccount, editionAccount, tokenAccount, tokenRecordAccount,] = await context.rpc.getAccounts([
        mint,
        (0, generated_1$1.findMetadataPda)(context, { mint })[0],
        (0, generated_1$1.findMasterEditionPda)(context, { mint })[0],
        token,
        (0, generated_1$1.findTokenRecordPda)(context, { mint, token })[0],
    ], options);
    (0, umi_1.assertAccountExists)(mintAccount, 'Mint');
    (0, umi_1.assertAccountExists)(metadataAccount, 'Metadata');
    (0, umi_1.assertAccountExists)(tokenAccount, 'Token');
    return deserializeDigitalAssetWithToken(mintAccount, metadataAccount, tokenAccount, editionAccount.exists ? editionAccount : undefined, tokenRecordAccount.exists ? tokenRecordAccount : undefined);
}
digitalAssetWithToken.fetchDigitalAssetWithToken = fetchDigitalAssetWithToken;
async function fetchDigitalAssetWithAssociatedToken(context, mint, owner, options) {
    const [token] = (0, mpl_toolbox_1$1.findAssociatedTokenPda)(context, { mint, owner });
    return fetchDigitalAssetWithToken(context, mint, token, options);
}
digitalAssetWithToken.fetchDigitalAssetWithAssociatedToken = fetchDigitalAssetWithAssociatedToken;
async function fetchDigitalAssetWithTokenByMint(context, mint, options) {
    const digitalAssets = await fetchAllDigitalAssetWithTokenByMint(context, mint, options);
    if (digitalAssets.length === 0) {
        throw new Error('No valid token accounts found for the provided mint');
    }
    if (digitalAssets.length > 1) {
        throw new Error('Multiple valid token accounts found for the provided mint' +
            'use `fetchAllDigitalAssetWithTokenByMint` instead to retrieve them all.');
    }
    return digitalAssets[0];
}
digitalAssetWithToken.fetchDigitalAssetWithTokenByMint = fetchDigitalAssetWithTokenByMint;
async function fetchAllDigitalAssetWithTokenByOwner(context, owner, options) {
    const tokens = await (0, mpl_toolbox_1$1.fetchAllTokenByOwner)(context, owner, options);
    const accountsToFetch = tokens.flatMap((token) => [
        token.mint,
        (0, generated_1$1.findMetadataPda)(context, { mint: token.mint })[0],
        (0, generated_1$1.findMasterEditionPda)(context, { mint: token.mint })[0],
        (0, generated_1$1.findTokenRecordPda)(context, {
            mint: token.mint,
            token: token.publicKey,
        })[0],
    ]);
    const accounts = await context.rpc.getAccounts(accountsToFetch, options);
    return (0, umi_1.zipMap)(tokens, (0, umi_1.chunk)(accounts, 4), (token, otherAccounts) => {
        if (!otherAccounts || otherAccounts.length !== 4) {
            return [];
        }
        const [mintAccount, metadataAccount, editionAccount, tokenRecordAccount] = otherAccounts;
        if (!mintAccount.exists || !metadataAccount.exists) {
            return [];
        }
        try {
            return [
                {
                    ...(0, digitalAsset_1.deserializeDigitalAsset)(mintAccount, metadataAccount, editionAccount.exists ? editionAccount : undefined),
                    token,
                    tokenRecord: tokenRecordAccount.exists
                        ? (0, generated_1$1.deserializeTokenRecord)(tokenRecordAccount)
                        : undefined,
                },
            ];
        }
        catch (e) {
            return [];
        }
    }).flat();
}
digitalAssetWithToken.fetchAllDigitalAssetWithTokenByOwner = fetchAllDigitalAssetWithTokenByOwner;
function fetchAllDigitalAssetWithTokenByOwnerAndMint(context, owner, mint, options) {
    return fetchAllDigitalAssetWithTokenByOwner(context, owner, {
        ...options,
        mint,
    });
}
digitalAssetWithToken.fetchAllDigitalAssetWithTokenByOwnerAndMint = fetchAllDigitalAssetWithTokenByOwnerAndMint;
/**
 * Retrives the largest 20 token accounts only for performance reasons.
 * For a more robust solution, please use an external indexer.
 */
async function fetchAllDigitalAssetWithTokenByMint(context, mint, options) {
    const largestTokens = await (0, mpl_toolbox_1$1.findLargestTokensByMint)(context, mint, options);
    const nonEmptyTokens = largestTokens
        .filter((token) => token.amount.basisPoints > 0)
        .map((token) => token.publicKey);
    const accountsToFetch = [
        mint,
        (0, generated_1$1.findMetadataPda)(context, { mint })[0],
        (0, generated_1$1.findMasterEditionPda)(context, { mint })[0],
    ];
    accountsToFetch.push(...nonEmptyTokens.flatMap((token) => [
        token,
        (0, generated_1$1.findTokenRecordPda)(context, { mint, token })[0],
    ]));
    const accounts = await context.rpc.getAccounts(accountsToFetch, options);
    const [mintAccount, metadataAccount, editionAccount, ...tokenAccounts] = accounts;
    (0, umi_1.assertAccountExists)(mintAccount, 'Mint');
    (0, umi_1.assertAccountExists)(metadataAccount, 'Metadata');
    return (0, umi_1.chunk)(tokenAccounts, 2).flatMap(([tokenAccount, tokenRecordAccount]) => {
        if (!tokenAccount.exists)
            return [];
        return [
            deserializeDigitalAssetWithToken(mintAccount, metadataAccount, tokenAccount, editionAccount.exists ? editionAccount : undefined, tokenRecordAccount.exists ? tokenRecordAccount : undefined),
        ];
    });
}
digitalAssetWithToken.fetchAllDigitalAssetWithTokenByMint = fetchAllDigitalAssetWithTokenByMint;
function deserializeDigitalAssetWithToken(mintAccount, metadataAccount, tokenAccount, editionAccount, tokenRecordAccount) {
    return {
        ...(0, digitalAsset_1.deserializeDigitalAsset)(mintAccount, metadataAccount, editionAccount),
        token: (0, mpl_toolbox_1$1.deserializeToken)(tokenAccount),
        tokenRecord: tokenRecordAccount
            ? (0, generated_1$1.deserializeTokenRecord)(tokenRecordAccount)
            : undefined,
    };
}
digitalAssetWithToken.deserializeDigitalAssetWithToken = deserializeDigitalAssetWithToken;

var fetchJsonMetadata$1 = {};

Object.defineProperty(fetchJsonMetadata$1, "__esModule", { value: true });
fetchJsonMetadata$1.fetchJsonMetadata = void 0;
const errors_1 = errors$2;
const fetchJsonMetadata = async (context, uri) => {
    try {
        return await context.downloader.downloadJson(uri);
    }
    catch (error) {
        throw new errors_1.TokenMetadataError(`Failed to fetch JSON metadata from ${uri}`, error);
    }
};
fetchJsonMetadata$1.fetchJsonMetadata = fetchJsonMetadata;

var plugin = {};

Object.defineProperty(plugin, "__esModule", { value: true });
plugin.mplTokenMetadata = void 0;
const mpl_toolbox_1 = src;
const generated_1 = requireGenerated();
const mplTokenMetadata = () => ({
    install(umi) {
        umi.use((0, mpl_toolbox_1.mplToolbox)());
        umi.programs.add((0, generated_1.createMplTokenMetadataProgram)(), false);
    },
});
plugin.mplTokenMetadata = mplTokenMetadata;

(function (exports) {
	var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal$1 && commonjsGlobal$1.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(requireGenerated(), exports);
	__exportStar(requireHooked(), exports);
	__exportStar(createHelpers, exports);
	__exportStar(requireDigitalAsset(), exports);
	__exportStar(digitalAssetWithToken, exports);
	__exportStar(errors$2, exports);
	__exportStar(fetchJsonMetadata$1, exports);
	__exportStar(plugin, exports);
	
} (src$1));

const { decodeUTF8 } = tweetnaclutil;
/**
 * Class to interact with Nosana Programs on the Solana Blockchain,
 * with the use of Anchor.
 */
class SolanaManager {
    constructor(environment = 'devnet', wallet, config) {
        this.stake = {
            program: null,
            poolsProgram: null,
            rewardsProgram: null,
        };
        this.config = solanaConfigPreset[environment];
        Object.assign(this.config, config);
        this.wallet = getWallet(wallet);
        if (typeof browser$1$1 !== 'undefined' && browser$1$1.env?.ANCHOR_PROVIDER_URL) {
            // TODO: figure out if we want to support this or not
            this.provider = AnchorProvider.env();
        }
        else {
            let node = this.config.network;
            if (!this.config.network.includes('http')) {
                node = clusterApiUrl(this.config.network);
            }
            this.connection = new Connection(node, {
                commitment: 'confirmed',
                confirmTransactionInitialTimeout: 60000,
            });
            this.provider = new AnchorProvider(this.connection, this.wallet, {});
        }
        setProvider(this.provider);
    }
    async requestAirdrop(amount = 1e9, publicKey) {
        try {
            if (this.connection) {
                let txhash = await this.connection.requestAirdrop(publicKey ? publicKey : this.wallet.publicKey, amount);
                return txhash;
            }
        }
        catch (e) {
            console.error(e);
        }
        return false;
    }
    /**
     * Fetches latest NOS price from coingecko
     * @returns NOS Price in BTC, ETH and USD
     */
    async getNosPrice() {
        let result = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=nosana&vs_currencies=usd');
        const data = await result.json();
        return data.nosana;
    }
    /**
     * Get NOS Balance of an address
     * @param address
     * @returns
     */
    async getNosBalance(address) {
        if (!address) {
            address = this.provider?.wallet.publicKey;
        }
        if (typeof address === 'string')
            address = new PublicKey(address);
        const mintAccount = new PublicKey(this.config.nos_address);
        const account = await this.connection.getTokenAccountsByOwner(address, {
            mint: mintAccount,
        });
        if (!account.value[0])
            return;
        const tokenAddress = new PublicKey(account.value[0].pubkey.toString());
        const tokenBalance = await this.connection.getTokenAccountBalance(tokenAddress);
        return tokenBalance.value;
    }
    /**
     * Get SOL balance of an address
     * @param address
     * @returns
     */
    async getSolBalance(address) {
        if (!address) {
            address = this.provider?.wallet.publicKey;
        }
        if (typeof address === 'string')
            address = new PublicKey(address);
        const tokenBalance = await this.connection.getBalance(address);
        return tokenBalance;
    }
    /**
     * Finds the MetaPlex metadata address for an NFT mint
     * See https://docs.metaplex.com/programs/token-metadata/changelog/v1.0
     * @param mint Publickey address of the NFT
     */
    getMetadataPDA(mint) {
        const metaplexMetadata = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
        return pda$1([utf8$8.encode('metadata'), metaplexMetadata.toBuffer(), mint.toBuffer()], metaplexMetadata);
    }
    /**
     * Find the first NFT from `collection` owned by `owner`
     * @param owner Publickey address of the owner of the NFT
     * @param collection Publickey address of the NFT collection
     */
    async getNftFromCollection(owner, collection) {
        if (typeof owner === 'string')
            owner = new PublicKey(owner);
        const tokens = (await this.connection.getParsedTokenAccountsByOwner(owner, {
            programId: TOKEN_PROGRAM_ID,
        })).value;
        for (let i = 0; i < tokens.length; i++) {
            const token = tokens[i];
            try {
                const parsedData = token.account.data.parsed
                    .info;
                if (parsedData.tokenAmount.uiAmount < 1) {
                    continue;
                }
                const metadataAddress = this.getMetadataPDA(new PublicKey(parsedData.mint));
                const info = await this.connection.getAccountInfo(metadataAddress);
                if (info) {
                    let offset = 279;
                    if (info.data.length === 607) {
                        // New metadata account format
                        offset = 207;
                    }
                    const verified = Buffer.from(info.data)
                        .reverse()
                        .subarray(offset + 32, offset + 33)
                        .reverse()[0];
                    const collectionFromToken = bs58$1.encode(info.data
                        .reverse()
                        .subarray(offset, offset + 32)
                        .reverse());
                    if (collectionFromToken === collection && verified) {
                        return new PublicKey(parsedData.mint);
                    }
                }
            }
            catch (e) {
                // continue
            }
        }
        return;
    }
    /**
     * Transfer NFT to other address
     * @param destination
     * @param nftAddress
     * @returns
     */
    async transferNft(destination, nftAddress) {
        if (typeof destination === 'string')
            destination = new PublicKey(destination);
        if (typeof nftAddress === 'string')
            nftAddress = new PublicKey(nftAddress);
        try {
            const transaction = new Transaction$3();
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                transaction.add(addPriorityFee);
            }
            const destinationAta = await getAssociatedTokenAddress(nftAddress, destination);
            const sourceAta = await getAssociatedTokenAddress(nftAddress, (this.provider?.wallet).payer.publicKey);
            // check if destination ATA already exists, if not create it
            try {
                const account = await getAccount(this.connection, destinationAta);
            }
            catch (error) {
                // ata not found, try to create one
                transaction.add(createAssociatedTokenAccountInstruction((this.provider?.wallet).payer.publicKey, destinationAta, destination, nftAddress, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID));
            }
            transaction.add(createTransferInstruction(sourceAta, destinationAta, (this.provider?.wallet).payer.publicKey, 1));
            const hash = await this.connection.getLatestBlockhash();
            transaction.recentBlockhash = hash.blockhash;
            const tx = await sendAndConfirmTransaction(this.connection, transaction, [(this.provider?.wallet).payer], {});
            return tx;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Create a NOS ATA for given address
     * @param address
     * @returns ATA public key
     */
    async createNosAta(address, instructionOnly = false) {
        if (typeof address === 'string')
            address = new PublicKey(address);
        const ata = await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), address);
        let tx;
        try {
            await getAccount(this.connection, ata);
        }
        catch (error) {
            try {
                const associatedToken = getAssociatedTokenAddressSync(new PublicKey(this.config.nos_address), address, false, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID);
                const transaction = new Transaction$3();
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    transaction.add(addPriorityFee);
                }
                transaction.add(createAssociatedTokenAccountInstruction((this.provider?.wallet).payer.publicKey, associatedToken, address, new PublicKey(this.config.nos_address), TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID));
                if (instructionOnly) {
                    return transaction.instructions;
                }
                else {
                    await sendAndConfirmTransaction(this.connection, transaction, [(this.provider?.wallet).payer], {});
                    tx = associatedToken;
                }
            }
            catch (e) {
                console.error('createAssociatedTokenAccount', e);
            }
        }
        return tx;
    }
    /**
     * get the NOS ATA of an address
     * @param address
     * @returns ATA Publickey
     */
    async getNosATA(address) {
        if (typeof address === 'string')
            address = new PublicKey(address);
        const mint = new PublicKey(this.config.nos_address);
        const ata = await getAssociatedTokenAddress(mint, address);
        return ata;
    }
    /**
     * Function to load the Nosana Jobs program into JS
     * https://docs.nosana.io/programs/jobs.html
     */
    async loadNosanaJobs() {
        if (!this.jobs) {
            const programId = new PublicKey(this.config.jobs_address);
            const idl = (await Program$1.fetchIdl(programId.toString()));
            this.jobs = new Program$1(idl, programId);
        }
    }
    /**
     * Function to load the Nosana Nodes program into JS
     * https://docs.nosana.io/programs/nodes.html
     */
    async loadNosanaNodes() {
        if (!this.nodes) {
            const programId = new PublicKey(this.config.nodes_address);
            const idl = (await Program$1.fetchIdl(programId.toString()));
            this.nodes = new Program$1(idl, programId);
        }
    }
    /**
     * Function to load the Nosana Stake program into JS
     * https://docs.nosana.io/programs/staking.html
     */
    async loadNosanaStake() {
        if (!this.stake || !this.stake.program) {
            const programId = new PublicKey(this.config.stake_address);
            const poolProgramId = new PublicKey(this.config.pools_address);
            const rewardsProgramId = new PublicKey(this.config.rewards_address);
            const idl = (await Program$1.fetchIdl(programId.toString()));
            const poolIdl = (await Program$1.fetchIdl(poolProgramId.toString()));
            const rewardIdl = (await Program$1.fetchIdl(rewardsProgramId.toString()));
            this.stake.program = new Program$1(idl, programId);
            this.stake.poolsProgram = new Program$1(poolIdl, poolProgramId);
            this.stake.rewardsProgram = new Program$1(rewardIdl, rewardsProgramId);
        }
    }
    /**
     * Function to set and calculate most account addresses needed for instructions
     */
    async setAccounts() {
        if (!this.accounts) {
            await this.loadNosanaJobs();
            const authority = this.wallet.publicKey;
            const rewardsProgram = new PublicKey(this.config.rewards_address);
            const mint = new PublicKey(this.config.nos_address);
            const market = new PublicKey(this.config.market_address);
            this.accounts = {
                market,
                vault: pda$1([market.toBuffer(), mint.toBuffer()], this.jobs.programId),
                user: await token$1.associatedAddress({
                    mint,
                    owner: this.provider.wallet.publicKey,
                }),
                payer: authority,
                authority,
                rewardsVault: pda$1([mint.toBuffer()], rewardsProgram),
                rewardsReflection: pda$1([utf8$8.encode('reflection')], rewardsProgram),
                rewardsProgram,
                systemProgram: SystemProgram.programId,
                tokenProgram: TOKEN_PROGRAM_ID,
            };
        }
    }
    async setStakeAccounts() {
        if (!this.stakeAccounts) {
            await this.loadNosanaStake();
            const poolId = new PublicKey(this.config.pool_address);
            const authority = this.provider.wallet.publicKey;
            const rewardsProgramId = new PublicKey(this.config.rewards_address);
            const poolsProgramId = new PublicKey(this.config.pools_address);
            const mint = new PublicKey(this.config.nos_address);
            const [vault] = await PublicKey.findProgramAddress([utf8$8.encode('vault'), mint.toBuffer(), authority.toBuffer()], new PublicKey(this.config.stake_address));
            const [reward] = await PublicKey.findProgramAddress([utf8$8.encode('reward'), authority.toBuffer()], rewardsProgramId);
            const [reflection] = await PublicKey.findProgramAddress([utf8$8.encode('reflection')], rewardsProgramId);
            const [stake] = await PublicKey.findProgramAddress([utf8$8.encode('stake'), mint.toBuffer(), authority.toBuffer()], new PublicKey(this.config.stake_address));
            this.stakeAccounts = {
                // solana native
                systemProgram: SystemProgram.programId,
                rent: SYSVAR_RENT_PUBKEY,
                tokenProgram: TOKEN_PROGRAM_ID,
                feePayer: authority,
                clock: SYSVAR_CLOCK_PUBKEY,
                // custom
                authority,
                stake,
                reflection,
                user: await getAssociatedTokenAddress(mint, authority),
                vault,
                reward,
                mint,
            };
            const [poolVault] = await PublicKey.findProgramAddress([utf8$8.encode('vault'), poolId.toBuffer()], poolsProgramId);
            const [rewardsVault] = await PublicKey.findProgramAddress([mint.toBuffer()], rewardsProgramId);
            this.poolAccounts = {
                ...this.stakeAccounts,
                pool: poolId,
                vault: poolVault,
                rewardsVault,
                rewardsReflection: this.stakeAccounts.reflection,
                rewardsProgram: rewardsProgramId,
            };
        }
    }
    /**
     * Sign message with wallet
     * @param message
     * @param verify
     * @returns
     */
    signMessage(message, verify = false) {
        const messageBytes = decodeUTF8(message);
        const signature = nacl.sign.detached(messageBytes, (this.provider?.wallet).payer.secretKey);
        if (verify) {
            const result = nacl.sign.detached.verify(messageBytes, signature, (this.provider?.wallet).payer.publicKey.toBytes());
            return result;
        }
        return signature;
    }
    /**
     * Get transaction data
     * @param txs - array of transaction hashes
     * @param options - config GetVersionedTransactionConfig
     * @returns transactions[]
     */
    async getParsedTransactions(txs, options) {
        return await this.connection.getParsedTransactions(txs, options);
    }
    /**
     * Send NOS to address
     * @param amount
     * @param destination
     * @returns
     */
    async sendNos(amount, destination, instructionOnly = false) {
        if (typeof destination === 'string')
            destination = new PublicKey(destination);
        try {
            const transaction = new Transaction$3();
            if (this.config.priority_fee && !instructionOnly) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                transaction.add(addPriorityFee);
            }
            const destinationAta = await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), destination);
            const sourceAta = await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), (this.provider?.wallet).payer.publicKey);
            // check if destination ATA already exists, if not create it
            try {
                await getAccount(this.connection, destinationAta);
            }
            catch (error) {
                // ata not found, try to create one
                transaction.add(createAssociatedTokenAccountInstruction((this.provider?.wallet).payer.publicKey, destinationAta, destination, new PublicKey(this.config.nos_address), TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID));
            }
            transaction.add(createTransferInstruction(sourceAta, destinationAta, (this.provider?.wallet).payer.publicKey, amount));
            if (instructionOnly) {
                return transaction.instructions;
            }
            else {
                const hash = await this.connection.getLatestBlockhash();
                transaction.recentBlockhash = hash.blockhash;
                return await sendAndConfirmTransaction(this.connection, transaction, [(this.provider?.wallet).payer], {});
            }
        }
        catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Send SOL to address
     * @param amount
     * @param destination
     * @param instructionOnly
     * @returns
     */
    async sendSol(amount, destination, instructionOnly = false) {
        if (typeof destination === 'string')
            destination = new PublicKey(destination);
        try {
            const transaction = new Transaction$3();
            if (this.config.priority_fee && !instructionOnly) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                transaction.add(addPriorityFee);
            }
            transaction.add(SystemProgram.transfer({
                fromPubkey: (this.provider?.wallet).payer.publicKey,
                toPubkey: destination,
                lamports: amount,
            }));
            if (instructionOnly) {
                return transaction.instructions;
            }
            else {
                const hash = await this.connection.getLatestBlockhash();
                transaction.recentBlockhash = hash.blockhash;
                return await sendAndConfirmTransaction(this.connection, transaction, [(this.provider?.wallet).payer], {});
            }
        }
        catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Create a Collection with Nosana Node config
     */
    async createNodeCollection() {
        const umi = createUmi$1(this.config.network, {
            commitment: 'confirmed',
            confirmTransactionInitialTimeout: 120000,
        })
            .use(src$1.mplTokenMetadata())
            .use(src.mplToolbox());
        const signer = createSignerFromKeypair$1(umi, fromWeb3JsKeypair((this.provider?.wallet).payer));
        umi.use(signerIdentity$1(signer));
        console.log(`Creating collection...`);
        const collectionMint = generateSigner$1(umi);
        const transaction = await src$1.createNft(umi, {
            mint: collectionMint,
            name: 'Nosana Node Collection',
            symbol: 'NOS-NODE',
            uri: 'https://shdw-drive.genesysgo.net/3ndTeBWA1s9ETaivEMUcEULomQnmNkY1cE4Gb1N6r6Ec/nosana-node.json',
            sellerFeeBasisPoints: percentAmount$1(100),
            isCollection: true,
            creators: [
                {
                    address: publicKey$4('NosanarMxfrZbyCx5CotBVrzxiPcrnhj6ickpX9vRkB'),
                    verified: false,
                    share: 100,
                },
            ],
        }).prepend(src.setComputeUnitPrice(umi, {
            microLamports: this.config.priority_fee ? this.config.priority_fee : 0,
        }));
        const tx = await transaction.sendAndConfirm(umi);
        const createdCollectionNft = await src$1.fetchDigitalAsset(umi, collectionMint.publicKey);
        console.log('Created collection', createdCollectionNft.mint.publicKey.toString());
        return {
            collection: createdCollectionNft.mint.publicKey.toString(),
            tx: base58$4.deserialize(tx.signature)[0],
        };
    }
    /**
     * Create & verify SFT for collection
     * @param collectionAddress - string
     */
    async createAndVerifySft(collectionAddress) {
        const umi = createUmi$1(this.config.network, {
            commitment: 'confirmed',
            confirmTransactionInitialTimeout: 120000,
        })
            .use(src$1.mplTokenMetadata())
            .use(src.mplToolbox());
        const signer = createSignerFromKeypair$1(umi, fromWeb3JsKeypair((this.provider?.wallet).payer));
        umi.use(signerIdentity$1(signer));
        const umiKeypair = keypairIdentity$1(fromWeb3JsKeypair((this.provider?.wallet).payer));
        umi.use(umiKeypair);
        const newMint = generateSigner$1(umi);
        const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: 100000,
        });
        const createSFTix = await src$1.createFungibleAsset(umi, {
            mint: newMint,
            authority: umi.identity,
            updateAuthority: umi.identity,
            name: 'Nosana Node SFT',
            uri: 'https://shdw-drive.genesysgo.net/3ndTeBWA1s9ETaivEMUcEULomQnmNkY1cE4Gb1N6r6Ec/nosana-node.json',
            sellerFeeBasisPoints: percentAmount$1(0),
            decimals: some$1(0), // for 0 decimals use some(0)
            isMutable: true,
            isCollection: false,
            collection: {
                verified: false,
                key: publicKey$4(collectionAddress),
            },
        });
        await createSFTix
            .prepend(transactionBuilder$1([
            // @ts-ignore
            { instruction: addPriorityFee, bytesCreatedOnChain: 0, signers: [] },
        ]))
            .sendAndConfirm(umi);
        console.log('Created SFT address', newMint.publicKey.toString());
        await sleep(5);
        const metadata = await src$1.fetchMetadataFromSeeds(umi, {
            // @ts-ignore
            mint: newMint,
        });
        const verifyCollection = await src$1.verifyCollectionV1(umi, {
            collectionMint: publicKey$4(collectionAddress),
            // @ts-ignore
            metadata: metadata,
            authority: umi.identity,
        });
        const tx = await verifyCollection
            .prepend(transactionBuilder$1([
            // @ts-ignore
            { instruction: addPriorityFee, bytesCreatedOnChain: 0, signers: [] },
        ]))
            .sendAndConfirm(umi);
        console.log('Verified NFT collection', collectionAddress);
        return {
            tx,
            sft: newMint.publicKey.toString(),
        };
    }
}

const denyList = new Set([
	'ENOTFOUND',
	'ENETUNREACH',

	// SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
	'UNABLE_TO_GET_ISSUER_CERT',
	'UNABLE_TO_GET_CRL',
	'UNABLE_TO_DECRYPT_CERT_SIGNATURE',
	'UNABLE_TO_DECRYPT_CRL_SIGNATURE',
	'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',
	'CERT_SIGNATURE_FAILURE',
	'CRL_SIGNATURE_FAILURE',
	'CERT_NOT_YET_VALID',
	'CERT_HAS_EXPIRED',
	'CRL_NOT_YET_VALID',
	'CRL_HAS_EXPIRED',
	'ERROR_IN_CERT_NOT_BEFORE_FIELD',
	'ERROR_IN_CERT_NOT_AFTER_FIELD',
	'ERROR_IN_CRL_LAST_UPDATE_FIELD',
	'ERROR_IN_CRL_NEXT_UPDATE_FIELD',
	'OUT_OF_MEM',
	'DEPTH_ZERO_SELF_SIGNED_CERT',
	'SELF_SIGNED_CERT_IN_CHAIN',
	'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',
	'UNABLE_TO_VERIFY_LEAF_SIGNATURE',
	'CERT_CHAIN_TOO_LONG',
	'CERT_REVOKED',
	'INVALID_CA',
	'PATH_LENGTH_EXCEEDED',
	'INVALID_PURPOSE',
	'CERT_UNTRUSTED',
	'CERT_REJECTED',
	'HOSTNAME_MISMATCH'
]);

// TODO: Use `error?.code` when targeting Node.js 14
var isRetryAllowed = error => !denyList.has(error && error.code);

var isRetryAllowed$1 = /*@__PURE__*/getDefaultExportFromCjs$3(isRetryAllowed);

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var namespace = 'axios-retry';
/**
 * @param  {Error}  error
 * @return {boolean}
 */

function isNetworkError(error) {
  var CODE_EXCLUDE_LIST = ['ERR_CANCELED', 'ECONNABORTED'];
  return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests
  !CODE_EXCLUDE_LIST.includes(error.code) && // Prevents retrying timed out & cancelled requests
  isRetryAllowed$1(error) // Prevents retrying unsafe errors
  ;
}
var SAFE_HTTP_METHODS = ['get', 'head', 'options'];
var IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);
/**
 * @param  {Error}  error
 * @return {boolean}
 */

function isRetryableError(error) {
  return error.code !== 'ECONNABORTED' && (!error.response || error.response.status >= 500 && error.response.status <= 599);
}
/**
 * @param  {Error}  error
 * @return {boolean}
 */

function isSafeRequestError(error) {
  if (!error.config) {
    // Cannot determine if the request can be retried
    return false;
  }

  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
}
/**
 * @param  {Error}  error
 * @return {boolean}
 */

function isIdempotentRequestError(error) {
  if (!error.config) {
    // Cannot determine if the request can be retried
    return false;
  }

  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
}
/**
 * @param  {Error}  error
 * @return {boolean}
 */

function isNetworkOrIdempotentRequestError(error) {
  return isNetworkError(error) || isIdempotentRequestError(error);
}
/**
 * @return {number} - delay in milliseconds, always 0
 */

function noDelay() {
  return 0;
}
/**
 * Set delayFactor 1000 for an exponential delay to occur on the order
 * of seconds
 * @param  {number} [retryNumber=0]
 * @param  {Error}  error - unused; for existing API of retryDelay callback
 * @param  {number} [delayFactor=100] milliseconds
 * @return {number} - delay in milliseconds
 */


function exponentialDelay() {
  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var delayFactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var delay = Math.pow(2, retryNumber) * delayFactor;
  var randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay

  return delay + randomSum;
}
/** @type {IAxiosRetryConfig} */

var DEFAULT_OPTIONS = {
  retries: 3,
  retryCondition: isNetworkOrIdempotentRequestError,
  retryDelay: noDelay,
  shouldResetTimeout: false,
  onRetry: () => {}
};
/**
 * Returns the axios-retry options for the current request
 * @param  {AxiosRequestConfig} config
 * @param  {IAxiosRetryConfig} defaultOptions
 * @return {IAxiosRetryConfigExtended}
 */

function getRequestOptions(config, defaultOptions) {
  return _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), defaultOptions), config[namespace]);
}
/**
 * Initializes and returns the retry state for the given request/config
 * @param  {AxiosRequestConfig} config
 * @param  {IAxiosRetryConfig} defaultOptions
 * @return {IAxiosRetryConfigExtended}
 */


function getCurrentState(config, defaultOptions) {
  var currentState = getRequestOptions(config, defaultOptions);
  currentState.retryCount = currentState.retryCount || 0;
  config[namespace] = currentState;
  return currentState;
}
/**
 * @param  {Axios} axios
 * @param  {AxiosRequestConfig} config
 */


function fixConfig(axios, config) {
  if (axios.defaults.agent === config.agent) {
    delete config.agent;
  }

  if (axios.defaults.httpAgent === config.httpAgent) {
    delete config.httpAgent;
  }

  if (axios.defaults.httpsAgent === config.httpsAgent) {
    delete config.httpsAgent;
  }
}
/**
 * Checks retryCondition if request can be retried. Handles it's returning value or Promise.
 * @param  {IAxiosRetryConfigExtended} currentState
 * @param  {Error} error
 * @return {Promise<boolean>}
 */


function shouldRetry(_x, _x2) {
  return _shouldRetry.apply(this, arguments);
}
/**
 * Adds response interceptors to an axios instance to retry requests failed due to network issues
 *
 * @example
 *
 * import axios from 'axios';
 *
 * axiosRetry(axios, { retries: 3 });
 *
 * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'
 *   .then(result => {
 *     result.data; // 'ok'
 *   });
 *
 * // Exponential back-off retry delay between requests
 * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});
 *
 * // Custom retry delay
 * axiosRetry(axios, { retryDelay : (retryCount) => {
 *   return retryCount * 1000;
 * }});
 *
 * // Also works with custom axios instances
 * const client = axios.create({ baseURL: 'http://example.com' });
 * axiosRetry(client, { retries: 3 });
 *
 * client.get('/test') // The first request fails and the second returns 'ok'
 *   .then(result => {
 *     result.data; // 'ok'
 *   });
 *
 * // Allows request-specific configuration
 * client
 *   .get('/test', {
 *     'axios-retry': {
 *       retries: 0
 *     }
 *   })
 *   .catch(error => { // The first request fails
 *     error !== undefined
 *   });
 *
 * @param {Axios} axios An axios instance (the axios object or one created from axios.create)
 * @param {Object} [defaultOptions]
 * @param {number} [defaultOptions.retries=3] Number of retries
 * @param {boolean} [defaultOptions.shouldResetTimeout=false]
 *        Defines if the timeout should be reset between retries
 * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]
 *        A function to determine if the error can be retried
 * @param {Function} [defaultOptions.retryDelay=noDelay]
 *        A function to determine the delay between retry requests
 * @param {Function} [defaultOptions.onRetry=()=>{}]
 *        A function to get notified when a retry occurs
 * @return {{ requestInterceptorId: number, responseInterceptorId: number }}
 *        The ids of the interceptors added to the request and to the response (so they can be ejected at a later time)
 */


function _shouldRetry() {
  _shouldRetry = _asyncToGenerator(function* (currentState, error) {
    var {
      retries,
      retryCondition
    } = currentState;
    var shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error); // This could be a promise

    if (typeof shouldRetryOrPromise === 'object') {
      try {
        var shouldRetryPromiseResult = yield shouldRetryOrPromise; // keep return true unless shouldRetryPromiseResult return false for compatibility

        return shouldRetryPromiseResult !== false;
      } catch (_err) {
        return false;
      }
    }

    return shouldRetryOrPromise;
  });
  return _shouldRetry.apply(this, arguments);
}

function axiosRetry(axios, defaultOptions) {
  var requestInterceptorId = axios.interceptors.request.use(config => {
    var currentState = getCurrentState(config, defaultOptions);
    currentState.lastRequestTime = Date.now();
    return config;
  });
  var responseInterceptorId = axios.interceptors.response.use(null, /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (error) {
      var {
        config
      } = error; // If we have no information to retry the request

      if (!config) {
        return Promise.reject(error);
      }

      var currentState = getCurrentState(config, defaultOptions);

      if (yield shouldRetry(currentState, error)) {
        currentState.retryCount += 1;
        var {
          retryDelay,
          shouldResetTimeout,
          onRetry
        } = currentState;
        var delay = retryDelay(currentState.retryCount, error); // Axios fails merging this configuration to the default configuration because it has an issue
        // with circular structures: https://github.com/mzabriskie/axios/issues/370

        fixConfig(axios, config);

        if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {
          var lastRequestDuration = Date.now() - currentState.lastRequestTime;
          var timeout = config.timeout - lastRequestDuration - delay;

          if (timeout <= 0) {
            return Promise.reject(error);
          }

          config.timeout = timeout;
        }

        config.transformRequest = [data => data];
        yield onRetry(currentState.retryCount, error, config);
        return new Promise(resolve => setTimeout(() => resolve(axios(config)), delay));
      }

      return Promise.reject(error);
    });

    return function (_x3) {
      return _ref.apply(this, arguments);
    };
  }());
  return {
    requestInterceptorId,
    responseInterceptorId
  };
} // Compatibility with CommonJS

axiosRetry.isNetworkError = isNetworkError;
axiosRetry.isSafeRequestError = isSafeRequestError;
axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
axiosRetry.exponentialDelay = exponentialDelay;
axiosRetry.isRetryableError = isRetryableError;

// external imports
/**
 * Class to interact with Nosana Secret Manager
 * https://docs.nosana.io/secrets/start.html
 */
class SecretManager {
    constructor(environment = 'devnet', wallet, config) {
        this.config = secretsConfigPreset[environment];
        Object.assign(this.config, config);
        this.wallet = getWallet(wallet);
        this.api = axios$1.create({ baseURL: this.config.manager });
        // if (existsSync(process.env.SECRET_TOKEN))
        //   this.setToken(readFileSync(process.env.SECRET_TOKEN).toString());
        // by default, it retries if it is a network error or a 5xx error
        axiosRetry(this.api, {
            retries: 3,
            retryDelay: () => 5e3,
            retryCondition: (error) => (error.response && error.response.status === 500),
            onRetry: (retryCount) => console.error(`Retrying secrets manager internal error 500 (${retryCount})...`),
        });
        // retry 403 once, if the token expired or not yet present
        axiosRetry(this.api, {
            retries: 1,
            retryDelay: () => 5e3,
            retryCondition: (error) => (error.response && error.response.status === 403),
            onRetry: async (retryCount, error, requestConfig) => {
                await this.login();
                requestConfig.headers['Authorization'] =
                    this.api.defaults.headers.Authorization;
            },
        });
        // retry 400 when Solana state has not propagated yet to secrets manager
        axiosRetry(this.api, {
            retries: 5,
            retryDelay: () => 5e3,
            retryCondition: (error) => (error.response && error.response.status === 400),
            onRetry: (retryCount) => console.error(`Retrying secrets results retrieval (${retryCount})...`),
        });
    }
    setToken(token) {
        this.api.defaults.headers.Authorization = `Bearer ${token}`;
    }
    /**
     * Function to create a secret in the Nosana Secret manager
     */
    async login(job) {
        const timestamp = now$1();
        const keyPair = this.wallet.payer;
        const response = await this.api.post('/login', {
            address: keyPair.publicKey.toBase58(),
            signature: bs58$1.encode(nacl.sign.detached(new TextEncoder().encode(`nosana_secret_${timestamp}`), keyPair.secretKey)),
            timestamp,
            ...(job && { job }),
        }, {
            headers: {
                Authorization: null,
            },
        });
        // if (!job) writeFileSync(process.env.SECRET_TOKEN, response.data.token);
        this.setToken(response.data.token);
        console.log(`Retrieved secret manager ${job !== null ? 'job' : 'generic'} token.`);
    }
    /**
     * Function to create a secret in the Nosana Secret manager
     * @param secret Object with secret data store
     */
    async create(secret) {
        return await this.api.post('/secrets', secret);
    }
    /**
     * Function to get results for a given job
     * @param job public key of the job to get secrets from
     */
    async get(job) {
        if (typeof job === 'string')
            job = new PublicKey(job);
        await this.login(job.toString());
        const response = await this.api.get('/secrets');
        return response.data;
    }
    /**
     * Function to delete a secret in the Nosana Secret manager
     * @param key The key of secret that has to be removed, a string.
     */
    async delete(key) {
        return await this.api.delete(`/secrets`, { data: { key } });
    }
}

// @ts-ignore
const { BN: BN$1 } = anchor;
const pda = (seeds, programId) => PublicKey.findProgramAddressSync(seeds, programId)[0];
/**
 * Class to interact with the Nosana Jobs Program
 * https://docs.nosana.io/secrets/start.html
 */
class Jobs extends SolanaManager {
    /**
     * Function to list a Nosana Job in a market
     * @param ipfsHash String of the IPFS hash locating the Nosana Job data.
     */
    async list(ipfsHash, jobTimeout, market) {
        await this.loadNosanaJobs();
        await this.setAccounts();
        const jobKey = Keypair$2.generate();
        const runKey = Keypair$2.generate();
        try {
            const preInstructions = [];
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            const tx = await this.jobs.methods.list([...bs58$1.decode(ipfsHash).subarray(2)], new BN$1(jobTimeout))
                .preInstructions(preInstructions)
                .accounts({
                ...this.accounts,
                job: jobKey.publicKey,
                run: runKey.publicKey,
                market: market ? market : this.accounts?.market,
                vault: market
                    ? pda([
                        market.toBuffer(),
                        new PublicKey(this.config.nos_address).toBuffer(),
                    ], this.jobs.programId)
                    : this.accounts?.vault,
            })
                .signers([jobKey, runKey])
                .rpc();
            return {
                tx,
                job: jobKey.publicKey.toBase58(),
                run: runKey.publicKey.toBase58(),
            };
        }
        catch (e) {
            if (e instanceof SendTransactionError) {
                if (e.message.includes('Attempt to debit an account but found no record of a prior credit')) {
                    e.message = 'Not enough SOL to make transaction';
                    throw e;
                }
            }
            throw e;
        }
    }
    /**
     * Function to delist a Nosana Job in a market
     * @param jobAddress Publickey address of the job to delist.
     */
    async delist(jobAddress) {
        if (typeof jobAddress === 'string')
            jobAddress = new PublicKey(jobAddress);
        await this.loadNosanaJobs();
        await this.setAccounts();
        const jobAccount = await this.jobs.account.jobAccount.fetch(jobAddress);
        if (jobAccount.state != 0) {
            throw new Error('job cannot be delisted except when in queue');
        }
        const market = await this.getMarket(jobAccount.market);
        const depositAta = jobAccount.price > 0
            ? await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), jobAccount.project)
            : market.vault;
        try {
            const preInstructions = [];
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            const tx = await this.jobs.methods.delist()
                .preInstructions(preInstructions)
                .accounts({
                ...this.accounts,
                job: jobAddress,
                market: market.address,
                vault: market.vault,
                payer: jobAccount.payer,
                deposit: depositAta,
            })
                .signers([])
                .rpc();
            return {
                tx,
                job: jobAddress.toBase58(),
            };
        }
        catch (e) {
            if (e instanceof SendTransactionError) {
                if (e.message.includes('Attempt to debit an account but found no record of a prior credit')) {
                    e.message = 'Not enough SOL to make transaction';
                    throw e;
                }
            }
            throw e;
        }
    }
    /**
     * Function to extend a running job from chain
     * @param job Publickey address of the job to extend
     */
    async extend(job, jobTimeout) {
        if (typeof job === 'string')
            job = new PublicKey(job);
        await this.loadNosanaJobs();
        await this.setAccounts();
        const jobAccount = await this.jobs.account.jobAccount.fetch(job);
        if (jobAccount.state != 0) {
            throw new Error('job cannot be extended when finished or stopped');
        }
        const market = await this.getMarket(jobAccount.market);
        try {
            const preInstructions = [];
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            const tx = await this.jobs.methods.extend(new BN$1(jobTimeout))
                .preInstructions(preInstructions)
                .accounts({
                ...this.accounts,
                job: job,
                market: market.address,
                vault: market.vault,
                user: await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), this.provider.wallet.publicKey),
            })
                .signers([])
                .rpc();
            return {
                tx,
                job: job.toBase58(),
            };
        }
        catch (e) {
            if (e instanceof SendTransactionError) {
                if (e.message.includes('Attempt to debit an account but found no record of a prior credit')) {
                    e.message = 'Not enough SOL to make transaction';
                    throw e;
                }
            }
            throw e;
        }
    }
    /**
     * Function to end a running job from chain
     * @param job Publickey address of the job to end
     */
    async end(job) {
        if (typeof job === 'string')
            job = new PublicKey(job);
        await this.loadNosanaJobs();
        await this.setAccounts();
        const jobAccount = await this.jobs.account.jobAccount.fetch(job);
        if (jobAccount.state !== 0) {
            throw new Error('job cannot be ended when finished');
        }
        let runAccount;
        try {
            const runs = await this.getRuns(job);
            if (runs.length == 0) {
                throw new Error('job cannot be ended when queued');
            }
            runAccount = runs[0];
        }
        catch (error) {
            if (error &&
                error.message &&
                error.message.includes('RPC call or parameters have been disabled')) {
                throw new Error('WARNING: Current RPC cannot check if job is RUNNING');
            }
            else {
                throw new Error(`WARNING: Could not check if job is RUNNING, ${error}`);
            }
        }
        const market = await this.getMarket(jobAccount.market);
        const depositAta = jobAccount.price > 0
            ? await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), jobAccount.project)
            : market.vault;
        try {
            const preInstructions = [];
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            const tx = await this.jobs.methods.end()
                .preInstructions(preInstructions)
                .accounts({
                ...this.accounts,
                job: job,
                market: market.address,
                vault: market.vault,
                run: runAccount.publicKey,
                user: await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), this.provider.wallet.publicKey),
                payer: jobAccount.payer,
                deposit: depositAta,
            })
                .signers([])
                .rpc();
            return {
                tx,
                job: job.toBase58(),
            };
        }
        catch (e) {
            if (e instanceof SendTransactionError) {
                if (e.message.includes('Attempt to debit an account but found no record of a prior credit')) {
                    e.message = 'Not enough SOL to make transaction';
                    throw e;
                }
            }
            throw e;
        }
    }
    /**
     * Function to fetch a job from chain
     * @param job Publickey address of the job to fetch
     */
    async get(job) {
        if (typeof job === 'string')
            job = new PublicKey(job);
        await this.loadNosanaJobs();
        const jobAccount = await this.jobs.account.jobAccount.fetch(job);
        let runAccount;
        if (jobAccount.state !== 2) {
            try {
                runAccount = (await this.getRuns(job))[0];
                if (runAccount?.account) {
                    jobAccount.state = jobStateMapping[1];
                    jobAccount.node = runAccount.account.node.toString();
                    jobAccount.timeStart = runAccount.account.time;
                }
            }
            catch (error) {
                if (error &&
                    error.message &&
                    error.message.includes('RPC call or parameters have been disabled')) {
                    console.error('WARNING: Current RPC cannot check if job is RUNNING');
                }
                else {
                    console.error('WARNING: Could not check if job is RUNNING', error);
                }
            }
        }
        return mapJob(jobAccount);
    }
    /**
     * Function to fetch multiple jobs from chain
     * @param jobs array with Publickey addresses of the jobs to fetch
     */
    async getMultiple(jobs, fetchRunAccounts = true) {
        if (typeof jobs[0] === 'string')
            jobs = jobs.map((job) => new PublicKey(job));
        await this.loadNosanaJobs();
        let fetchedJobs = await this.jobs.account.jobAccount.fetchMultiple(jobs);
        // fetch run account
        if (fetchRunAccounts) {
            for (let i = 0; i < fetchedJobs.length; i++) {
                if (fetchedJobs[i].state < 2) {
                    try {
                        const runAccount = (await this.getRuns(jobs[i]))[0];
                        if (runAccount?.account && fetchedJobs[i]) {
                            fetchedJobs[i].state = jobStateMapping[1];
                            fetchedJobs[i].node = runAccount.account.node.toString();
                            fetchedJobs[i].timeStart = runAccount.account.time;
                        }
                    }
                    catch (error) {
                        console.error('error fetching run account', error);
                    }
                }
            }
        }
        return fetchedJobs.map((j) => mapJob(j));
    }
    /**
     * Function to fetch job accounts from chain
     * @param job Publickey address of the job to fetch
     */
    async all(filters) {
        await this.loadNosanaJobs();
        const jobAccount = this.jobs.account.jobAccount;
        const filter = jobAccount.coder.accounts.memcmp(jobAccount.idlAccount.name, undefined);
        const coderFilters = [];
        if (filter?.offset != undefined && filter?.bytes != undefined) {
            coderFilters.push({
                memcmp: { offset: filter.offset, bytes: filter.bytes },
            });
        }
        if (filter?.dataSize != undefined) {
            coderFilters.push({ dataSize: filter.dataSize });
        }
        if (filters) {
            if (filters.state >= 0) {
                coderFilters.push({
                    memcmp: {
                        offset: 208,
                        bytes: bs58$1.encode(Buffer.from([filters.state])),
                    },
                });
            }
            if (filters.project) {
                coderFilters.push({
                    memcmp: {
                        offset: 176,
                        bytes: filters.project,
                    },
                });
            }
            if (filters.node) {
                coderFilters.push({
                    memcmp: {
                        offset: 104,
                        bytes: filters.node,
                    },
                });
            }
            if (filters.market) {
                console.log('filter', filters);
                coderFilters.push({
                    memcmp: {
                        offset: 72,
                        bytes: filters.market,
                    },
                });
            }
        }
        const accounts = await jobAccount.provider.connection.getProgramAccounts(jobAccount.programId, {
            dataSlice: { offset: 208, length: 17 }, // Fetch timeStart only.
            filters: [...coderFilters],
        });
        const filterExcludedJobs = accounts.filter(({ pubkey, account }) => {
            if (excludedJobs.includes(pubkey.toString()))
                return false;
            return true;
        });
        const accountsWithTimeStart = filterExcludedJobs.map(({ pubkey, account }) => ({
            pubkey,
            state: account.data[0],
            timeStart: parseFloat(new BN$1(account.data.slice(9), 'le')),
            timeEnd: parseFloat(new BN$1(account.data.slice(1, 9), 'le')),
        }));
        // sort by desc timeStart & put 0 on top
        const sortedAccounts = accountsWithTimeStart.sort((a, b) => {
            if (a.state === b.state) {
                if (a.timeStart === b.timeStart) {
                    return a.pubkey.toString().localeCompare(b.pubkey.toString());
                }
                if (a.timeStart === 0)
                    return -1;
                if (b.timeStart === 0)
                    return 1;
                return b.timeStart - a.timeStart;
            }
            return a.state - b.state;
        });
        return sortedAccounts;
    }
    /**
     * Function to fetch ALL job accounts from chain
     * NOTE: should only be used to make an export of all jobs
     */
    async allFullJobs() {
        await this.loadNosanaJobs();
        const accounts = await this.jobs.account.jobAccount.all();
        console.log('accounts', accounts);
        // @ts-ignore
        const filterExcludedJobs = accounts.filter(({ publicKey, account }) => {
            // @ts-ignore
            if (excludedJobs.includes(publicKey.toString()) ||
                account.state === 0 ||
                account.state === 1)
                return false;
            return true;
        });
        const accountsWithTimeStart = await Promise.all(filterExcludedJobs.map(async (job) => ({
            pubkey: job.publicKey,
            ipfsJob: await IPFS.solHashToIpfsHash(job.account.ipfsJob),
            ipfsResult: await IPFS.solHashToIpfsHash(job.account.ipfsResult),
            market: job.account.market,
            node: job.account.node,
            payer: job.account.payer,
            price: job.account.price,
            project: job.account.project,
            state: job.account.state,
            timeEnd: job.account.timeEnd
                ? parseInt(job.account.timeEnd)
                : job.account.timeEnd,
            timeStart: job.account.timeStart
                ? parseInt(job.account.timeStart)
                : job.account.timeStart,
        })));
        // sort by desc timeStart & put 0 on top
        const sortedAccounts = accountsWithTimeStart.sort((a, b) => {
            if (a.state === b.state) {
                if (a.timeStart === b.timeStart) {
                    return a.pubkey.toString().localeCompare(b.pubkey.toString());
                }
                if (a.timeStart === 0)
                    return -1;
                if (b.timeStart === 0)
                    return 1;
                return b.timeStart - a.timeStart;
            }
            return a.state - b.state;
        });
        return sortedAccounts;
    }
    /**
     * Function to clean a job from chain
     * @param job Publickey address of the job to fetch
     */
    async cleanAdmin(jobAddress, instructionOnly) {
        if (typeof jobAddress === 'string')
            jobAddress = new PublicKey(jobAddress);
        await this.loadNosanaJobs();
        await this.setAccounts();
        const job = await this.jobs.account.jobAccount.fetch(jobAddress);
        const accounts = {
            authority: this.accounts.authority,
            payer: job.payer,
            job: jobAddress,
        };
        const preInstructions = [];
        if (this.config.priority_fee && !instructionOnly) {
            const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: this.config.priority_fee,
            });
            preInstructions.push(addPriorityFee);
        }
        const tx = this.jobs.methods.cleanAdmin()
            .preInstructions(preInstructions)
            .accounts(accounts);
        if (instructionOnly) {
            return await tx.instruction();
        }
        else {
            return await tx.rpc();
        }
    }
    /**
     * Function to fetch a run from chain
     * @param run Publickey address of the run to fetch
     */
    async getRun(run) {
        if (typeof run === 'string')
            run = new PublicKey(run);
        await this.loadNosanaJobs();
        return {
            publicKey: run,
            account: await this.jobs.account.runAccount.fetch(run),
        };
    }
    /**
     * Function to fetch a run of a job from chain
     * @param job Publickey address of the job to fetch
     */
    async getRuns(filter) {
        if (typeof filter === 'string')
            filter = new PublicKey(filter);
        await this.loadNosanaJobs();
        const runAccounts = await this.jobs.account.runAccount.all(Array.isArray(filter)
            ? filter
            : [{ memcmp: { offset: 8, bytes: filter.toString() } }]);
        return runAccounts;
    }
    /**
     * Get all Runs
     * @returns
     */
    async getActiveRuns() {
        await this.loadNosanaJobs();
        const runAccounts = await this.jobs.account.runAccount.all();
        return runAccounts;
    }
    /**
     * Function to fetch a market from chain
     * @param market Publickey address of the market to fetch
     */
    async getMarket(market) {
        if (typeof market === 'string')
            market = new PublicKey(market);
        await this.loadNosanaJobs();
        const marketAccount = await this.jobs.account.marketAccount.fetch(market.toString());
        //@ts-ignore
        return { ...marketAccount, address: market };
    }
    async updateMarket(market, updatedData, instructionOnly) {
        if (typeof market === 'string')
            market = new PublicKey(market);
        await this.loadNosanaJobs();
        const marketAccount = await this.jobs.account.marketAccount.fetch(market.toString());
        const data = {
            jobExpiration: updatedData.jobExpiration
                ? new BN$1(updatedData.jobExpiration)
                : new BN$1(marketAccount.jobExpiration),
            jobPrice: updatedData.jobPrice
                ? new BN$1(updatedData.jobPrice)
                : new BN$1(marketAccount.jobPrice),
            jobType: updatedData.jobType
                ? new BN$1(updatedData.jobType)
                : marketAccount.jobType,
            nodeStakeMinimum: updatedData.nodeStakeMinimum
                ? new BN$1(updatedData.nodeStakeMinimum)
                : new BN$1(marketAccount.nodeXnosMinimum),
        };
        const preInstructions = [];
        if (this.config.priority_fee && !instructionOnly) {
            const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: this.config.priority_fee,
            });
            preInstructions.push(addPriorityFee);
        }
        const tx = await this.jobs.methods.update(
        // @ts-ignore
        data.jobExpiration, data.jobPrice, data.jobType, data.nodeStakeMinimum, new BN$1(7200))
            .preInstructions(preInstructions)
            .accounts({
            market: market,
            accessKey: updatedData && updatedData.nodeAccessKey
                ? updatedData.nodeAccessKey
                : marketAccount.nodeAccessKey,
            authority: this.provider.wallet.publicKey,
        });
        if (instructionOnly) {
            return await tx.instruction();
        }
        else {
            return await tx.rpc();
        }
    }
    async createMarket(data) {
        await this.loadNosanaJobs();
        await this.setAccounts();
        const preInstructions = [];
        if (this.config.priority_fee) {
            const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: this.config.priority_fee,
            });
            preInstructions.push(addPriorityFee);
        }
        const mintAccount = new PublicKey(this.config.nos_address);
        const marketKeypair = Keypair$2.generate();
        const tx = await this.jobs.methods.open(
        // @ts-ignore
        data.jobExpiration, data.jobPrice, data.jobTimeout, data.jobType, data.nodeStakeMinimum)
            .preInstructions(preInstructions)
            .accounts({
            ...this.accounts,
            mint: mintAccount,
            market: marketKeypair.publicKey,
            accessKey: data.nodeAccessKey,
            vault: pda([
                marketKeypair.publicKey.toBuffer(),
                new PublicKey(this.config.nos_address).toBuffer(),
            ], this.jobs.programId),
        })
            .signers([marketKeypair])
            .rpc();
        return {
            transaction: tx,
            market: marketKeypair.publicKey.toString(),
        };
    }
    /**
     * Function to fetch all markets
     */
    async allMarkets() {
        await this.loadNosanaJobs();
        const marketAccounts = await this.jobs.account.marketAccount.all();
        return marketAccounts.map((m) => {
            m.account.address = m.publicKey;
            return m.account;
        });
    }
    /**
     * Function to queue a Node or work on a job
     * @returns
     */
    async work(market, nft) {
        try {
            await this.loadNosanaJobs();
            await this.setAccounts();
            if (typeof market === 'string')
                market = new PublicKey(market);
            const runKey = Keypair$2.generate();
            let nftAta, metadata;
            if (!nft) {
                nftAta = await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), this.provider.wallet.publicKey);
                metadata = new PublicKey('11111111111111111111111111111111');
            }
            else {
                nftAta = await getAssociatedTokenAddress(nft, this.provider.wallet.publicKey);
                metadata = this.getMetadataPDA(nft);
            }
            const accounts = {
                ...this.accounts,
                stake: pda([
                    utf8$8.encode('stake'),
                    new PublicKey(this.config.nos_address).toBuffer(),
                    this.provider.wallet.publicKey.toBuffer(),
                ], new PublicKey(this.config.stake_address)),
                run: runKey.publicKey,
                nft: nftAta,
                metadata,
                feePayer: this.provider.wallet.publicKey,
                market,
            };
            const preInstructions = [];
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            const tx = await this.jobs.methods.work()
                .preInstructions(preInstructions)
                .accounts(accounts)
                .signers([runKey])
                .rpc();
            return tx;
        }
        catch (e) {
            if (e instanceof SendTransactionError) {
                if (e.message.includes('Attempt to debit an account but found no record of a prior credit')) {
                    e.message = 'Not enough SOL to make transaction';
                    throw e;
                }
            }
            throw e;
        }
    }
    /**
     * Function to submit a result
     * @param result Uint8Array of result
     * @param run Run account of job
     * @param run Market account of job
     * @returns transaction
     */
    async submitResult(result, run, market) {
        await this.loadNosanaJobs();
        await this.setAccounts();
        if (typeof market === 'string')
            market = new PublicKey(market);
        let marketAddress;
        if (market instanceof PublicKey) {
            marketAddress = market;
            market = await this.getMarket(market);
        }
        if (typeof run === 'string')
            run = new PublicKey(run);
        if (run instanceof PublicKey) {
            run = (await this.getRun(run));
        }
        const job = await this.get(run.account.job);
        const depositAta = job.price > 0
            ? await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), job.project)
            : market.vault;
        const preInstructions = [];
        if (this.config.priority_fee) {
            const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: this.config.priority_fee,
            });
            preInstructions.push(addPriorityFee);
        }
        const tx = await this.jobs.methods.finish(result)
            .preInstructions(preInstructions)
            .accounts({
            ...this.accounts,
            job: run.account.job,
            run: run.publicKey,
            vault: market.vault,
            user: await getAssociatedTokenAddress(new PublicKey(this.config.nos_address), this.provider.wallet.publicKey),
            payer: run.account.payer,
            // @ts-ignore
            deposit: depositAta,
            project: job.project,
            market: marketAddress ? marketAddress : market.address,
        })
            .rpc();
        return tx;
    }
    /**
     * Function to quit a job
     * @param run Run account of the job
     * @returns
     */
    async quit(run) {
        await this.loadNosanaJobs();
        await this.setAccounts();
        if (typeof run === 'string')
            run = new PublicKey(run);
        if (run instanceof PublicKey) {
            run = (await this.getRun(run));
        }
        const preInstructions = [];
        if (this.config.priority_fee) {
            const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: this.config.priority_fee,
            });
            preInstructions.push(addPriorityFee);
        }
        const tx = await this.jobs.methods.quit()
            .preInstructions(preInstructions)
            .accounts({
            ...this.accounts,
            job: run.account.job,
            run: run.publicKey,
            payer: run.account.payer,
        })
            .rpc();
        return tx;
    }
    /**
     * Exit the node queue
     * @returns
     */
    async stop(market) {
        await this.loadNosanaJobs();
        await this.setAccounts();
        if (typeof market === 'string')
            market = new PublicKey(market);
        const preInstructions = [];
        if (this.config.priority_fee) {
            const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: this.config.priority_fee,
            });
            preInstructions.push(addPriorityFee);
        }
        const tx = await this.jobs.methods.stop()
            .preInstructions(preInstructions)
            .accounts({
            ...this.accounts,
            market,
        })
            .rpc();
        return tx;
    }
}

class Nodes extends SolanaManager {
    /**
     * Function to fetch a node from chain
     * @param node Publickey address of the node to fetch
     * @param authority options, if authority is true it will search node on authority address
     */
    async get(node, options) {
        if (typeof node === 'string')
            node = new PublicKey(node);
        await this.loadNosanaNodes();
        if (options && options.authority) {
            // @ts-ignore:next-line
            const nodeAccount = await this.nodes.account.nodeAccount.all([
                { memcmp: { offset: 8, bytes: node.toString() } },
            ]);
            nodeAccount[0].account.address = nodeAccount[0].publicKey.toString();
            return nodeAccount[0].account;
        }
        else {
            // @ts-ignore:next-line
            return await this.nodes.account.nodeAccount.fetch(node);
        }
    }
    /**
     * Function to fetch a nodes from chain
     * @param job Publickey address of the node to fetch
     */
    async all() {
        await this.loadNosanaNodes();
        // @ts-ignore:next-line
        const nodes = await this.nodes.account.nodeAccount.all();
        return nodes.map((n) => {
            n.account.address = n.publicKey.toString();
            return n.account;
        });
    }
}

//@ts-ignore
const { BN } = anchor;
const SECONDS_PER_DAY = 24 * 60 * 60;
class Stake extends SolanaManager {
    /**
     * Function to fetch stake accounts from chain
     */
    async all() {
        await this.loadNosanaStake();
        // @ts-ignore
        return await this.stake.program.account.stakeAccount.all();
    }
    /**
     * Function to fetch a stake account from chain
     * @param address
     */
    async get(address) {
        if (typeof address === 'string')
            address = new PublicKey(address);
        await this.loadNosanaStake();
        const [stakeAddress] = await PublicKey.findProgramAddress([
            utf8$8.encode('stake'),
            new PublicKey(this.config.nos_address).toBuffer(),
            address.toBuffer(),
        ], new PublicKey(this.config.stake_address));
        // @ts-ignore
        const stake = await this.stake.program.account.stakeAccount.fetch(stakeAddress);
        return stake;
    }
    /**
     * Create a stake account
     * @param address NOS Token account
     * @param amount amount
     * @param unstakeDays unstake period
     * @returns
     */
    async create(address, amount, unstakeDays) {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        const stakeDurationSeconds = unstakeDays * SECONDS_PER_DAY;
        const stakeAmount = amount;
        try {
            const mint = new PublicKey(this.config.nos_address);
            const ata = await getAssociatedTokenAddress(mint, address);
            const [vault] = await PublicKey.findProgramAddress([utf8$8.encode('vault'), mint.toBuffer(), address.toBuffer()], new PublicKey(this.config.stake_address));
            const [stake] = await PublicKey.findProgramAddress([utf8$8.encode('stake'), mint.toBuffer(), address.toBuffer()], new PublicKey(this.config.stake_address));
            const preInstructions = [];
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            return await this.stake.program?.methods.stake(new BN(stakeAmount), new BN(stakeDurationSeconds))
                .preInstructions(preInstructions)
                .accounts({
                ...this.accounts,
                mint,
                user: ata,
                vault: vault,
                stake: stake,
                rent: SYSVAR_RENT_PUBKEY,
            })
                .postInstructions([
                await this.stake.rewardsProgram.methods.enter()
                    .accounts(this.stakeAccounts)
                    .instruction(),
            ])
                .rpc();
        }
        catch (error) {
            console.error(error);
            throw new Error('Something went wrong while creating stake account');
        }
    }
    /**
     * Separate method to create reward account
     * @returns tx hash
     */
    async createRewardAccount() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        try {
            const preInstructions = [];
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            return await this.stake.rewardsProgram.methods.enter()
                .preInstructions(preInstructions)
                .accounts(this.stakeAccounts)
                .rpc();
        }
        catch (error) {
            console.error(error);
            throw new Error('Something went wrong while creating reward account');
        }
    }
    /**
     * Topup stake
     * @param stakeAmount
     * @returns
     */
    async topup(stakeAmount) {
        try {
            await this.loadNosanaStake();
            await this.setStakeAccounts();
            if (this.stakeAccounts && this.poolAccounts) {
                const preInstructions = [];
                const rewardsInfo = await this.getRewardsInfo();
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    preInstructions.push(addPriorityFee);
                }
                // if reward account doesn't exists yet, create it
                if (!rewardsInfo || !rewardsInfo.account) {
                    preInstructions.push(await this.stake.rewardsProgram.methods.enter()
                        .accounts(this.stakeAccounts)
                        .instruction());
                }
                preInstructions.push(await this.stake.poolsProgram.methods.claimFee()
                    .accounts(this.poolAccounts)
                    .instruction());
                const response = await this.stake.program?.methods.topup(new BN(stakeAmount))
                    .accounts(this.stakeAccounts)
                    .preInstructions(preInstructions)
                    .postInstructions([
                    await this.stake.rewardsProgram.methods.sync()
                        .accounts({ ...this.stakeAccounts, vault: rewardsInfo?.vault })
                        .instruction(),
                ])
                    .rpc();
                return response;
            }
            else {
                throw new Error('Stake accounts not found');
            }
        }
        catch (error) {
            throw new Error('Something went wrong extending with topup: ' + error);
        }
    }
    /**
     * Extend existing stake
     * @param stakeDurationSeconds
     * @returns
     */
    async extend(stakeDurationSeconds) {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        if (this.stakeAccounts && this.poolAccounts) {
            try {
                const preInstructions = [];
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    preInstructions.push(addPriorityFee);
                }
                const response = await this.stake.program?.methods.extend(new BN$2(stakeDurationSeconds))
                    .accounts(this.stakeAccounts)
                    .preInstructions([
                    ...preInstructions,
                    await this.stake.poolsProgram.methods.claimFee()
                        .accounts(this.poolAccounts)
                        .instruction(),
                ])
                    .postInstructions([
                    await this.stake.rewardsProgram.methods.sync()
                        .accounts({
                        ...this.stakeAccounts,
                        vault: this.poolAccounts.rewardsVault,
                    })
                        .instruction(),
                ])
                    .rpc();
                console.log(response);
                return response;
            }
            catch (error) {
                console.error(error);
                throw new Error('Something went wrong extending the stake');
            }
        }
        else {
            throw new Error('Stake accounts not found');
        }
    }
    /**
     * Unstake
     * @returns
     */
    async unstake() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        const preInstructions = [];
        if (this.stakeAccounts && this.poolAccounts) {
            if (this.config.priority_fee) {
                const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                    microLamports: this.config.priority_fee,
                });
                preInstructions.push(addPriorityFee);
            }
            try {
                // check if NOS ATA exists
                const nosAta = await this.getNosATA(this.wallet.publicKey);
                try {
                    await getAccount(this.connection, nosAta);
                }
                catch (error) {
                    console.log('ATA doesnt exists, create', nosAta.toString());
                    try {
                        preInstructions.push(createAssociatedTokenAccountInstruction(new PublicKey(this.wallet.publicKey), nosAta, new PublicKey(this.wallet.publicKey), new PublicKey(this.config.nos_address)));
                    }
                    catch (e) {
                        console.log('createAssociatedTokenAccountInstruction', e);
                    }
                }
                // check if user has has reward account
                const rewardAccount = (await this.stake.rewardsProgram.account.rewardAccount.fetch(this.stakeAccounts.reward)).reflection;
                console.log('User has reward account', rewardAccount);
                preInstructions.push(await this.stake.poolsProgram.methods.claimFee()
                    .accounts(this.poolAccounts)
                    .instruction(), await this.stake.rewardsProgram.methods.claim()
                    .accounts({
                    ...this.stakeAccounts,
                    vault: this.poolAccounts.rewardsVault,
                })
                    .instruction(), await this.stake.rewardsProgram.methods.close()
                    .accounts(this.stakeAccounts)
                    .instruction());
            }
            catch (error) {
                // @ts-ignore
                if (!error.message.includes('Account does not exist')) {
                    console.log(error);
                    throw new Error('Something went wrong while unstaking');
                }
            }
            try {
                const response = await this.stake.program?.methods.unstake()
                    .accounts(this.stakeAccounts)
                    .preInstructions(preInstructions)
                    .rpc();
                console.log(response);
                return response;
            }
            catch (error) {
                console.log(error);
                throw new Error('Something went wrong while unstaking');
            }
        }
        else {
            throw new Error('Stake accounts not found');
        }
    }
    /**
     * Restake
     * @returns
     */
    async restake() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        try {
            if (this.stakeAccounts) {
                const preInstructions = [];
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    preInstructions.push(addPriorityFee);
                }
                const response = await this.stake.program?.methods.restake()
                    .accounts(this.stakeAccounts)
                    .preInstructions([
                    ...preInstructions,
                    await this.stake.poolsProgram.methods.claimFee()
                        .accounts(this.poolAccounts)
                        .instruction(),
                ])
                    .postInstructions([
                    await this.stake.rewardsProgram.methods.enter()
                        .accounts(this.stakeAccounts)
                        .instruction(),
                ])
                    .rpc();
                console.log(response);
                return response;
            }
            else {
                throw Error('Stake accounts not found');
            }
        }
        catch (error) {
            console.log(error);
            throw new Error('Something went wrong while restaking');
        }
    }
    /**
     * Close stake
     * @returns
     */
    async close() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        if (this.stakeAccounts) {
            try {
                const preInstructions = [];
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    preInstructions.push(addPriorityFee);
                }
                // check if NOS ATA exists
                const nosAta = await this.getNosATA(this.wallet.publicKey);
                try {
                    await getAccount(this.connection, nosAta);
                }
                catch (error) {
                    console.log('ATA doesnt exists, create', nosAta.toString());
                    try {
                        preInstructions.push(createAssociatedTokenAccountInstruction(new PublicKey(this.wallet.publicKey), nosAta, new PublicKey(this.wallet.publicKey), new PublicKey(this.config.nos_address)));
                    }
                    catch (e) {
                        console.log('createAssociatedTokenAccountInstruction', e);
                    }
                }
                let withdraw;
                try {
                    withdraw = await this.stake.program?.methods.withdraw()
                        // add priority fee + (optional) create NOS ATA
                        .preInstructions(preInstructions)
                        .accounts(this.stakeAccounts)
                        .rpc();
                }
                catch (error) {
                    if (error.message.includes('VaultEmpty')) {
                        console.log('vault already empty, skipping withdraw');
                    }
                    else {
                        throw error;
                    }
                }
                console.log('withdraw tx', withdraw);
                const response = await this.stake.program?.methods.close()
                    // only priority fee as pre instruction for close
                    .preInstructions([preInstructions[0]])
                    .accounts(this.stakeAccounts)
                    .rpc();
                console.log('close tx', response);
                return [withdraw, response];
            }
            catch (error) {
                console.error(error);
                throw new Error('Something went wrong while closing');
            }
        }
        else {
            throw new Error('Staking accounts not found');
        }
    }
    /**
     * Withdraw
     * @returns
     */
    async withdraw() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        if (this.stakeAccounts && this.poolAccounts) {
            try {
                const preInstructions = [];
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    preInstructions.push(addPriorityFee);
                }
                // check if NOS ATA exists
                const nosAta = await this.getNosATA(this.wallet.publicKey);
                try {
                    await getAccount(this.connection, nosAta);
                }
                catch (error) {
                    console.log('ATA doesnt exists, create', nosAta.toString());
                    try {
                        preInstructions.push(createAssociatedTokenAccountInstruction(new PublicKey(this.wallet.publicKey), nosAta, new PublicKey(this.wallet.publicKey), new PublicKey(this.config.nos_address)));
                    }
                    catch (e) {
                        console.log('createAssociatedTokenAccountInstruction', e);
                    }
                }
                const response = await this.stake.program?.methods.withdraw()
                    .preInstructions(preInstructions)
                    .accounts(this.stakeAccounts)
                    .rpc();
                console.log(response);
                return response;
            }
            catch (error) {
                console.error(error);
                throw new Error('Something went wrong while withdrawing');
            }
        }
        else {
            throw new Error('Staking accounts not found');
        }
    }
    /**
     * Claim staking rewards
     * @returns tx hash
     */
    async claimRewards() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        if (this.stakeAccounts && this.poolAccounts) {
            try {
                const preInstructions = [];
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    preInstructions.push(addPriorityFee);
                }
                // check if NOS ATA exists
                const nosAta = await this.getNosATA(this.wallet.publicKey);
                try {
                    await getAccount(this.connection, nosAta);
                }
                catch (error) {
                    console.log('ATA doesnt exists', nosAta.toString());
                    try {
                        preInstructions.push(createAssociatedTokenAccountInstruction(new PublicKey(this.wallet.publicKey), nosAta, new PublicKey(this.wallet.publicKey), new PublicKey(this.config.nos_address)));
                    }
                    catch (e) {
                        console.log('createAssociatedTokenAccountInstruction', e);
                    }
                }
                const response = await this.stake.rewardsProgram?.methods.claim()
                    .accounts({
                    ...this.stakeAccounts,
                    vault: this.poolAccounts.rewardsVault,
                })
                    .preInstructions([
                    ...preInstructions,
                    await this.stake.poolsProgram?.methods.claimFee()
                        .accounts(this.poolAccounts)
                        .instruction(),
                ])
                    .rpc();
                return response;
            }
            catch (error) {
                console.error(error);
                throw new Error('Something went wrong while withdrawing');
            }
        }
        else {
            throw new Error('accounts not found');
        }
    }
    /**
     * Claim stake and Restake
     * @param amount amount to restake
     * @returns tx hash
     */
    async claimAndRestakeRewards(amount) {
        if (this.stakeAccounts && this.poolAccounts) {
            try {
                const decimals = 1e6;
                const stakeAmount = amount * decimals;
                const preInstructions = [];
                if (this.config.priority_fee) {
                    const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: this.config.priority_fee,
                    });
                    preInstructions.push(addPriorityFee);
                }
                // check if NOS ATA exists
                const nosAta = await this.getNosATA(this.wallet.publicKey);
                try {
                    await getAccount(this.connection, nosAta);
                }
                catch (error) {
                    console.log('ATA doesnt exists, create', nosAta.toString());
                    try {
                        preInstructions.push(createAssociatedTokenAccountInstruction(new PublicKey(this.wallet.publicKey), nosAta, new PublicKey(this.wallet.publicKey), new PublicKey(this.config.nos_address)));
                    }
                    catch (e) {
                        console.log('createAssociatedTokenAccountInstruction', e);
                    }
                }
                const response = await this.stake.rewardsProgram?.methods.claim()
                    .accounts({
                    ...this.stakeAccounts,
                    vault: this.poolAccounts.rewardsVault,
                })
                    .preInstructions([
                    ...preInstructions,
                    await this.stake.poolsProgram?.methods.claimFee()
                        .accounts(this.poolAccounts)
                        .instruction(),
                ])
                    .postInstructions([
                    await this.stake.program?.methods.topup(new BN$2(stakeAmount))
                        .accounts(this.stakeAccounts)
                        .instruction(),
                    await this.stake.rewardsProgram.methods.sync()
                        .accounts({
                        ...this.stakeAccounts,
                        vault: this.poolAccounts.rewardsVault,
                    })
                        .instruction(),
                ])
                    .rpc();
                console.log(response);
                return response;
            }
            catch (error) {
                console.error(error);
                throw new Error('Something went wrong while withdrawing');
            }
        }
        else {
            throw new Error('accounts not found');
        }
    }
    /**
     * Get staking pool info
     * @returns Object
     */
    async getPoolInfo() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        if (!this.stakeAccounts || !this.poolAccounts) {
            return null;
        }
        let pool, poolBalance;
        try {
            pool = await this.stake.poolsProgram.account.poolAccount.fetch(new PublicKey(this.config.pool_address));
            poolBalance = await this.getNosBalance(this.poolAccounts.vault);
        }
        catch (error) {
            throw new Error(error.message);
        }
        if (poolBalance) {
            pool.poolBalance = poolBalance.uiAmount;
        }
        return pool;
    }
    /**
     * Get rewards info
     * @returns Object
     */
    async getRewardsInfo() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        if (!this.stakeAccounts) {
            return null;
        }
        const globalReflection = await this.stake.rewardsProgram.account.reflectionAccount.fetch(this.stakeAccounts.reflection);
        let rewardAccount, rewardVault;
        try {
            rewardAccount =
                await this.stake.rewardsProgram.account.rewardAccount.fetch(this.stakeAccounts.reward);
            rewardVault = await PublicKey.findProgramAddress([new PublicKey(this.config.nos_address).toBuffer()], new PublicKey(this.config.rewards_address));
        }
        catch (error) {
            if (!error.message.includes('Account does not exist')) {
                throw new Error(error.message);
            }
            else {
                console.log('Reward account does not exists, skip');
            }
        }
        const rewardInfo = {
            global: globalReflection,
            account: rewardAccount,
            vault: rewardVault,
        };
        return rewardInfo;
    }
    /**
     * Get NOS balance of stake vault
     * @returns
     */
    async getStakeVaultBalance() {
        await this.loadNosanaStake();
        await this.setStakeAccounts();
        if (!this.stakeAccounts) {
            return null;
        }
        const balance = await this.getNosBalance(this.stakeAccounts.vault);
        let uiBalance;
        if (balance) {
            uiBalance = balance.uiAmount;
        }
        console.log('balance', balance);
        return uiBalance;
    }
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var lib$1 = {exports: {}};

var util$1 = {};

var types$4 = {
  ROOT       : 0,
  GROUP      : 1,
  POSITION   : 2,
  SET        : 3,
  RANGE      : 4,
  REPETITION : 5,
  REFERENCE  : 6,
  CHAR       : 7,
};

var sets$1 = {};

const types$3 = types$4;

const INTS = () => [{ type: types$3.RANGE , from: 48, to: 57 }];

const WORDS = () => {
  return [
    { type: types$3.CHAR, value: 95 },
    { type: types$3.RANGE, from: 97, to: 122 },
    { type: types$3.RANGE, from: 65, to: 90 }
  ].concat(INTS());
};

const WHITESPACE = () => {
  return [
    { type: types$3.CHAR, value: 9 },
    { type: types$3.CHAR, value: 10 },
    { type: types$3.CHAR, value: 11 },
    { type: types$3.CHAR, value: 12 },
    { type: types$3.CHAR, value: 13 },
    { type: types$3.CHAR, value: 32 },
    { type: types$3.CHAR, value: 160 },
    { type: types$3.CHAR, value: 5760 },
    { type: types$3.RANGE, from: 8192, to: 8202 },
    { type: types$3.CHAR, value: 8232 },
    { type: types$3.CHAR, value: 8233 },
    { type: types$3.CHAR, value: 8239 },
    { type: types$3.CHAR, value: 8287 },
    { type: types$3.CHAR, value: 12288 },
    { type: types$3.CHAR, value: 65279 }
  ];
};

const NOTANYCHAR = () => {
  return [
    { type: types$3.CHAR, value: 10 },
    { type: types$3.CHAR, value: 13 },
    { type: types$3.CHAR, value: 8232 },
    { type: types$3.CHAR, value: 8233 },
  ];
};

// Predefined class objects.
sets$1.words = () => ({ type: types$3.SET, set: WORDS(), not: false });
sets$1.notWords = () => ({ type: types$3.SET, set: WORDS(), not: true });
sets$1.ints = () => ({ type: types$3.SET, set: INTS(), not: false });
sets$1.notInts = () => ({ type: types$3.SET, set: INTS(), not: true });
sets$1.whitespace = () => ({ type: types$3.SET, set: WHITESPACE(), not: false });
sets$1.notWhitespace = () => ({ type: types$3.SET, set: WHITESPACE(), not: true });
sets$1.anyChar = () => ({ type: types$3.SET, set: NOTANYCHAR(), not: true });

(function (exports) {
	const types = types$4;
	const sets  = sets$1;


	const CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?';
	const SLSH = { '0': 0, 't': 9, 'n': 10, 'v': 11, 'f': 12, 'r': 13 };

	/**
	 * Finds character representations in str and convert all to
	 * their respective characters
	 *
	 * @param {String} str
	 * @return {String}
	 */
	exports.strToChars = function(str) {
	  /* jshint maxlen: false */
	  var chars_regex = /(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\]^?])|([0tnvfr]))/g;
	  str = str.replace(chars_regex, function(s, b, lbs, a16, b16, c8, dctrl, eslsh) {
	    if (lbs) {
	      return s;
	    }

	    var code = b ? 8 :
	      a16   ? parseInt(a16, 16) :
	      b16   ? parseInt(b16, 16) :
	      c8    ? parseInt(c8,   8) :
	      dctrl ? CTRL.indexOf(dctrl) :
	      SLSH[eslsh];

	    var c = String.fromCharCode(code);

	    // Escape special regex characters.
	    if (/[[\]{}^$.|?*+()]/.test(c)) {
	      c = '\\' + c;
	    }

	    return c;
	  });

	  return str;
	};


	/**
	 * turns class into tokens
	 * reads str until it encounters a ] not preceeded by a \
	 *
	 * @param {String} str
	 * @param {String} regexpStr
	 * @return {Array.<Array.<Object>, Number>}
	 */
	exports.tokenizeClass = (str, regexpStr) => {
	  /* jshint maxlen: false */
	  var tokens = [];
	  var regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?([^])/g;
	  var rs, c;


	  while ((rs = regexp.exec(str)) != null) {
	    if (rs[1]) {
	      tokens.push(sets.words());

	    } else if (rs[2]) {
	      tokens.push(sets.ints());

	    } else if (rs[3]) {
	      tokens.push(sets.whitespace());

	    } else if (rs[4]) {
	      tokens.push(sets.notWords());

	    } else if (rs[5]) {
	      tokens.push(sets.notInts());

	    } else if (rs[6]) {
	      tokens.push(sets.notWhitespace());

	    } else if (rs[7]) {
	      tokens.push({
	        type: types.RANGE,
	        from: (rs[8] || rs[9]).charCodeAt(0),
	        to: rs[10].charCodeAt(0),
	      });

	    } else if ((c = rs[12])) {
	      tokens.push({
	        type: types.CHAR,
	        value: c.charCodeAt(0),
	      });

	    } else {
	      return [tokens, regexp.lastIndex];
	    }
	  }

	  exports.error(regexpStr, 'Unterminated character class');
	};


	/**
	 * Shortcut to throw errors.
	 *
	 * @param {String} regexp
	 * @param {String} msg
	 */
	exports.error = (regexp, msg) => {
	  throw new SyntaxError('Invalid regular expression: /' + regexp + '/: ' + msg);
	}; 
} (util$1));

var positions$1 = {};

const types$2 = types$4;
positions$1.wordBoundary = () => ({ type: types$2.POSITION, value: 'b' });
positions$1.nonWordBoundary = () => ({ type: types$2.POSITION, value: 'B' });
positions$1.begin = () => ({ type: types$2.POSITION, value: '^' });
positions$1.end = () => ({ type: types$2.POSITION, value: '$' });

const util      = util$1;
const types$1     = types$4;
const sets      = sets$1;
const positions = positions$1;


lib$1.exports = (regexpStr) => {
  var i = 0, l, c,
    start = { type: types$1.ROOT, stack: []},

    // Keep track of last clause/group and stack.
    lastGroup = start,
    last = start.stack,
    groupStack = [];


  var repeatErr = (i) => {
    util.error(regexpStr, `Nothing to repeat at column ${i - 1}`);
  };

  // Decode a few escaped characters.
  var str = util.strToChars(regexpStr);
  l = str.length;

  // Iterate through each character in string.
  while (i < l) {
    c = str[i++];

    switch (c) {
      // Handle escaped characters, inclues a few sets.
      case '\\':
        c = str[i++];

        switch (c) {
          case 'b':
            last.push(positions.wordBoundary());
            break;

          case 'B':
            last.push(positions.nonWordBoundary());
            break;

          case 'w':
            last.push(sets.words());
            break;

          case 'W':
            last.push(sets.notWords());
            break;

          case 'd':
            last.push(sets.ints());
            break;

          case 'D':
            last.push(sets.notInts());
            break;

          case 's':
            last.push(sets.whitespace());
            break;

          case 'S':
            last.push(sets.notWhitespace());
            break;

          default:
            // Check if c is integer.
            // In which case it's a reference.
            if (/\d/.test(c)) {
              last.push({ type: types$1.REFERENCE, value: parseInt(c, 10) });

            // Escaped character.
            } else {
              last.push({ type: types$1.CHAR, value: c.charCodeAt(0) });
            }
        }

        break;


      // Positionals.
      case '^':
        last.push(positions.begin());
        break;

      case '$':
        last.push(positions.end());
        break;


      // Handle custom sets.
      case '[':
        // Check if this class is 'anti' i.e. [^abc].
        var not;
        if (str[i] === '^') {
          not = true;
          i++;
        } else {
          not = false;
        }

        // Get all the characters in class.
        var classTokens = util.tokenizeClass(str.slice(i), regexpStr);

        // Increase index by length of class.
        i += classTokens[1];
        last.push({
          type: types$1.SET,
          set: classTokens[0],
          not,
        });

        break;


      // Class of any character except \n.
      case '.':
        last.push(sets.anyChar());
        break;


      // Push group onto stack.
      case '(':
        // Create group.
        var group = {
          type: types$1.GROUP,
          stack: [],
          remember: true,
        };

        c = str[i];

        // If if this is a special kind of group.
        if (c === '?') {
          c = str[i + 1];
          i += 2;

          // Match if followed by.
          if (c === '=') {
            group.followedBy = true;

          // Match if not followed by.
          } else if (c === '!') {
            group.notFollowedBy = true;

          } else if (c !== ':') {
            util.error(regexpStr,
              `Invalid group, character '${c}'` +
              ` after '?' at column ${i - 1}`);
          }

          group.remember = false;
        }

        // Insert subgroup into current group stack.
        last.push(group);

        // Remember the current group for when the group closes.
        groupStack.push(lastGroup);

        // Make this new group the current group.
        lastGroup = group;
        last = group.stack;
        break;


      // Pop group out of stack.
      case ')':
        if (groupStack.length === 0) {
          util.error(regexpStr, `Unmatched ) at column ${i - 1}`);
        }
        lastGroup = groupStack.pop();

        // Check if this group has a PIPE.
        // To get back the correct last stack.
        last = lastGroup.options ?
          lastGroup.options[lastGroup.options.length - 1] : lastGroup.stack;
        break;


      // Use pipe character to give more choices.
      case '|':
        // Create array where options are if this is the first PIPE
        // in this clause.
        if (!lastGroup.options) {
          lastGroup.options = [lastGroup.stack];
          delete lastGroup.stack;
        }

        // Create a new stack and add to options for rest of clause.
        var stack = [];
        lastGroup.options.push(stack);
        last = stack;
        break;


      // Repetition.
      // For every repetition, remove last element from last stack
      // then insert back a RANGE object.
      // This design is chosen because there could be more than
      // one repetition symbols in a regex i.e. `a?+{2,3}`.
      case '{':
        var rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)), min, max;
        if (rs !== null) {
          if (last.length === 0) {
            repeatErr(i);
          }
          min = parseInt(rs[1], 10);
          max = rs[2] ? rs[3] ? parseInt(rs[3], 10) : Infinity : min;
          i += rs[0].length;

          last.push({
            type: types$1.REPETITION,
            min,
            max,
            value: last.pop(),
          });
        } else {
          last.push({
            type: types$1.CHAR,
            value: 123,
          });
        }
        break;

      case '?':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types$1.REPETITION,
          min: 0,
          max: 1,
          value: last.pop(),
        });
        break;

      case '+':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types$1.REPETITION,
          min: 1,
          max: Infinity,
          value: last.pop(),
        });
        break;

      case '*':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types$1.REPETITION,
          min: 0,
          max: Infinity,
          value: last.pop(),
        });
        break;


      // Default is a character that is not `\[](){}?+*^$`.
      default:
        last.push({
          type: types$1.CHAR,
          value: c.charCodeAt(0),
        });
    }

  }

  // Check if any groups have not been closed.
  if (groupStack.length !== 0) {
    util.error(regexpStr, 'Unterminated group');
  }

  return start;
};

lib$1.exports.types = types$1;

var libExports = lib$1.exports;

/* eslint indent: 4 */


// Private helper class
class SubRange {
    constructor(low, high) {
        this.low = low;
        this.high = high;
        this.length = 1 + high - low;
    }

    overlaps(range) {
        return !(this.high < range.low || this.low > range.high);
    }

    touches(range) {
        return !(this.high + 1 < range.low || this.low - 1 > range.high);
    }

    // Returns inclusive combination of SubRanges as a SubRange.
    add(range) {
        return new SubRange(
            Math.min(this.low, range.low),
            Math.max(this.high, range.high)
        );
    }

    // Returns subtraction of SubRanges as an array of SubRanges.
    // (There's a case where subtraction divides it in 2)
    subtract(range) {
        if (range.low <= this.low && range.high >= this.high) {
            return [];
        } else if (range.low > this.low && range.high < this.high) {
            return [
                new SubRange(this.low, range.low - 1),
                new SubRange(range.high + 1, this.high)
            ];
        } else if (range.low <= this.low) {
            return [new SubRange(range.high + 1, this.high)];
        } else {
            return [new SubRange(this.low, range.low - 1)];
        }
    }

    toString() {
        return this.low == this.high ?
            this.low.toString() : this.low + '-' + this.high;
    }
}


let DRange$1 = class DRange {
    constructor(a, b) {
        this.ranges = [];
        this.length = 0;
        if (a != null) this.add(a, b);
    }

    _update_length() {
        this.length = this.ranges.reduce((previous, range) => {
            return previous + range.length;
        }, 0);
    }

    add(a, b) {
        var _add = (subrange) => {
            var i = 0;
            while (i < this.ranges.length && !subrange.touches(this.ranges[i])) {
                i++;
            }
            var newRanges = this.ranges.slice(0, i);
            while (i < this.ranges.length && subrange.touches(this.ranges[i])) {
                subrange = subrange.add(this.ranges[i]);
                i++;
            }
            newRanges.push(subrange);
            this.ranges = newRanges.concat(this.ranges.slice(i));
            this._update_length();
        };

        if (a instanceof DRange) {
            a.ranges.forEach(_add);
        } else {
            if (b == null) b = a;
            _add(new SubRange(a, b));
        }
        return this;
    }

    subtract(a, b) {
        var _subtract = (subrange) => {
            var i = 0;
            while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {
                i++;
            }
            var newRanges = this.ranges.slice(0, i);
            while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {
                newRanges = newRanges.concat(this.ranges[i].subtract(subrange));
                i++;
            }
            this.ranges = newRanges.concat(this.ranges.slice(i));
            this._update_length();
        };

        if (a instanceof DRange) {
            a.ranges.forEach(_subtract);
        } else {
            if (b == null) b = a;
            _subtract(new SubRange(a, b));
        }
        return this;
    }

    intersect(a, b) {
        var newRanges = [];
        var _intersect = (subrange) => {
            var i = 0;
            while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {
                i++;
            }
            while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {
                var low = Math.max(this.ranges[i].low, subrange.low);
                var high = Math.min(this.ranges[i].high, subrange.high);
                newRanges.push(new SubRange(low, high));
                i++;
            }
        };

        if (a instanceof DRange) {
            a.ranges.forEach(_intersect);
        } else {
            if (b == null) b = a;
            _intersect(new SubRange(a, b));
        }
        this.ranges = newRanges;
        this._update_length();
        return this;
    }

    index(index) {
        var i = 0;
        while (i < this.ranges.length && this.ranges[i].length <= index) {
            index -= this.ranges[i].length;
            i++;
        }
        return this.ranges[i].low + index;
    }

    toString() {
        return '[ ' + this.ranges.join(', ') + ' ]';
    }

    clone() {
        return new DRange(this);
    }

    numbers() {
        return this.ranges.reduce((result, subrange) => {
            var i = subrange.low;
            while (i <= subrange.high) {
                result.push(i);
                i++;
            }
            return result;
        }, []);
    }

    subranges() {
        return this.ranges.map((subrange) => ({
            low: subrange.low,
            high: subrange.high,
            length: 1 + subrange.high - subrange.low
        }));
    }
};

var lib = DRange$1;

const ret    = libExports;
const DRange = lib;
const types  = ret.types;


var randexp = class RandExp {
  /**
   * @constructor
   * @param {RegExp|String} regexp
   * @param {String} m
   */
  constructor(regexp, m) {
    this._setDefaults(regexp);
    if (regexp instanceof RegExp) {
      this.ignoreCase = regexp.ignoreCase;
      this.multiline = regexp.multiline;
      regexp = regexp.source;

    } else if (typeof regexp === 'string') {
      this.ignoreCase = m && m.indexOf('i') !== -1;
      this.multiline = m && m.indexOf('m') !== -1;
    } else {
      throw new Error('Expected a regexp or string');
    }

    this.tokens = ret(regexp);
  }


  /**
   * Checks if some custom properties have been set for this regexp.
   *
   * @param {RandExp} randexp
   * @param {RegExp} regexp
   */
  _setDefaults(regexp) {
    // When a repetitional token has its max set to Infinite,
    // randexp won't actually generate a random amount between min and Infinite
    // instead it will see Infinite as min + 100.
    this.max = regexp.max != null ? regexp.max :
      RandExp.prototype.max != null ? RandExp.prototype.max : 100;

    // This allows expanding to include additional characters
    // for instance: RandExp.defaultRange.add(0, 65535);
    this.defaultRange = regexp.defaultRange ?
      regexp.defaultRange : this.defaultRange.clone();

    if (regexp.randInt) {
      this.randInt = regexp.randInt;
    }
  }


  /**
   * Generates the random string.
   *
   * @return {String}
   */
  gen() {
    return this._gen(this.tokens, []);
  }


  /**
   * Generate random string modeled after given tokens.
   *
   * @param {Object} token
   * @param {Array.<String>} groups
   * @return {String}
   */
  _gen(token, groups) {
    var stack, str, n, i, l;

    switch (token.type) {
      case types.ROOT:
      case types.GROUP:
        // Ignore lookaheads for now.
        if (token.followedBy || token.notFollowedBy) { return ''; }

        // Insert placeholder until group string is generated.
        if (token.remember && token.groupNumber === undefined) {
          token.groupNumber = groups.push(null) - 1;
        }

        stack = token.options ?
          this._randSelect(token.options) : token.stack;

        str = '';
        for (i = 0, l = stack.length; i < l; i++) {
          str += this._gen(stack[i], groups);
        }

        if (token.remember) {
          groups[token.groupNumber] = str;
        }
        return str;

      case types.POSITION:
        // Do nothing for now.
        return '';

      case types.SET:
        var expandedSet = this._expand(token);
        if (!expandedSet.length) { return ''; }
        return String.fromCharCode(this._randSelect(expandedSet));

      case types.REPETITION:
        // Randomly generate number between min and max.
        n = this.randInt(token.min,
          token.max === Infinity ? token.min + this.max : token.max);

        str = '';
        for (i = 0; i < n; i++) {
          str += this._gen(token.value, groups);
        }

        return str;

      case types.REFERENCE:
        return groups[token.value - 1] || '';

      case types.CHAR:
        var code = this.ignoreCase && this._randBool() ?
          this._toOtherCase(token.value) : token.value;
        return String.fromCharCode(code);
    }
  }


  /**
   * If code is alphabetic, converts to other case.
   * If not alphabetic, returns back code.
   *
   * @param {Number} code
   * @return {Number}
   */
  _toOtherCase(code) {
    return code + (97 <= code && code <= 122 ? -32 :
      65 <= code && code <= 90  ?  32 : 0);
  }


  /**
   * Randomly returns a true or false value.
   *
   * @return {Boolean}
   */
  _randBool() {
    return !this.randInt(0, 1);
  }


  /**
   * Randomly selects and returns a value from the array.
   *
   * @param {Array.<Object>} arr
   * @return {Object}
   */
  _randSelect(arr) {
    if (arr instanceof DRange) {
      return arr.index(this.randInt(0, arr.length - 1));
    }
    return arr[this.randInt(0, arr.length - 1)];
  }


  /**
   * expands a token to a DiscontinuousRange of characters which has a
   * length and an index function (for random selecting)
   *
   * @param {Object} token
   * @return {DiscontinuousRange}
   */
  _expand(token) {
    if (token.type === ret.types.CHAR) {
      return new DRange(token.value);
    } else if (token.type === ret.types.RANGE) {
      return new DRange(token.from, token.to);
    } else {
      let drange = new DRange();
      for (let i = 0; i < token.set.length; i++) {
        let subrange = this._expand(token.set[i]);
        drange.add(subrange);
        if (this.ignoreCase) {
          for (let j = 0; j < subrange.length; j++) {
            let code = subrange.index(j);
            let otherCaseCode = this._toOtherCase(code);
            if (code !== otherCaseCode) {
              drange.add(otherCaseCode);
            }
          }
        }
      }
      if (token.not) {
        return this.defaultRange.clone().subtract(drange);
      } else {
        return this.defaultRange.clone().intersect(drange);
      }
    }
  }


  /**
   * Randomly generates and returns a number between a and b (inclusive).
   *
   * @param {Number} a
   * @param {Number} b
   * @return {Number}
   */
  randInt(a, b) {
    return a + Math.floor(Math.random() * (1 + b - a));
  }


  /**
   * Default range of characters to generate from.
   */
  get defaultRange() {
    return this._range = this._range || new DRange(32, 126);
  }

  set defaultRange(range) {
    this._range = range;
  }


  /**
   *
   * Enables use of randexp with a shorter call.
   *
   * @param {RegExp|String| regexp}
   * @param {String} m
   * @return {String}
   */
  static randexp(regexp, m) {
    var randexp;
    if(typeof regexp === 'string') {
      regexp = new RegExp(regexp, m);
    }

    if (regexp._randexp === undefined) {
      randexp = new RandExp(regexp, m);
      regexp._randexp = randexp;
    } else {
      randexp = regexp._randexp;
      randexp._setDefaults(regexp);
    }
    return randexp.gen();
  }


  /**
   * Enables sugary /regexp/.gen syntax.
   */
  static sugar() {
    /* eshint freeze:false */
    RegExp.prototype.gen = function() {
      return RandExp.randexp(this);
    };
  }
};

var RandExp = /*@__PURE__*/getDefaultExportFromCjs(randexp);

const ALPHABETS = "abcdefghijklmnopqrstuvwxyz";
/* -----------------------------------------------------------
  REGULAR
----------------------------------------------------------- */
const boolean$4 = () => Math.random() < 0.5;
const integer = (min, max) => {
    min ??= 0;
    max ??= 100;
    return Math.floor(Math.random() * (max - min + 1)) + min;
};
const bigint$4 = (min, max) => BigInt(integer(Number(min ?? BigInt(0)), Number(max ?? BigInt(100))));
const number$4 = (min, max) => {
    min ??= 0;
    max ??= 100;
    return Math.random() * (max - min) + min;
};
const string$4 = (length) => new Array(length ?? integer(5, 10))
    .fill(0)
    .map(() => ALPHABETS[integer(0, ALPHABETS.length - 1)])
    .join("");
const array$2 = (closure, count, unique) => {
    count ??= length();
    unique ??= false;
    if (unique === false)
        return new Array(count ?? length())
            .fill(0)
            .map((_e, index) => closure(index));
    else {
        const set = new Set();
        while (set.size < count)
            set.add(closure(set.size));
        return Array.from(set);
    }
};
const pick = (array) => array[integer(0, array.length - 1)];
const length = () => integer(0, 3);
const pattern = (regex) => {
    const r = new RandExp(regex);
    for (let i = 0; i < 10; ++i) {
        const str = r.gen();
        if (regex.test(str))
            return str;
    }
    return r.gen();
};
/* -----------------------------------------------------------
  SECIAL FORMATS
----------------------------------------------------------- */
// SPECIAL CHARACTERS
const byte = () => "vt7ekz4lIoNTTS9sDQYdWKharxIFAR54+z/umIxSgUM=";
const password = () => string$4(integer(4, 16));
const regex = () => "/^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/";
const uuid = () => "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
});
// ADDRESSES
const email = () => `${string$4(10)}@${string$4(10)}.${string$4(3)}`;
const hostname = () => `${string$4(10)}.${string$4(3)}`;
const idnEmail = () => email();
const idnHostname = () => hostname();
const iri = () => url();
const iriReference = () => url();
const ipv4 = () => array$2(() => integer(0, 255), 4).join(".");
const ipv6 = () => array$2(() => integer(0, 65535).toString(16), 8).join(":");
const uri = () => url();
const uriReference = () => url();
const uriTemplate = () => url();
const url = () => `https://${string$4(10)}.${string$4(3)}`;
// TIMESTAMPS
const datetime = (min, max) => new Date(number$4(min ?? Date.now() - 30 * DAY, max ?? Date.now() + 7 * DAY)).toISOString();
const date = (min, max) => new Date(number$4(min ?? 0, max ?? Date.now() * 2))
    .toISOString()
    .substring(0, 10);
const time = () => new Date(number$4(0, DAY)).toISOString().substring(11);
const duration = () => {
    const period = durate([
        ["Y", integer(0, 100)],
        ["M", integer(0, 12)],
        ["D", integer(0, 31)],
    ]);
    const time = durate([
        ["H", integer(0, 24)],
        ["M", integer(0, 60)],
        ["S", integer(0, 60)],
    ]);
    if (period.length + time.length === 0)
        return "PT0S";
    return `P${period}${time.length ? "T" : ""}${time}`;
};
// POINTERS
const jsonPointer = () => `/components/schemas/${string$4(10)}`;
const relativeJsonPointer = () => `${integer(0, 10)}#`;
const DAY = 86400000;
const durate = (elements) => elements
    .filter(([_unit, value]) => value !== 0)
    .map(([unit, value]) => `${value}${unit}`)
    .join("");

var RandomGenerator = /*#__PURE__*/Object.freeze({
	__proto__: null,
	array: array$2,
	bigint: bigint$4,
	boolean: boolean$4,
	byte: byte,
	date: date,
	datetime: datetime,
	duration: duration,
	email: email,
	hostname: hostname,
	idnEmail: idnEmail,
	idnHostname: idnHostname,
	integer: integer,
	ipv4: ipv4,
	ipv6: ipv6,
	iri: iri,
	iriReference: iriReference,
	jsonPointer: jsonPointer,
	length: length,
	number: number$4,
	password: password,
	pattern: pattern,
	pick: pick,
	regex: regex,
	relativeJsonPointer: relativeJsonPointer,
	string: string$4,
	time: time,
	uri: uri,
	uriReference: uriReference,
	uriTemplate: uriTemplate,
	url: url,
	uuid: uuid
});

const $every = (array, pred) => {
    let error = null;
    for (let i = 0; i < array.length; ++i)
        if (null !== (error = pred(array[i], i)))
            return error;
    return null;
};

class TypeGuardError extends Error {
    method;
    path;
    expected;
    value;
    fake_expected_typed_value_;
    constructor(props) {
        // MESSAGE CONSTRUCTION
        super(props.message ||
            `Error on ${props.method}(): invalid type${props.path ? ` on ${props.path}` : ""}, expect to be ${props.expected}`);
        // INHERITANCE POLYFILL
        const proto = new.target.prototype;
        if (Object.setPrototypeOf)
            Object.setPrototypeOf(this, proto);
        else
            this.__proto__ = proto;
        // ASSIGN MEMBERS
        this.method = props.method;
        this.path = props.path;
        this.expected = props.expected;
        this.value = props.value;
    }
}

/**
 * @internal
 */
const $guard = (method) => (exceptionable, props, factory) => {
    if (exceptionable === true)
        throw (factory ?? ((props) => new TypeGuardError(props)))({
            method,
            path: props.path,
            expected: props.expected,
            value: props.value,
        });
    return false;
};

const $join = (str) => variable(str) ? `.${str}` : `[${JSON.stringify(str)}]`;
const variable = (str) => reserved(str) === false && /^[a-zA-Z_$][a-zA-Z_$0-9]*$/g.test(str);
const reserved = (str) => RESERVED.has(str);
const RESERVED = new Set([
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "enum",
    "export",
    "extends",
    "false",
    "finally",
    "for",
    "function",
    "if",
    "import",
    "in",
    "instanceof",
    "new",
    "null",
    "return",
    "super",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
]);

const $report = (array) => {
    const reportable = (path) => {
        if (array.length === 0)
            return true;
        const last = array[array.length - 1].path;
        return path.length > last.length || last.substring(0, path.length) !== path;
    };
    return (exceptable, error) => {
        if (exceptable && reportable(error.path))
            array.push(error);
        return false;
    };
};

const $is_between = (value, minimum, maximum) => minimum <= value && value <= maximum;

const $is_bigint_string = (str) => {
    try {
        BigInt(str);
        return true;
    }
    catch {
        return false;
    }
};

/**
 * @internal
 */
const is$1 = () => ({
    is_between: $is_between,
    is_bigint_string: $is_bigint_string,
});

const functionalAssert = () => ({
    errorFactory: (p) => new TypeGuardError(p),
});

const $number = (value) => {
    if (isFinite(value) === false)
        throw new TypeGuardError({
            method: "typia.json.stringify",
            expected: "number",
            value,
            message: "Error on typia.json.stringify(): infinite or not a number.",
        });
    return value;
};

const $rest = (str) => {
    return str.length === 2 ? "" : "," + str.substring(1, str.length - 1);
};

/**
 * In the past, name of `typia` was `typescript-json`, and supported
 * JSON serialization by wrapping `fast-json-stringify. `typescript-json` was
 * a helper library of `fast-json-stringify`, which can skip manual JSON schema
 * definition just by putting pure TypeScript type.
 *
 * This `$string` function is a part of `fast-json-stringify` at that time, and
 * still being used in `typia` for the string serialization.
 *
 * @internal
 * @reference https://github.com/fastify/fast-json-stringify/blob/master/lib/serializer.js
 * @blog https://dev.to/samchon/good-bye-typescript-is-ancestor-of-typia-20000x-faster-validator-49fi
 */
const $string = (str) => {
    const len = str.length;
    let result = "";
    let last = -1;
    let point = 255;
    // eslint-disable-next-line
    for (var i = 0; i < len; i++) {
        point = str.charCodeAt(i);
        if (point < 32) {
            return JSON.stringify(str);
        }
        if (point >= 0xd800 && point <= 0xdfff) {
            // The current character is a surrogate.
            return JSON.stringify(str);
        }
        if (point === 0x22 || // '"'
            point === 0x5c // '\'
        ) {
            last === -1 && (last = 0);
            result += str.slice(last, i) + "\\";
            last = i;
        }
    }
    return ((last === -1 && '"' + str + '"') || '"' + result + str.slice(last) + '"');
};

/**
 * @internal
 */
const $tail = (str) => str[str.length - 1] === "," ? str.substring(0, str.length - 1) : str;

const $throws = (method) => (props) => {
    throw new TypeGuardError({
        ...props,
        method: `typia.${method}`,
    });
};

const stringify$1 = (method) => ({
    ...is$1(),
    number: $number,
    string: $string,
    tail: $tail,
    rest: $rest,
    throws: $throws(`json.${method}`),
});

const boolean$3 = (input) => input instanceof File
    ? input
    : input === null
        ? undefined
        : input === "null"
            ? null
            : input.length === 0
                ? true
                : input === "true" || input === "1"
                    ? true
                    : input === "false" || input === "0"
                        ? false
                        : input; // wrong type
const number$3 = (input) => input instanceof File
    ? input
    : !!input?.length
        ? input === "null"
            ? null
            : toNumber$3(input)
        : undefined;
const bigint$3 = (input) => input instanceof File
    ? input
    : !!input?.length
        ? input === "null"
            ? null
            : toBigint$3(input)
        : undefined;
const string$3 = (input) => input instanceof File
    ? input
    : input === null
        ? undefined
        : input === "null"
            ? null
            : input;
const array$1 = (input, alternative) => input.length ? input : alternative;
const blob = (input) => input instanceof Blob
    ? input
    : input === null
        ? undefined
        : input === "null"
            ? null
            : input;
const file = (input) => input instanceof File
    ? input
    : input === null
        ? undefined
        : input === "null"
            ? null
            : input;
const toNumber$3 = (str) => {
    const value = Number(str);
    return isNaN(value) ? str : value;
};
const toBigint$3 = (str) => {
    try {
        return BigInt(str);
    }
    catch {
        return str;
    }
};

var $FormDataReader = /*#__PURE__*/Object.freeze({
	__proto__: null,
	array: array$1,
	bigint: bigint$3,
	blob: blob,
	boolean: boolean$3,
	file: file,
	number: number$3,
	string: string$3
});

const boolean$2 = (value) => value !== undefined
    ? value === "true"
        ? true
        : value === "false"
            ? false
            : value
    : undefined;
const bigint$2 = (value) => value !== undefined ? toBigint$2(value) : undefined;
const number$2 = (value) => value !== undefined ? toNumber$2(value) : undefined;
const string$2 = (value) => value;
const toBigint$2 = (str) => {
    try {
        return BigInt(str);
    }
    catch {
        return str;
    }
};
const toNumber$2 = (str) => {
    const value = Number(str);
    return isNaN(value) ? str : value;
};

var $HeadersReader = /*#__PURE__*/Object.freeze({
	__proto__: null,
	bigint: bigint$2,
	boolean: boolean$2,
	number: number$2,
	string: string$2
});

const boolean$1 = (value) => value !== "null"
    ? value === "true" || value === "1"
        ? true
        : value === "false" || value === "0"
            ? false
            : value
    : null;
const bigint$1 = (value) => value !== "null" ? toBigint$1(value) : null;
const number$1 = (value) => value !== "null" ? toNumber$1(value) : null;
const string$1 = (value) => (value !== "null" ? value : null);
const toNumber$1 = (str) => {
    const value = Number(str);
    return isNaN(value) ? str : value;
};
const toBigint$1 = (str) => {
    try {
        return BigInt(str);
    }
    catch {
        return str;
    }
};

var $ParameterReader = /*#__PURE__*/Object.freeze({
	__proto__: null,
	bigint: bigint$1,
	boolean: boolean$1,
	number: number$1,
	string: string$1
});

const boolean = (str) => str === null
    ? undefined
    : str === "null"
        ? null
        : str.length === 0
            ? true
            : str === "true" || str === "1"
                ? true
                : str === "false" || str === "0"
                    ? false
                    : str; // wrong type
const number = (str) => !!str?.length ? (str === "null" ? null : toNumber(str)) : undefined;
const bigint = (str) => !!str?.length ? (str === "null" ? null : toBigint(str)) : undefined;
const string = (str) => str === null ? undefined : str === "null" ? null : str;
const params = (input) => {
    if (typeof input === "string") {
        const index = input.indexOf("?");
        input = index === -1 ? "" : input.substring(index + 1);
        return new URLSearchParams(input);
    }
    return input;
};
const array = (input, alternative) => input.length ? input : alternative;
const toNumber = (str) => {
    const value = Number(str);
    return isNaN(value) ? str : value;
};
const toBigint = (str) => {
    try {
        return BigInt(str);
    }
    catch {
        return str;
    }
};

var $QueryReader = /*#__PURE__*/Object.freeze({
	__proto__: null,
	array: array,
	bigint: bigint,
	boolean: boolean,
	number: number,
	params: params,
	string: string
});

const formData$1 = () => $FormDataReader;
const headers$1 = () => $HeadersReader;
const parameter$1 = () => $ParameterReader;
const query$1 = () => $QueryReader;

const capitalize = (str) => str.length ? str[0].toUpperCase() + str.slice(1).toLowerCase() : str;

function snake$2(str) {
    if (str.length === 0)
        return str;
    // PREFIX
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let prefix = "";
    for (let i = 0; i < str.length; i++) {
        if (str[i] === "_")
            prefix += "_";
        else
            break;
    }
    if (prefix.length !== 0)
        str = str.substring(prefix.length);
    const out = (s) => `${prefix}${s}`;
    // SNAKE CASE
    const items = str.split("_");
    if (items.length > 1)
        return out(items.map((s) => s.toLowerCase()).join("_"));
    // CAMEL OR PASCAL CASE
    const indexes = [];
    for (let i = 0; i < str.length; i++) {
        const code = str.charCodeAt(i);
        if (65 <= code && code <= 90)
            indexes.push(i);
    }
    for (let i = indexes.length - 1; i > 0; --i) {
        const now = indexes[i];
        const prev = indexes[i - 1];
        if (now - prev === 1)
            indexes.splice(i, 1);
    }
    if (indexes.length !== 0 && indexes[0] === 0)
        indexes.splice(0, 1);
    if (indexes.length === 0)
        return str.toLowerCase();
    let ret = "";
    for (let i = 0; i < indexes.length; i++) {
        const first = i === 0 ? 0 : indexes[i - 1];
        const last = indexes[i];
        ret += str.substring(first, last).toLowerCase();
        ret += "_";
    }
    ret += str.substring(indexes[indexes.length - 1]).toLowerCase();
    return out(ret);
}
const camel$2 = (str) => unsnake({
    plain: (str) => str.length
        ? str === str.toUpperCase()
            ? str.toLocaleLowerCase()
            : `${str[0].toLowerCase()}${str.substring(1)}`
        : str,
    snake: (str, i) => i === 0 ? str.toLowerCase() : capitalize(str.toLowerCase()),
})(str);
const pascal$2 = (str) => unsnake({
    plain: (str) => str.length ? `${str[0].toUpperCase()}${str.substring(1)}` : str,
    snake: capitalize,
})(str);
const unsnake = (props) => (str) => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let prefix = "";
    for (let i = 0; i < str.length; i++) {
        if (str[i] === "_")
            prefix += "_";
        else
            break;
    }
    if (prefix.length !== 0)
        str = str.substring(prefix.length);
    const out = (s) => `${prefix}${s}`;
    if (str.length === 0)
        return out("");
    const items = str.split("_").filter((s) => s.length !== 0);
    return items.length === 0
        ? out("")
        : items.length === 1
            ? out(props.plain(items[0]))
            : out(items.map(props.snake).join(""));
};

const $convention = (rename) => {
    const main = (input) => {
        if (typeof input === "object")
            if (input === null)
                return null;
            else if (Array.isArray(input))
                return input.map(main);
            else if (input instanceof Boolean ||
                input instanceof BigInt ||
                input instanceof Number ||
                input instanceof String)
                return input.valueOf();
            else if (input instanceof Date)
                return new Date(input);
            else if (input instanceof Uint8Array ||
                input instanceof Uint8ClampedArray ||
                input instanceof Uint16Array ||
                input instanceof Uint32Array ||
                input instanceof BigUint64Array ||
                input instanceof Int8Array ||
                input instanceof Int16Array ||
                input instanceof Int32Array ||
                input instanceof BigInt64Array ||
                input instanceof Float32Array ||
                input instanceof Float64Array ||
                input instanceof DataView)
                return input;
            else
                return object(input);
        return input;
    };
    const object = (input) => Object.fromEntries(Object.entries(input).map(([key, value]) => [rename(key), main(value)]));
    return main;
};

const camel$1 = (method) => ({
    ...base(method),
    any: $convention(camel$2),
});
const pascal$1 = (method) => ({
    ...base(method),
    any: $convention(pascal$2),
});
const snake$1 = (method) => ({
    ...base(method),
    any: $convention(snake$2),
});
const base = (method) => ({
    ...is$1(),
    throws: $throws(`notations.${method}`),
});

const $clone = (value) => $cloneMain(value);
const $cloneMain = (value) => {
    if (value === undefined)
        return undefined;
    else if (typeof value === "object")
        if (value === null)
            return null;
        else if (Array.isArray(value))
            return value.map($cloneMain);
        else if (value instanceof Date)
            return new Date(value);
        else if (value instanceof Uint8Array)
            return new Uint8Array(value);
        else if (value instanceof Uint8ClampedArray)
            return new Uint8ClampedArray(value);
        else if (value instanceof Uint16Array)
            return new Uint16Array(value);
        else if (value instanceof Uint32Array)
            return new Uint32Array(value);
        else if (value instanceof BigUint64Array)
            return new BigUint64Array(value);
        else if (value instanceof Int8Array)
            return new Int8Array(value);
        else if (value instanceof Int16Array)
            return new Int16Array(value);
        else if (value instanceof Int32Array)
            return new Int32Array(value);
        else if (value instanceof BigInt64Array)
            return new BigInt64Array(value);
        else if (value instanceof Float32Array)
            return new Float32Array(value);
        else if (value instanceof Float64Array)
            return new Float64Array(value);
        else if (value instanceof ArrayBuffer)
            return value.slice(0);
        else if (value instanceof SharedArrayBuffer)
            return value.slice(0);
        else if (value instanceof DataView)
            return new DataView(value.buffer.slice(0));
        else if (typeof File !== "undefined" && value instanceof File)
            return new File([value], value.name, { type: value.type });
        else if (typeof Blob !== "undefined" && value instanceof Blob)
            return new Blob([value], { type: value.type });
        else if (value instanceof Set)
            return new Set([...value].map($cloneMain));
        else if (value instanceof Map)
            return new Map([...value].map(([k, v]) => [$cloneMain(k), $cloneMain(v)]));
        else if (value instanceof WeakSet || value instanceof WeakMap)
            throw new Error("WeakSet and WeakMap are not supported");
        else if (value.valueOf() !== value)
            return $cloneMain(value.valueOf());
        else
            return Object.fromEntries(Object.entries(value)
                .map(([k, v]) => [k, $cloneMain(v)])
                .filter(([, v]) => v !== undefined));
    else if (typeof value === "function")
        return undefined;
    return value;
};

const $any = (val) => $clone(val);

const clone$1 = (method) => ({
    ...is$1(),
    throws: $throws(`misc.${method}`),
    any: $any,
});
const prune$1 = (method) => ({
    ...is$1(),
    throws: $throws(`misc.${method}`),
});

class Singleton {
    closure_;
    value_;
    constructor(closure) {
        this.closure_ = closure;
        this.value_ = NOT_MOUNTED_YET;
    }
    get(...args) {
        if (this.value_ === NOT_MOUNTED_YET)
            this.value_ = this.closure_(...args);
        return this.value_;
    }
}
const NOT_MOUNTED_YET = {};

/// @reference https://github.com/piotr-oles/as-proto/blob/main/packages/as-proto/assembly/internal/FixedReader.ts
class $ProtobufReader {
    /**
     * Read buffer
     */
    buf;
    /**
     * Read buffer pointer.
     */
    ptr;
    /**
     * DataView for buffer.
     */
    view;
    constructor(buf) {
        this.buf = buf;
        this.ptr = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    index() {
        return this.ptr;
    }
    size() {
        return this.buf.length;
    }
    uint32() {
        return this.varint32();
    }
    int32() {
        return this.varint32();
    }
    sint32() {
        const value = this.varint32();
        return (value >>> 1) ^ -(value & 1);
    }
    uint64() {
        return this.varint64();
    }
    int64() {
        return this.varint64();
    }
    sint64() {
        const value = this.varint64();
        return (value >> BigInt(0x01)) ^ -(value & BigInt(0x01));
    }
    bool() {
        return this.varint32() !== 0;
    }
    float() {
        const value = this.view.getFloat32(this.ptr, true);
        this.ptr += 4;
        return value;
    }
    double() {
        const value = this.view.getFloat64(this.ptr, true);
        this.ptr += 8;
        return value;
    }
    bytes() {
        const length = this.uint32();
        const from = this.ptr;
        this.ptr += length;
        return this.buf.subarray(from, from + length);
    }
    string() {
        return utf8$1.get().decode(this.bytes());
    }
    skip(length) {
        if (length === 0)
            while (this.u8() & 0x80)
                ;
        else {
            if (this.index() + length > this.size())
                throw new Error("Error on typia.protobuf.decode(): buffer overflow.");
            this.ptr += length;
        }
    }
    skipType(wireType) {
        switch (wireType) {
            case 0 /* ProtobufWire.VARIANT */:
                this.skip(0);
                break;
            case 1 /* ProtobufWire.I64 */:
                this.skip(8);
                break;
            case 2 /* ProtobufWire.LEN */:
                this.skip(this.uint32());
                break;
            case 3 /* ProtobufWire.START_GROUP */:
                while ((wireType = this.uint32() & 0x07) !== 4 /* ProtobufWire.END_GROUP */)
                    this.skipType(wireType);
                break;
            case 5 /* ProtobufWire.I32 */:
                this.skip(4);
                break;
            default:
                throw new Error(`Invalid wire type ${wireType} at offset ${this.ptr}.`);
        }
    }
    varint32() {
        let loaded;
        let value;
        value = (loaded = this.u8()) & 0x7f;
        if (loaded < 0x80)
            return value;
        value |= ((loaded = this.u8()) & 0x7f) << 7;
        if (loaded < 0x80)
            return value;
        value |= ((loaded = this.u8()) & 0x7f) << 14;
        if (loaded < 0x80)
            return value;
        value |= ((loaded = this.u8()) & 0x7f) << 21;
        if (loaded < 0x80)
            return value;
        value |= ((loaded = this.u8()) & 0xf) << 28;
        if (loaded < 0x80)
            return value;
        // increment position until there is no continuation bit or until we read 10 bytes
        if (this.u8() < 0x80)
            return value;
        if (this.u8() < 0x80)
            return value;
        if (this.u8() < 0x80)
            return value;
        if (this.u8() < 0x80)
            return value;
        if (this.u8() < 0x80)
            return value;
        return value;
    }
    varint64() {
        let loaded;
        let value;
        value = (loaded = this.u8n()) & BigInt(0x7f);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(7);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(14);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(21);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(28);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(35);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(42);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(49);
        if (loaded < BigInt(0x80))
            return value;
        value |= ((loaded = this.u8n()) & BigInt(0x7f)) << BigInt(56);
        if (loaded < BigInt(0x80))
            return value;
        value |= (this.u8n() & BigInt(0x01)) << BigInt(63);
        return BigInt.asIntN(64, value);
    }
    u8() {
        return this.view.getUint8(this.ptr++);
    }
    u8n() {
        return BigInt(this.u8());
    }
}
const utf8$1 = /** @__PURE__ */ new Singleton(() => new TextDecoder("utf-8"));

const $strlen = (str) => new Blob([str]).size;

/// @reference https://github.com/piotr-oles/as-proto/blob/main/packages/as-proto/assembly/internal/FixedSizer.ts
class $ProtobufSizer {
    /**
     * Total length.
     */
    len;
    /**
     * Position stack.
     */
    pos;
    /**
     * Variable length list.
     */
    varlen;
    /**
     * Variable length index stack.
     */
    varlenidx;
    constructor(length = 0) {
        this.len = length;
        this.pos = [];
        this.varlen = [];
        this.varlenidx = [];
    }
    bool() {
        this.len += 1;
    }
    int32(value) {
        if (value < 0) {
            // 10 bytes to encode negative number
            this.len += 10;
        }
        else {
            this.varint32(value);
        }
    }
    sint32(value) {
        this.varint32((value << 1) ^ (value >> 31));
    }
    uint32(value) {
        this.varint32(value);
    }
    int64(value) {
        this.varint64(typeof value === "number" ? BigInt(value) : value);
    }
    sint64(value) {
        if (typeof value === "number")
            value = BigInt(value);
        this.varint64((value << BigInt(1)) ^ (value >> BigInt(63)));
    }
    uint64(value) {
        this.varint64(typeof value === "number" ? BigInt(value) : value);
    }
    // public fixed32(_value: number): void {
    //     this.len += 4;
    // }
    // public sfixed32(_value: number): void {
    //     this.len += 4;
    // }
    // public fixed64(_value: number | bigint): void {
    //     this.len += 8;
    // }
    // public sfixed64(_value: number | bigint): void {
    //     this.len += 8;
    // }
    float(_value) {
        this.len += 4;
    }
    double(_value) {
        this.len += 8;
    }
    bytes(value) {
        this.uint32(value.byteLength);
        this.len += value.byteLength;
    }
    string(value) {
        const len = $strlen(value);
        this.varlen.push(len);
        this.uint32(len);
        this.len += len;
    }
    fork() {
        this.pos.push(this.len); // save current position
        this.varlenidx.push(this.varlen.length); // save current index in varlen array
        this.varlen.push(0); // add 0 length to varlen array (to be updated in ldelim())
    }
    ldelim() {
        if (!(this.pos.length && this.varlenidx.length))
            throw new Error("Error on typia.protobuf.encode(): missing fork() before ldelim() call.");
        const endPos = this.len; // current position is end position
        const startPos = this.pos.pop(); // get start position from stack
        const idx = this.varlenidx.pop(); // get varlen index from stack
        const len = endPos - startPos; // calculate length
        this.varlen[idx] = len; // update variable length
        this.uint32(len); // add uint32 that should be called in fork()
    }
    reset() {
        this.len = 0;
        // re-use arrays
        this.pos.length = 0;
        this.varlen.length = 0;
        this.varlenidx.length = 0;
    }
    varint32(value) {
        this.len +=
            value < 0
                ? 10 // 10 bits with leading 1's
                : value < 0x80
                    ? 1
                    : value < 0x4000
                        ? 2
                        : value < 0x200000
                            ? 3
                            : value < 0x10000000
                                ? 4
                                : 5;
    }
    varint64(val) {
        val = BigInt.asUintN(64, val);
        while (val > BigInt(0x7f)) {
            ++this.len;
            val = val >> BigInt(0x07);
        }
        ++this.len;
    }
}

/// @reference https://github.com/piotr-oles/as-proto/blob/main/packages/as-proto/assembly/internal/FixedWriter.ts
class $ProtobufWriter {
    /**
     * Related sizer
     */
    sizer;
    /**
     * Current pointer.
     */
    ptr;
    /**
     * Protobuf buffer.
     */
    buf;
    /**
     * DataView for buffer.
     */
    view;
    /**
     * Index in varlen array from sizer.
     */
    varlenidx;
    constructor(sizer) {
        this.sizer = sizer;
        this.buf = new Uint8Array(sizer.len);
        this.view = new DataView(this.buf.buffer);
        this.ptr = 0;
        this.varlenidx = 0;
    }
    buffer() {
        return this.buf;
    }
    bool(value) {
        this.byte(value ? 1 : 0);
    }
    byte(value) {
        this.buf[this.ptr++] = value & 255;
    }
    int32(value) {
        if (value < 0)
            this.int64(value);
        else
            this.variant32(value >>> 0);
    }
    sint32(value) {
        this.variant32((value << 1) ^ (value >> 31));
    }
    uint32(value) {
        this.variant32(value);
    }
    sint64(value) {
        value = BigInt(value);
        this.variant64((value << BigInt(0x01)) ^ (value >> BigInt(0x3f)));
    }
    int64(value) {
        this.variant64(BigInt(value));
    }
    uint64(value) {
        this.variant64(BigInt(value));
    }
    float(val) {
        this.view.setFloat32(this.ptr, val, true);
        this.ptr += 4;
    }
    double(val) {
        this.view.setFloat64(this.ptr, val, true);
        this.ptr += 8;
    }
    bytes(value) {
        this.uint32(value.byteLength);
        for (let i = 0; i < value.byteLength; i++)
            this.buf[this.ptr++] = value[i];
    }
    string(value) {
        const len = this.varlen(); // use precomputed length
        this.uint32(len);
        const binary = utf8.get().encode(value);
        for (let i = 0; i < binary.byteLength; i++)
            this.buf[this.ptr++] = binary[i];
    }
    fork() {
        this.uint32(this.varlen()); // use precomputed length
    }
    ldelim() {
        // nothing to do - all dirty work done by sizer
    }
    finish() {
        return this.buf;
    }
    reset() {
        this.buf = new Uint8Array(this.sizer.len);
        this.view = new DataView(this.buf.buffer);
        this.ptr = 0;
        this.varlenidx = 0;
    }
    variant32(val) {
        while (val > 0x7f) {
            this.buf[this.ptr++] = (val & 0x7f) | 0x80;
            val = val >>> 7;
        }
        this.buf[this.ptr++] = val;
    }
    variant64(val) {
        val = BigInt.asUintN(64, val);
        while (val > BigInt(0x7f)) {
            this.buf[this.ptr++] = Number((val & BigInt(0x7f)) | BigInt(0x80));
            val = val >> BigInt(0x07);
        }
        this.buf[this.ptr++] = Number(val);
    }
    varlen() {
        return this.varlenidx >= this.sizer.varlen.length
            ? 0
            : this.sizer.varlen[this.varlenidx++];
    }
}
const utf8 = /** @__PURE__ */ new Singleton(() => new TextEncoder());

const decode$1 = (method) => ({
    ...is$1(),
    Reader: $ProtobufReader,
    throws: $throws(`protobuf.${method}`),
});
const encode$1 = (method) => ({
    ...is$1(),
    Sizer: $ProtobufSizer,
    Writer: $ProtobufWriter,
    strlen: $strlen,
    throws: $throws(method),
});

var LlmTypeChecker;

(function(LlmTypeChecker) {
    LlmTypeChecker.visit = (schema, callback) => {
        callback(schema);
        if (LlmTypeChecker.isOneOf(schema)) schema.oneOf.forEach((s => LlmTypeChecker.visit(s, callback))); else if (LlmTypeChecker.isObject(schema)) {
            for (const [_, s] of Object.entries(schema.properties ?? {})) LlmTypeChecker.visit(s, callback);
            if (typeof schema.additionalProperties === "object" && schema.additionalProperties !== null) LlmTypeChecker.visit(schema.additionalProperties, callback);
        } else if (LlmTypeChecker.isArray(schema)) LlmTypeChecker.visit(schema.items, callback);
    };
    LlmTypeChecker.isOneOf = schema => schema.oneOf !== undefined;
    LlmTypeChecker.isObject = schema => schema.type === "object";
    LlmTypeChecker.isArray = schema => schema.type === "array";
    LlmTypeChecker.isBoolean = schema => schema.type === "boolean";
    LlmTypeChecker.isInteger = schema => schema.type === "integer";
    LlmTypeChecker.isNumber = schema => schema.type === "number";
    LlmTypeChecker.isString = schema => schema.type === "string";
    LlmTypeChecker.isNullOnly = schema => schema.type === "null";
    LlmTypeChecker.isNullable = schema => !LlmTypeChecker.isUnknown(schema) && (LlmTypeChecker.isNullOnly(schema) || (LlmTypeChecker.isOneOf(schema) ? schema.oneOf.some(LlmTypeChecker.isNullable) : schema.nullable === true));
    LlmTypeChecker.isUnknown = schema => !LlmTypeChecker.isOneOf(schema) && schema.type === undefined;
})(LlmTypeChecker || (LlmTypeChecker = {}));

var LlmSchemaSeparator;

(function(LlmSchemaSeparator) {
    LlmSchemaSeparator.parameters = props => {
        const indexes = props.parameters.map(LlmSchemaSeparator.schema(props.predicator));
        return {
            llm: indexes.map((([llm], index) => ({
                index,
                schema: llm
            }))).filter((({schema}) => schema !== null)),
            human: indexes.map((([, human], index) => ({
                index,
                schema: human
            }))).filter((({schema}) => schema !== null))
        };
    };
    LlmSchemaSeparator.schema = predicator => input => {
        if (predicator(input) === true) return [ null, input ]; else if (LlmTypeChecker.isUnknown(input) || LlmTypeChecker.isOneOf(input)) return [ input, null ]; else if (LlmTypeChecker.isObject(input)) return separateObject(predicator)(input); else if (LlmTypeChecker.isArray(input)) return separateArray(predicator)(input);
        return [ input, null ];
    };
    const separateArray = predicator => input => {
        const [x, y] = LlmSchemaSeparator.schema(predicator)(input.items);
        return [ x !== null ? {
            ...input,
            items: x
        } : null, y !== null ? {
            ...input,
            items: y
        } : null ];
    };
    const separateObject = predicator => input => {
        if (!!input.additionalProperties || Object.keys(input.properties ?? {}).length === 0) return [ input, null ];
        const llm = {
            ...input,
            properties: {}
        };
        const human = {
            ...input,
            properties: {}
        };
        for (const [key, value] of Object.entries(input.properties ?? {})) {
            const [x, y] = LlmSchemaSeparator.schema(predicator)(value);
            if (x !== null) llm.properties[key] = x;
            if (y !== null) human.properties[key] = y;
        }
        return [ Object.keys(llm.properties).length === 0 ? null : shrinkRequired(llm), Object.keys(human.properties).length === 0 ? null : shrinkRequired(human) ];
    };
    const shrinkRequired = input => {
        if (input.required !== undefined) input.required = input.required.filter((key => input.properties?.[key] !== undefined));
        return input;
    };
})(LlmSchemaSeparator || (LlmSchemaSeparator = {}));

const application$2 = () => ({
    finalize: (app, options) => {
        app.options = {
            separate: options?.separate ?? null,
            recursive: 3,
        };
        if (app.options.separate === null)
            return;
        for (const func of app.functions)
            func.separated = LlmSchemaSeparator.parameters({
                parameters: func.parameters,
                predicator: app.options.separate,
            });
    },
});

const assert$1 = (method) => ({
    ...is$1(),
    join: $join,
    every: $every,
    guard: $guard(`typia.${method}`),
    predicate: (matched, exceptionable, closure) => {
        if (matched === false && exceptionable === true)
            throw new TypeGuardError({
                ...closure(),
                method: `typia.${method}`,
            });
        return matched;
    },
});
const validate$1 = () => ({
    ...is$1(),
    join: $join,
    report: $report,
    predicate: (res) => (matched, exceptionable, closure) => {
        // CHECK FAILURE
        if (matched === false && exceptionable === true)
            (() => {
                res.success &&= false;
                const errorList = res.errors;
                // TRACE ERROR
                const error = closure();
                if (errorList.length) {
                    const last = errorList[errorList.length - 1].path;
                    if (last.length >= error.path.length &&
                        last.substring(0, error.path.length) === error.path)
                        return;
                }
                errorList.push(error);
                return;
            })();
        return matched;
    },
});
const random$1 = () => ({
    generator: RandomGenerator,
    pick: pick,
});

/**
 * @internal
 */
function assertFunction() {
    halt$8("assertFunction");
}
const assertFunctionPure = /** @__PURE__ */ Object.assign(assertFunction, 
/** @__PURE__ */ assert$1("functional.assertFunction"), 
/** @__PURE__ */ functionalAssert());
const assertParametersPure = /** @__PURE__ */ Object.assign(assertFunction, 
/** @__PURE__ */ assert$1("functional.assertFunction"), 
/** @__PURE__ */ functionalAssert());
/**
 * @internal
 */
function assertReturn() {
    halt$8("assertReturn");
}
const assertReturnPure = /** @__PURE__ */ Object.assign(assertReturn, 
/** @__PURE__ */ assert$1("functional.assertReturn"), 
/** @__PURE__ */ functionalAssert());
/**
 * @internal
 */
function assertEqualsFunction() {
    halt$8("assertEqualsFunction");
}
const assertEqualsFunctionPure = /** @__PURE__ */ Object.assign(assertEqualsFunction, 
/** @__PURE__ */ assert$1("functional.assertEqualsFunction"), 
/** @__PURE__ */ functionalAssert());
/**
 * @internal
 */
function assertEqualsParameters() {
    halt$8("assertEqualsParameters");
}
const assertEqualsParametersPure = /** @__PURE__ */ Object.assign(assertEqualsParameters, 
/** @__PURE__ */ assert$1("functional.assertEqualsParameters"), 
/** @__PURE__ */ functionalAssert());
/**
 * @internal
 */
function assertEqualsReturn() {
    halt$8("assertEqualsReturn");
}
const assertEqualsReturnPure = /** @__PURE__ */ Object.assign(assertEqualsReturn, 
/** @__PURE__ */ assert$1("functional.assertEqualsReturn"), 
/** @__PURE__ */ functionalAssert());
/**
 * @internal
 */
function isFunction() {
    halt$8("isFunction");
}
const isFunctionPure = /** @__PURE__ */ Object.assign(isFunction, 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function isParameters() {
    halt$8("isParameters");
}
const isParametersPure = /** @__PURE__ */ Object.assign(isParameters, /** @__PURE__ */ is$1());
/**
 * @internal
 */
function isReturn() {
    halt$8("isReturn");
}
const isReturnPure = /** @__PURE__ */ Object.assign(isReturn, 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function equalsFunction() {
    halt$8("equalsFunction");
}
const equalsFunctionPure = /** @__PURE__ */ Object.assign(equalsFunction, /** @__PURE__ */ is$1());
/**
 * @internal
 */
function equalsParameters() {
    halt$8("equalsParameters");
}
const equalsParametersPure = /** @__PURE__ */ Object.assign(equalsParameters, /** @__PURE__ */ is$1());
/**
 * @internal
 */
function equalsReturn() {
    halt$8("equalsReturn");
}
const equalsReturnPure = /** @__PURE__ */ Object.assign(equalsReturn, /** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateFunction() {
    halt$8("validateFunction");
}
const validateFunctionPure = /** @__PURE__ */ Object.assign(validateFunction, /** @__PURE__ */ validate$1());
/**
 * @internal
 */
function validateParameters() {
    halt$8("validateReturn");
}
const validateParametersPure = /** @__PURE__ */ Object.assign(validateParameters, /** @__PURE__ */ validate$1());
/**
 * @internal
 */
function validateReturn() {
    halt$8("validateReturn");
}
const validateReturnPure = /** @__PURE__ */ Object.assign(validateReturn, /** @__PURE__ */ validate$1());
/**
 * @internal
 */
function validateEqualsFunction() {
    halt$8("validateEqualsFunction");
}
const validateEqualsFunctionPure = /** @__PURE__ */ Object.assign(validateEqualsFunction, /** @__PURE__ */ validate$1());
/**
 * @internal
 */
function validateEqualsParameters() {
    halt$8("validateEqualsParameters");
}
const validateEqualsParametersPure = /** @__PURE__ */ Object.assign(validateEqualsParameters, /** @__PURE__ */ validate$1());
/**
 * @internal
 */
function validateEqualsReturn() {
    halt$8("validateEqualsReturn");
}
const validateEqualsReturnPure = /** @__PURE__ */ Object.assign(validateEqualsReturn, /** @__PURE__ */ validate$1());
/* -----------------------------------------------------------
  HALTER
----------------------------------------------------------- */
/**
 * @internal
 */
function halt$8(name) {
    throw new Error(`Error on typia.functional.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var functional = /*#__PURE__*/Object.freeze({
	__proto__: null,
	assertEqualsFunction: assertEqualsFunctionPure,
	assertEqualsParameters: assertEqualsParametersPure,
	assertEqualsReturn: assertEqualsReturnPure,
	assertFunction: assertFunctionPure,
	assertParameters: assertParametersPure,
	assertReturn: assertReturnPure,
	equalsFunction: equalsFunctionPure,
	equalsParameters: equalsParametersPure,
	equalsReturn: equalsReturnPure,
	isFunction: isFunctionPure,
	isParameters: isParametersPure,
	isReturn: isReturnPure,
	validateEqualsFunction: validateEqualsFunctionPure,
	validateEqualsParameters: validateEqualsParametersPure,
	validateEqualsReturn: validateEqualsReturnPure,
	validateFunction: validateFunctionPure,
	validateParameters: validateParametersPure,
	validateReturn: validateReturnPure
});

/**
 * @internal
 */
function formData() {
    halt$7("formData");
}
const formDataPure = /** @__PURE__ */ Object.assign(formData, 
/** @__PURE__ */ formData$1());
/**
 * @internal
 */
function assertFormData() {
    halt$7("assertFormData");
}
const assertFormDataPure = /** @__PURE__ */ Object.assign(assertFormData, 
/** @__PURE__ */ formData$1(), 
/** @__PURE__ */ assert$1("http.assertFormData"));
/**
 * @internal
 */
function isFormData() {
    halt$7("isFormData");
}
const isFormDataPure = /** @__PURE__ */ Object.assign(isFormData, 
/** @__PURE__ */ formData$1(), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateFormData() {
    halt$7("validateFormData");
}
const validateFormDataPure = /** @__PURE__ */ Object.assign(validateFormData, 
/** @__PURE__ */ formData$1(), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function query() {
    halt$7("query");
}
const queryPure = /** @__PURE__ */ Object.assign(query, 
/** @__PURE__ */ query$1());
/**
 * @internal
 */
function assertQuery() {
    halt$7("assertQuery");
}
const assertQueryPure = /** @__PURE__ */ Object.assign(assertQuery, 
/** @__PURE__ */ query$1(), 
/** @__PURE__ */ assert$1("http.assertQuery"));
/**
 * @internal
 */
function isQuery() {
    halt$7("isQuery");
}
const isQueryPure = /** @__PURE__ */ Object.assign(isQuery, 
/** @__PURE__ */ query$1(), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateQuery() {
    halt$7("validateQuery");
}
const validateQueryPure = /** @__PURE__ */ Object.assign(validateQuery, 
/** @__PURE__ */ query$1(), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function headers() {
    halt$7("headers");
}
const headersPure = /** @__PURE__ */ Object.assign(headers, 
/** @__PURE__ */ headers$1());
/**
 * @internal
 */
function assertHeaders() {
    halt$7("assertHeaders");
}
const assertHeadersPure = /** @__PURE__ */ Object.assign(assertHeaders, 
/** @__PURE__ */ headers$1(), 
/** @__PURE__ */ assert$1("http.assertHeaders"));
/**
 * @internal
 */
function isHeaders() {
    halt$7("isHeaders");
}
const isHeadersPure = /** @__PURE__ */ Object.assign(isHeaders, 
/** @__PURE__ */ headers$1(), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateHeaders() {
    halt$7("validateHeaders");
}
const validateHeadersPure = /** @__PURE__ */ Object.assign(validateHeaders, 
/** @__PURE__ */ headers$1(), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function parameter() {
    halt$7("parameter");
}
const parameterPure = /** @__PURE__ */ Object.assign(parameter, 
/** @__PURE__ */ parameter$1(), 
/** @__PURE__ */ assert$1("http.parameter"));
/**
 * @internal
 */
function createFormData() {
    halt$7("createFormData");
}
const createFormDataPure = /** @__PURE__ */ Object.assign(createFormData, /** @__PURE__ */ formData$1());
/**
 * @internal
 */
function createAssertFormData() {
    halt$7("createAssertFormData");
}
const createAssertFormDataPure = /** @__PURE__ */ Object.assign(createAssertFormData, 
/** @__PURE__ */ formData$1(), 
/** @__PURE__ */ assert$1("http.createAssertFormData"));
/**
 * @internal
 */
function createIsFormData() {
    halt$7("createIsFormData");
}
const createIsFormDataPure = /** @__PURE__ */ Object.assign(createIsFormData, 
/** @__PURE__ */ formData$1(), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function createValidateFormData() {
    halt$7("createValidateFormData");
}
const createValidateFormDataPure = /** @__PURE__ */ Object.assign(createValidateFormData, 
/** @__PURE__ */ formData$1(), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function createQuery() {
    halt$7("createQuery");
}
const createQueryPure = /** @__PURE__ */ Object.assign(createQuery, 
/** @__PURE__ */ query$1());
/**
 * @internal
 */
function createAssertQuery() {
    halt$7("createAssertQuery");
}
const createAssertQueryPure = /** @__PURE__ */ Object.assign(createAssertQuery, 
/** @__PURE__ */ query$1(), 
/** @__PURE__ */ assert$1("http.createAssertQuery"));
/**
 * @internal
 */
function createIsQuery() {
    halt$7("createIsQuery");
}
const createIsQueryPure = /** @__PURE__ */ Object.assign(createIsQuery, 
/** @__PURE__ */ query$1(), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function createValidateQuery() {
    halt$7("createValidateQuery");
}
const createValidateQueryPure = /** @__PURE__ */ Object.assign(createValidateQuery, 
/** @__PURE__ */ query$1(), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function createHeaders() {
    halt$7("createHeaders");
}
const createHeadersPure = /** @__PURE__ */ Object.assign(createHeaders, /** @__PURE__ */ headers$1());
/**
 * @internal
 */
function createAssertHeaders() {
    halt$7("createAssertHeaders");
}
const createAssertHeadersPure = /** @__PURE__ */ Object.assign(createAssertHeaders, 
/** @__PURE__ */ headers$1(), 
/** @__PURE__ */ assert$1("http.createAssertHeaders"));
/**
 * @internal
 */
function createIsHeaders() {
    halt$7("createIsHeaders");
}
const createIsHeadersPure = /** @__PURE__ */ Object.assign(createIsHeaders, 
/** @__PURE__ */ headers$1(), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function createValidateHeaders() {
    halt$7("createValidateHeaders");
}
const createValidateHeadersPure = /** @__PURE__ */ Object.assign(createValidateHeaders, 
/** @__PURE__ */ headers$1(), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function createParameter() {
    halt$7("createParameter");
}
const createParameterPure = /** @__PURE__ */ Object.assign(createParameter, 
/** @__PURE__ */ parameter$1(), 
/** @__PURE__ */ assert$1("http.createParameter"));
/**
 * @internal
 */
function halt$7(name) {
    throw new Error(`Error on typia.http.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var http = /*#__PURE__*/Object.freeze({
	__proto__: null,
	assertFormData: assertFormDataPure,
	assertHeaders: assertHeadersPure,
	assertQuery: assertQueryPure,
	createAssertFormData: createAssertFormDataPure,
	createAssertHeaders: createAssertHeadersPure,
	createAssertQuery: createAssertQueryPure,
	createFormData: createFormDataPure,
	createHeaders: createHeadersPure,
	createIsFormData: createIsFormDataPure,
	createIsHeaders: createIsHeadersPure,
	createIsQuery: createIsQueryPure,
	createParameter: createParameterPure,
	createQuery: createQueryPure,
	createValidateFormData: createValidateFormDataPure,
	createValidateHeaders: createValidateHeadersPure,
	createValidateQuery: createValidateQueryPure,
	formData: formDataPure,
	headers: headersPure,
	isFormData: isFormDataPure,
	isHeaders: isHeadersPure,
	isQuery: isQueryPure,
	parameter: parameterPure,
	query: queryPure,
	validateFormData: validateFormDataPure,
	validateHeaders: validateHeadersPure,
	validateQuery: validateQueryPure
});

/**
 * @internal
 */
function application$1() {
    halt$6("application");
}
const applicationPure = /** @__PURE__ */ Object.assign(application$1, 
/** @__PURE__ */ application$2());
/**
 * @internal
 */
function schema() {
    halt$6("schema");
}
/**
 * @internal
 */
function halt$6(name) {
    throw new Error(`Error on typia.llm.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var llm = /*#__PURE__*/Object.freeze({
	__proto__: null,
	application: applicationPure,
	schema: schema
});

/**
 * @internal
 */
function application() {
    halt$5("application");
}
/**
 * @internal
 */
function assertParse() {
    halt$5("assertParse");
}
const assertParsePure = /** @__PURE__ */ Object.assign(assertParse, 
/** @__PURE__ */ assert$1("json.assertParse"));
/**
 * @internal
 */
function isParse() {
    halt$5("isParse");
}
const isParsePure = /** @__PURE__ */ Object.assign(isParse, 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateParse() {
    halt$5("validateParse");
}
const validateParsePure = /** @__PURE__ */ Object.assign(validateParse, /** @__PURE__ */ validate$1());
/**
 * @internal
 */
function stringify() {
    halt$5("stringify");
}
const stringifyPure = /** @__PURE__ */ Object.assign(stringify, 
/** @__PURE__ */ stringify$1("stringify"));
/**
 * @internal
 */
function assertStringify() {
    halt$5("assertStringify");
}
const assertStringifyPure = /** @__PURE__ */ Object.assign(assertStringify, 
/** @__PURE__ */ assert$1("json.assertStringify"), 
/** @__PURE__ */ stringify$1("assertStringify"));
/**
 * @internal
 */
function isStringify() {
    halt$5("isStringify");
}
const isStringifyPure = /** @__PURE__ */ Object.assign(isStringify, 
/** @__PURE__ */ is$1(), 
/** @__PURE__ */ stringify$1("isStringify"));
/**
 * @internal
 */
function validateStringify() {
    halt$5("validateStringify");
}
const validateStringifyPure = /** @__PURE__ */ Object.assign(validateStringify, 
/** @__PURE__ */ validate$1(), 
/** @__PURE__ */ stringify$1("validateStringify"));
/**
 * @internal
 */
function createIsParse() {
    halt$5("createIsParse");
}
const createIsParsePure = /** @__PURE__ */ Object.assign(createIsParse, isParsePure);
/**
 * @internal
 */
function createAssertParse() {
    halt$5("createAssertParse");
}
const createAssertParsePure = /** @__PURE__ */ Object.assign(createAssertParse, assertParsePure);
/**
 * @internal
 */
function createValidateParse() {
    halt$5("createValidateParse");
}
const createValidateParsePure = /** @__PURE__ */ Object.assign(createValidateParse, validateParsePure);
/**
 * @internal
 */
function createStringify() {
    halt$5("createStringify");
}
const createStringifyPure = /** @__PURE__ */ Object.assign(createStringify, stringifyPure);
/**
 * @internal
 */
function createAssertStringify() {
    halt$5("createAssertStringify");
}
const createAssertStringifyPure = /** @__PURE__ */ Object.assign(createAssertStringify, assertStringifyPure);
/**
 * @internal
 */
function createIsStringify() {
    halt$5("createIsStringify");
}
const createIsStringifyPure = /** @__PURE__ */ Object.assign(createIsStringify, isStringifyPure);
/**
 * @internal
 */
function createValidateStringify() {
    halt$5("createValidateStringify");
}
const createValidateStringifyPure = /** @__PURE__ */ Object.assign(createValidateStringify, validateStringifyPure);
/**
 * @internal
 */
function halt$5(name) {
    throw new Error(`Error on typia.json.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var json = /*#__PURE__*/Object.freeze({
	__proto__: null,
	application: application,
	assertParse: assertParsePure,
	assertStringify: assertStringifyPure,
	createAssertParse: createAssertParsePure,
	createAssertStringify: createAssertStringifyPure,
	createIsParse: createIsParsePure,
	createIsStringify: createIsStringifyPure,
	createStringify: createStringifyPure,
	createValidateParse: createValidateParsePure,
	createValidateStringify: createValidateStringifyPure,
	isParse: isParsePure,
	isStringify: isStringifyPure,
	stringify: stringifyPure,
	validateParse: validateParsePure,
	validateStringify: validateStringifyPure
});

/* ===========================================================
    MISCELLAENOUS
      - LITERALS
      - CLONE
      - PRUNE
      - FACTORY FUNCTIONS
==============================================================
    LITERALS
----------------------------------------------------------- */
/**
 * @internal
 */
function literals() {
    halt$4("literals");
}
/**
 * @internal
 */
function clone() {
    halt$4("clone");
}
const clonePure = /** @__PURE__ */ Object.assign(clone, 
/** @__PURE__ */ clone$1("clone"));
/**
 * @internal
 */
function assertClone() {
    halt$4("assertClone");
}
const assertClonePure = /** @__PURE__ */ Object.assign(assertClone, 
/** @__PURE__ */ assert$1("misc.assertClone"), 
/** @__PURE__ */ clone$1("assertClone"));
/**
 * @internal
 */
function isClone() {
    halt$4("isClone");
}
const isClonePure = /** @__PURE__ */ Object.assign(isClone, 
/** @__PURE__ */ is$1(), 
/** @__PURE__ */ clone$1("isClone"));
/**
 * @internal
 */
function validateClone() {
    halt$4("validateClone");
}
const validateClonePure = /** @__PURE__ */ Object.assign(validateClone, 
/** @__PURE__ */ validate$1(), 
/** @__PURE__ */ clone$1("validateClone"));
/**
 * @internal
 */
function prune() {
    halt$4("prune");
}
const prunePure = /** @__PURE__ */ Object.assign(prune, 
/** @__PURE__ */ prune$1("prune"));
/**
 * @internal
 */
function assertPrune() {
    halt$4("assertPrune");
}
const assertPrunePure = /** @__PURE__ */ Object.assign(assertPrune, 
/** @__PURE__ */ assert$1("misc.assertPrune"), 
/** @__PURE__ */ prune$1("assertPrune"));
/**
 * @internal
 */
function isPrune() {
    halt$4("isPrune");
}
const isPrunePure = /** @__PURE__ */ Object.assign(isPrune, 
/** @__PURE__ */ is$1(), 
/** @__PURE__ */ prune$1("isPrune"));
/**
 * @internal
 */
function validatePrune() {
    halt$4("validatePrune");
}
const validatePrunePure = /** @__PURE__ */ Object.assign(validatePrune, 
/** @__PURE__ */ prune$1("validatePrune"), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function createClone() {
    halt$4("createClone");
}
const createClonePure = /** @__PURE__ */ Object.assign(createClone, clonePure);
/**
 * @internal
 */
function createAssertClone() {
    halt$4("createAssertClone");
}
const createAssertClonePure = /** @__PURE__ */ Object.assign(createAssertClone, assertClonePure);
/**
 * @internal
 */
function createIsClone() {
    halt$4("createIsClone");
}
const createIsClonePure = /** @__PURE__ */ Object.assign(createIsClone, isClonePure);
/**
 * @internal
 */
function createValidateClone() {
    halt$4("createValidateClone");
}
const createValidateClonePure = /** @__PURE__ */ Object.assign(createValidateClone, validateClonePure);
/**
 * @internal
 */
function createPrune() {
    halt$4("createPrune");
}
const createPrunePure = /** @__PURE__ */ Object.assign(createPrune, prunePure);
/**
 * @internal
 */
function createAssertPrune() {
    halt$4("createAssertPrune");
}
const createAssertPrunePure = /** @__PURE__ */ Object.assign(createAssertPrune, assertPrunePure);
/**
 * @internal
 */
function createIsPrune() {
    halt$4("createIsPrune");
}
const createIsPrunePure = /** @__PURE__ */ Object.assign(createIsPrune, isPrunePure);
/**
 * @internal
 */
function createValidatePrune() {
    halt$4("createValidatePrune");
}
const createValidatePrunePure = /** @__PURE__ */ Object.assign(createValidatePrune, validatePrunePure);
/**
 * @internal
 */
function halt$4(name) {
    throw new Error(`Error on typia.misc.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var misc = /*#__PURE__*/Object.freeze({
	__proto__: null,
	assertClone: assertClonePure,
	assertPrune: assertPrunePure,
	clone: clonePure,
	createAssertClone: createAssertClonePure,
	createAssertPrune: createAssertPrunePure,
	createClone: createClonePure,
	createIsClone: createIsClonePure,
	createIsPrune: createIsPrunePure,
	createPrune: createPrunePure,
	createValidateClone: createValidateClonePure,
	createValidatePrune: createValidatePrunePure,
	isClone: isClonePure,
	isPrune: isPrunePure,
	literals: literals,
	prune: prunePure,
	validateClone: validateClonePure,
	validatePrune: validatePrunePure
});

/**
 * @internal
 */
function camel() {
    return halt$3("camel");
}
const camelPure = /** @__PURE__ */ Object.assign(camel, 
/** @__PURE__ */ camel$1("camel"));
/**
 * @internal
 */
function assertCamel() {
    return halt$3("assertCamel");
}
const assertCamelPure = /** @__PURE__ */ Object.assign(assertCamel, 
/** @__PURE__ */ camel$1("assertCamel"), 
/** @__PURE__ */ assert$1("notations.assertCamel"));
/**
 * @internal
 */
function isCamel() {
    return halt$3("isCamel");
}
const isCamelPure = /** @__PURE__ */ Object.assign(isCamel, 
/** @__PURE__ */ camel$1("isCamel"), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateCamel() {
    return halt$3("validateCamel");
}
const validateCamelPure = /** @__PURE__ */ Object.assign(validateCamel, 
/** @__PURE__ */ camel$1("validateCamel"), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function pascal() {
    return halt$3("pascal");
}
const pascalPure = /** @__PURE__ */ Object.assign(pascal, 
/** @__PURE__ */ pascal$1("pascal"));
/**
 * @internal
 */
function assertPascal() {
    return halt$3("assertPascal");
}
const assertPascalPure = /** @__PURE__ */ Object.assign(assertPascal, 
/** @__PURE__ */ pascal$1("assertPascal"), 
/** @__PURE__ */ assert$1("notations.assertPascal"));
/**
 * @internal
 */
function isPascal() {
    return halt$3("isPascal");
}
const isPascalPure = /** @__PURE__ */ Object.assign(isPascal, 
/** @__PURE__ */ pascal$1("isPascal"), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validatePascal() {
    return halt$3("validatePascal");
}
const validatePascalPure = /** @__PURE__ */ Object.assign(validatePascal, 
/** @__PURE__ */ pascal$1("validatePascal"), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function snake() {
    return halt$3("snake");
}
const snakePure = /** @__PURE__ */ Object.assign(snake, 
/** @__PURE__ */ snake$1("snake"));
/**
 * @internal
 */
function assertSnake() {
    return halt$3("assertSnake");
}
const assertSnakePure = /** @__PURE__ */ Object.assign(assertSnake, 
/** @__PURE__ */ snake$1("assertSnake"), 
/** @__PURE__ */ assert$1("notations.assertSnake"));
/**
 * @internal
 */
function isSnake() {
    return halt$3("isSnake");
}
const isSnakePure = /** @__PURE__ */ Object.assign(isSnake, 
/** @__PURE__ */ snake$1("isSnake"), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateSnake() {
    return halt$3("validateSnake");
}
const validateSnakePure = /** @__PURE__ */ Object.assign(validateSnake, 
/** @__PURE__ */ snake$1("validateSnake"), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function createCamel() {
    halt$3("createCamel");
}
const createCamelPure = /** @__PURE__ */ Object.assign(createCamel, 
/** @__PURE__ */ camel$1("createCamel"));
/**
 * @internal
 */
function createAssertCamel() {
    halt$3("createAssertCamel");
}
const createAssertCamelPure = /** @__PURE__ */ Object.assign(createAssertCamel, 
/** @__PURE__ */ camel$1("createAssertCamel"), 
/** @__PURE__ */ assert$1("notations.createAssertCamel"));
/**
 * @internal
 */
function createIsCamel() {
    halt$3("createIsCamel");
}
const createIsCamelPure = /** @__PURE__ */ Object.assign(createIsCamel, 
/** @__PURE__ */ camel$1("createIsCamel"), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function createValidateCamel() {
    halt$3("createValidateCamel");
}
const createValidateCamelPure = /** @__PURE__ */ Object.assign(createValidateCamel, 
/** @__PURE__ */ camel$1("createValidateCamel"), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function createPascal() {
    halt$3("createPascal");
}
const createPascalPure = /** @__PURE__ */ Object.assign(createPascal, /** @__PURE__ */ pascal$1("createPascal"));
/**
 * @internal
 */
function createAssertPascal() {
    halt$3("createAssertPascal");
}
const createAssertPascalPure = /** @__PURE__ */ Object.assign(createAssertPascal, 
/** @__PURE__ */ pascal$1("createAssertPascal"), 
/** @__PURE__ */ assert$1("notations.createAssertPascal"));
/**
 * @internal
 */
function createIsPascal() {
    halt$3("createIsPascal");
}
const createIsPascalPure = /** @__PURE__ */ Object.assign(createIsPascal, 
/** @__PURE__ */ pascal$1("createIsPascal"), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function createValidatePascal() {
    halt$3("createValidatePascal");
}
const createValidatePascalPure = /** @__PURE__ */ Object.assign(createValidatePascal, 
/** @__PURE__ */ pascal$1("createValidatePascal"), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function createSnake() {
    halt$3("createSnake");
}
const createSnakePure = /** @__PURE__ */ Object.assign(createSnake, 
/** @__PURE__ */ snake$1("createSnake"));
/**
 * @internal
 */
function createAssertSnake() {
    halt$3("createAssertSnake");
}
const createAssertSnakePure = /** @__PURE__ */ Object.assign(createAssertSnake, 
/** @__PURE__ */ snake$1("createAssertSnake"), 
/** @__PURE__ */ assert$1("notations.createAssertSnake"));
/**
 * @internal
 */
function createIsSnake() {
    halt$3("createIsSnake");
}
const createIsSnakePure = /** @__PURE__ */ Object.assign(createIsSnake, 
/** @__PURE__ */ snake$1("createIsSnake"), 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function createValidateSnake() {
    halt$3("createValidateSnake");
}
const createValidateSnakePure = /** @__PURE__ */ Object.assign(createValidateSnake, 
/** @__PURE__ */ snake$1("createValidateSnake"), 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function halt$3(name) {
    throw new Error(`Error on typia.notations.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var notations = /*#__PURE__*/Object.freeze({
	__proto__: null,
	assertCamel: assertCamelPure,
	assertPascal: assertPascalPure,
	assertSnake: assertSnakePure,
	camel: camelPure,
	createAssertCamel: createAssertCamelPure,
	createAssertPascal: createAssertPascalPure,
	createAssertSnake: createAssertSnakePure,
	createCamel: createCamelPure,
	createIsCamel: createIsCamelPure,
	createIsPascal: createIsPascalPure,
	createIsSnake: createIsSnakePure,
	createPascal: createPascalPure,
	createSnake: createSnakePure,
	createValidateCamel: createValidateCamelPure,
	createValidatePascal: createValidatePascalPure,
	createValidateSnake: createValidateSnakePure,
	isCamel: isCamelPure,
	isPascal: isPascalPure,
	isSnake: isSnakePure,
	pascal: pascalPure,
	snake: snakePure,
	validateCamel: validateCamelPure,
	validatePascal: validatePascalPure,
	validateSnake: validateSnakePure
});

/**
 * @internal
 */
function message() {
    halt$2("message");
}
/**
 * @internal
 */
function decode() {
    halt$2("decode");
}
const decodePure = /** @__PURE__ */ Object.assign(decode, 
/** @__PURE__ */ decode$1("decode"));
/**
 * @internal
 */
function assertDecode() {
    halt$2("assertDecode");
}
const assertDecodePure = /** @__PURE__ */ Object.assign(assertDecode, 
/** @__PURE__ */ assert$1("protobuf.assertDecode"), 
/** @__PURE__ */ decode$1("assertDecode"));
/**
 * @internal
 */
function isDecode() {
    halt$2("isDecode");
}
const isDecodePure = /** @__PURE__ */ Object.assign(isDecode, 
/** @__PURE__ */ is$1(), 
/** @__PURE__ */ decode$1("isDecode"));
/**
 * @internal
 */
function validateDecode() {
    halt$2("validateDecode");
}
const validateDecodePure = /** @__PURE__ */ Object.assign(validateDecode, 
/** @__PURE__ */ validate$1(), 
/** @__PURE__ */ decode$1("validateDecode"));
/**
 * @internal
 */
function encode() {
    halt$2("encode");
}
const encodePure = /** @__PURE__ */ Object.assign(encode, 
/** @__PURE__ */ encode$1("encode"));
/**
 * @internal
 */
function assertEncode() {
    halt$2("assertEncode");
}
const assertEncodePure = /** @__PURE__ */ Object.assign(assertEncode, 
/** @__PURE__ */ assert$1("protobuf.assertEncode"), 
/** @__PURE__ */ encode$1("assertEncode"));
/**
 * @internal
 */
function isEncode() {
    halt$2("isEncode");
}
const isEncodePure = /** @__PURE__ */ Object.assign(isEncode, 
/** @__PURE__ */ is$1(), 
/** @__PURE__ */ encode$1("isEncode"));
/**
 * @internal
 */
function validateEncode() {
    halt$2("validateEncode");
}
const validateEncodePure = /** @__PURE__ */ Object.assign(validateEncode, 
/** @__PURE__ */ validate$1(), 
/** @__PURE__ */ encode$1("validateEncode"));
/**
 * @internal
 */
function createDecode() {
    halt$2("createDecode");
}
const createDecodePure = /** @__PURE__ */ Object.assign(createDecode, /** @__PURE__ */ decode$1("createDecode"));
/**
 * @internal
 */
function createIsDecode() {
    halt$2("createIsDecode");
}
const createIsDecodePure = /** @__PURE__ */ Object.assign(createIsDecode, 
/** @__PURE__ */ is$1(), 
/** @__PURE__ */ decode$1("createIsDecode"));
/**
 * @internal
 */
function createAssertDecode() {
    halt$2("createAssertDecode");
}
const createAssertDecodePure = /** @__PURE__ */ Object.assign(createAssertDecode, 
/** @__PURE__ */ assert$1("protobuf.createAssertDecode"), 
/** @__PURE__ */ decode$1("createAssertDecode"));
/**
 * @internal
 */
function createValidateDecode() {
    halt$2("createValidateDecode");
}
const createValidateDecodePure = /** @__PURE__ */ Object.assign(createValidateDecode, 
/** @__PURE__ */ validate$1(), 
/** @__PURE__ */ decode$1("createValidateDecode"));
/**
 * @internal
 */
function createEncode() {
    halt$2("createEncode");
}
const createEncodePure = /** @__PURE__ */ Object.assign(createEncode, /** @__PURE__ */ encode$1("createEncode"));
/**
 * @internal
 */
function createIsEncode() {
    halt$2("createIsEncode");
}
const createIsEncodePure = /** @__PURE__ */ Object.assign(createIsEncode, 
/** @__PURE__ */ is$1(), 
/** @__PURE__ */ encode$1("createIsEncode"));
/**
 * @internal
 */
function createAssertEncode() {
    halt$2("createAssertEncode");
}
const createAssertEncodePure = /** @__PURE__ */ Object.assign(createAssertEncode, 
/** @__PURE__ */ assert$1("protobuf.createAssertEncode"), 
/** @__PURE__ */ encode$1("createAssertEncode"));
/**
 * @internal
 */
function createValidateEncode() {
    halt$2("createValidateEncode");
}
const createValidateEncodePure = /** @__PURE__ */ Object.assign(createValidateEncode, 
/** @__PURE__ */ validate$1(), 
/** @__PURE__ */ encode$1("createValidateEncode"));
/**
 * @internal
 */
function halt$2(name) {
    throw new Error(`Error on typia.protobuf.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var protobuf = /*#__PURE__*/Object.freeze({
	__proto__: null,
	assertDecode: assertDecodePure,
	assertEncode: assertEncodePure,
	createAssertDecode: createAssertDecodePure,
	createAssertEncode: createAssertEncodePure,
	createDecode: createDecodePure,
	createEncode: createEncodePure,
	createIsDecode: createIsDecodePure,
	createIsEncode: createIsEncodePure,
	createValidateDecode: createValidateDecodePure,
	createValidateEncode: createValidateEncodePure,
	decode: decodePure,
	encode: encodePure,
	isDecode: isDecodePure,
	isEncode: isEncodePure,
	message: message,
	validateDecode: validateDecodePure,
	validateEncode: validateEncodePure
});

/**
 * @internal
 */
function metadata() {
    halt$1("metadata");
}
const metadataPure = /** @__PURE__ */ Object.assign(metadata, { from: (input) => input });
function name() {
    halt$1("name");
}
/**
 * @internal
 */
function halt$1(name) {
    throw new Error(`Error on typia.reflect.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var reflect = /*#__PURE__*/Object.freeze({
	__proto__: null,
	metadata: metadataPure,
	name: name
});

var index = /*#__PURE__*/Object.freeze({
	__proto__: null
});

/**
 * @internal
 */
function assert() {
    halt("assert");
}
const assertPure = /** @__PURE__ */ Object.assign(assert, 
/** @__PURE__ */ assert$1("assert"));
/**
 * @internal
 */
function assertGuard() {
    halt("assertGuard");
}
const assertGuardPure = /** @__PURE__ */ Object.assign(assertGuard, 
/** @__PURE__ */ assert$1("assertGuard"));
/**
 * @internal
 */
function is() {
    halt("is");
}
const isPure = /** @__PURE__ */ Object.assign(is, 
/** @__PURE__ */ assert$1("is"));
/**
 * @internal
 */
function validate() {
    halt("validate");
}
const validatePure = /** @__PURE__ */ Object.assign(validate, 
/** @__PURE__ */ validate$1());
/**
 * @internal
 */
function assertEquals() {
    halt("assertEquals");
}
const assertEqualsPure = /** @__PURE__ */ Object.assign(assertEquals, /** @__PURE__ */ assert$1("assertEquals"));
/**
 * @internal
 */
function assertGuardEquals() {
    halt("assertGuardEquals");
}
const assertGuardEqualsPure = /** @__PURE__ */ Object.assign(assertGuardEquals, /** @__PURE__ */ assert$1("assertGuardEquals"));
/**
 * @internal
 */
function equals() {
    halt("equals");
}
const equalsPure = /** @__PURE__ */ Object.assign(equals, 
/** @__PURE__ */ is$1());
/**
 * @internal
 */
function validateEquals() {
    halt("validateEquals");
}
const validateEqualsPure = /** @__PURE__ */ Object.assign(validateEquals, /** @__PURE__ */ validate$1());
/**
 * @internal
 */
function random() {
    halt("random");
}
const randomPure = /** @__PURE__ */ Object.assign(random, 
/** @__PURE__ */ random$1());
/**
 * @internal
 */
function createAssert() {
    halt("createAssert");
}
const createAssertPure = /** @__PURE__ */ Object.assign(createAssert, assertPure);
/**
 * @internal
 */
function createAssertGuard() {
    halt("createAssertGuard");
}
const createAssertGuardPure = /** @__PURE__ */ Object.assign(createAssertGuard, assertGuardPure);
/**
 * @internal
 */
function createIs() {
    halt("createIs");
}
const createIsPure = /** @__PURE__ */ Object.assign(createIs, isPure);
/**
 * @internal
 */
function createValidate() {
    halt("createValidate");
}
const createValidatePure = /** @__PURE__ */ Object.assign(createValidate, validatePure);
/**
 * @internal
 */
function createAssertEquals() {
    halt("createAssertEquals");
}
const createAssertEqualsPure = /** @__PURE__ */ Object.assign(createAssertEquals, assertEqualsPure);
/**
 * @internal
 */
function createAssertGuardEquals() {
    halt("createAssertGuardEquals");
}
const createAssertGuardEqualsPure = /** @__PURE__ */ Object.assign(createAssertGuardEquals, assertGuardEqualsPure);
/**
 * @internal
 */
function createEquals() {
    halt("createEquals");
}
const createEqualsPure = /** @__PURE__ */ Object.assign(createEquals, equalsPure);
/**
 * @internal
 */
function createValidateEquals() {
    halt("createValidateEquals");
}
const createValidateEqualsPure = /** @__PURE__ */ Object.assign(createValidateEquals, validateEqualsPure);
/**
 * @internal
 */
function createRandom() {
    halt("createRandom");
}
const createRandomPure = /** @__PURE__ */ Object.assign(createRandom, randomPure);
/**
 * @internal
 */
function halt(name) {
    throw new Error(`Error on typia.${name}(): no transform has been configured. Read and follow https://typia.io/docs/setup please.`);
}

var typia = /*#__PURE__*/Object.freeze({
	__proto__: null,
	TypeGuardError: TypeGuardError,
	assert: assertPure,
	assertEquals: assertEqualsPure,
	assertGuard: assertGuardPure,
	assertGuardEquals: assertGuardEqualsPure,
	createAssert: createAssertPure,
	createAssertEquals: createAssertEqualsPure,
	createAssertGuard: createAssertGuardPure,
	createAssertGuardEquals: createAssertGuardEqualsPure,
	createEquals: createEqualsPure,
	createIs: createIsPure,
	createRandom: createRandomPure,
	createValidate: createValidatePure,
	createValidateEquals: createValidateEqualsPure,
	equals: equalsPure,
	functional: functional,
	http: http,
	is: isPure,
	json: json,
	llm: llm,
	misc: misc,
	notations: notations,
	protobuf: protobuf,
	random: randomPure,
	reflect: reflect,
	tags: index,
	validate: validatePure,
	validateEquals: validateEqualsPure
});

const validateJobDefinition = (() => { const $join = typia.createValidateEquals.join; const $io0 = (input, _exceptionable = true) => "string" === typeof input.version && "container" === input.type && (undefined === input.meta || "object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) && $io1(input.meta, _exceptionable)) && (undefined === input.global || "object" === typeof input.global && null !== input.global && false === Array.isArray(input.global) && $io2(input.global, _exceptionable)) && (Array.isArray(input.ops) && input.ops.every((elem, _index1) => "object" === typeof elem && null !== elem && $io4(elem, _exceptionable))) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["version", "type", "meta", "global", "ops"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io1 = (input, _exceptionable = true) => (undefined === input.trigger || "string" === typeof input.trigger) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["trigger"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io2 = (input, _exceptionable = true) => (undefined === input.image || "string" === typeof input.image) && (undefined === input.gpu || "boolean" === typeof input.gpu) && (null !== input.entrypoint && (undefined === input.entrypoint || "string" === typeof input.entrypoint || Array.isArray(input.entrypoint) && input.entrypoint.every((elem, _index2) => "string" === typeof elem))) && (undefined === input.env || "object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) && $io3(input.env, _exceptionable)) && (undefined === input.work_dir || "string" === typeof input.work_dir) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["image", "gpu", "entrypoint", "env", "work_dir"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io3 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const $io4 = (input, _exceptionable = true) => ("container/run" === input.type || "container/create-volume" === input.type) && "string" === typeof input.id && ("object" === typeof input.args && null !== input.args && $iu1(input.args, _exceptionable)) && (undefined === input.results || "object" === typeof input.results && null !== input.results && false === Array.isArray(input.results) && $io13(input.results, _exceptionable)) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "id", "args", "results"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io5 = (input, _exceptionable = true) => "string" === typeof input.image && (null !== input.cmd && (undefined === input.cmd || "string" === typeof input.cmd || Array.isArray(input.cmd) && input.cmd.every((elem, _index3) => "string" === typeof elem))) && (undefined === input.volumes || Array.isArray(input.volumes) && (input.volumes.length === 1 && ("object" === typeof input.volumes[0] && null !== input.volumes[0] && $io6(input.volumes[0], _exceptionable)))) && (undefined === input.expose || "number" === typeof input.expose) && (undefined === input["private"] || "boolean" === typeof input["private"]) && (undefined === input.gpu || "boolean" === typeof input.gpu) && (undefined === input.work_dir || "string" === typeof input.work_dir) && (undefined === input.output || "string" === typeof input.output) && (null !== input.entrypoint && (undefined === input.entrypoint || "string" === typeof input.entrypoint || Array.isArray(input.entrypoint) && input.entrypoint.every((elem, _index4) => "string" === typeof elem))) && (undefined === input.env || "object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) && $io7(input.env, _exceptionable)) && (undefined === input.resources || Array.isArray(input.resources) && input.resources.every((elem, _index5) => "object" === typeof elem && null !== elem && $iu0(elem, _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["image", "cmd", "volumes", "expose", "private", "gpu", "work_dir", "output", "entrypoint", "env", "resources"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io6 = (input, _exceptionable = true) => "string" === typeof input.name && "string" === typeof input.dest && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name", "dest"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io7 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const $io8 = (input, _exceptionable = true) => "S3" === input.type && (undefined === input.url || "string" === typeof input.url) && "string" === typeof input.target && (undefined === input.files || Array.isArray(input.files) && input.files.every((elem, _index6) => "string" === typeof elem)) && (undefined === input.allowWrite || "boolean" === typeof input.allowWrite) && (undefined === input.buckets || Array.isArray(input.buckets) && input.buckets.every((elem, _index7) => "object" === typeof elem && null !== elem && $io9(elem, _exceptionable))) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "url", "target", "files", "allowWrite", "buckets"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io9 = (input, _exceptionable = true) => "string" === typeof input.url && (undefined === input.files || Array.isArray(input.files) && input.files.every((elem, _index8) => "string" === typeof elem)) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["url", "files"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io10 = (input, _exceptionable = true) => "S3" === input.type && (undefined === input.url || "string" === typeof input.url) && "string" === typeof input.target && (undefined === input.files || Array.isArray(input.files) && input.files.every((elem, _index9) => "string" === typeof elem)) && (undefined === input.allowWrite || "boolean" === typeof input.allowWrite) && (undefined === input.buckets || Array.isArray(input.buckets) && input.buckets.every((elem, _index10) => "object" === typeof elem && null !== elem && $io9(elem, _exceptionable))) && ("object" === typeof input.IAM && null !== input.IAM && $io11(input.IAM, _exceptionable)) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["type", "url", "target", "files", "allowWrite", "buckets", "IAM"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io11 = (input, _exceptionable = true) => "string" === typeof input.REGION && "string" === typeof input.ACCESS_KEY_ID && "string" === typeof input.SECRET_ACCESS_KEY && (3 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["REGION", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io12 = (input, _exceptionable = true) => "string" === typeof input.name && (1 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["name"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $io13 = (input, _exceptionable = true) => Object.keys(input).every(key => {
    const value = input[key];
    if (undefined === value)
        return true;
    return null !== value && undefined !== value && ("string" === typeof value || "object" === typeof value && null !== value && $io14(value, _exceptionable));
}); const $io14 = (input, _exceptionable = true) => "string" === typeof input.regex && (Array.isArray(input.logType) && (1 <= input.logType.length && 4 >= input.logType.length && ("stdin" === input.logType[0] || "stdout" === input.logType[0] || "stderr" === input.logType[0] || "nodeerr" === input.logType[0]) && (undefined === input.logType[1] || "stdin" === input.logType[1] || "stdout" === input.logType[1] || "stderr" === input.logType[1] || "nodeerr" === input.logType[1]) && (undefined === input.logType[2] || "stdin" === input.logType[2] || "stdout" === input.logType[2] || "stderr" === input.logType[2] || "nodeerr" === input.logType[2]) && (undefined === input.logType[3] || "stdin" === input.logType[3] || "stdout" === input.logType[3] || "stderr" === input.logType[3] || "nodeerr" === input.logType[3]))) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
    if (["regex", "logType"].some(prop => key === prop))
        return true;
    const value = input[key];
    if (undefined === value)
        return true;
    return false;
})); const $iu0 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.IAM)
        return $io10(input, _exceptionable);
    else
        return $io8(input, _exceptionable);
})(); const $iu1 = (input, _exceptionable = true) => (() => {
    if (undefined !== input.image)
        return $io5(input, _exceptionable);
    else if (undefined !== input.name)
        return $io12(input, _exceptionable);
    else
        return false;
})(); const $vo0 = (input, _path, _exceptionable = true) => ["string" === typeof input.version || $report(_exceptionable, {
        path: _path + ".version",
        expected: "string",
        value: input.version
    }), "container" === input.type || $report(_exceptionable, {
        path: _path + ".type",
        expected: "\"container\"",
        value: input.type
    }), undefined === input.meta || ("object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) || $report(_exceptionable, {
        path: _path + ".meta",
        expected: "(__type | undefined)",
        value: input.meta
    })) && $vo1(input.meta, _path + ".meta", _exceptionable) || $report(_exceptionable, {
        path: _path + ".meta",
        expected: "(__type | undefined)",
        value: input.meta
    }), undefined === input.global || ("object" === typeof input.global && null !== input.global && false === Array.isArray(input.global) || $report(_exceptionable, {
        path: _path + ".global",
        expected: "(__type.o1 | undefined)",
        value: input.global
    })) && $vo2(input.global, _path + ".global", _exceptionable) || $report(_exceptionable, {
        path: _path + ".global",
        expected: "(__type.o1 | undefined)",
        value: input.global
    }), (Array.isArray(input.ops) || $report(_exceptionable, {
        path: _path + ".ops",
        expected: "Ops",
        value: input.ops
    })) && input.ops.map((elem, _index11) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
        path: _path + ".ops[" + _index11 + "]",
        expected: "Operation<keyof OperationArgsMap>",
        value: elem
    })) && $vo4(elem, _path + ".ops[" + _index11 + "]", _exceptionable) || $report(_exceptionable, {
        path: _path + ".ops[" + _index11 + "]",
        expected: "Operation<keyof OperationArgsMap>",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".ops",
        expected: "Ops",
        value: input.ops
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["version", "type", "meta", "global", "ops"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo1 = (input, _path, _exceptionable = true) => [undefined === input.trigger || "string" === typeof input.trigger || $report(_exceptionable, {
        path: _path + ".trigger",
        expected: "(string | undefined)",
        value: input.trigger
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["trigger"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo2 = (input, _path, _exceptionable = true) => [undefined === input.image || "string" === typeof input.image || $report(_exceptionable, {
        path: _path + ".image",
        expected: "(string | undefined)",
        value: input.image
    }), undefined === input.gpu || "boolean" === typeof input.gpu || $report(_exceptionable, {
        path: _path + ".gpu",
        expected: "(boolean | undefined)",
        value: input.gpu
    }), (null !== input.entrypoint || $report(_exceptionable, {
        path: _path + ".entrypoint",
        expected: "(Array<string> | string | undefined)",
        value: input.entrypoint
    })) && (undefined === input.entrypoint || "string" === typeof input.entrypoint || (Array.isArray(input.entrypoint) || $report(_exceptionable, {
        path: _path + ".entrypoint",
        expected: "(Array<string> | string | undefined)",
        value: input.entrypoint
    })) && input.entrypoint.map((elem, _index12) => "string" === typeof elem || $report(_exceptionable, {
        path: _path + ".entrypoint[" + _index12 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".entrypoint",
        expected: "(Array<string> | string | undefined)",
        value: input.entrypoint
    })), undefined === input.env || ("object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) || $report(_exceptionable, {
        path: _path + ".env",
        expected: "(__type.o2 | undefined)",
        value: input.env
    })) && $vo3(input.env, _path + ".env", _exceptionable) || $report(_exceptionable, {
        path: _path + ".env",
        expected: "(__type.o2 | undefined)",
        value: input.env
    }), undefined === input.work_dir || "string" === typeof input.work_dir || $report(_exceptionable, {
        path: _path + ".work_dir",
        expected: "(string | undefined)",
        value: input.work_dir
    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["image", "gpu", "entrypoint", "env", "work_dir"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo3 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || $report(_exceptionable, {
            path: _path + $join(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const $vo4 = (input, _path, _exceptionable = true) => ["container/run" === input.type || "container/create-volume" === input.type || $report(_exceptionable, {
        path: _path + ".type",
        expected: "(\"container/create-volume\" | \"container/run\")",
        value: input.type
    }), "string" === typeof input.id || $report(_exceptionable, {
        path: _path + ".id",
        expected: "string",
        value: input.id
    }), ("object" === typeof input.args && null !== input.args || $report(_exceptionable, {
        path: _path + ".args",
        expected: "(__type.o3 | __type.o7)",
        value: input.args
    })) && $vu1(input.args, _path + ".args", _exceptionable) || $report(_exceptionable, {
        path: _path + ".args",
        expected: "(__type.o3 | __type.o7)",
        value: input.args
    }), undefined === input.results || ("object" === typeof input.results && null !== input.results && false === Array.isArray(input.results) || $report(_exceptionable, {
        path: _path + ".results",
        expected: "(OperationResults | undefined)",
        value: input.results
    })) && $vo13(input.results, _path + ".results", _exceptionable) || $report(_exceptionable, {
        path: _path + ".results",
        expected: "(OperationResults | undefined)",
        value: input.results
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "id", "args", "results"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo5 = (input, _path, _exceptionable = true) => ["string" === typeof input.image || $report(_exceptionable, {
        path: _path + ".image",
        expected: "string",
        value: input.image
    }), (null !== input.cmd || $report(_exceptionable, {
        path: _path + ".cmd",
        expected: "(Array<string> | string | undefined)",
        value: input.cmd
    })) && (undefined === input.cmd || "string" === typeof input.cmd || (Array.isArray(input.cmd) || $report(_exceptionable, {
        path: _path + ".cmd",
        expected: "(Array<string> | string | undefined)",
        value: input.cmd
    })) && input.cmd.map((elem, _index13) => "string" === typeof elem || $report(_exceptionable, {
        path: _path + ".cmd[" + _index13 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".cmd",
        expected: "(Array<string> | string | undefined)",
        value: input.cmd
    })), undefined === input.volumes || (Array.isArray(input.volumes) || $report(_exceptionable, {
        path: _path + ".volumes",
        expected: "([{ name: string; dest: string; }] | undefined)",
        value: input.volumes
    })) && ((input.volumes.length === 1 || $report(_exceptionable, {
        path: _path + ".volumes",
        expected: "[__type.o4]",
        value: input.volumes
    })) && [
        ("object" === typeof input.volumes[0] && null !== input.volumes[0] || $report(_exceptionable, {
            path: _path + ".volumes[0]",
            expected: "__type.o4",
            value: input.volumes[0]
        })) && $vo6(input.volumes[0], _path + ".volumes[0]", _exceptionable) || $report(_exceptionable, {
            path: _path + ".volumes[0]",
            expected: "__type.o4",
            value: input.volumes[0]
        })
    ].every(flag => flag)) || $report(_exceptionable, {
        path: _path + ".volumes",
        expected: "([{ name: string; dest: string; }] | undefined)",
        value: input.volumes
    }), undefined === input.expose || "number" === typeof input.expose || $report(_exceptionable, {
        path: _path + ".expose",
        expected: "(number | undefined)",
        value: input.expose
    }), undefined === input["private"] || "boolean" === typeof input["private"] || $report(_exceptionable, {
        path: _path + "[\"private\"]",
        expected: "(boolean | undefined)",
        value: input["private"]
    }), undefined === input.gpu || "boolean" === typeof input.gpu || $report(_exceptionable, {
        path: _path + ".gpu",
        expected: "(boolean | undefined)",
        value: input.gpu
    }), undefined === input.work_dir || "string" === typeof input.work_dir || $report(_exceptionable, {
        path: _path + ".work_dir",
        expected: "(string | undefined)",
        value: input.work_dir
    }), undefined === input.output || "string" === typeof input.output || $report(_exceptionable, {
        path: _path + ".output",
        expected: "(string | undefined)",
        value: input.output
    }), (null !== input.entrypoint || $report(_exceptionable, {
        path: _path + ".entrypoint",
        expected: "(Array<string> | string | undefined)",
        value: input.entrypoint
    })) && (undefined === input.entrypoint || "string" === typeof input.entrypoint || (Array.isArray(input.entrypoint) || $report(_exceptionable, {
        path: _path + ".entrypoint",
        expected: "(Array<string> | string | undefined)",
        value: input.entrypoint
    })) && input.entrypoint.map((elem, _index14) => "string" === typeof elem || $report(_exceptionable, {
        path: _path + ".entrypoint[" + _index14 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".entrypoint",
        expected: "(Array<string> | string | undefined)",
        value: input.entrypoint
    })), undefined === input.env || ("object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) || $report(_exceptionable, {
        path: _path + ".env",
        expected: "(__type.o5 | undefined)",
        value: input.env
    })) && $vo7(input.env, _path + ".env", _exceptionable) || $report(_exceptionable, {
        path: _path + ".env",
        expected: "(__type.o5 | undefined)",
        value: input.env
    }), undefined === input.resources || (Array.isArray(input.resources) || $report(_exceptionable, {
        path: _path + ".resources",
        expected: "(Array<Resource> | undefined)",
        value: input.resources
    })) && input.resources.map((elem, _index15) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
        path: _path + ".resources[" + _index15 + "]",
        expected: "(S3Secure | S3Unsecure)",
        value: elem
    })) && $vu0(elem, _path + ".resources[" + _index15 + "]", _exceptionable) || $report(_exceptionable, {
        path: _path + ".resources[" + _index15 + "]",
        expected: "(S3Secure | S3Unsecure)",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".resources",
        expected: "(Array<Resource> | undefined)",
        value: input.resources
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["image", "cmd", "volumes", "expose", "private", "gpu", "work_dir", "output", "entrypoint", "env", "resources"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo6 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || $report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), "string" === typeof input.dest || $report(_exceptionable, {
        path: _path + ".dest",
        expected: "string",
        value: input.dest
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name", "dest"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo7 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return "string" === typeof value || $report(_exceptionable, {
            path: _path + $join(key),
            expected: "string",
            value: value
        });
    }).every(flag => flag)].every(flag => flag); const $vo8 = (input, _path, _exceptionable = true) => ["S3" === input.type || $report(_exceptionable, {
        path: _path + ".type",
        expected: "\"S3\"",
        value: input.type
    }), undefined === input.url || "string" === typeof input.url || $report(_exceptionable, {
        path: _path + ".url",
        expected: "(string | undefined)",
        value: input.url
    }), "string" === typeof input.target || $report(_exceptionable, {
        path: _path + ".target",
        expected: "string",
        value: input.target
    }), undefined === input.files || (Array.isArray(input.files) || $report(_exceptionable, {
        path: _path + ".files",
        expected: "(Array<string> | undefined)",
        value: input.files
    })) && input.files.map((elem, _index16) => "string" === typeof elem || $report(_exceptionable, {
        path: _path + ".files[" + _index16 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".files",
        expected: "(Array<string> | undefined)",
        value: input.files
    }), undefined === input.allowWrite || "boolean" === typeof input.allowWrite || $report(_exceptionable, {
        path: _path + ".allowWrite",
        expected: "(boolean | undefined)",
        value: input.allowWrite
    }), undefined === input.buckets || (Array.isArray(input.buckets) || $report(_exceptionable, {
        path: _path + ".buckets",
        expected: "(Array<__type> | undefined)",
        value: input.buckets
    })) && input.buckets.map((elem, _index17) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
        path: _path + ".buckets[" + _index17 + "]",
        expected: "__type.o6",
        value: elem
    })) && $vo9(elem, _path + ".buckets[" + _index17 + "]", _exceptionable) || $report(_exceptionable, {
        path: _path + ".buckets[" + _index17 + "]",
        expected: "__type.o6",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".buckets",
        expected: "(Array<__type> | undefined)",
        value: input.buckets
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "url", "target", "files", "allowWrite", "buckets"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo9 = (input, _path, _exceptionable = true) => ["string" === typeof input.url || $report(_exceptionable, {
        path: _path + ".url",
        expected: "string",
        value: input.url
    }), undefined === input.files || (Array.isArray(input.files) || $report(_exceptionable, {
        path: _path + ".files",
        expected: "(Array<string> | undefined)",
        value: input.files
    })) && input.files.map((elem, _index18) => "string" === typeof elem || $report(_exceptionable, {
        path: _path + ".files[" + _index18 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".files",
        expected: "(Array<string> | undefined)",
        value: input.files
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["url", "files"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo10 = (input, _path, _exceptionable = true) => ["S3" === input.type || $report(_exceptionable, {
        path: _path + ".type",
        expected: "\"S3\"",
        value: input.type
    }), undefined === input.url || "string" === typeof input.url || $report(_exceptionable, {
        path: _path + ".url",
        expected: "(string | undefined)",
        value: input.url
    }), "string" === typeof input.target || $report(_exceptionable, {
        path: _path + ".target",
        expected: "string",
        value: input.target
    }), undefined === input.files || (Array.isArray(input.files) || $report(_exceptionable, {
        path: _path + ".files",
        expected: "(Array<string> | undefined)",
        value: input.files
    })) && input.files.map((elem, _index19) => "string" === typeof elem || $report(_exceptionable, {
        path: _path + ".files[" + _index19 + "]",
        expected: "string",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".files",
        expected: "(Array<string> | undefined)",
        value: input.files
    }), undefined === input.allowWrite || "boolean" === typeof input.allowWrite || $report(_exceptionable, {
        path: _path + ".allowWrite",
        expected: "(boolean | undefined)",
        value: input.allowWrite
    }), undefined === input.buckets || (Array.isArray(input.buckets) || $report(_exceptionable, {
        path: _path + ".buckets",
        expected: "(Array<__type> | undefined)",
        value: input.buckets
    })) && input.buckets.map((elem, _index20) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
        path: _path + ".buckets[" + _index20 + "]",
        expected: "__type.o6",
        value: elem
    })) && $vo9(elem, _path + ".buckets[" + _index20 + "]", _exceptionable) || $report(_exceptionable, {
        path: _path + ".buckets[" + _index20 + "]",
        expected: "__type.o6",
        value: elem
    })).every(flag => flag) || $report(_exceptionable, {
        path: _path + ".buckets",
        expected: "(Array<__type> | undefined)",
        value: input.buckets
    }), ("object" === typeof input.IAM && null !== input.IAM || $report(_exceptionable, {
        path: _path + ".IAM",
        expected: "S3Auth",
        value: input.IAM
    })) && $vo11(input.IAM, _path + ".IAM", _exceptionable) || $report(_exceptionable, {
        path: _path + ".IAM",
        expected: "S3Auth",
        value: input.IAM
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["type", "url", "target", "files", "allowWrite", "buckets", "IAM"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo11 = (input, _path, _exceptionable = true) => ["string" === typeof input.REGION || $report(_exceptionable, {
        path: _path + ".REGION",
        expected: "string",
        value: input.REGION
    }), "string" === typeof input.ACCESS_KEY_ID || $report(_exceptionable, {
        path: _path + ".ACCESS_KEY_ID",
        expected: "string",
        value: input.ACCESS_KEY_ID
    }), "string" === typeof input.SECRET_ACCESS_KEY || $report(_exceptionable, {
        path: _path + ".SECRET_ACCESS_KEY",
        expected: "string",
        value: input.SECRET_ACCESS_KEY
    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["REGION", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo12 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || $report(_exceptionable, {
        path: _path + ".name",
        expected: "string",
        value: input.name
    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["name"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vo13 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
        const value = input[key];
        if (undefined === value)
            return true;
        return (null !== value || $report(_exceptionable, {
            path: _path + $join(key),
            expected: "(OperationResult | string)",
            value: value
        })) && (undefined !== value || $report(_exceptionable, {
            path: _path + $join(key),
            expected: "(OperationResult | string)",
            value: value
        })) && ("string" === typeof value || ("object" === typeof value && null !== value || $report(_exceptionable, {
            path: _path + $join(key),
            expected: "(OperationResult | string)",
            value: value
        })) && $vo14(value, _path + $join(key), _exceptionable) || $report(_exceptionable, {
            path: _path + $join(key),
            expected: "(OperationResult | string)",
            value: value
        }));
    }).every(flag => flag)].every(flag => flag); const $vo14 = (input, _path, _exceptionable = true) => ["string" === typeof input.regex || $report(_exceptionable, {
        path: _path + ".regex",
        expected: "string",
        value: input.regex
    }), (Array.isArray(input.logType) || $report(_exceptionable, {
        path: _path + ".logType",
        expected: "[StdOptions, (StdOptions | undefined)?, (StdOptions | undefined)?, (StdOptions | undefined)?]",
        value: input.logType
    })) && ((1 <= input.logType.length && 4 >= input.logType.length || $report(_exceptionable, {
        path: _path + ".logType",
        expected: "[(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\"), (\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined), (\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined), (\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)]",
        value: input.logType
    })) && [
        "stdin" === input.logType[0] || "stdout" === input.logType[0] || "stderr" === input.logType[0] || "nodeerr" === input.logType[0] || $report(_exceptionable, {
            path: _path + ".logType[0]",
            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\")",
            value: input.logType[0]
        }),
        undefined === input.logType[1] || "stdin" === input.logType[1] || "stdout" === input.logType[1] || "stderr" === input.logType[1] || "nodeerr" === input.logType[1] || $report(_exceptionable, {
            path: _path + ".logType[1]",
            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)",
            value: input.logType[1]
        }),
        undefined === input.logType[2] || "stdin" === input.logType[2] || "stdout" === input.logType[2] || "stderr" === input.logType[2] || "nodeerr" === input.logType[2] || $report(_exceptionable, {
            path: _path + ".logType[2]",
            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)",
            value: input.logType[2]
        }),
        undefined === input.logType[3] || "stdin" === input.logType[3] || "stdout" === input.logType[3] || "stderr" === input.logType[3] || "nodeerr" === input.logType[3] || $report(_exceptionable, {
            path: _path + ".logType[3]",
            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)",
            value: input.logType[3]
        })
    ].every(flag => flag)) || $report(_exceptionable, {
        path: _path + ".logType",
        expected: "[StdOptions, (StdOptions | undefined)?, (StdOptions | undefined)?, (StdOptions | undefined)?]",
        value: input.logType
    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
        if (["regex", "logType"].some(prop => key === prop))
            return true;
        const value = input[key];
        if (undefined === value)
            return true;
        return $report(_exceptionable, {
            path: _path + $join(key),
            expected: "undefined",
            value: value
        });
    }).every(flag => flag))].every(flag => flag); const $vu0 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.IAM)
        return $vo10(input, _path, _exceptionable);
    else
        return $vo8(input, _path, _exceptionable);
})(); const $vu1 = (input, _path, _exceptionable = true) => (() => {
    if (undefined !== input.image)
        return $vo5(input, _path, _exceptionable);
    else if (undefined !== input.name)
        return $vo12(input, _path, _exceptionable);
    else
        return $report(_exceptionable, {
            path: _path,
            expected: "(__type.o3 | __type.o7)",
            value: input
        });
})(); const __is = (input, _exceptionable = true) => "object" === typeof input && null !== input && $io0(input, true); let errors; let $report; return input => {
    if (false === __is(input)) {
        errors = [];
        $report = typia.createValidateEquals.report(errors);
        ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || $report(true, {
            path: _path + "",
            expected: "JobDefinition",
            value: input
        })) && $vo0(input, _path + "", true) || $report(true, {
            path: _path + "",
            expected: "JobDefinition",
            value: input
        }))(input, "$input", true);
        const success = 0 === errors.length;
        return {
            success,
            errors,
            data: success ? input : undefined
        };
    }
    return {
        success: true,
        errors: [],
        data: input
    };
}; })();

const NodesIDL = {
    "version": "0.1.0",
    "name": "nosana_nodes",
    "instructions": [
        {
            "name": "register",
            "accounts": [
                {
                    "name": "node",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "payer",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "authority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "architectureType",
                    "type": "u8"
                },
                {
                    "name": "countryCode",
                    "type": "u16"
                },
                {
                    "name": "cpu",
                    "type": "u16"
                },
                {
                    "name": "gpu",
                    "type": "u16"
                },
                {
                    "name": "memory",
                    "type": "u16"
                },
                {
                    "name": "iops",
                    "type": "u16"
                },
                {
                    "name": "storage",
                    "type": "u16"
                },
                {
                    "name": "endpoint",
                    "type": "string"
                },
                {
                    "name": "icon",
                    "type": "string"
                },
                {
                    "name": "version",
                    "type": "string"
                }
            ]
        },
        {
            "name": "audit",
            "accounts": [
                {
                    "name": "node",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "authority",
                    "isMut": false,
                    "isSigner": true
                }
            ],
            "args": [
                {
                    "name": "audited",
                    "type": "bool"
                }
            ]
        },
        {
            "name": "update",
            "accounts": [
                {
                    "name": "node",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "authority",
                    "isMut": false,
                    "isSigner": true
                }
            ],
            "args": [
                {
                    "name": "architectureType",
                    "type": "u8"
                },
                {
                    "name": "countryCode",
                    "type": "u16"
                },
                {
                    "name": "cpu",
                    "type": "u16"
                },
                {
                    "name": "gpu",
                    "type": "u16"
                },
                {
                    "name": "memory",
                    "type": "u16"
                },
                {
                    "name": "iops",
                    "type": "u16"
                },
                {
                    "name": "storage",
                    "type": "u16"
                },
                {
                    "name": "endpoint",
                    "type": "string"
                },
                {
                    "name": "icon",
                    "type": "string"
                },
                {
                    "name": "version",
                    "type": "string"
                }
            ]
        }
    ],
    "accounts": [
        {
            "name": "NodeAccount",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "authority",
                        "type": "publicKey"
                    },
                    {
                        "name": "audited",
                        "type": "bool"
                    },
                    {
                        "name": "architecture",
                        "type": "u8"
                    },
                    {
                        "name": "country",
                        "type": "u16"
                    },
                    {
                        "name": "cpu",
                        "type": "u16"
                    },
                    {
                        "name": "gpu",
                        "type": "u16"
                    },
                    {
                        "name": "memory",
                        "type": "u16"
                    },
                    {
                        "name": "iops",
                        "type": "u16"
                    },
                    {
                        "name": "storage",
                        "type": "u16"
                    },
                    {
                        "name": "endpoint",
                        "type": "string"
                    },
                    {
                        "name": "icon",
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "type": "string"
                    }
                ]
            }
        }
    ],
    "types": [
        {
            "name": "ArchitectureType",
            "type": {
                "kind": "enum",
                "variants": [
                    {
                        "name": "Amd64"
                    },
                    {
                        "name": "Arm32v6"
                    },
                    {
                        "name": "Arm32v7"
                    },
                    {
                        "name": "Arm64v8"
                    },
                    {
                        "name": "WindowsAmd64"
                    },
                    {
                        "name": "Ppc64le"
                    },
                    {
                        "name": "S390x"
                    },
                    {
                        "name": "Mips64le"
                    },
                    {
                        "name": "Riscv64"
                    },
                    {
                        "name": "I386"
                    },
                    {
                        "name": "Unknown"
                    }
                ]
            }
        },
        {
            "name": "CountryCode",
            "type": {
                "kind": "enum",
                "variants": [
                    {
                        "name": "AD"
                    },
                    {
                        "name": "AE"
                    },
                    {
                        "name": "AF"
                    },
                    {
                        "name": "AG"
                    },
                    {
                        "name": "AI"
                    },
                    {
                        "name": "AL"
                    },
                    {
                        "name": "AM"
                    },
                    {
                        "name": "AO"
                    },
                    {
                        "name": "AQ"
                    },
                    {
                        "name": "AR"
                    },
                    {
                        "name": "AS"
                    },
                    {
                        "name": "AT"
                    },
                    {
                        "name": "AU"
                    },
                    {
                        "name": "AW"
                    },
                    {
                        "name": "AX"
                    },
                    {
                        "name": "AZ"
                    },
                    {
                        "name": "BA"
                    },
                    {
                        "name": "BB"
                    },
                    {
                        "name": "BD"
                    },
                    {
                        "name": "BE"
                    },
                    {
                        "name": "BF"
                    },
                    {
                        "name": "BG"
                    },
                    {
                        "name": "BH"
                    },
                    {
                        "name": "BI"
                    },
                    {
                        "name": "BJ"
                    },
                    {
                        "name": "BL"
                    },
                    {
                        "name": "BM"
                    },
                    {
                        "name": "BN"
                    },
                    {
                        "name": "BO"
                    },
                    {
                        "name": "BQ"
                    },
                    {
                        "name": "BR"
                    },
                    {
                        "name": "BS"
                    },
                    {
                        "name": "BT"
                    },
                    {
                        "name": "BV"
                    },
                    {
                        "name": "BW"
                    },
                    {
                        "name": "BY"
                    },
                    {
                        "name": "BZ"
                    },
                    {
                        "name": "CA"
                    },
                    {
                        "name": "CC"
                    },
                    {
                        "name": "CD"
                    },
                    {
                        "name": "CF"
                    },
                    {
                        "name": "CG"
                    },
                    {
                        "name": "CH"
                    },
                    {
                        "name": "CI"
                    },
                    {
                        "name": "CK"
                    },
                    {
                        "name": "CL"
                    },
                    {
                        "name": "CM"
                    },
                    {
                        "name": "CN"
                    },
                    {
                        "name": "CO"
                    },
                    {
                        "name": "CR"
                    },
                    {
                        "name": "CU"
                    },
                    {
                        "name": "CV"
                    },
                    {
                        "name": "CW"
                    },
                    {
                        "name": "CX"
                    },
                    {
                        "name": "CY"
                    },
                    {
                        "name": "CZ"
                    },
                    {
                        "name": "DE"
                    },
                    {
                        "name": "DJ"
                    },
                    {
                        "name": "DK"
                    },
                    {
                        "name": "DM"
                    },
                    {
                        "name": "DO"
                    },
                    {
                        "name": "DZ"
                    },
                    {
                        "name": "EC"
                    },
                    {
                        "name": "EE"
                    },
                    {
                        "name": "EG"
                    },
                    {
                        "name": "EH"
                    },
                    {
                        "name": "ER"
                    },
                    {
                        "name": "ES"
                    },
                    {
                        "name": "ET"
                    },
                    {
                        "name": "FI"
                    },
                    {
                        "name": "FJ"
                    },
                    {
                        "name": "FK"
                    },
                    {
                        "name": "FM"
                    },
                    {
                        "name": "FO"
                    },
                    {
                        "name": "FR"
                    },
                    {
                        "name": "GA"
                    },
                    {
                        "name": "GB"
                    },
                    {
                        "name": "GD"
                    },
                    {
                        "name": "GE"
                    },
                    {
                        "name": "GF"
                    },
                    {
                        "name": "GG"
                    },
                    {
                        "name": "GH"
                    },
                    {
                        "name": "GI"
                    },
                    {
                        "name": "GL"
                    },
                    {
                        "name": "GM"
                    },
                    {
                        "name": "GN"
                    },
                    {
                        "name": "GP"
                    },
                    {
                        "name": "GQ"
                    },
                    {
                        "name": "GR"
                    },
                    {
                        "name": "GS"
                    },
                    {
                        "name": "GT"
                    },
                    {
                        "name": "GU"
                    },
                    {
                        "name": "GW"
                    },
                    {
                        "name": "GY"
                    },
                    {
                        "name": "HK"
                    },
                    {
                        "name": "HM"
                    },
                    {
                        "name": "HN"
                    },
                    {
                        "name": "HR"
                    },
                    {
                        "name": "HT"
                    },
                    {
                        "name": "HU"
                    },
                    {
                        "name": "ID"
                    },
                    {
                        "name": "IE"
                    },
                    {
                        "name": "IL"
                    },
                    {
                        "name": "IM"
                    },
                    {
                        "name": "IN"
                    },
                    {
                        "name": "IO"
                    },
                    {
                        "name": "IQ"
                    },
                    {
                        "name": "IR"
                    },
                    {
                        "name": "IS"
                    },
                    {
                        "name": "IT"
                    },
                    {
                        "name": "JE"
                    },
                    {
                        "name": "JM"
                    },
                    {
                        "name": "JO"
                    },
                    {
                        "name": "JP"
                    },
                    {
                        "name": "KE"
                    },
                    {
                        "name": "KG"
                    },
                    {
                        "name": "KH"
                    },
                    {
                        "name": "KI"
                    },
                    {
                        "name": "KM"
                    },
                    {
                        "name": "KN"
                    },
                    {
                        "name": "KP"
                    },
                    {
                        "name": "KR"
                    },
                    {
                        "name": "KW"
                    },
                    {
                        "name": "KY"
                    },
                    {
                        "name": "KZ"
                    },
                    {
                        "name": "LA"
                    },
                    {
                        "name": "LB"
                    },
                    {
                        "name": "LC"
                    },
                    {
                        "name": "LI"
                    },
                    {
                        "name": "LK"
                    },
                    {
                        "name": "LR"
                    },
                    {
                        "name": "LS"
                    },
                    {
                        "name": "LT"
                    },
                    {
                        "name": "LU"
                    },
                    {
                        "name": "LV"
                    },
                    {
                        "name": "LY"
                    },
                    {
                        "name": "MA"
                    },
                    {
                        "name": "MC"
                    },
                    {
                        "name": "MD"
                    },
                    {
                        "name": "ME"
                    },
                    {
                        "name": "MF"
                    },
                    {
                        "name": "MG"
                    },
                    {
                        "name": "MH"
                    },
                    {
                        "name": "MK"
                    },
                    {
                        "name": "ML"
                    },
                    {
                        "name": "MM"
                    },
                    {
                        "name": "MN"
                    },
                    {
                        "name": "MO"
                    },
                    {
                        "name": "MP"
                    },
                    {
                        "name": "MQ"
                    },
                    {
                        "name": "MR"
                    },
                    {
                        "name": "MS"
                    },
                    {
                        "name": "MT"
                    },
                    {
                        "name": "MU"
                    },
                    {
                        "name": "MV"
                    },
                    {
                        "name": "MW"
                    },
                    {
                        "name": "MX"
                    },
                    {
                        "name": "MY"
                    },
                    {
                        "name": "MZ"
                    },
                    {
                        "name": "NA"
                    },
                    {
                        "name": "NC"
                    },
                    {
                        "name": "NE"
                    },
                    {
                        "name": "NF"
                    },
                    {
                        "name": "NG"
                    },
                    {
                        "name": "NI"
                    },
                    {
                        "name": "NL"
                    },
                    {
                        "name": "NO"
                    },
                    {
                        "name": "NP"
                    },
                    {
                        "name": "NR"
                    },
                    {
                        "name": "NU"
                    },
                    {
                        "name": "NZ"
                    },
                    {
                        "name": "OM"
                    },
                    {
                        "name": "PA"
                    },
                    {
                        "name": "PE"
                    },
                    {
                        "name": "PF"
                    },
                    {
                        "name": "PG"
                    },
                    {
                        "name": "PH"
                    },
                    {
                        "name": "PK"
                    },
                    {
                        "name": "PL"
                    },
                    {
                        "name": "PM"
                    },
                    {
                        "name": "PN"
                    },
                    {
                        "name": "PR"
                    },
                    {
                        "name": "PS"
                    },
                    {
                        "name": "PT"
                    },
                    {
                        "name": "PW"
                    },
                    {
                        "name": "PY"
                    },
                    {
                        "name": "QA"
                    },
                    {
                        "name": "RE"
                    },
                    {
                        "name": "RO"
                    },
                    {
                        "name": "RS"
                    },
                    {
                        "name": "RU"
                    },
                    {
                        "name": "RW"
                    },
                    {
                        "name": "SA"
                    },
                    {
                        "name": "SB"
                    },
                    {
                        "name": "SC"
                    },
                    {
                        "name": "SD"
                    },
                    {
                        "name": "SE"
                    },
                    {
                        "name": "SG"
                    },
                    {
                        "name": "SH"
                    },
                    {
                        "name": "SI"
                    },
                    {
                        "name": "SJ"
                    },
                    {
                        "name": "SK"
                    },
                    {
                        "name": "SL"
                    },
                    {
                        "name": "SM"
                    },
                    {
                        "name": "SN"
                    },
                    {
                        "name": "SO"
                    },
                    {
                        "name": "SR"
                    },
                    {
                        "name": "SS"
                    },
                    {
                        "name": "ST"
                    },
                    {
                        "name": "SV"
                    },
                    {
                        "name": "SX"
                    },
                    {
                        "name": "SY"
                    },
                    {
                        "name": "SZ"
                    },
                    {
                        "name": "TC"
                    },
                    {
                        "name": "TD"
                    },
                    {
                        "name": "TF"
                    },
                    {
                        "name": "TG"
                    },
                    {
                        "name": "TH"
                    },
                    {
                        "name": "TJ"
                    },
                    {
                        "name": "TK"
                    },
                    {
                        "name": "TL"
                    },
                    {
                        "name": "TM"
                    },
                    {
                        "name": "TN"
                    },
                    {
                        "name": "TO"
                    },
                    {
                        "name": "TR"
                    },
                    {
                        "name": "TT"
                    },
                    {
                        "name": "TV"
                    },
                    {
                        "name": "TW"
                    },
                    {
                        "name": "TZ"
                    },
                    {
                        "name": "UA"
                    },
                    {
                        "name": "UG"
                    },
                    {
                        "name": "UM"
                    },
                    {
                        "name": "US"
                    },
                    {
                        "name": "UY"
                    },
                    {
                        "name": "UZ"
                    },
                    {
                        "name": "VA"
                    },
                    {
                        "name": "VC"
                    },
                    {
                        "name": "VE"
                    },
                    {
                        "name": "VG"
                    },
                    {
                        "name": "VI"
                    },
                    {
                        "name": "VN"
                    },
                    {
                        "name": "VU"
                    },
                    {
                        "name": "WF"
                    },
                    {
                        "name": "WS"
                    },
                    {
                        "name": "YE"
                    },
                    {
                        "name": "YT"
                    },
                    {
                        "name": "ZA"
                    },
                    {
                        "name": "ZM"
                    },
                    {
                        "name": "ZW"
                    },
                    {
                        "name": "Unknown"
                    }
                ]
            }
        }
    ],
    "errors": [
        {
            "code": 6000,
            "name": "ArchitectureUnknown",
            "msg": "This architecture does not exist."
        },
        {
            "code": 6001,
            "name": "CountryCodeUnknown",
            "msg": "This country does not exist."
        },
        {
            "code": 6002,
            "name": "CpuInvalid",
            "msg": "CPU value must be greater than zero"
        },
        {
            "code": 6003,
            "name": "GpuInvalid",
            "msg": "GPU value must be greater than zero"
        },
        {
            "code": 6004,
            "name": "MemoryInvalid",
            "msg": "Memory value must be greater than zero"
        },
        {
            "code": 6005,
            "name": "IopsInvalid",
            "msg": "IOPS value must be greater than zero"
        },
        {
            "code": 6006,
            "name": "StorageInvalid",
            "msg": "Storage value must be greater than zero"
        }
    ]
};

const MarketQueue = {
    "JOB_QUEUE": 0,
    "NODE_QUEUE": 1,
    "EMPTY": undefined
};

polyfill();
class Client {
    constructor(environment = 'devnet', wallet, config) {
        if (!wallet) {
            wallet = browser$1$1?.env?.SOLANA_WALLET || new KeyWallet(Keypair$2.generate());
        }
        this.authorization = new AuthorizationManager(wallet);
        this.solana = new SolanaManager(environment, wallet, config?.solana);
        this.ipfs = new IPFS(environment, config?.ipfs);
        this.secrets = new SecretManager(environment, wallet, config?.secrets);
        this.jobs = new Jobs(environment, wallet, config?.solana);
        this.nodes = new Nodes(environment, wallet, config?.solana);
        this.stake = new Stake(environment, wallet, config?.solana);
    }
}

export { AuthorizationManager, Client, IPFS, Jobs, KeyWallet, MarketQueue, Nodes, NodesIDL, SecretManager, SolanaManager, Stake, excludedJobs, getWallet, jobStateMapping, mapJob, now$1 as now, pda$1 as pda, polyfill, sleep, validateJobDefinition };
