import base58 from 'bs58';
import nacl from 'tweetnacl';
import naclUtil from 'tweetnacl-util';
import { getWallet } from '../utils.js';
export class AuthorizationManager {
    constructor(wallet) {
        this.wallet = getWallet(wallet);
    }
    generate(message, options) {
        const { includeTime, seperator } = {
            includeTime: false,
            seperator: ':',
            ...options,
        };
        const messageBytes = naclUtil.decodeUTF8(message);
        const signature = nacl.sign.detached(messageBytes, this.wallet.payer.secretKey);
        return `${message}${seperator}${base58.encode(signature)}${includeTime ? seperator + new Date().getTime() : ''}`;
    }
    validate(validationString, options) {
        const { expiry, publicKey, seperator } = {
            expiry: 300,
            publicKey: this.wallet.publicKey,
            seperator: ':',
            ...options,
        };
        const [message, signatureB64, date] = validationString.split(seperator);
        if (!message || !signatureB64) {
            throw new Error('Invalid signature.');
        }
        if (date) {
            if ((new Date().getTime() - new Date(parseInt(date)).getTime()) / 1000 >=
                expiry) {
                throw new Error('Authorization has expired.');
            }
        }
        return nacl.sign.detached.verify(Buffer.from(message), base58.decode(signatureB64), publicKey.toBytes());
    }
    generateHeader(message, options) {
        const { key, includeTime } = {
            key: 'Authorization',
            includeTime: false,
            ...options,
        };
        const headers = new Headers();
        const authorizationString = this.generate(message, { includeTime });
        headers.append(key, authorizationString);
        return headers;
    }
    validateHeader(headers, options) {
        const { key, expiry, seperator, publicKey } = {
            key: 'authorization',
            expiry: 300,
            seperator: ':',
            publicKey: this.wallet.publicKey,
            ...options,
        };
        const validationHeader = headers[key];
        if (!validationHeader) {
            throw new Error(`Header not found with key ${key}.`);
        }
        if (typeof validationHeader !== 'string') {
            throw new Error('Header has invalid type.');
        }
        return this.validate(validationHeader, { expiry, seperator, publicKey });
    }
}
