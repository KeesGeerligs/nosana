import * as buffer from 'buffer';
import { Keypair, PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';
import { Wallet as AnchorWallet } from '@coral-xyz/anchor';
import type { Job, Wallet } from './types/index.js';
declare const excludedJobs: string[];
declare const jobStateMapping: any;
/**
 * Method to pause the process
 * @param seconds Number of seconds to pause
 */
declare const sleep: (seconds: number) => Promise<void>;
/**
 * Method to easily get a universal timestamp
 */
declare const now: () => number;
declare class KeyWallet implements AnchorWallet {
    readonly payer: Keypair;
    constructor(payer: Keypair);
    signTransaction<T extends Transaction | VersionedTransaction>(tx: T): Promise<T>;
    signAllTransactions<T extends Transaction | VersionedTransaction>(txs: T[]): Promise<T[]>;
    get publicKey(): PublicKey;
    get privateKey(): Uint8Array;
}
declare const mapJob: (job: any) => Job;
declare const polyfill: () => void;
declare const getWallet: (wallet: Wallet) => AnchorWallet;
declare const pda: (seeds: Array<Buffer | Uint8Array>, programId: PublicKey) => PublicKey;
export { now, sleep, KeyWallet, mapJob, pda, jobStateMapping, excludedJobs, polyfill, getWallet, };
