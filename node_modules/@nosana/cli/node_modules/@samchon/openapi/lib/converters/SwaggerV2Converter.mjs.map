{"version":3,"file":"SwaggerV2Converter.mjs","sources":["../../src/converters/SwaggerV2Converter.ts"],"sourcesContent":["import { OpenApi } from \"../OpenApi\";\nimport { SwaggerV2 } from \"../SwaggerV2\";\nimport { OpenApiTypeChecker } from \"../utils/OpenApiTypeChecker\";\n\nexport namespace SwaggerV2Converter {\n  export const convert = (input: SwaggerV2.IDocument): OpenApi.IDocument => ({\n    openapi: \"3.1.0\",\n    info: input.info,\n    components: convertComponents(input),\n    paths: input.paths\n      ? Object.fromEntries(\n          Object.entries(input.paths)\n            .filter(([_, v]) => v !== undefined)\n            .map(\n              ([key, value]) => [key, convertPathItem(input)(value)] as const,\n            ),\n        )\n      : undefined,\n    servers: input.host\n      ? [\n          {\n            url: input.host,\n          },\n        ]\n      : undefined,\n    security: input.security,\n    tags: input.tags,\n    \"x-samchon-emended\": true,\n  });\n\n  /* -----------------------------------------------------------\n    OPERATORS\n  ----------------------------------------------------------- */\n  const convertPathItem =\n    (doc: SwaggerV2.IDocument) =>\n    (pathItem: SwaggerV2.IPath): OpenApi.IPath => ({\n      ...(pathItem as any),\n      ...(pathItem.get\n        ? { get: convertOperation(doc)(pathItem)(pathItem.get) }\n        : undefined),\n      ...(pathItem.put\n        ? { put: convertOperation(doc)(pathItem)(pathItem.put) }\n        : undefined),\n      ...(pathItem.post\n        ? { post: convertOperation(doc)(pathItem)(pathItem.post) }\n        : undefined),\n      ...(pathItem.delete\n        ? { delete: convertOperation(doc)(pathItem)(pathItem.delete) }\n        : undefined),\n      ...(pathItem.options\n        ? { options: convertOperation(doc)(pathItem)(pathItem.options) }\n        : undefined),\n      ...(pathItem.head\n        ? { head: convertOperation(doc)(pathItem)(pathItem.head) }\n        : undefined),\n      ...(pathItem.patch\n        ? { patch: convertOperation(doc)(pathItem)(pathItem.patch) }\n        : undefined),\n      ...(pathItem.trace\n        ? { trace: convertOperation(doc)(pathItem)(pathItem.trace) }\n        : undefined),\n    });\n\n  const convertOperation =\n    (doc: SwaggerV2.IDocument) =>\n    (pathItem: SwaggerV2.IPath) =>\n    (input: SwaggerV2.IOperation): OpenApi.IOperation => ({\n      ...input,\n      parameters:\n        pathItem.parameters !== undefined || input.parameters !== undefined\n          ? (\n              [...(pathItem.parameters ?? []), ...(input.parameters ?? [])]\n                .map((p) =>\n                  TypeChecker.isReference(p)\n                    ? doc.parameters?.[p.$ref.split(\"/\").pop() ?? \"\"]!\n                    : p,\n                )\n                .filter(\n                  (p) =>\n                    p !== undefined &&\n                    p.in !== \"body\" &&\n                    (p as SwaggerV2.IOperation.IBodyParameter).schema ===\n                      undefined,\n                ) as SwaggerV2.IOperation.IGeneralParameter[]\n            ).map(convertParameter)\n          : undefined,\n      requestBody: (() => {\n        const found: SwaggerV2.IOperation.IBodyParameter | undefined =\n          input.parameters?.find((p) => {\n            if (TypeChecker.isReference(p))\n              p = doc.parameters?.[p.$ref.split(\"/\").pop() ?? \"\"]!;\n            return (\n              (p as SwaggerV2.IOperation.IBodyParameter)?.schema !== undefined\n            );\n          }) as SwaggerV2.IOperation.IBodyParameter | undefined;\n        return found ? convertRequestBody(found) : undefined;\n      })(),\n      responses: input.responses\n        ? Object.fromEntries(\n            Object.entries(input.responses)\n              .filter(([_, v]) => v !== undefined)\n              .map(\n                ([key, value]) => [key, convertResponse(doc)(value)!] as const,\n              )\n              .filter(([_, v]) => v !== undefined),\n          )\n        : undefined,\n    });\n\n  const convertParameter = (\n    input: SwaggerV2.IOperation.IGeneralParameter,\n  ): OpenApi.IOperation.IParameter => ({\n    name: input.name,\n    in: input.in as any,\n    description: input.description,\n    schema: convertSchema(input),\n    required: true,\n  });\n  const convertRequestBody = (\n    input: SwaggerV2.IOperation.IBodyParameter,\n  ): OpenApi.IOperation.IRequestBody => ({\n    description: input.description,\n    content: {\n      \"application/json\": {\n        schema: convertSchema(input.schema),\n      },\n    },\n  });\n\n  const convertResponse =\n    (doc: SwaggerV2.IDocument) =>\n    (\n      input:\n        | SwaggerV2.IOperation.IResponse\n        | SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`>,\n    ): OpenApi.IOperation.IResponse | undefined => {\n      if (TypeChecker.isReference(input)) {\n        const found: SwaggerV2.IOperation.IResponse | undefined =\n          doc.responses?.[input.$ref.split(\"/\").pop() ?? \"\"]!;\n        if (found === undefined) return undefined;\n        input = found;\n      }\n      return {\n        description: input.description,\n        content: input.schema\n          ? {\n              \"application/json\": {\n                schema: convertSchema(input.schema),\n                example: input.example,\n              },\n            }\n          : undefined,\n        headers: input.headers\n          ? Object.fromEntries(\n              Object.entries(input.headers)\n                .filter(([_, v]) => v !== undefined)\n                .map(\n                  ([key, value]) =>\n                    [\n                      key,\n                      {\n                        schema: convertSchema(value),\n                        in: \"header\",\n                      },\n                    ] as const,\n                ),\n            )\n          : undefined,\n      };\n    };\n\n  /* -----------------------------------------------------------\n    DEFINITIONS\n  ----------------------------------------------------------- */\n  const convertComponents = (\n    input: SwaggerV2.IDocument,\n  ): OpenApi.IComponents => ({\n    schemas: input.definitions\n      ? Object.fromEntries(\n          Object.entries(input.definitions)\n            .filter(([_, v]) => v !== undefined)\n            .map(([key, value]) => [key, convertSchema(value)]),\n        )\n      : undefined,\n    securitySchemes: input.securityDefinitions\n      ? Object.fromEntries(\n          Object.entries(input.securityDefinitions)\n            .filter(([_, v]) => v !== undefined)\n            .map(([key, value]) => [key, convertSecurityScheme(value)])\n            .filter(([_, v]) => v !== undefined),\n        )\n      : undefined,\n  });\n\n  const convertSecurityScheme = (\n    input: SwaggerV2.ISecurityDefinition,\n  ): OpenApi.ISecurityScheme => {\n    if (input.type === \"apiKey\") return input;\n    else if (input.type === \"basic\")\n      return {\n        type: \"http\",\n        scheme: \"basic\",\n        description: input.description,\n      };\n    else if (input.type === \"oauth2\")\n      if (input.flow === \"implicit\")\n        return {\n          type: \"oauth2\",\n          description: input.description,\n          flows: {\n            implicit: {\n              authorizationUrl: input.authorizationUrl,\n              scopes: input.scopes,\n            },\n          },\n        };\n      else if (input.flow === \"accessCode\")\n        return {\n          type: \"oauth2\",\n          description: input.description,\n          flows: {\n            authorizationCode: {\n              authorizationUrl: input.authorizationUrl,\n              tokenUrl: input.tokenUrl,\n              scopes: input.scopes,\n            },\n          },\n        };\n      else if (input.flow === \"password\")\n        return {\n          type: \"oauth2\",\n          description: input.description,\n          flows: {\n            password: {\n              tokenUrl: input.tokenUrl,\n              scopes: input.scopes,\n            },\n          },\n        };\n      else if (input.flow === \"application\")\n        return {\n          type: \"oauth2\",\n          description: input.description,\n          flows: {\n            clientCredentials: {\n              tokenUrl: input.tokenUrl,\n              scopes: input.scopes,\n            },\n          },\n        };\n      else return undefined!;\n    return undefined!;\n  };\n\n  export const convertSchema = (\n    input: SwaggerV2.IJsonSchema,\n  ): OpenApi.IJsonSchema => {\n    const nullable: { value: boolean; default?: null } = {\n      value: false,\n      default: undefined,\n    };\n    const union: OpenApi.IJsonSchema[] = [];\n    const attribute: OpenApi.IJsonSchema.__IAttribute = {\n      title: input.title,\n      description: input.description,\n      ...Object.fromEntries(\n        Object.entries(input).filter(\n          ([key, value]) => key.startsWith(\"x-\") && value !== undefined,\n        ),\n      ),\n      example: input.example,\n      examples: input.examples\n        ? Object.fromEntries(input.examples.map((v, i) => [i.toString(), v]))\n        : undefined,\n    };\n    const visit = (schema: SwaggerV2.IJsonSchema): void => {\n      // NULLABLE PROPERTY\n      if (\n        (schema as SwaggerV2.IJsonSchema.__ISignificant<any>)[\"x-nullable\"] ===\n        true\n      ) {\n        nullable.value ||= true;\n        if ((schema as SwaggerV2.IJsonSchema.INumber).default === null)\n          nullable.default = null;\n      }\n      if (\n        Array.isArray((schema as SwaggerV2.IJsonSchema.INumber).enum) &&\n        (schema as SwaggerV2.IJsonSchema.INumber).enum?.length &&\n        (schema as SwaggerV2.IJsonSchema.INumber).enum?.some((e) => e === null)\n      )\n        nullable.value ||= true;\n      // UNION TYPE CASE\n      if (TypeChecker.isAnyOf(schema)) schema[\"x-anyOf\"].forEach(visit);\n      else if (TypeChecker.isOneOf(schema)) schema[\"x-oneOf\"].forEach(visit);\n      // ATOMIC TYPE CASE (CONSIDER ENUM VALUES)\n      else if (\n        TypeChecker.isBoolean(schema) ||\n        TypeChecker.isInteger(schema) ||\n        TypeChecker.isNumber(schema) ||\n        TypeChecker.isString(schema)\n      )\n        if (schema.enum?.length && schema.enum.filter((e) => e !== null).length)\n          union.push(\n            ...schema.enum\n              .filter((v) => v !== null)\n              .map((value) => ({ const: value })),\n          );\n        else\n          union.push({\n            ...schema,\n            default: (schema.default ?? undefined) satisfies\n              | boolean\n              | number\n              | string\n              | undefined as any,\n            examples: schema.examples\n              ? Object.fromEntries(\n                  schema.examples.map((v, i) => [i.toString(), v]),\n                )\n              : undefined,\n            ...{ enum: undefined },\n          });\n      // INSTANCE TYPE CASE\n      else if (TypeChecker.isArray(schema))\n        union.push({\n          ...schema,\n          items: convertSchema(schema.items),\n          examples: schema.examples\n            ? Object.fromEntries(\n                schema.examples.map((v, i) => [i.toString(), v]),\n              )\n            : undefined,\n        });\n      else if (TypeChecker.isObject(schema))\n        union.push({\n          ...schema,\n          ...{\n            properties: schema.properties\n              ? Object.fromEntries(\n                  Object.entries(schema.properties)\n                    .filter(([_, v]) => v !== undefined)\n                    .map(([key, value]) => [key, convertSchema(value)]),\n                )\n              : undefined,\n            additionalProperties: schema.additionalProperties\n              ? typeof schema.additionalProperties === \"object\" &&\n                schema.additionalProperties !== null\n                ? convertSchema(schema.additionalProperties)\n                : schema.additionalProperties\n              : undefined,\n          },\n          examples: schema.examples\n            ? Object.fromEntries(\n                schema.examples.map((v, i) => [i.toString(), v]),\n              )\n            : undefined,\n        });\n      else if (TypeChecker.isReference(schema))\n        union.push({\n          ...schema,\n          $ref: schema.$ref.replace(\"#/definitions/\", \"#/components/schemas/\"),\n          examples: schema.examples\n            ? Object.fromEntries(\n                schema.examples.map((v, i) => [i.toString(), v]),\n              )\n            : undefined,\n        });\n      else\n        union.push({\n          ...schema,\n          examples: schema.examples\n            ? Object.fromEntries(\n                schema.examples.map((v, i) => [i.toString(), v]),\n              )\n            : undefined,\n        });\n    };\n\n    visit(input);\n    if (\n      nullable.value === true &&\n      !union.some((e) => (e as OpenApi.IJsonSchema.INull).type === \"null\")\n    )\n      union.push({\n        type: \"null\",\n        default: nullable.default,\n      });\n    if (\n      union.length === 2 &&\n      union.filter((x) => OpenApiTypeChecker.isNull(x)).length === 1\n    ) {\n      const type: OpenApi.IJsonSchema = union.filter(\n        (x) => OpenApiTypeChecker.isNull(x) === false,\n      )[0];\n      for (const key of [\n        \"title\",\n        \"description\",\n        \"deprecated\",\n        \"example\",\n        \"examples\",\n      ] as const)\n        if (type[key] !== undefined) delete type[key];\n    }\n    return {\n      ...(union.length === 0\n        ? { type: undefined }\n        : union.length === 1\n          ? { ...union[0] }\n          : { oneOf: union.map((u) => ({ ...u, \"x-nullable\": undefined })) }),\n      ...attribute,\n      ...{ \"x-nullable\": undefined },\n    };\n  };\n\n  namespace TypeChecker {\n    export const isBoolean = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IBoolean =>\n      (schema as SwaggerV2.IJsonSchema.IBoolean).type === \"boolean\";\n    export const isInteger = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IInteger =>\n      (schema as SwaggerV2.IJsonSchema.IInteger).type === \"integer\";\n    export const isNumber = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.INumber =>\n      (schema as SwaggerV2.IJsonSchema.INumber).type === \"number\";\n    export const isString = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IString =>\n      (schema as SwaggerV2.IJsonSchema.IString).type === \"string\";\n    export const isArray = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IArray =>\n      (schema as SwaggerV2.IJsonSchema.IArray).type === \"array\";\n    export const isObject = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IObject =>\n      (schema as SwaggerV2.IJsonSchema.IObject).type === \"object\";\n    export const isReference = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IReference =>\n      (schema as SwaggerV2.IJsonSchema.IReference).$ref !== undefined;\n    export const isOneOf = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IOneOf =>\n      (schema as SwaggerV2.IJsonSchema.IOneOf)[\"x-oneOf\"] !== undefined;\n    export const isAnyOf = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.IAnyOf =>\n      (schema as SwaggerV2.IJsonSchema.IAnyOf)[\"x-anyOf\"] !== undefined;\n    export const isNullOnly = (\n      schema: SwaggerV2.IJsonSchema,\n    ): schema is SwaggerV2.IJsonSchema.INullOnly =>\n      (schema as SwaggerV2.IJsonSchema.INullOnly).type === \"null\";\n  }\n}\n"],"names":["SwaggerV2Converter","convert","input","openapi","info","components","convertComponents","paths","Object","fromEntries","entries","filter","_","v","undefined","map","key","value","convertPathItem","servers","host","url","security","tags","doc","pathItem","get","convertOperation","put","post","delete","options","head","patch","trace","parameters","p","TypeChecker","isReference","$ref","split","pop","in","schema","convertParameter","requestBody","found","find","convertRequestBody","responses","convertResponse","name","description","convertSchema","required","content","example","headers","schemas","definitions","securitySchemes","securityDefinitions","convertSecurityScheme","type","scheme","flow","flows","implicit","authorizationUrl","scopes","authorizationCode","tokenUrl","password","clientCredentials","nullable","default","union","attribute","title","startsWith","examples","i","toString","visit","Array","isArray","enum","length","some","e","isAnyOf","forEach","isOneOf","isBoolean","isInteger","isNumber","isString","push","const","items","isObject","properties","additionalProperties","replace","x","OpenApiTypeChecker","isNull","oneOf","u","isNullOnly"],"mappings":"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"}