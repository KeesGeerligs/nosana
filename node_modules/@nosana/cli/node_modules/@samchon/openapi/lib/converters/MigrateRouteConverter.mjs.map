{"version":3,"file":"MigrateRouteConverter.mjs","sources":["../../src/converters/MigrateRouteConverter.ts"],"sourcesContent":["import { OpenApi } from \"../OpenApi\";\nimport { IHttpMigrateRoute } from \"../structures/IHttpMigrateRoute\";\nimport { Escaper } from \"../utils/Escaper\";\nimport { OpenApiTypeChecker } from \"../utils/OpenApiTypeChecker\";\nimport { StringUtil } from \"../utils/StringUtil\";\n\nexport namespace MigrateRouteConverter {\n  export interface IProps {\n    document: OpenApi.IDocument;\n    method: \"head\" | \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\n    path: string;\n    emendedPath: string;\n    operation: OpenApi.IOperation;\n  }\n  export const convert = (props: IProps): IHttpMigrateRoute | string[] => {\n    //----\n    // REQUEST AND RESPONSE BODY\n    //----\n    const body: false | null | IHttpMigrateRoute.IBody = emplaceBodySchema(\n      \"request\",\n    )((schema) =>\n      emplaceReference({\n        document: props.document,\n        name: \"body\",\n        schema,\n      }),\n    )(props.operation.requestBody);\n    const success: false | null | IHttpMigrateRoute.IBody = emplaceBodySchema(\n      \"response\",\n    )((schema) =>\n      emplaceReference({\n        document: props.document,\n        name: \"response\",\n        schema,\n      }),\n    )(\n      props.operation.responses?.[\"201\"] ??\n        props.operation.responses?.[\"200\"] ??\n        props.operation.responses?.default,\n    );\n\n    const failures: string[] = [];\n    if (body === false)\n      failures.push(\n        `supports only \"application/json\", \"application/x-www-form-urlencoded\", \"multipart/form-data\" and \"text/plain\" content type in the request body.`,\n      );\n    if (success === false)\n      failures.push(\n        `supports only \"application/json\", \"application/x-www-form-urlencoded\" and \"text/plain\" content type in the response body.`,\n      );\n\n    //----\n    // HEADERS AND QUERY\n    //---\n    const [headers, query] = [\"header\", \"query\"].map((type) => {\n      // FIND TARGET PARAMETERS\n      const parameters: OpenApi.IOperation.IParameter[] = (\n        props.operation.parameters ?? []\n      ).filter((p) => p.in === type);\n      if (parameters.length === 0) return null;\n\n      // CHECK PARAMETER TYPES -> TO BE OBJECT\n      const objects = parameters\n        .map((p) =>\n          OpenApiTypeChecker.isObject(p.schema)\n            ? p.schema\n            : OpenApiTypeChecker.isReference(p.schema) &&\n                OpenApiTypeChecker.isObject(\n                  props.document.components.schemas?.[\n                    p.schema.$ref.replace(`#/components/schemas/`, ``)\n                  ] ?? {},\n                )\n              ? p.schema\n              : null!,\n        )\n        .filter((s) => !!s);\n      const primitives = parameters.filter(\n        (p) =>\n          OpenApiTypeChecker.isBoolean(p.schema) ||\n          OpenApiTypeChecker.isInteger(p.schema) ||\n          OpenApiTypeChecker.isNumber(p.schema) ||\n          OpenApiTypeChecker.isString(p.schema) ||\n          OpenApiTypeChecker.isArray(p.schema),\n      );\n      const out = (elem: {\n        schema: OpenApi.IJsonSchema;\n        title?: string;\n        description?: string;\n        example?: any;\n        examples?: Record<string, any>;\n      }) =>\n        ({\n          ...elem,\n          name: type,\n          key: type,\n          title: () => elem.title,\n          description: () => elem.description,\n          example: () => elem.example,\n          examples: () => elem.examples,\n        }) satisfies IHttpMigrateRoute.IHeaders;\n\n      if (objects.length === 1 && primitives.length === 0)\n        return out(parameters[0]);\n      else if (objects.length > 1) {\n        failures.push(`${type} typed parameters must be only one object type`);\n        return false;\n      }\n\n      // GATHER TO OBJECT TYPE\n      const dto: OpenApi.IJsonSchema.IObject | null = objects[0]\n        ? OpenApiTypeChecker.isObject(objects[0])\n          ? objects[0]\n          : ((props.document.components.schemas ?? {})[\n              (objects[0] as OpenApi.IJsonSchema.IReference).$ref.replace(\n                `#/components/schemas/`,\n                ``,\n              )\n            ] as OpenApi.IJsonSchema.IObject)\n        : null;\n      const entire: OpenApi.IJsonSchema.IObject[] = [\n        ...objects.map((o) =>\n          OpenApiTypeChecker.isObject(o)\n            ? o\n            : (props.document.components.schemas?.[\n                o.$ref.replace(`#/components/schemas/`, ``)\n              ]! as OpenApi.IJsonSchema.IObject),\n        ),\n        {\n          type: \"object\",\n          properties: Object.fromEntries([\n            ...primitives.map((p) => [\n              p.name,\n              {\n                ...p.schema,\n                description: p.schema.description ?? p.description,\n              },\n            ]),\n            ...(dto ? Object.entries(dto.properties ?? {}) : []),\n          ]),\n          required: [\n            ...primitives.filter((p) => p.required).map((p) => p.name!),\n            ...(dto ? dto.required ?? [] : []),\n          ],\n        },\n      ];\n      return parameters.length === 0\n        ? null\n        : out({\n            schema: emplaceReference({\n              document: props.document,\n              name:\n                StringUtil.pascal(`I/Api/${props.path}`) +\n                \".\" +\n                StringUtil.pascal(`${props.method}/${type}`),\n              schema: {\n                type: \"object\",\n                properties: Object.fromEntries([\n                  ...new Map<string, OpenApi.IJsonSchema>(\n                    entire\n                      .map((o) =>\n                        Object.entries(o.properties ?? {}).map(\n                          ([name, schema]) =>\n                            [\n                              name,\n                              {\n                                ...schema,\n                                description:\n                                  schema.description ?? schema.description,\n                              } as OpenApi.IJsonSchema,\n                            ] as const,\n                        ),\n                      )\n                      .flat(),\n                  ),\n                ]),\n                required: [\n                  ...new Set(entire.map((o) => o.required ?? []).flat()),\n                ],\n              },\n            }),\n          });\n    });\n\n    //----\n    // PATH PARAMETERS\n    //----\n    const parameterNames: string[] = StringUtil.splitWithNormalization(\n      props.emendedPath,\n    )\n      .filter((str) => str[0] === \":\")\n      .map((str) => str.substring(1));\n    const pathParameters: OpenApi.IOperation.IParameter[] = (\n      props.operation.parameters ?? []\n    ).filter((p) => p.in === \"path\");\n    if (parameterNames.length !== pathParameters.length)\n      if (\n        pathParameters.length < parameterNames.length &&\n        pathParameters.every(\n          (p) => p.name !== undefined && parameterNames.includes(p.name),\n        )\n      ) {\n        for (const name of parameterNames)\n          if (pathParameters.find((p) => p.name === name) === undefined)\n            pathParameters.push({\n              name,\n              in: \"path\",\n              schema: { type: \"string\" },\n            });\n        pathParameters.sort(\n          (a, b) =>\n            parameterNames.indexOf(a.name!) - parameterNames.indexOf(b.name!),\n        );\n        props.operation.parameters = [\n          ...pathParameters,\n          ...(props.operation.parameters ?? []).filter((p) => p.in !== \"path\"),\n        ];\n      } else\n        failures.push(\n          \"number of path parameters are not matched with its full path.\",\n        );\n    if (failures.length) return failures;\n\n    const parameters: IHttpMigrateRoute.IParameter[] = (\n      props.operation.parameters ?? []\n    )\n      .filter((p) => p.in === \"path\")\n      .map((p, i) => ({\n        // FILL KEY NAME IF NOT EXISTsS\n        name: parameterNames[i],\n        key: (() => {\n          let key: string = StringUtil.normalize(parameterNames[i]);\n          if (Escaper.variable(key)) return key;\n          while (true) {\n            key = \"_\" + key;\n            if (!parameterNames.some((s) => s === key)) return key;\n          }\n        })(),\n        schema: p.schema,\n        parameter: () => p,\n      }));\n    return {\n      method: props.method,\n      path: props.path,\n      emendedPath: props.emendedPath,\n      accessor: [\"@lazy\"],\n      parameters: (props.operation.parameters ?? [])\n        .filter((p) => p.in === \"path\")\n        .map((p, i) => ({\n          // FILL KEY NAME IF NOT EXISTsS\n          name: parameterNames[i],\n          key: (() => {\n            let key: string = StringUtil.normalize(parameterNames[i]);\n            if (Escaper.variable(key)) return key;\n            while (true) {\n              key = \"_\" + key;\n              if (!parameterNames.some((s) => s === key)) return key;\n            }\n          })(),\n          schema: p.schema,\n          parameter: () => p,\n        })),\n      headers: headers || null,\n      query: query || null,\n      body: body as IHttpMigrateRoute.IBody | null,\n      success: success as IHttpMigrateRoute.IBody | null,\n      exceptions: Object.fromEntries(\n        Object.entries(props.operation.responses ?? {})\n          .filter(\n            ([key]) => key !== \"200\" && key !== \"201\" && key !== \"default\",\n          )\n          .map(([status, response]) => [\n            status,\n            {\n              schema: response.content?.[\"application/json\"]?.schema ?? {},\n              response: () => response,\n              media: () => response.content?.[\"application/json\"] ?? {},\n            },\n          ]),\n      ),\n      comment: () =>\n        writeRouteComment({\n          operation: props.operation,\n          parameters,\n          query: query || null,\n          body: body || null,\n        }),\n      operation: () => props.operation,\n    };\n  };\n\n  const writeRouteComment = (props: {\n    operation: OpenApi.IOperation;\n    parameters: IHttpMigrateRoute.IParameter[];\n    query: IHttpMigrateRoute.IQuery | null;\n    body: IHttpMigrateRoute.IBody | null;\n  }): string => {\n    const commentTags: string[] = [];\n    const add = (text: string) => {\n      if (commentTags.every((line) => line !== text)) commentTags.push(text);\n    };\n\n    let description: string = props.operation.description ?? \"\";\n    if (props.operation.summary) {\n      const emended: string = props.operation.summary.endsWith(\".\")\n        ? props.operation.summary\n        : props.operation.summary + \".\";\n      if (\n        !!description.length &&\n        !description.startsWith(props.operation.summary)\n      )\n        description = `${emended}\\n${description}`;\n    }\n    description = description\n      .split(\"\\n\")\n      .map((s) => s.trim())\n      .join(\"\\n\");\n\n    for (const p of props.parameters ?? []) {\n      const param = p.parameter();\n      if (param.description || param.title) {\n        const text: string = (param.description ?? param.title)!;\n        add(`@param ${p.name} ${writeIndented(text, p.name.length + 8)}`);\n      }\n    }\n    if (props.body?.description()?.length)\n      add(`@param body ${writeIndented(props.body.description()!, 12)}`);\n    for (const security of props.operation.security ?? [])\n      for (const [name, scopes] of Object.entries(security))\n        add(`@security ${[name, ...scopes].join(\"\")}`);\n    if (props.operation.tags)\n      props.operation.tags.forEach((name) => add(`@tag ${name}`));\n    if (props.operation.deprecated) add(\"@deprecated\");\n    description = description.length\n      ? commentTags.length\n        ? `${description}\\n\\n${commentTags.join(\"\\n\")}`\n        : description\n      : commentTags.join(\"\\n\");\n    description = description.split(\"*/\").join(\"*\\\\/\");\n    return description;\n  };\n\n  const writeIndented = (text: string, spaces: number): string =>\n    text\n      .split(\"\\n\")\n      .map((s) => s.trim())\n      .map((s, i) => (i === 0 ? s : `${\" \".repeat(spaces)}${s}`))\n      .join(\"\\n\");\n\n  const emplaceBodySchema =\n    (from: \"request\" | \"response\") =>\n    (\n      emplacer: (schema: OpenApi.IJsonSchema) => OpenApi.IJsonSchema.IReference,\n    ) =>\n    (meta?: {\n      description?: string;\n      content?: Partial<Record<string, OpenApi.IOperation.IMediaType>>; // ISwaggerRouteBodyContent;\n      \"x-nestia-encrypted\"?: boolean;\n    }): false | null | IHttpMigrateRoute.IBody => {\n      if (!meta?.content) return null;\n\n      const entries: [string, OpenApi.IOperation.IMediaType][] = Object.entries(\n        meta.content,\n      ).filter(([_, v]) => !!v) as [string, OpenApi.IOperation.IMediaType][];\n      const json = entries.find((e) =>\n        meta[\"x-nestia-encrypted\"] === true\n          ? e[0].includes(\"text/plain\") || e[0].includes(\"application/json\")\n          : e[0].includes(\"application/json\") || e[0].includes(\"*/*\"),\n      );\n      if (json) {\n        const { schema } = json[1];\n        return schema || from === \"request\"\n          ? {\n              type: \"application/json\",\n              name: \"body\",\n              key: \"body\",\n              schema: schema\n                ? isNotObjectLiteral(schema)\n                  ? schema\n                  : emplacer(schema)\n                : {},\n              description: () => meta.description,\n              media: () => json[1],\n              \"x-nestia-encrypted\": meta[\"x-nestia-encrypted\"],\n            }\n          : null;\n      }\n\n      const query = entries.find((e) =>\n        e[0].includes(\"application/x-www-form-urlencoded\"),\n      );\n      if (query) {\n        const { schema } = query[1];\n        return schema || from === \"request\"\n          ? {\n              type: \"application/x-www-form-urlencoded\",\n              name: \"body\",\n              key: \"body\",\n              schema: schema\n                ? isNotObjectLiteral(schema)\n                  ? schema\n                  : emplacer(schema)\n                : {},\n              description: () => meta.description,\n              media: () => query[1],\n            }\n          : null;\n      }\n\n      const text = entries.find((e) => e[0].includes(\"text/plain\"));\n      if (text)\n        return {\n          type: \"text/plain\",\n          name: \"body\",\n          key: \"body\",\n          schema: { type: \"string\" },\n          description: () => meta.description,\n          media: () => text[1],\n        };\n\n      if (from === \"request\") {\n        const multipart = entries.find((e) =>\n          e[0].includes(\"multipart/form-data\"),\n        );\n        if (multipart) {\n          const { schema } = multipart[1];\n          return {\n            type: \"multipart/form-data\",\n            name: \"body\",\n            key: \"body\",\n            schema: schema\n              ? isNotObjectLiteral(schema)\n                ? schema\n                : emplacer(schema)\n              : {},\n            description: () => meta.description,\n            media: () => multipart[1],\n          };\n        }\n      }\n      return false;\n    };\n\n  const emplaceReference = (props: {\n    document: OpenApi.IDocument;\n    name: string;\n    schema: OpenApi.IJsonSchema;\n  }): OpenApi.IJsonSchema.IReference => {\n    props.document.components.schemas ??= {};\n    props.document.components.schemas[props.name] = props.schema;\n    return { $ref: `#/components/schemas/${props.name}` };\n  };\n\n  const isNotObjectLiteral = (schema: OpenApi.IJsonSchema): boolean =>\n    OpenApiTypeChecker.isReference(schema) ||\n    OpenApiTypeChecker.isBoolean(schema) ||\n    OpenApiTypeChecker.isNumber(schema) ||\n    OpenApiTypeChecker.isString(schema) ||\n    OpenApiTypeChecker.isUnknown(schema) ||\n    (OpenApiTypeChecker.isOneOf(schema) &&\n      schema.oneOf.every(isNotObjectLiteral)) ||\n    (OpenApiTypeChecker.isArray(schema) && isNotObjectLiteral(schema.items));\n}\n"],"names":["MigrateRouteConverter","convert","props","body","emplaceBodySchema","schema","emplaceReference","document","name","operation","requestBody","success","responses","default","failures","push","headers","query","map","type","parameters","filter","p","in","length","objects","OpenApiTypeChecker","isObject","isReference","components","schemas","$ref","replace","s","primitives","isBoolean","isInteger","isNumber","isString","isArray","out","elem","key","title","description","example","examples","dto","entire","o","properties","Object","fromEntries","entries","required","StringUtil","pascal","path","method","Map","flat","Set","parameterNames","splitWithNormalization","emendedPath","str","substring","pathParameters","every","undefined","includes","find","sort","a","b","indexOf","i","normalize","Escaper","variable","some","parameter","accessor","exceptions","status","response","content","media","comment","writeRouteComment","commentTags","add","text","line","summary","emended","endsWith","startsWith","split","trim","join","param","writeIndented","security","scopes","tags","forEach","deprecated","spaces","repeat","from","emplacer","meta","_","v","json","e","isNotObjectLiteral","multipart","_a","isUnknown","isOneOf","oneOf","items"],"mappings":"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"}