{"version":3,"file":"MigrateConverter.mjs","sources":["../../src/converters/MigrateConverter.ts"],"sourcesContent":["import { OpenApi } from \"../OpenApi\";\nimport { IHttpMigrateApplication } from \"../structures/IHttpMigrateApplication\";\nimport { IHttpMigrateRoute } from \"../structures/IHttpMigrateRoute\";\nimport { StringUtil } from \"../utils/StringUtil\";\nimport { MigrateRouteAccessor } from \"./MigrateRouteAccessor\";\nimport { MigrateRouteConverter } from \"./MigrateRouteConverter\";\n\nexport namespace MigrateConverter {\n  export const convert = <\n    Schema extends OpenApi.IJsonSchema,\n    Operation extends OpenApi.IOperation<Schema>,\n  >(\n    document: OpenApi.IDocument<Schema, Operation>,\n  ): IHttpMigrateApplication<Schema, Operation> => {\n    const errors: IHttpMigrateApplication.IError<Operation>[] = [];\n    const entire: Array<IHttpMigrateRoute<Schema, Operation> | null> =\n      Object.entries({\n        ...(document.paths ?? {}),\n        ...(document.webhooks ?? {}),\n      })\n        .map(([path, collection]) =>\n          ([\"head\", \"get\", \"post\", \"put\", \"patch\", \"delete\"] as const)\n            .filter((method) => collection[method] !== undefined)\n            .map((method) => {\n              const operation: Operation = collection[method]!;\n              const migrated: IHttpMigrateRoute<Schema, Operation> | string[] =\n                MigrateRouteConverter.convert({\n                  document,\n                  method,\n                  path,\n                  emendedPath: StringUtil.reJoinWithDecimalParameters(path),\n                  operation,\n                }) as IHttpMigrateRoute<Schema, Operation> | string[];\n              if (Array.isArray(migrated)) {\n                errors.push({\n                  method,\n                  path,\n                  operation: () => operation,\n                  messages: migrated,\n                });\n                return null;\n              }\n              return migrated;\n            }),\n        )\n        .flat();\n    const operations: IHttpMigrateRoute<Schema, Operation>[] = entire.filter(\n      (o): o is IHttpMigrateRoute<Schema, Operation> => !!o,\n    );\n    MigrateRouteAccessor.overwrite(operations);\n    return {\n      document: () => document,\n      routes: operations,\n      errors,\n    };\n  };\n}\n"],"names":["MigrateConverter","convert","document","errors","entire","Object","entries","paths","webhooks","map","path","collection","filter","method","undefined","operation","migrated","MigrateRouteConverter","emendedPath","StringUtil","reJoinWithDecimalParameters","Array","isArray","push","messages","flat","operations","o","MigrateRouteAccessor","overwrite","routes"],"mappings":";;;;;;AAOM,IAAWA;;CAAjB,SAAiBA;IACFA,iBAAAC,UAIXC;QAEA,MAAMC,SAAsD;QAC5D,MAAMC,SACJC,OAAOC,QAAQ;eACTJ,SAASK,SAAS;eAClBL,SAASM,YAAY;WAExBC,KAAI,EAAEC,MAAMC,gBACV,EAAC,QAAQ,OAAO,QAAQ,OAAO,SAAS,WACtCC,QAAQC,UAAWF,WAAWE,YAAYC,YAC1CL,KAAKI;YACJ,MAAME,YAAuBJ,WAAWE;YACxC,MAAMG,WACJC,sBAAsBhB,QAAQ;gBAC5BC;gBACAW;gBACAH;gBACAQ,aAAaC,WAAWC,4BAA4BV;gBACpDK;;YAEJ,IAAIM,MAAMC,QAAQN,WAAW;gBAC3Bb,OAAOoB,KAAK;oBACVV;oBACAH;oBACAK,WAAW,MAAMA;oBACjBS,UAAUR;;gBAEZ,OAAO;AACR;YACD,OAAOA;AAAQ,cAGpBS;QACL,MAAMC,aAAqDtB,OAAOQ,QAC/De,OAAmDA;QAEtDC,qBAAqBC,UAAUH;QAC/B,OAAO;YACLxB,UAAU,MAAMA;YAChB4B,QAAQJ;YACRvB;;AACD;AAEJ,EAjDD,CAAiBH,qBAAAA,mBAiDhB,CAAA;;"}