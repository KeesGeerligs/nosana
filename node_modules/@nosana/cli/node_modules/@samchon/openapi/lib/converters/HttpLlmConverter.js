"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpLlmConverter = void 0;
var LlmSchemaSeparator_1 = require("../utils/LlmSchemaSeparator");
var LlmTypeChecker_1 = require("../utils/LlmTypeChecker");
var OpenApiTypeChecker_1 = require("../utils/OpenApiTypeChecker");
var OpenApiV3Downgrader_1 = require("./OpenApiV3Downgrader");
var HttpLlmConverter;
(function (HttpLlmConverter) {
    HttpLlmConverter.compose = function (migrate, options) {
        // COMPOSE FUNCTIONS
        var errors = migrate.errors.map(function (e) { return ({
            method: e.method,
            path: e.path,
            messages: e.messages,
            operation: function () { return e.operation(); },
            route: function () { return undefined; },
        }); });
        var functions = migrate.routes
            .map(function (route) {
            if (route.method === "head")
                return null;
            var func = composeFunction(options)(migrate.document().components)(route);
            if (func === null)
                errors.push({
                    method: route.method,
                    path: route.path,
                    messages: ["Failed to escape $ref"],
                    operation: function () { return route.operation(); },
                    route: function () { return route; },
                });
            return func;
        })
            .filter(function (v) { return v !== null; });
        return {
            openapi: "3.0.3",
            functions: functions,
            errors: errors,
            options: options,
        };
    };
    HttpLlmConverter.schema = function (props) {
        var resolved = escape({
            components: props.components,
            visited: new Set(),
            input: props.schema,
        });
        if (resolved === null)
            return null;
        var downgraded = OpenApiV3Downgrader_1.OpenApiV3Downgrader.downgradeSchema({
            original: {},
            downgraded: {},
        })(resolved);
        LlmTypeChecker_1.LlmTypeChecker.visit(downgraded, function (schema) {
            if (LlmTypeChecker_1.LlmTypeChecker.isOneOf(schema) &&
                schema.discriminator !== undefined)
                delete schema.discriminator;
        });
        return downgraded;
    };
})(HttpLlmConverter || (exports.HttpLlmConverter = HttpLlmConverter = {}));
var composeFunction = function (options) {
    return function (components) {
        return function (route) {
            var _a, _b, _c;
            // CAST SCHEMA TYPES
            var cast = function (s) {
                return HttpLlmConverter.schema({
                    components: components,
                    schema: s,
                });
            };
            var output = route.success && route.success ? cast(route.success.schema) : undefined;
            if (output === null)
                return null;
            var properties = __spreadArray(__spreadArray(__spreadArray([], __read(route.parameters.map(function (p) {
                var _a, _b;
                return ({
                    key: p.key,
                    schema: __assign(__assign({}, p.schema), { title: (_a = p.parameter().title) !== null && _a !== void 0 ? _a : p.schema.title, description: (_b = p.parameter().description) !== null && _b !== void 0 ? _b : p.schema.description }),
                });
            })), false), __read((route.query
                ? [
                    {
                        key: route.query.key,
                        schema: __assign(__assign({}, route.query.schema), { title: (_a = route.query.title()) !== null && _a !== void 0 ? _a : route.query.schema.title, description: (_b = route.query.description()) !== null && _b !== void 0 ? _b : route.query.schema.description }),
                    },
                ]
                : [])), false), __read((route.body
                ? [
                    {
                        key: route.body.key,
                        schema: __assign(__assign({}, route.body.schema), { description: (_c = route.body.description()) !== null && _c !== void 0 ? _c : route.body.schema.description }),
                    },
                ]
                : [])), false).map(function (o) { return [o.key, cast(o.schema)]; });
            if (properties.some(function (_a) {
                var _b = __read(_a, 2), _k = _b[0], v = _b[1];
                return v === null;
            }))
                return null;
            // COMPOSE PARAMETERS
            var parameters = options.keyword
                ? [
                    {
                        type: "object",
                        properties: Object.fromEntries(properties),
                    },
                ]
                : properties.map(function (_a) {
                    var _b = __read(_a, 2), _k = _b[0], v = _b[1];
                    return v;
                });
            var operation = route.operation();
            // FINALIZATION
            return {
                method: route.method,
                path: route.path,
                name: route.accessor.join("_"),
                strict: true,
                parameters: parameters,
                separated: options.separate
                    ? LlmSchemaSeparator_1.LlmSchemaSeparator.parameters({
                        parameters: parameters,
                        predicator: options.separate,
                    })
                    : undefined,
                output: output
                    ? OpenApiV3Downgrader_1.OpenApiV3Downgrader.downgradeSchema({
                        original: {},
                        downgraded: {},
                    })(output)
                    : undefined,
                description: (function () {
                    var _a;
                    if (operation.summary && operation.description) {
                        return operation.description.startsWith(operation.summary)
                            ? operation.description
                            : [
                                operation.summary,
                                operation.summary.endsWith(".") ? "" : ".",
                                "\n\n",
                                operation.description,
                            ].join("");
                    }
                    return (_a = operation.description) !== null && _a !== void 0 ? _a : operation.summary;
                })(),
                deprecated: operation.deprecated,
                tags: operation.tags,
                route: function () { return route; },
                operation: function () { return operation; },
            };
        };
    };
};
var escape = function (props) {
    var _a;
    if (OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(props.input)) {
        // REFERENCE
        var name_1 = props.input.$ref.split("#/components/schemas/")[1];
        var target = (_a = props.components.schemas) === null || _a === void 0 ? void 0 : _a[name_1];
        if (!target)
            return null;
        else if (props.visited.has(name_1))
            return null;
        return escape({
            components: props.components,
            visited: new Set(__spreadArray(__spreadArray([], __read(props.visited), false), [name_1], false)),
            input: target,
        });
    }
    else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(props.input)) {
        // ONE-OF
        var oneOf = props.input.oneOf.map(function (schema) {
            return escape(__assign(__assign({}, props), { input: schema }));
        });
        if (oneOf.some(function (v) { return v === null; }))
            return null;
        return __assign(__assign({}, props.input), { oneOf: flat(oneOf) });
    }
    else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(props.input)) {
        // OBJECT
        var properties = props.input.properties
            ? Object.entries(props.input.properties).map(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return [
                    key,
                    escape(__assign(__assign({}, props), { input: value })),
                ];
            })
            : undefined;
        var additionalProperties = props.input.additionalProperties
            ? typeof props.input.additionalProperties === "object" &&
                props.input.additionalProperties !== null
                ? escape(__assign(__assign({}, props), { input: props.input.additionalProperties }))
                : props.input.additionalProperties
            : undefined;
        if (properties && properties.some(function (_a) {
            var _b = __read(_a, 2), _k = _b[0], v = _b[1];
            return v === null;
        }))
            return null;
        else if (additionalProperties === null)
            return null;
        return __assign(__assign({}, props.input), { properties: properties
                ? Object.fromEntries(properties.filter(function (_a) {
                    var _b = __read(_a, 2), _k = _b[0], v = _b[1];
                    return !!v;
                }))
                : undefined, additionalProperties: additionalProperties });
    }
    else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isTuple(props.input)) {
        // TUPLE
        var prefixItems = props.input.prefixItems.map(function (schema) {
            return escape(__assign(__assign({}, props), { input: schema }));
        });
        var additionalItems = typeof props.input.additionalItems === "object" &&
            props.input.additionalItems !== null
            ? escape(__assign(__assign({}, props), { input: props.input.additionalItems }))
            : props.input.additionalItems;
        if (prefixItems.some(function (v) { return v === null; }))
            return null;
        else if (additionalItems === null)
            return null;
        return __assign(__assign({}, props.input), { prefixItems: prefixItems, additionalItems: additionalItems });
    }
    else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isArray(props.input)) {
        // ARRAY
        var items = escape(__assign(__assign({}, props), { input: props.input.items }));
        if (items === null)
            return null;
        return __assign(__assign({}, props.input), { items: items });
    }
    return props.input;
};
var flat = function (elements) {
    return elements
        .map(function (elem) { return (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(elem) ? flat(elem.oneOf) : elem); })
        .flat();
};
