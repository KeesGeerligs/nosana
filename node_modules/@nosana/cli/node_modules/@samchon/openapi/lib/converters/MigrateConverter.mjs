import { StringUtil } from "../utils/StringUtil.mjs";

import { MigrateRouteAccessor } from "./MigrateRouteAccessor.mjs";

import { MigrateRouteConverter } from "./MigrateRouteConverter.mjs";

var MigrateConverter;

(function(MigrateConverter) {
    MigrateConverter.convert = document => {
        const errors = [];
        const entire = Object.entries({
            ...document.paths ?? {},
            ...document.webhooks ?? {}
        }).map((([path, collection]) => [ "head", "get", "post", "put", "patch", "delete" ].filter((method => collection[method] !== undefined)).map((method => {
            const operation = collection[method];
            const migrated = MigrateRouteConverter.convert({
                document,
                method,
                path,
                emendedPath: StringUtil.reJoinWithDecimalParameters(path),
                operation
            });
            if (Array.isArray(migrated)) {
                errors.push({
                    method,
                    path,
                    operation: () => operation,
                    messages: migrated
                });
                return null;
            }
            return migrated;
        })))).flat();
        const operations = entire.filter((o => !!o));
        MigrateRouteAccessor.overwrite(operations);
        return {
            document: () => document,
            routes: operations,
            errors
        };
    };
})(MigrateConverter || (MigrateConverter = {}));

export { MigrateConverter };
//# sourceMappingURL=MigrateConverter.mjs.map
