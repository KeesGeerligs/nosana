{"version":3,"file":"LlmSchemaSeparator.mjs","sources":["../../src/utils/LlmSchemaSeparator.ts"],"sourcesContent":["import { IHttpLlmFunction } from \"../structures/IHttpLlmFunction\";\nimport { ILlmSchema } from \"../structures/ILlmSchema\";\nimport { LlmTypeChecker } from \"./LlmTypeChecker\";\n\nexport namespace LlmSchemaSeparator {\n  export interface IProps {\n    parameters: ILlmSchema[];\n    predicator: (schema: ILlmSchema) => boolean;\n  }\n  export const parameters = (props: IProps): IHttpLlmFunction.ISeparated => {\n    const indexes: Array<[ILlmSchema | null, ILlmSchema | null]> =\n      props.parameters.map(schema(props.predicator));\n    return {\n      llm: indexes\n        .map(([llm], index) => ({\n          index,\n          schema: llm!,\n        }))\n        .filter(({ schema }) => schema !== null),\n      human: indexes\n        .map(([, human], index) => ({\n          index,\n          schema: human!,\n        }))\n        .filter(({ schema }) => schema !== null),\n    };\n  };\n\n  export const schema =\n    (predicator: (schema: ILlmSchema) => boolean) =>\n    (input: ILlmSchema): [ILlmSchema | null, ILlmSchema | null] => {\n      if (predicator(input) === true) return [null, input];\n      else if (LlmTypeChecker.isUnknown(input) || LlmTypeChecker.isOneOf(input))\n        return [input, null];\n      else if (LlmTypeChecker.isObject(input))\n        return separateObject(predicator)(input);\n      else if (LlmTypeChecker.isArray(input))\n        return separateArray(predicator)(input);\n      return [input, null];\n    };\n\n  const separateArray =\n    (predicator: (schema: ILlmSchema) => boolean) =>\n    (\n      input: ILlmSchema.IArray,\n    ): [ILlmSchema.IArray | null, ILlmSchema.IArray | null] => {\n      const [x, y] = schema(predicator)(input.items);\n      return [\n        x !== null ? { ...input, items: x } : null,\n        y !== null ? { ...input, items: y } : null,\n      ];\n    };\n\n  const separateObject =\n    (predicator: (schema: ILlmSchema) => boolean) =>\n    (\n      input: ILlmSchema.IObject,\n    ): [ILlmSchema.IObject | null, ILlmSchema.IObject | null] => {\n      if (\n        !!input.additionalProperties ||\n        Object.keys(input.properties ?? {}).length === 0\n      )\n        return [input, null];\n      const llm = {\n        ...input,\n        properties: {} as Record<string, ILlmSchema>,\n      } satisfies ILlmSchema.IObject;\n      const human = {\n        ...input,\n        properties: {} as Record<string, ILlmSchema>,\n      } satisfies ILlmSchema.IObject;\n      for (const [key, value] of Object.entries(input.properties ?? {})) {\n        const [x, y] = schema(predicator)(value);\n        if (x !== null) llm.properties[key] = x;\n        if (y !== null) human.properties[key] = y;\n      }\n      return [\n        Object.keys(llm.properties).length === 0 ? null : shrinkRequired(llm),\n        Object.keys(human.properties).length === 0\n          ? null\n          : shrinkRequired(human),\n      ];\n    };\n\n  const shrinkRequired = (input: ILlmSchema.IObject): ILlmSchema.IObject => {\n    if (input.required !== undefined)\n      input.required = input.required.filter(\n        (key) => input.properties?.[key] !== undefined,\n      );\n    return input;\n  };\n}\n"],"names":["LlmSchemaSeparator","parameters","props","indexes","map","schema","predicator","llm","index","filter","human","input","LlmTypeChecker","isUnknown","isOneOf","isObject","separateObject","isArray","separateArray","x","y","items","additionalProperties","Object","keys","properties","length","key","value","entries","shrinkRequired","required","undefined"],"mappings":";;AAIM,IAAWA;;CAAjB,SAAiBA;IAKFA,mBAAAC,aAAcC;QACzB,MAAMC,UACJD,MAAMD,WAAWG,IAAIJ,mBAAAK,OAAOH,MAAMI;QACpC,OAAO;YACLC,KAAKJ,QACFC,KAAI,EAAEG,MAAMC,WAAW;gBACtBA;gBACAH,QAAQE;iBAETE,QAAO,EAAGJ,YAAaA,WAAW;YACrCK,OAAOP,QACJC,KAAI,EAAC,EAAGM,QAAQF,WAAW;gBAC1BA;gBACAH,QAAQK;iBAETD,QAAO,EAAGJ,YAAaA,WAAW;;AACtC;IAGUL,mBAAMK,SAChBC,cACAK;QACC,IAAIL,WAAWK,WAAW,MAAM,OAAO,EAAC,MAAMA,cACzC,IAAIC,eAAeC,UAAUF,UAAUC,eAAeE,QAAQH,QACjE,OAAO,EAACA,OAAO,aACZ,IAAIC,eAAeG,SAASJ,QAC/B,OAAOK,eAAeV,WAAfU,CAA2BL,aAC/B,IAAIC,eAAeK,QAAQN,QAC9B,OAAOO,cAAcZ,WAAdY,CAA0BP;QACnC,OAAO,EAACA,OAAO;AAAK;IAGxB,MAAMO,gBACHZ,cAECK;QAEA,OAAOQ,GAAGC,KAAKpB,mBAAAK,OAAOC,WAAPN,CAAmBW,MAAMU;QACxC,OAAO,EACLF,MAAM,OAAO;eAAKR;YAAOU,OAAOF;YAAM,MACtCC,MAAM,OAAO;eAAKT;YAAOU,OAAOD;YAAM;AACvC;IAGL,MAAMJ,iBACHV,cAECK;QAEA,MACIA,MAAMW,wBACRC,OAAOC,KAAKb,MAAMc,cAAc,CAAE,GAAEC,WAAW,GAE/C,OAAO,EAACf,OAAO;QACjB,MAAMJ,MAAM;eACPI;YACHc,YAAY,CAAgC;;QAE9C,MAAMf,QAAQ;eACTC;YACHc,YAAY,CAAgC;;QAE9C,KAAK,OAAOE,KAAKC,UAAUL,OAAOM,QAAQlB,MAAMc,cAAc,CAAA,IAAK;YACjE,OAAON,GAAGC,KAAKpB,mBAAAK,OAAOC,WAAPN,CAAmB4B;YAClC,IAAIT,MAAM,MAAMZ,IAAIkB,WAAWE,OAAOR;YACtC,IAAIC,MAAM,MAAMV,MAAMe,WAAWE,OAAOP;AACzC;QACD,OAAO,EACLG,OAAOC,KAAKjB,IAAIkB,YAAYC,WAAW,IAAI,OAAOI,eAAevB,MACjEgB,OAAOC,KAAKd,MAAMe,YAAYC,WAAW,IACrC,OACAI,eAAepB;AACpB;IAGL,MAAMoB,iBAAkBnB;QACtB,IAAIA,MAAMoB,aAAaC,WACrBrB,MAAMoB,WAAWpB,MAAMoB,SAAStB,QAC7BkB,OAAQhB,MAAMc,aAAaE,SAASK;QAEzC,OAAOrB;AAAK;AAEf,EAvFD,CAAiBX,uBAAAA,qBAuFhB,CAAA;;"}