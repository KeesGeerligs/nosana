import { ILlmSchema } from "../structures/ILlmSchema";
/**
 * Type checker for LLM type schema.
 *
 * `LlmSchemaTypeChecker` is a type checker of {@link ILlmSchema}.
 *
 * @author Samchon
 */
export declare namespace LlmTypeChecker {
    /**
     * Visit every nested schemas.
     *
     * Visit every nested schemas of the target, and apply the callback function
     * to them.
     *
     * If the visitor meets an union type, it will visit every individual schemas
     * in the union type. Otherwise meets an object type, it will visit every
     * properties and additional properties. If the visitor meets an array type,
     * it will visit the item type.
     *
     * @param schema Target schema to visit
     * @param callback Callback function to apply
     */
    const visit: (schema: ILlmSchema, callback: (schema: ILlmSchema) => void) => void;
    /**
     * Test whether the schema is an union type.
     *
     * @param schema Target schema
     * @returns Whether union type or not
     */
    const isOneOf: (schema: ILlmSchema) => schema is ILlmSchema.IOneOf;
    /**
     * Test whether the schema is an object type.
     *
     * @param schema Target schema
     * @returns Whether object type or not
     */
    const isObject: (schema: ILlmSchema) => schema is ILlmSchema.IObject;
    /**
     * Test whether the schema is an array type.
     *
     * @param schema Target schema
     * @returns Whether array type or not
     */
    const isArray: (schema: ILlmSchema) => schema is ILlmSchema.IArray;
    /**
     * Test whether the schema is a boolean type.
     *
     * @param schema Target schema
     * @returns Whether boolean type or not
     */
    const isBoolean: (schema: ILlmSchema) => schema is ILlmSchema.IBoolean;
    /**
     * Test whether the schema is an integer type.
     *
     * @param schema Target schema
     * @returns Whether integer type or not
     */
    const isInteger: (schema: ILlmSchema) => schema is ILlmSchema.IInteger;
    /**
     * Test whether the schema is a number type.
     *
     * @param schema Target schema
     * @returns Whether number type or not
     */
    const isNumber: (schema: ILlmSchema) => schema is ILlmSchema.INumber;
    /**
     * Test whether the schema is a string type.
     *
     * @param schema Target schema
     * @returns Whether string type or not
     */
    const isString: (schema: ILlmSchema) => schema is ILlmSchema.IString;
    /**
     * Test whether the schema is a null type.
     *
     * @param schema Target schema
     * @returns Whether null type or not
     */
    const isNullOnly: (schema: ILlmSchema) => schema is ILlmSchema.INullOnly;
    /**
     * Test whether the schema is a nullable type.
     *
     * @param schema Target schema
     * @returns Whether nullable type or not
     */
    const isNullable: (schema: ILlmSchema) => boolean;
    /**
     * Test whether the schema is an unknown type.
     *
     * @param schema Target schema
     * @returns Whether unknown type or not
     */
    const isUnknown: (schema: ILlmSchema) => schema is ILlmSchema.IUnknown;
}
