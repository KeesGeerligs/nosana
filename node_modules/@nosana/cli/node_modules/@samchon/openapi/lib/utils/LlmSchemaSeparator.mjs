import { LlmTypeChecker } from "./LlmTypeChecker.mjs";

var LlmSchemaSeparator;

(function(LlmSchemaSeparator) {
    LlmSchemaSeparator.parameters = props => {
        const indexes = props.parameters.map(LlmSchemaSeparator.schema(props.predicator));
        return {
            llm: indexes.map((([llm], index) => ({
                index,
                schema: llm
            }))).filter((({schema}) => schema !== null)),
            human: indexes.map((([, human], index) => ({
                index,
                schema: human
            }))).filter((({schema}) => schema !== null))
        };
    };
    LlmSchemaSeparator.schema = predicator => input => {
        if (predicator(input) === true) return [ null, input ]; else if (LlmTypeChecker.isUnknown(input) || LlmTypeChecker.isOneOf(input)) return [ input, null ]; else if (LlmTypeChecker.isObject(input)) return separateObject(predicator)(input); else if (LlmTypeChecker.isArray(input)) return separateArray(predicator)(input);
        return [ input, null ];
    };
    const separateArray = predicator => input => {
        const [x, y] = LlmSchemaSeparator.schema(predicator)(input.items);
        return [ x !== null ? {
            ...input,
            items: x
        } : null, y !== null ? {
            ...input,
            items: y
        } : null ];
    };
    const separateObject = predicator => input => {
        if (!!input.additionalProperties || Object.keys(input.properties ?? {}).length === 0) return [ input, null ];
        const llm = {
            ...input,
            properties: {}
        };
        const human = {
            ...input,
            properties: {}
        };
        for (const [key, value] of Object.entries(input.properties ?? {})) {
            const [x, y] = LlmSchemaSeparator.schema(predicator)(value);
            if (x !== null) llm.properties[key] = x;
            if (y !== null) human.properties[key] = y;
        }
        return [ Object.keys(llm.properties).length === 0 ? null : shrinkRequired(llm), Object.keys(human.properties).length === 0 ? null : shrinkRequired(human) ];
    };
    const shrinkRequired = input => {
        if (input.required !== undefined) input.required = input.required.filter((key => input.properties?.[key] !== undefined));
        return input;
    };
})(LlmSchemaSeparator || (LlmSchemaSeparator = {}));

export { LlmSchemaSeparator };
//# sourceMappingURL=LlmSchemaSeparator.mjs.map
