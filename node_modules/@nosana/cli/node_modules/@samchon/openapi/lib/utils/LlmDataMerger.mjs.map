{"version":3,"file":"LlmDataMerger.mjs","sources":["../../src/utils/LlmDataMerger.ts"],"sourcesContent":["import { IHttpLlmFunction } from \"../structures/IHttpLlmFunction\";\nimport { ILlmFunction } from \"../structures/ILlmFunction\";\n\n/**\n * Data combiner for LLM function call.\n *\n * @author Samchon\n */\nexport namespace LlmDataMerger {\n  /**\n   * Properties of {@link parameters} function.\n   */\n  export interface IProps {\n    /**\n     * Target function to call.\n     */\n    function: ILlmFunction;\n\n    /**\n     * Arguments composed by LLM (Large Language Model).\n     */\n    llm: any[];\n\n    /**\n     * Arguments composed by human.\n     */\n    human: any[];\n  }\n\n  /**\n   * Combine LLM and human arguments into one.\n   *\n   * When you composes {@link IOpenAiDocument} with\n   * {@link IOpenAiDocument.IOptions.separate} option, then the arguments of the\n   * target function would be separated into two parts; LLM (Large Language Model)\n   * and human.\n   *\n   * In that case, you can combine both LLM and human composed arguments into one\n   * by utilizing this {@link LlmDataMerger.parameters} function, referencing\n   * the target function metadata {@link IOpenAiFunction.separated}.\n   *\n   * @param props Properties to combine LLM and human arguments with metadata.\n   * @returns Combined arguments\n   */\n  export const parameters = (props: IProps): unknown[] => {\n    const separated: IHttpLlmFunction.ISeparated | undefined =\n      props.function.separated;\n    if (separated === undefined)\n      throw new Error(\n        \"Error on OpenAiDataComposer.parameters(): the function parameters are not separated.\",\n      );\n    return new Array(props.function.parameters.length).fill(0).map((_, i) => {\n      const llm: number = separated.llm.findIndex((p) => p.index === i);\n      const human: number = separated.human.findIndex((p) => p.index === i);\n      if (llm === -1 && human === -1)\n        throw new Error(\n          \"Error on OpenAiDataComposer.parameters(): failed to gather separated arguments, because both LLM and human sides are all empty.\",\n        );\n      return value(props.llm[llm], props.human[human]);\n    });\n  };\n\n  /**\n   * Combine two values into one.\n   *\n   * If both values are objects, then combines them in the properties level.\n   *\n   * Otherwise, returns the latter value if it's not null, otherwise the former value\n   *\n   * - `return (y ?? x)`\n   *\n   * @param x Value X\n   * @param y Value Y\n   * @returns Combined value\n   */\n  export const value = (x: unknown, y: unknown): unknown =>\n    typeof x === \"object\" && typeof y === \"object\" && x !== null && y !== null\n      ? combineObject(x, y)\n      : Array.isArray(x) && Array.isArray(y)\n        ? new Array(Math.max(x.length, y.length))\n            .fill(0)\n            .map((_, i) => value(x[i], y[i]))\n        : y ?? x;\n\n  const combineObject = (x: any, y: any): any => {\n    const output: any = { ...x };\n    for (const [k, v] of Object.entries(y)) output[k] = value(x[k], v);\n    return output;\n  };\n}\n"],"names":["LlmDataMerger","parameters","props","separated","function","undefined","Error","Array","length","fill","map","_","i","llm","findIndex","p","index","human","value","x","y","combineObject","isArray","Math","max","output","k","v","Object","entries"],"mappings":"AAQM,IAAWA;;CAAjB,SAAiBA;IAoCFA,cAAAC,aAAcC;QACzB,MAAMC,YACJD,MAAME,SAASD;QACjB,IAAIA,cAAcE,WAChB,MAAM,IAAIC,MACR;QAEJ,OAAO,IAAIC,MAAML,MAAME,SAASH,WAAWO,QAAQC,KAAK,GAAGC,KAAI,CAACC,GAAGC;YACjE,MAAMC,MAAcV,UAAUU,IAAIC,WAAWC,KAAMA,EAAEC,UAAUJ;YAC/D,MAAMK,QAAgBd,UAAUc,MAAMH,WAAWC,KAAMA,EAAEC,UAAUJ;YACnE,IAAIC,SAAS,KAAKI,WAAW,GAC3B,MAAM,IAAIX,MACR;YAEJ,OAAON,cAAAkB,MAAMhB,MAAMW,IAAIA,MAAMX,MAAMe,MAAMA;AAAO;AAChD;IAgBSjB,cAAKkB,QAAG,CAACC,GAAYC,aACzBD,MAAM,mBAAmBC,MAAM,YAAYD,MAAM,QAAQC,MAAM,OAClEC,cAAcF,GAAGC,KACjBb,MAAMe,QAAQH,MAAMZ,MAAMe,QAAQF,KAChC,IAAIb,MAAMgB,KAAKC,IAAIL,EAAEX,QAAQY,EAAEZ,SAC5BC,KAAK,GACLC,KAAI,CAACC,GAAGC,MAAMZ,cAAAkB,MAAMC,EAAEP,IAAIQ,EAAER,QAC/BQ,KAAKD;IAEb,MAAME,gBAAgB,CAACF,GAAQC;QAC7B,MAAMK,SAAc;eAAKN;;QACzB,KAAK,OAAOO,GAAGC,MAAMC,OAAOC,QAAQT,IAAIK,OAAOC,KAAK1B,cAAAkB,MAAMC,EAAEO,IAAIC;QAChE,OAAOF;AAAM;AAEhB,EAjFD,CAAiBzB,kBAAAA,gBAiFhB,CAAA;;"}