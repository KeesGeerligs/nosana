var LlmTypeChecker;

(function(LlmTypeChecker) {
    LlmTypeChecker.visit = (schema, callback) => {
        callback(schema);
        if (LlmTypeChecker.isOneOf(schema)) schema.oneOf.forEach((s => LlmTypeChecker.visit(s, callback))); else if (LlmTypeChecker.isObject(schema)) {
            for (const [_, s] of Object.entries(schema.properties ?? {})) LlmTypeChecker.visit(s, callback);
            if (typeof schema.additionalProperties === "object" && schema.additionalProperties !== null) LlmTypeChecker.visit(schema.additionalProperties, callback);
        } else if (LlmTypeChecker.isArray(schema)) LlmTypeChecker.visit(schema.items, callback);
    };
    LlmTypeChecker.isOneOf = schema => schema.oneOf !== undefined;
    LlmTypeChecker.isObject = schema => schema.type === "object";
    LlmTypeChecker.isArray = schema => schema.type === "array";
    LlmTypeChecker.isBoolean = schema => schema.type === "boolean";
    LlmTypeChecker.isInteger = schema => schema.type === "integer";
    LlmTypeChecker.isNumber = schema => schema.type === "number";
    LlmTypeChecker.isString = schema => schema.type === "string";
    LlmTypeChecker.isNullOnly = schema => schema.type === "null";
    LlmTypeChecker.isNullable = schema => !LlmTypeChecker.isUnknown(schema) && (LlmTypeChecker.isNullOnly(schema) || (LlmTypeChecker.isOneOf(schema) ? schema.oneOf.some(LlmTypeChecker.isNullable) : schema.nullable === true));
    LlmTypeChecker.isUnknown = schema => !LlmTypeChecker.isOneOf(schema) && schema.type === undefined;
})(LlmTypeChecker || (LlmTypeChecker = {}));

export { LlmTypeChecker };
//# sourceMappingURL=LlmTypeChecker.mjs.map
