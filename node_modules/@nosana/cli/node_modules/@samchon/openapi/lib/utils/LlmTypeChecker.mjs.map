{"version":3,"file":"LlmTypeChecker.mjs","sources":["../../src/utils/LlmTypeChecker.ts"],"sourcesContent":["import { ILlmSchema } from \"../structures/ILlmSchema\";\n\n/**\n * Type checker for LLM type schema.\n *\n * `LlmSchemaTypeChecker` is a type checker of {@link ILlmSchema}.\n *\n * @author Samchon\n */\nexport namespace LlmTypeChecker {\n  /**\n   * Visit every nested schemas.\n   *\n   * Visit every nested schemas of the target, and apply the callback function\n   * to them.\n   *\n   * If the visitor meets an union type, it will visit every individual schemas\n   * in the union type. Otherwise meets an object type, it will visit every\n   * properties and additional properties. If the visitor meets an array type,\n   * it will visit the item type.\n   *\n   * @param schema Target schema to visit\n   * @param callback Callback function to apply\n   */\n  export const visit = (\n    schema: ILlmSchema,\n    callback: (schema: ILlmSchema) => void,\n  ): void => {\n    callback(schema);\n    if (isOneOf(schema)) schema.oneOf.forEach((s) => visit(s, callback));\n    else if (isObject(schema)) {\n      for (const [_, s] of Object.entries(schema.properties ?? {}))\n        visit(s, callback);\n      if (\n        typeof schema.additionalProperties === \"object\" &&\n        schema.additionalProperties !== null\n      )\n        visit(schema.additionalProperties, callback);\n    } else if (isArray(schema)) visit(schema.items, callback);\n  };\n\n  /**\n   * Test whether the schema is an union type.\n   *\n   * @param schema Target schema\n   * @returns Whether union type or not\n   */\n  export const isOneOf = (schema: ILlmSchema): schema is ILlmSchema.IOneOf =>\n    (schema as ILlmSchema.IOneOf).oneOf !== undefined;\n\n  /**\n   * Test whether the schema is an object type.\n   *\n   * @param schema Target schema\n   * @returns Whether object type or not\n   */\n  export const isObject = (schema: ILlmSchema): schema is ILlmSchema.IObject =>\n    (schema as ILlmSchema.IObject).type === \"object\";\n\n  /**\n   * Test whether the schema is an array type.\n   *\n   * @param schema Target schema\n   * @returns Whether array type or not\n   */\n  export const isArray = (schema: ILlmSchema): schema is ILlmSchema.IArray =>\n    (schema as ILlmSchema.IArray).type === \"array\";\n\n  /**\n   * Test whether the schema is a boolean type.\n   *\n   * @param schema Target schema\n   * @returns Whether boolean type or not\n   */\n  export const isBoolean = (\n    schema: ILlmSchema,\n  ): schema is ILlmSchema.IBoolean =>\n    (schema as ILlmSchema.IBoolean).type === \"boolean\";\n\n  /**\n   * Test whether the schema is an integer type.\n   *\n   * @param schema Target schema\n   * @returns Whether integer type or not\n   */\n  export const isInteger = (\n    schema: ILlmSchema,\n  ): schema is ILlmSchema.IInteger =>\n    (schema as ILlmSchema.IInteger).type === \"integer\";\n\n  /**\n   * Test whether the schema is a number type.\n   *\n   * @param schema Target schema\n   * @returns Whether number type or not\n   */\n  export const isNumber = (schema: ILlmSchema): schema is ILlmSchema.INumber =>\n    (schema as ILlmSchema.INumber).type === \"number\";\n\n  /**\n   * Test whether the schema is a string type.\n   *\n   * @param schema Target schema\n   * @returns Whether string type or not\n   */\n  export const isString = (schema: ILlmSchema): schema is ILlmSchema.IString =>\n    (schema as ILlmSchema.IString).type === \"string\";\n\n  /**\n   * Test whether the schema is a null type.\n   *\n   * @param schema Target schema\n   * @returns Whether null type or not\n   */\n  export const isNullOnly = (\n    schema: ILlmSchema,\n  ): schema is ILlmSchema.INullOnly =>\n    (schema as ILlmSchema.INullOnly).type === \"null\";\n\n  /**\n   * Test whether the schema is a nullable type.\n   *\n   * @param schema Target schema\n   * @returns Whether nullable type or not\n   */\n  export const isNullable = (schema: ILlmSchema): boolean =>\n    !isUnknown(schema) &&\n    (isNullOnly(schema) ||\n      (isOneOf(schema)\n        ? schema.oneOf.some(isNullable)\n        : schema.nullable === true));\n\n  /**\n   * Test whether the schema is an unknown type.\n   *\n   * @param schema Target schema\n   * @returns Whether unknown type or not\n   */\n  export const isUnknown = (\n    schema: ILlmSchema,\n  ): schema is ILlmSchema.IUnknown =>\n    !isOneOf(schema) && (schema as ILlmSchema.IUnknown).type === undefined;\n}\n"],"names":["LlmTypeChecker","visit","schema","callback","isOneOf","oneOf","forEach","s","isObject","_","Object","entries","properties","additionalProperties","isArray","items","undefined","type","isBoolean","isInteger","isNumber","isString","isNullOnly","isNullable","isUnknown","some","nullable"],"mappings":"AASM,IAAWA;;CAAjB,SAAiBA;IAeFA,eAAAC,QAAQ,CACnBC,QACAC;QAEAA,SAASD;QACT,IAAIF,eAAAI,QAAQF,SAASA,OAAOG,MAAMC,SAASC,KAAMP,eAAAC,MAAMM,GAAGJ,kBACrD,IAAIH,eAAAQ,SAASN,SAAS;YACzB,KAAK,OAAOO,GAAGF,MAAMG,OAAOC,QAAQT,OAAOU,cAAc,KACvDZ,eAAAC,MAAMM,GAAGJ;YACX,WACSD,OAAOW,yBAAyB,YACvCX,OAAOW,yBAAyB,MAEhCb,eAAAC,MAAMC,OAAOW,sBAAsBV;AACtC,eAAM,IAAIH,eAAAc,QAAQZ,SAASF,eAAAC,MAAMC,OAAOa,OAAOZ;AAAS;IAS9CH,eAAOI,UAAIF,UACrBA,OAA6BG,UAAUW;IAQ7BhB,eAAQQ,WAAIN,UACtBA,OAA8Be,SAAS;IAQ7BjB,eAAOc,UAAIZ,UACrBA,OAA6Be,SAAS;IAQ5BjB,eAASkB,YACpBhB,UAECA,OAA+Be,SAAS;IAQ9BjB,eAASmB,YACpBjB,UAECA,OAA+Be,SAAS;IAQ9BjB,eAAQoB,WAAIlB,UACtBA,OAA8Be,SAAS;IAQ7BjB,eAAQqB,WAAInB,UACtBA,OAA8Be,SAAS;IAQ7BjB,eAAUsB,aACrBpB,UAECA,OAAgCe,SAAS;IAQ/BjB,eAAUuB,aAAIrB,WACxBF,eAAAwB,UAAUtB,YACVF,eAAAsB,WAAWpB,YACTF,eAAAI,QAAQF,UACLA,OAAOG,MAAMoB,KAAKzB,eAAAuB,cAClBrB,OAAOwB,aAAa;IAQf1B,eAAAwB,YACXtB,WAECF,eAAAI,QAAQF,WAAYA,OAA+Be,SAASD;AAChE,EArID,CAAiBhB,mBAAAA,iBAqIhB,CAAA;;"}