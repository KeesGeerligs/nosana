"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlmSchemaSeparator = void 0;
var LlmTypeChecker_1 = require("./LlmTypeChecker");
var LlmSchemaSeparator;
(function (LlmSchemaSeparator) {
    LlmSchemaSeparator.parameters = function (props) {
        var indexes = props.parameters.map(LlmSchemaSeparator.schema(props.predicator));
        return {
            llm: indexes
                .map(function (_a, index) {
                var _b = __read(_a, 1), llm = _b[0];
                return ({
                    index: index,
                    schema: llm,
                });
            })
                .filter(function (_a) {
                var schema = _a.schema;
                return schema !== null;
            }),
            human: indexes
                .map(function (_a, index) {
                var _b = __read(_a, 2), human = _b[1];
                return ({
                    index: index,
                    schema: human,
                });
            })
                .filter(function (_a) {
                var schema = _a.schema;
                return schema !== null;
            }),
        };
    };
    LlmSchemaSeparator.schema = function (predicator) {
        return function (input) {
            if (predicator(input) === true)
                return [null, input];
            else if (LlmTypeChecker_1.LlmTypeChecker.isUnknown(input) || LlmTypeChecker_1.LlmTypeChecker.isOneOf(input))
                return [input, null];
            else if (LlmTypeChecker_1.LlmTypeChecker.isObject(input))
                return separateObject(predicator)(input);
            else if (LlmTypeChecker_1.LlmTypeChecker.isArray(input))
                return separateArray(predicator)(input);
            return [input, null];
        };
    };
    var separateArray = function (predicator) {
        return function (input) {
            var _a = __read(LlmSchemaSeparator.schema(predicator)(input.items), 2), x = _a[0], y = _a[1];
            return [
                x !== null ? __assign(__assign({}, input), { items: x }) : null,
                y !== null ? __assign(__assign({}, input), { items: y }) : null,
            ];
        };
    };
    var separateObject = function (predicator) {
        return function (input) {
            var e_1, _a;
            var _b, _c;
            if (!!input.additionalProperties ||
                Object.keys((_b = input.properties) !== null && _b !== void 0 ? _b : {}).length === 0)
                return [input, null];
            var llm = __assign(__assign({}, input), { properties: {} });
            var human = __assign(__assign({}, input), { properties: {} });
            try {
                for (var _d = __values(Object.entries((_c = input.properties) !== null && _c !== void 0 ? _c : {})), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var _f = __read(_e.value, 2), key = _f[0], value = _f[1];
                    var _g = __read(LlmSchemaSeparator.schema(predicator)(value), 2), x = _g[0], y = _g[1];
                    if (x !== null)
                        llm.properties[key] = x;
                    if (y !== null)
                        human.properties[key] = y;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return [
                Object.keys(llm.properties).length === 0 ? null : shrinkRequired(llm),
                Object.keys(human.properties).length === 0
                    ? null
                    : shrinkRequired(human),
            ];
        };
    };
    var shrinkRequired = function (input) {
        if (input.required !== undefined)
            input.required = input.required.filter(function (key) { var _a; return ((_a = input.properties) === null || _a === void 0 ? void 0 : _a[key]) !== undefined; });
        return input;
    };
})(LlmSchemaSeparator || (exports.LlmSchemaSeparator = LlmSchemaSeparator = {}));
