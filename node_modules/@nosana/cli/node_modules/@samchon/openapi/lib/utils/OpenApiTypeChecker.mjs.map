{"version":3,"file":"OpenApiTypeChecker.mjs","sources":["../../src/utils/OpenApiTypeChecker.ts"],"sourcesContent":["import { OpenApi } from \"../OpenApi\";\nimport { MapUtil } from \"./MapUtil\";\n\nexport namespace OpenApiTypeChecker {\n  export const visit =\n    (closure: (schema: OpenApi.IJsonSchema) => void) =>\n    (components: OpenApi.IComponents) => {\n      const already: Set<string> = new Set();\n      const next = (schema: OpenApi.IJsonSchema): void => {\n        closure(schema);\n        if (OpenApiTypeChecker.isReference(schema)) {\n          const key: string = schema.$ref.split(\"#/components/schemas/\").pop()!;\n          if (already.has(key) === true) return;\n          already.add(key);\n          const found: OpenApi.IJsonSchema | undefined =\n            components.schemas?.[key];\n          if (found !== undefined) next(found);\n        } else if (OpenApiTypeChecker.isOneOf(schema))\n          schema.oneOf.forEach(next);\n        else if (OpenApiTypeChecker.isObject(schema)) {\n          for (const value of Object.values(schema.properties ?? {}))\n            next(value);\n          if (\n            typeof schema.additionalProperties === \"object\" &&\n            schema.additionalProperties !== null\n          )\n            next(schema.additionalProperties);\n        } else if (OpenApiTypeChecker.isArray(schema)) next(schema.items);\n        else if (OpenApiTypeChecker.isTuple(schema)) {\n          (schema.prefixItems ?? []).forEach(next);\n          if (\n            typeof schema.additionalItems === \"object\" &&\n            schema.additionalItems !== null\n          )\n            next(schema.additionalItems);\n        }\n      };\n      return next;\n    };\n\n  /* -----------------------------------------------------------\n    TYPE CHECKERS\n  ----------------------------------------------------------- */\n  export const isNull = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.INull =>\n    (schema as OpenApi.IJsonSchema.INull).type === \"null\";\n  export const isUnknown = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IUnknown =>\n    (schema as OpenApi.IJsonSchema.IUnknown).type === undefined &&\n    !isConstant(schema) &&\n    !isOneOf(schema) &&\n    !isReference(schema);\n\n  export const isConstant = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IConstant =>\n    (schema as OpenApi.IJsonSchema.IConstant).const !== undefined;\n  export const isBoolean = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IBoolean =>\n    (schema as OpenApi.IJsonSchema.IBoolean).type === \"boolean\";\n  export const isInteger = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IInteger =>\n    (schema as OpenApi.IJsonSchema.IInteger).type === \"integer\";\n  export const isNumber = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.INumber =>\n    (schema as OpenApi.IJsonSchema.INumber).type === \"number\";\n  export const isString = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IString =>\n    (schema as OpenApi.IJsonSchema.IString).type === \"string\";\n\n  export const isArray = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IArray =>\n    (schema as OpenApi.IJsonSchema.IArray).type === \"array\" &&\n    (schema as OpenApi.IJsonSchema.IArray).items !== undefined;\n  export const isTuple = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.ITuple =>\n    (schema as OpenApi.IJsonSchema.ITuple).type === \"array\" &&\n    (schema as OpenApi.IJsonSchema.ITuple).prefixItems !== undefined;\n  export const isObject = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IObject =>\n    (schema as OpenApi.IJsonSchema.IObject).type === \"object\";\n  export const isReference = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IReference =>\n    (schema as any).$ref !== undefined;\n  export const isOneOf = (\n    schema: OpenApi.IJsonSchema,\n  ): schema is OpenApi.IJsonSchema.IOneOf =>\n    (schema as OpenApi.IJsonSchema.IOneOf).oneOf !== undefined;\n\n  /* -----------------------------------------------------------\n    OPERATORS\n  ----------------------------------------------------------- */\n  export const covers = (\n    components: OpenApi.IComponents,\n  ): ((x: OpenApi.IJsonSchema, y: OpenApi.IJsonSchema) => boolean) =>\n    coverStation(components)(new Map());\n\n  const coverStation =\n    (components: OpenApi.IComponents) =>\n    (visited: Map<OpenApi.IJsonSchema, Map<OpenApi.IJsonSchema, boolean>>) =>\n    (x: OpenApi.IJsonSchema, y: OpenApi.IJsonSchema): boolean => {\n      const cache: boolean | undefined = visited.get(x)?.get(y);\n      if (cache !== undefined) return cache;\n\n      // FOR RECURSIVE CASE\n      const nested: Map<OpenApi.IJsonSchema, boolean> = MapUtil.take(visited)(\n        x,\n      )(() => new Map());\n      nested.set(y, true);\n\n      // COMPUTE IT\n      const result: boolean = coverSchema(components)(visited)(x, y);\n      nested.set(y, result);\n      return result;\n    };\n\n  const coverSchema =\n    (components: OpenApi.IComponents) =>\n    (visited: Map<OpenApi.IJsonSchema, Map<OpenApi.IJsonSchema, boolean>>) =>\n    (x: OpenApi.IJsonSchema, y: OpenApi.IJsonSchema): boolean => {\n      // CHECK EQUALITY\n      if (x === y) return true;\n      else if (isReference(x) && isReference(y) && x.$ref === y.$ref)\n        return true;\n\n      // COMPARE WITH FLATTENING\n      const alpha: OpenApi.IJsonSchema[] = flatSchema(components)(x);\n      const beta: OpenApi.IJsonSchema[] = flatSchema(components)(y);\n      if (alpha.some((x) => isUnknown(x))) return true;\n      else if (beta.some((x) => isUnknown(x))) return false;\n      return beta.every((b) =>\n        alpha.some((a) => coverEscapedSchema(components)(visited)(a, b)),\n      );\n    };\n\n  const coverEscapedSchema =\n    (components: OpenApi.IComponents) =>\n    (visited: Map<OpenApi.IJsonSchema, Map<OpenApi.IJsonSchema, boolean>>) =>\n    (x: OpenApi.IJsonSchema, y: OpenApi.IJsonSchema): boolean => {\n      // CHECK EQUALITY\n      if (x === y) return true;\n      else if (isUnknown(x)) return true;\n      else if (isUnknown(y)) return false;\n      else if (isNull(x)) return isNull(y);\n      // ATOMIC CASE\n      else if (isConstant(x)) return isConstant(y) && x.const === y.const;\n      else if (isBoolean(x))\n        return isBoolean(y) || (isConstant(y) && typeof y.const === \"boolean\");\n      else if (isInteger(x))\n        return (isInteger(y) || isConstant(y)) && coverInteger(x, y);\n      else if (isNumber(x))\n        return (\n          (isConstant(y) || isInteger(y) || isNumber(y)) && coverNumber(x, y)\n        );\n      else if (isString(x))\n        return (isConstant(y) || isString(y)) && coverString(x, y);\n      // INSTANCE CASE\n      else if (isArray(x))\n        return (\n          (isArray(y) || isTuple(y)) && coverArray(components)(visited)(x, y)\n        );\n      else if (isObject(x))\n        return isObject(y) && coverObject(components)(visited)(x, y);\n      else if (isReference(x)) return isReference(y) && x.$ref === y.$ref;\n      return false;\n    };\n\n  const coverArray =\n    (components: OpenApi.IComponents) =>\n    (visited: Map<OpenApi.IJsonSchema, Map<OpenApi.IJsonSchema, boolean>>) =>\n    (\n      x: OpenApi.IJsonSchema.IArray,\n      y: OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.ITuple,\n    ): boolean => {\n      if (isTuple(y))\n        return (\n          y.prefixItems.every((v) =>\n            coverStation(components)(visited)(x.items, v),\n          ) &&\n          (y.additionalItems === undefined ||\n            (typeof y.additionalItems === \"object\" &&\n              coverStation(components)(visited)(x.items, y.additionalItems)))\n        );\n      else if (\n        !(\n          x.minItems === undefined ||\n          (y.minItems !== undefined && x.minItems <= y.minItems)\n        )\n      )\n        return false;\n      else if (\n        !(\n          x.maxItems === undefined ||\n          (y.maxItems !== undefined && x.maxItems >= y.maxItems)\n        )\n      )\n        return false;\n      return coverStation(components)(visited)(x.items, y.items);\n    };\n\n  const coverObject =\n    (components: OpenApi.IComponents) =>\n    (visited: Map<OpenApi.IJsonSchema, Map<OpenApi.IJsonSchema, boolean>>) =>\n    (\n      x: OpenApi.IJsonSchema.IObject,\n      y: OpenApi.IJsonSchema.IObject,\n    ): boolean => {\n      if (!x.additionalProperties && !!y.additionalProperties) return false;\n      else if (\n        !!x.additionalProperties &&\n        !!y.additionalProperties &&\n        ((typeof x.additionalProperties === \"object\" &&\n          y.additionalProperties === true) ||\n          (typeof x.additionalProperties === \"object\" &&\n            typeof y.additionalProperties === \"object\" &&\n            !coverStation(components)(visited)(\n              x.additionalProperties,\n              y.additionalProperties,\n            )))\n      )\n        return false;\n      return Object.entries(y.properties ?? {}).every(([key, b]) => {\n        const a: OpenApi.IJsonSchema | undefined = x.properties?.[key];\n        if (a === undefined) return false;\n        else if (\n          (x.required?.includes(key) ?? false) === true &&\n          (y.required?.includes(key) ?? false) === false\n        )\n          return false;\n        return coverStation(components)(visited)(a, b);\n      });\n    };\n\n  const coverInteger = (\n    x: OpenApi.IJsonSchema.IInteger,\n    y: OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger,\n  ): boolean => {\n    if (isConstant(y))\n      return typeof y.const === \"number\" && Number.isInteger(y.const);\n    return [\n      x.type === y.type,\n      x.minimum === undefined ||\n        (y.minimum !== undefined && x.minimum <= y.minimum),\n      x.maximum === undefined ||\n        (y.maximum !== undefined && x.maximum >= y.maximum),\n      x.exclusiveMinimum !== true ||\n        x.minimum === undefined ||\n        (y.minimum !== undefined &&\n          (y.exclusiveMinimum === true || x.minimum < y.minimum)),\n      x.exclusiveMaximum !== true ||\n        x.maximum === undefined ||\n        (y.maximum !== undefined &&\n          (y.exclusiveMaximum === true || x.maximum > y.maximum)),\n      x.multipleOf === undefined ||\n        (y.multipleOf !== undefined &&\n          y.multipleOf / x.multipleOf ===\n            Math.floor(y.multipleOf / x.multipleOf)),\n    ].every((v) => v);\n  };\n\n  const coverNumber = (\n    x: OpenApi.IJsonSchema.INumber,\n    y:\n      | OpenApi.IJsonSchema.IConstant\n      | OpenApi.IJsonSchema.IInteger\n      | OpenApi.IJsonSchema.INumber,\n  ): boolean => {\n    if (isConstant(y)) return typeof y.const === \"number\";\n    return [\n      x.type === y.type || (x.type === \"number\" && y.type === \"integer\"),\n      x.minimum === undefined ||\n        (y.minimum !== undefined && x.minimum <= y.minimum),\n      x.maximum === undefined ||\n        (y.maximum !== undefined && x.maximum >= y.maximum),\n      x.exclusiveMinimum !== true ||\n        x.minimum === undefined ||\n        (y.minimum !== undefined &&\n          (y.exclusiveMinimum === true || x.minimum < y.minimum)),\n      x.exclusiveMaximum !== true ||\n        x.maximum === undefined ||\n        (y.maximum !== undefined &&\n          (y.exclusiveMaximum === true || x.maximum > y.maximum)),\n      x.multipleOf === undefined ||\n        (y.multipleOf !== undefined &&\n          y.multipleOf / x.multipleOf ===\n            Math.floor(y.multipleOf / x.multipleOf)),\n    ].every((v) => v);\n  };\n\n  const coverString = (\n    x: OpenApi.IJsonSchema.IString,\n    y: OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IString,\n  ): boolean => {\n    if (isConstant(y)) return typeof y.const === \"string\";\n    return [\n      x.format === undefined ||\n        (y.format !== undefined && coverFormat(x.format, y.format)),\n      x.pattern === undefined || x.pattern === y.pattern,\n      x.minLength === undefined ||\n        (y.minLength !== undefined && x.minLength <= y.minLength),\n      x.maxLength === undefined ||\n        (y.maxLength !== undefined && x.maxLength >= y.maxLength),\n    ].every((v) => v);\n  };\n\n  const coverFormat = (\n    x: Required<OpenApi.IJsonSchema.IString>[\"format\"],\n    y: Required<OpenApi.IJsonSchema.IString>[\"format\"],\n  ): boolean =>\n    x === y ||\n    (x === \"idn-email\" && y === \"email\") ||\n    (x === \"idn-hostname\" && y === \"hostname\") ||\n    ([\"uri\", \"iri\"].includes(x) && y === \"url\") ||\n    (x === \"iri\" && y === \"uri\") ||\n    (x === \"iri-reference\" && y === \"uri-reference\");\n\n  const flatSchema =\n    (components: OpenApi.IComponents) =>\n    (schema: OpenApi.IJsonSchema): OpenApi.IJsonSchema[] => {\n      schema = escapeReference(components)(schema);\n      if (isOneOf(schema))\n        return schema.oneOf.map(flatSchema(components)).flat();\n      return [schema];\n    };\n\n  const escapeReference =\n    (components: OpenApi.IComponents) =>\n    (\n      schema: OpenApi.IJsonSchema,\n    ): Exclude<OpenApi.IJsonSchema, OpenApi.IJsonSchema.IReference> =>\n      isReference(schema)\n        ? escapeReference(components)(\n            components.schemas![\n              schema.$ref.replace(\"#/components/schemas/\", \"\")\n            ],\n          )\n        : schema;\n}\n"],"names":["OpenApiTypeChecker","visit","closure","components","already","Set","next","schema","isReference","key","$ref","split","pop","has","add","found","schemas","undefined","isOneOf","oneOf","forEach","isObject","value","Object","values","properties","additionalProperties","isArray","items","isTuple","prefixItems","additionalItems","isNull","type","isUnknown","isConstant","const","isBoolean","isInteger","isNumber","isString","covers","coverStation","Map","visited","x","y","cache","get","nested","MapUtil","take","set","result","coverSchema","alpha","flatSchema","beta","some","every","b","a","coverEscapedSchema","coverInteger","coverNumber","coverString","coverArray","coverObject","v","minItems","maxItems","entries","required","includes","Number","minimum","maximum","exclusiveMinimum","exclusiveMaximum","multipleOf","Math","floor","format","coverFormat","pattern","minLength","maxLength","escapeReference","map","flat","replace"],"mappings":"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"}