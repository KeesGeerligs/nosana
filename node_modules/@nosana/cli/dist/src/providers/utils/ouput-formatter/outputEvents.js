/**
 * Adding a new Output/Throw Event
 *
 * Step 1: Add the new event name under OUTPUT_EVENTS
 * Example:
 * OUTPUT_NEW_EVENT: 'OUTPUT_NEW_EVENT',
 *
 * Step 2: Define parameter types for the new event
 * Example:
 * export type NewEventParam = { data: string };
 *
 * Step 3: Add the new event to OutputEventParams
 * Example:
 * [OUTPUT_EVENTS.OUTPUT_NEW_EVENT]: NewEventParam;
 *
 * Step 4: Make implementation for this new event on all OutputFormatterAdapter Handlers, Failure to do this will cause errors
 * Example:
 * [OUTPUT_EVENTS.OUTPUT_NEW_EVENT]: (param: OutputEventParams) => {},
 *
 * Step 5: also add the event to __mock__ so the tests can pass
 */
export const OUTPUT_EVENTS = {
    READ_KEYFILE: 'READ_KEYFILE',
    CREATE_KEYFILE: 'CREATE_KEYFILE',
    OUTPUT_JOB_URL: 'OUTPUT_JOB_URL',
    OUTPUT_JSON_FLOW_URL: 'OUTPUT_JSON_FLOW_URL',
    OUTPUT_MARKET_URL: 'OUTPUT_MARKET_URL',
    OUTPUT_JOB_PRICE: 'OUTPUT_JOB_PRICE',
    OUTPUT_JOB_STATUS: 'OUTPUT_JOB_STATUS',
    OUTPUT_JOB_POSTED_ERROR: 'OUTPUT_JOB_POSTED_ERROR',
    OUTPUT_JOB_POSTING: 'OUTPUT_JOB_POSTING',
    OUTPUT_NETWORK: 'OUTPUT_NETWORK',
    OUTPUT_BALANCES: 'OUTPUT_BALANCES',
    OUTPUT_WALLET: 'OUTPUT_WALLET',
    OUTPUT_IPFS_UPLOADED: 'OUTPUT_IPFS_UPLOADED',
    OUTPUT_SERVICE_URL: 'OUTPUT_SERVICE_URL',
    OUTPUT_PRIVATE_URL_MESSAGE: 'OUTPUT_PRIVATE_URL_MESSAGE',
    OUTPUT_JOB_NOT_FOUND: 'OUTPUT_JOB_NOT_FOUND',
    OUTPUT_CANNOT_LOG_RESULT: 'OUTPUT_CANNOT_LOG_RESULT',
    OUTPUT_JOB_VALIDATION_ERROR: 'OUTPUT_JOB_VALIDATION_ERROR',
    OUTPUT_ARTIFACT_SUPPORT_INCOMING_ERROR: 'OUTPUT_ARTIFACT_SUPPORT_INCOMING_ERROR',
    OUTPUT_JSON_FLOW_TYPE_NOT_SUPPORTED_ERROR: 'OUTPUT_JSON_FLOW_TYPE_NOT_SUPPORTED_ERROR',
    OUTPUT_SOL_BALANCE_LOW_ERROR: 'OUTPUT_SOL_BALANCE_LOW_ERROR',
    OUTPUT_NOS_BALANCE_LOW_ERROR: 'OUTPUT_NOS_BALANCE_LOW_ERROR',
    OUTPUT_AIRDROP_REQUEST_FAILED_ERROR: 'OUTPUT_AIRDROP_REQUEST_FAILED_ERROR',
    OUTPUT_JOB_POSTED_TX: 'OUTPUT_JOB_POSTED_TX',
    OUTPUT_NODE_URL: 'OUTPUT_NODE_URL',
    OUTPUT_DURATION: 'OUTPUT_DURATION',
    OUTPUT_START_TIME: 'OUTPUT_START_TIME',
    OUTPUT_RESULT_URL: 'OUTPUT_RESULT_URL',
    OUTPUT_JOB_EXECUTION: 'OUTPUT_JOB_EXECUTION',
    OUTPUT_TOTAL_COST: 'OUTPUT_TOTAL_COST',
    OUTPUT_RETRIVE_JOB_COMMAND: 'OUTPUT_RETRIVE_JOB_COMMAND',
    OUTPUT_FAILED_TO_FETCH_MARKETS_ERROR: 'OUTPUT_FAILED_TO_FETCH_MARKETS_ERROR',
    OUTPUT_HEADER_LOGO: 'OUTPUT_HEADER_LOGO',
    OUTPUT_JOB_URL_ERROR: 'OUTPUT_JOB_URL_ERROR',
    OUTPUT_JOB_URL_EXPIRED: 'OUTPUT_JOB_URL_EXPIRED',
    OUTPUT_JOB_URL_NOT_READY: 'OUTPUT_JOB_URL_NOT_READY',
    OUTPUT_JOB_INVALID: 'OUTPUT_JOB_INVALID',
    OUTPUT_JOB_SERVICE_URL: 'OUTPUT_JOB_SERVICE_URL',
};
