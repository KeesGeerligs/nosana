import { OUTPUT_EVENTS, } from '../outputEvents.js';
export const jsonOutputEventHandlers = {
    [OUTPUT_EVENTS.READ_KEYFILE]: (response, param) => {
        response.keypair_path = param.keyfile;
    },
    [OUTPUT_EVENTS.CREATE_KEYFILE]: (response, param) => {
        response.keypair_path = param.keyfile;
    },
    [OUTPUT_EVENTS.OUTPUT_BALANCES]: (response, param) => {
        response.balances = {
            SOL: `${param.sol} SOL`,
            NOS: `${param.nos} NOS`,
        };
    },
    [OUTPUT_EVENTS.OUTPUT_NETWORK]: (response, param) => {
        response.network = param.network;
    },
    [OUTPUT_EVENTS.OUTPUT_WALLET]: (response, param) => {
        response.wallet = param.publicKey;
    },
    [OUTPUT_EVENTS.OUTPUT_IPFS_UPLOADED]: (response, param) => {
        response.ipfs_uploaded = param.ipfsHash;
    },
    [OUTPUT_EVENTS.OUTPUT_SERVICE_URL]: (response, param) => {
        response.service_url = param.url;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_SERVICE_URL]: (response, param) => {
        response.service_url = param.url;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_INVALID]: (response) => {
        response.isError = true;
        response.msg = 'Invalid Job';
        response.errors = ['Invalid Job Entered'];
        response.service_url = undefined;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_URL_EXPIRED]: (response, param) => {
        response.isError = true;
        response.msg = 'Job expired';
        response.errors = [
            `Job exposed URL is expired since Job has been ${param.state}`,
        ];
        response.service_url = undefined;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_URL_NOT_READY]: (response) => {
        response.isError = true;
        response.msg = 'Job exposed URL is not ready yet';
        response.errors = [`Job exposed URL is not ready yet`];
        response.service_url = undefined;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_URL_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = `Failed to fetch exposed URL ${param.error.message}`;
        response.errors = [param.error];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_PRIVATE_URL_MESSAGE]: (response, param) => {
        response.service_url = undefined;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_URL]: (response, param) => {
        response.job_url = param.job_url;
    },
    [OUTPUT_EVENTS.OUTPUT_JSON_FLOW_URL]: (response, param) => {
        response.json_flow_url = param.json_flow_url;
    },
    [OUTPUT_EVENTS.OUTPUT_MARKET_URL]: (response, param) => {
        response.market_url = param.market_url;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_PRICE]: (response, param) => {
        response.price = `${param.price} NOS/s`;
    },
    [OUTPUT_EVENTS.OUTPUT_TOTAL_COST]: (response, param) => {
        response.total_cost = `${param.cost} NOS/s`;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_STATUS]: (response, param) => {
        response.status = param.status;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_POSTING]: (response, param) => {
        response.job_posting = {
            market_id: param.market_address,
            price_per_second: `${param.price} NOS/s`,
            total_cost: `${param.total} NOS`,
        };
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_POSTED_TX]: (response, param) => {
        response.job_posting = {
            transaction_id: param.tx,
            ...response.job_posting,
        };
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_VALIDATION_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = 'Job Definition validation failed';
        response.errors = param.error;
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_FAILED_TO_FETCH_MARKETS_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = 'Failed to fetch market';
        response.errors = [param.error];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_POSTED_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = "Couldn't post job";
        response.errors = [param.error];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_SOL_BALANCE_LOW_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = `Minimum of '0.005' SOL needed: SOL available ${param.sol}`;
        response.errors = [
            `Minimum of '0.005' SOL needed: SOL available ${param.sol}`,
        ];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_NOS_BALANCE_LOW_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = `Not enough NOS: NOS available ${param.nosBalance}, NOS needed: ${param.nosNeeded}`;
        response.errors = [
            `Not enough NOS: NOS available ${param.nosBalance}, NOS needed: ${param.nosNeeded}`,
        ];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_AIRDROP_REQUEST_FAILED_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = 'Couldnt airdrop tokens to your address';
        response.errors = ['Couldnt airdrop tokens to your address'];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_JOB_NOT_FOUND]: (response, param) => {
        response.isError = true;
        response.msg = 'Could not retrieve job';
        response.errors = [param.error];
    },
    [OUTPUT_EVENTS.OUTPUT_CANNOT_LOG_RESULT]: (response) => {
        response.isError = true;
        response.msg = 'Cannot log results';
        response.errors = ['Cannot log results'];
    },
    [OUTPUT_EVENTS.OUTPUT_ARTIFACT_SUPPORT_INCOMING_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = 'artifact support coming soon!';
        response.errors = ['artifact support coming soon!'];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_JSON_FLOW_TYPE_NOT_SUPPORTED_ERROR]: (response, param) => {
        response.isError = true;
        response.msg = `type ${param.type} not supported yet`;
        response.errors = [`type ${param.type} not supported yet`];
        throw response;
    },
    [OUTPUT_EVENTS.OUTPUT_NODE_URL]: (response, param) => {
        response.node_url = param.url;
    },
    [OUTPUT_EVENTS.OUTPUT_DURATION]: (response, param) => {
        response.duration = param.duration;
    },
    [OUTPUT_EVENTS.OUTPUT_START_TIME]: (response, param) => {
        response.start_time = param.date;
    },
    [OUTPUT_EVENTS.OUTPUT_RESULT_URL]: (response, param) => {
        response.result_url = param.url;
    },
    [OUTPUT_EVENTS.OUTPUT_RETRIVE_JOB_COMMAND]: (response, param) => { },
    [OUTPUT_EVENTS.OUTPUT_HEADER_LOGO]: (response, param) => { },
    [OUTPUT_EVENTS.OUTPUT_JOB_EXECUTION]: (response, param) => {
        let execution = {};
        execution.logs = [];
        for (const log of param.opState.logs) {
            const sanitizedLog = log.log ?? '';
            execution.logs.push(sanitizedLog);
        }
        execution.operationId = param.opState.operationId;
        execution.duration =
            (param.opState.endTime - param.opState.startTime) / 1000;
        if (param.opState.status) {
            execution.exitCode = param.opState.exitCode;
            execution.status = param.opState.status;
        }
        if (!response.executions) {
            response.executions = [];
        }
        response.executions.push(execution);
    },
};
