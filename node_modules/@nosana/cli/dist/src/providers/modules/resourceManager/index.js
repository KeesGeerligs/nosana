import chalk from 'chalk';
import { createImageManager } from './images/index.js';
import { createVolumeManager } from './volumes/index.js';
import { clientSelector } from '../../../api/client.js';
export function createResourceManager(db, docker, logger) {
    let required_market;
    const imageManager = createImageManager(db, docker, logger);
    const volumeManager = createVolumeManager(db, docker, logger);
    const resyncResourcesDB = async () => {
        logger.log(chalk.cyan('Syncing Resources'), true);
        await imageManager.resyncImagesDB();
        await volumeManager.resyncResourcesDB();
        if (required_market) {
            await fetchMarketRequiredResources(required_market);
        }
        else {
            logger.succeed('Synced Resources');
        }
    };
    const fetchMarketRequiredResources = async (market) => {
        logger.log(chalk.cyan('Fetching latest market resource requirements'), true);
        required_market = market;
        const { data, error } = await clientSelector().GET('/api/markets/{id}/required-resources', { params: { path: { id: market } } });
        if (error) {
            logger.fail(chalk.red('Failed to fetch market resource requirements'));
            throw new Error(error.toString());
        }
        await imageManager.pullMarketRequiredImages(data.required_images);
        await volumeManager.pullMarketRequiredVolumes(data.required_remote_resources);
        logger.succeed(chalk.green('Fetched market all required resources'));
    };
    const prune = async () => {
        await imageManager.pruneImages();
        await volumeManager.pruneVolumes();
    };
    return {
        resyncResourcesDB,
        fetchMarketRequiredResources,
        prune,
        images: {
            setImage: imageManager.setImage,
        },
        volumes: {
            getVolume: volumeManager.getVolume,
            hasVolume: volumeManager.hasVolume,
            setVolume: volumeManager.setVolume,
            createRemoteVolume: volumeManager.createRemoteVolume,
        },
    };
}
