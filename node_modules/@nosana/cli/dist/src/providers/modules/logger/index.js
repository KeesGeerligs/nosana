import ora from 'ora';
import EventEmitter from 'events';
import { ProviderEvents } from '../../Provider.js';
export default class Logger extends EventEmitter {
    constructor() {
        super();
        this.spinner = ora();
        this.defaultSubscriptions = new Map([
            [ProviderEvents.INFO_LOG, this.standard_info_log],
            [ProviderEvents.CONTAINER_LOG, this.standard_container_log],
        ]);
        this.setDefaultListeners();
    }
    setDefaultListeners() {
        this.defaultSubscriptions.forEach((callback, event) => {
            this.on(event, callback);
        });
    }
    standard_info_log(event, spinner) {
        const logSpinner = spinner || this.spinner;
        switch (event.type) {
            case 'info':
                if (logSpinner && logSpinner.isSpinning) {
                    logSpinner.succeed();
                }
                if (event.pending) {
                    logSpinner.start(event.log);
                }
                else {
                    console.log(event.log);
                }
                break;
            case 'fail':
                if (logSpinner && logSpinner.isSpinning) {
                    logSpinner.fail(event.log);
                }
                else {
                    console.log(event.log);
                }
                break;
            case 'success':
                if (logSpinner && logSpinner.isSpinning) {
                    logSpinner.succeed(event.log);
                }
                else {
                    console.log(event.log);
                }
                break;
            default:
                console.log(event.log);
                break;
        }
    }
    standard_container_log(event) {
        // STANDARD CONTAINER STREAMING LOG IS TO NOT PRINT
    }
    override(event, callback) {
        const defaultEvent = this.defaultSubscriptions.get(event);
        if (defaultEvent) {
            this.off(event, defaultEvent);
        }
        this.on(event, callback);
    }
    log(message, pending = false) {
        this.emit(ProviderEvents.INFO_LOG, {
            type: 'info',
            log: message,
            pending,
        });
    }
    succeed(message) {
        this.emit(ProviderEvents.INFO_LOG, {
            type: 'success',
            log: message,
        });
    }
    fail(message) {
        this.emit(ProviderEvents.INFO_LOG, {
            type: 'fail',
            log: message,
        });
    }
}
