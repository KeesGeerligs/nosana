import { DockerExtended } from '../docker';
export class DockerodeMock extends DockerExtended {
    constructor(images) {
        super();
        this.images = [];
        if (images) {
            for (const img of images) {
                this.addMockImage([img]);
            }
        }
    }
    addMockImage(Names) {
        this.images.push({
            Names,
            Id: '',
            ParentId: '',
            RepoTags: Names,
            Created: 0,
            Size: 0,
            VirtualSize: 0,
            SharedSize: 0,
            Labels: {},
            Containers: 0,
        });
    }
    listImages() {
        return new Promise((resolve) => resolve(this.images));
    }
    getImage(name) {
        return {
            modem: undefined,
            id: name,
            inspect: jest.fn(),
            history: jest.fn(),
            push: jest.fn(),
            remove: (_) => {
                return new Promise((resolve) => {
                    this.images = this.images.filter((x) => !x.Names.includes(name));
                    resolve(true);
                });
            },
            get: jest.fn(),
            tag: jest.fn(),
            distribution: jest.fn(),
        };
    }
}
