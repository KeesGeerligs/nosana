/// <reference types="node" />
import EventEmitter from 'events';
import { NosanaNode } from './NosanaNode.js';
import Logger from '../providers/modules/logger/index.js';
import { Response } from 'express';
export type LogEvent = {
    index: number;
    log: string;
    type: string;
    pending: boolean;
    job: string;
    event: string;
};
export type LogTypes = 'infoLog' | 'jobLog' | 'containerLog';
export type StatusLogClient = {
    response: Response;
    jobId: string;
    logType?: LogTypes;
};
export default class LogSubscriberManager {
    private subscribers;
    private eventIndex;
    events: Map<string, LogEvent[]>;
    lastProcessedLogIndex: number;
    private logStatusClients;
    constructor();
    subscribe(callback: (logEvent: LogEvent) => void): void;
    unsubscribe(callback: (logEvent: LogEvent) => void): void;
    addClient(response: Response, jobId: string, logType?: LogTypes): void;
    removeClient(response: Response): void;
    notifySubscribers(log: LogEvent): void;
    private getCurrentJob;
    getEvents(jobId: string, logType?: LogTypes): LogEvent[];
    addEvent(jobId: string, log: LogEvent): void;
    getEventIndex(): number;
    incrementEventIndex(): void;
    listenToLoggerEvents(logger: EventEmitter, node: NosanaNode): void;
    handleRemoteLogEvents(events: LogEvent[], logger: Logger): void;
}
