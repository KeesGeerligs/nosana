import BN from 'bn.js';
import ApiEventEmitter from '../api/ApiEventEmitter.js';
export class ExpiryHandler {
    constructor(sdk) {
        this.sdk = sdk;
        this.expiryEndTime = 0;
        this.expiryTimer = null;
        this.warningTimer = null;
        this.onExpireCallback = null;
        this.resolving = false;
        ApiEventEmitter.getInstance().on('stop-job', (id) => {
            if (this.jobAddress === id) {
                this.shortenedExpiry();
            }
        });
    }
    stopExtendMonitoring() {
        if (this.extendSubscriptionId !== undefined) {
            this.sdk.jobs.connection.removeProgramAccountChangeListener(this.extendSubscriptionId);
            this.extendSubscriptionId = undefined;
        }
    }
    init(run, job, jobstring, accountEmitter, onExpireCallback) {
        this.resolving = false;
        this.jobAddress = jobstring;
        this.expiryEndTime = new BN(run.account.time)
            .add(new BN(job.timeout))
            .mul(new BN(1000))
            .toNumber();
        accountEmitter.on('changed', ({ timeout }) => {
            const newExpiryTime = new BN(run.account.time)
                .add(new BN(timeout))
                .mul(new BN(1000))
                .toNumber();
            if (newExpiryTime != this.expiryEndTime) {
                this.extendExpiryTime(newExpiryTime - this.expiryEndTime);
            }
        });
        this.onExpireCallback = onExpireCallback;
        this.start();
        return this.expiryEndTime;
    }
    start() {
        this.startOrResetTimer();
    }
    stop() {
        if (this.expiryTimer)
            clearTimeout(this.expiryTimer);
        if (this.warningTimer)
            clearTimeout(this.warningTimer);
        this.expiryTimer = null;
        this.warningTimer = null;
        this.jobAddress = undefined;
        this.stopExtendMonitoring();
    }
    startOrResetTimer() {
        if (this.expiryTimer)
            clearTimeout(this.expiryTimer);
        if (this.warningTimer)
            clearTimeout(this.warningTimer);
        this.expiryTimer = null;
        this.warningTimer = null;
        const remainingTime = this.expiryEndTime - Date.now();
        const warningTime = remainingTime - 2 * 60 * 1000; // 2 minutes before expiry
        // Set up the warning timer
        if (warningTime > 0) {
            this.warningTimer = setTimeout(() => { }, warningTime);
        }
        // Set up the expiry timer
        this.expiryTimer = setTimeout(async () => {
            if (!this.resolving) {
                this.resolving = true;
                this.stop();
                await this.onExpireCallback?.(); // Trigger expiration callback
            }
        }, remainingTime);
    }
    extendExpiryTime(additionalTimeMs) {
        this.expiryEndTime += additionalTimeMs;
        this.startOrResetTimer();
    }
    expired(run, job) {
        const now = Date.now() / 1000;
        const expirationTime = new BN(run.account.time)
            .add(new BN(job.timeout))
            .toNumber();
        return expirationTime < now;
    }
    async waitUntilExpired() {
        return new Promise((resolve) => {
            this.stop();
            resolve();
        });
    }
    shortenedExpiry() {
        this.expiryEndTime = Date.now();
        this.startOrResetTimer(); // Restart timer with updated expiry time
    }
}
