import { JobDefinitionStrategySelector } from './defination/JobDefinitionStrategy.js';
import { ResultReturnStrategySelector } from './result/ResultReturnStrategy.js';
import { validateJobDefinition } from '../../../../providers/Provider.js';
export class JobExternalUtil {
    constructor(sdk, repository) {
        this.sdk = sdk;
        this.repository = repository;
    }
    async resolveJobDefinition(id, job) {
        let jobDefinition = await this.sdk.ipfs.retrieve(job.ipfsJob);
        if (jobDefinition.logistics?.receive?.type) {
            const strategySelector = new JobDefinitionStrategySelector();
            const strategy = strategySelector.selectStrategy(jobDefinition.logistics?.receive?.type);
            this.repository.updateflowState(id, {
                status: 'waiting-for-job-defination',
            });
            jobDefinition = await strategy.load(id);
        }
        return jobDefinition;
    }
    async resolveResult(id) {
        let result = this.repository.getFlowState(id);
        const jobDefinition = this.repository.getflow(id).jobDefinition;
        if (jobDefinition.logistics?.send?.type) {
            const strategySelector = new ResultReturnStrategySelector();
            const strategy = strategySelector.selectStrategy(jobDefinition.logistics?.send?.type);
            this.repository.updateflowState(id, {
                status: 'waiting-for-result',
            });
            await strategy.load(id);
            result = {
                status: result.status,
                startTime: result.startTime,
                endTime: result.endTime,
                opStates: [],
            };
        }
        return result;
    }
    async validate(id, jobDefinition) {
        const validation = validateJobDefinition(jobDefinition);
        if (!validation.success) {
            this.repository.updateflowState(id, {
                endTime: Date.now(),
                status: 'failed',
            });
            this.repository.updateflowStateError(id, {
                status: 'validation-error',
                errors: validation.errors,
            });
            return false;
        }
        return true;
    }
}
