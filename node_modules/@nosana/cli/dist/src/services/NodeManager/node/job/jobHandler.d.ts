/// <reference types="node" />
import EventEmitter from 'events';
import { Job, Run, Client as SDK } from '@nosana/sdk';
import { JobDefinition } from '../../provider/types.js';
import { Provider } from '../../provider/Provider.js';
import { NodeRepository } from '../../repository/NodeRepository.js';
export declare const jobEmitter: EventEmitter<[never]>;
export declare class JobHandler {
    private sdk;
    private provider;
    private repository;
    private id;
    private job;
    private runSubscriptionId;
    private flowHandler;
    private jobExternalUtil;
    private eventEmitter;
    private finishing;
    accountEmitter: EventEmitter;
    constructor(sdk: SDK, provider: Provider, repository: NodeRepository);
    /**
     * Expose a method to allow external consumers to listen for events
     */
    on(event: string, listener: (...args: any[]) => void): void;
    /**
     * Expose a method to remove listeners
     */
    off(event: string, listener: (...args: any[]) => void): void;
    get(): Job | undefined;
    private jobId;
    private getJobOrThrow;
    clearJob(): void;
    claim(jobAddress: string): Promise<Job>;
    stop(): Promise<void>;
    validate(jobDefinition: JobDefinition): Promise<boolean>;
    private listenForAccountChanges;
    private stopListeningForAccountChanges;
    start(job: Job): Promise<boolean>;
    run(): Promise<boolean>;
    runWithErrorHandling(): Promise<void>;
    stopCurrentJob(): Promise<void>;
    quit(run: Run): Promise<void>;
    exposed(): boolean;
    finish(run: Run): Promise<void>;
    clearOldJobs(): Promise<void>;
}
