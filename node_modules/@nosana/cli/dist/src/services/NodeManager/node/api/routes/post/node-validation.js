import typia from 'typia';
import { getSDK } from '../../../../../sdk.js';
import { clientSelector } from '../../../../../../api/client.js';
export async function postNodeValidation(req, res) {
    const sdk = getSDK();
    const client = clientSelector();
    const flowHandler = req.flowHandler;
    const validator = input => {
        const errors = [];
        const __is = (input, _exceptionable = true) => {
            const $join = typia.createValidateEquals.join;
            const $io0 = (input, _exceptionable = true) => "string" === typeof input.version && "container" === input.type && (undefined === input.meta || "object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) && $io1(input.meta, true && _exceptionable)) && (undefined === input.global || "object" === typeof input.global && null !== input.global && false === Array.isArray(input.global) && $io2(input.global, true && _exceptionable)) && (Array.isArray(input.ops) && input.ops.every((elem, _index1) => "object" === typeof elem && null !== elem && $io4(elem, true && _exceptionable))) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["version", "type", "meta", "global", "ops"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io1 = (input, _exceptionable = true) => (undefined === input.trigger || "string" === typeof input.trigger) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["trigger"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io2 = (input, _exceptionable = true) => (undefined === input.image || "string" === typeof input.image) && (undefined === input.gpu || "boolean" === typeof input.gpu) && (null !== input.entrypoint && (undefined === input.entrypoint || "string" === typeof input.entrypoint || Array.isArray(input.entrypoint) && input.entrypoint.every((elem, _index2) => "string" === typeof elem))) && (undefined === input.env || "object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) && $io3(input.env, true && _exceptionable)) && (undefined === input.work_dir || "string" === typeof input.work_dir) && (0 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["image", "gpu", "entrypoint", "env", "work_dir"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io3 = (input, _exceptionable = true) => Object.keys(input).every(key => {
                const value = input[key];
                if (undefined === value)
                    return true;
                return "string" === typeof value;
            });
            const $io4 = (input, _exceptionable = true) => ("container/run" === input.type || "container/create-volume" === input.type) && "string" === typeof input.id && ("object" === typeof input.args && null !== input.args && $iu1(input.args, true && _exceptionable)) && (undefined === input.results || "object" === typeof input.results && null !== input.results && false === Array.isArray(input.results) && $io13(input.results, true && _exceptionable)) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["type", "id", "args", "results"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io5 = (input, _exceptionable = true) => "string" === typeof input.image && (null !== input.cmd && (undefined === input.cmd || "string" === typeof input.cmd || Array.isArray(input.cmd) && input.cmd.every((elem, _index3) => "string" === typeof elem))) && (undefined === input.volumes || Array.isArray(input.volumes) && (input.volumes.length === 1 && ("object" === typeof input.volumes[0] && null !== input.volumes[0] && $io6(input.volumes[0], true && _exceptionable)))) && (undefined === input.expose || "number" === typeof input.expose) && (undefined === input.private || "boolean" === typeof input.private) && (undefined === input.gpu || "boolean" === typeof input.gpu) && (undefined === input.work_dir || "string" === typeof input.work_dir) && (undefined === input.output || "string" === typeof input.output) && (null !== input.entrypoint && (undefined === input.entrypoint || "string" === typeof input.entrypoint || Array.isArray(input.entrypoint) && input.entrypoint.every((elem, _index4) => "string" === typeof elem))) && (undefined === input.env || "object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) && $io7(input.env, true && _exceptionable)) && (undefined === input.resources || Array.isArray(input.resources) && input.resources.every((elem, _index5) => "object" === typeof elem && null !== elem && $iu0(elem, true && _exceptionable))) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["image", "cmd", "volumes", "expose", "private", "gpu", "work_dir", "output", "entrypoint", "env", "resources"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io6 = (input, _exceptionable = true) => "string" === typeof input.name && "string" === typeof input.dest && (2 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["name", "dest"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io7 = (input, _exceptionable = true) => Object.keys(input).every(key => {
                const value = input[key];
                if (undefined === value)
                    return true;
                return "string" === typeof value;
            });
            const $io8 = (input, _exceptionable = true) => "S3" === input.type && (undefined === input.url || "string" === typeof input.url) && "string" === typeof input.target && (undefined === input.files || Array.isArray(input.files) && input.files.every((elem, _index6) => "string" === typeof elem)) && (undefined === input.allowWrite || "boolean" === typeof input.allowWrite) && (undefined === input.buckets || Array.isArray(input.buckets) && input.buckets.every((elem, _index7) => "object" === typeof elem && null !== elem && $io9(elem, true && _exceptionable))) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["type", "url", "target", "files", "allowWrite", "buckets"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io9 = (input, _exceptionable = true) => "string" === typeof input.url && (undefined === input.files || Array.isArray(input.files) && input.files.every((elem, _index8) => "string" === typeof elem)) && (1 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["url", "files"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io10 = (input, _exceptionable = true) => "S3" === input.type && (undefined === input.url || "string" === typeof input.url) && "string" === typeof input.target && (undefined === input.files || Array.isArray(input.files) && input.files.every((elem, _index9) => "string" === typeof elem)) && (undefined === input.allowWrite || "boolean" === typeof input.allowWrite) && (undefined === input.buckets || Array.isArray(input.buckets) && input.buckets.every((elem, _index10) => "object" === typeof elem && null !== elem && $io9(elem, true && _exceptionable))) && ("object" === typeof input.IAM && null !== input.IAM && $io11(input.IAM, true && _exceptionable)) && (3 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["type", "url", "target", "files", "allowWrite", "buckets", "IAM"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io11 = (input, _exceptionable = true) => "string" === typeof input.REGION && "string" === typeof input.ACCESS_KEY_ID && "string" === typeof input.SECRET_ACCESS_KEY && (3 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["REGION", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io12 = (input, _exceptionable = true) => "string" === typeof input.name && (1 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["name"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $io13 = (input, _exceptionable = true) => Object.keys(input).every(key => {
                const value = input[key];
                if (undefined === value)
                    return true;
                return null !== value && undefined !== value && ("string" === typeof value || "object" === typeof value && null !== value && $io14(value, true && _exceptionable));
            });
            const $io14 = (input, _exceptionable = true) => "string" === typeof input.regex && (Array.isArray(input.logType) && (1 <= input.logType.length && 4 >= input.logType.length && ("stdin" === input.logType[0] || "stdout" === input.logType[0] || "stderr" === input.logType[0] || "nodeerr" === input.logType[0]) && (undefined === input.logType[1] || "stdin" === input.logType[1] || "stdout" === input.logType[1] || "stderr" === input.logType[1] || "nodeerr" === input.logType[1]) && (undefined === input.logType[2] || "stdin" === input.logType[2] || "stdout" === input.logType[2] || "stderr" === input.logType[2] || "nodeerr" === input.logType[2]) && (undefined === input.logType[3] || "stdin" === input.logType[3] || "stdout" === input.logType[3] || "stderr" === input.logType[3] || "nodeerr" === input.logType[3]))) && (2 === Object.keys(input).length || Object.keys(input).every(key => {
                if (["regex", "logType"].some(prop => key === prop))
                    return true;
                const value = input[key];
                if (undefined === value)
                    return true;
                return false;
            }));
            const $iu0 = (input, _exceptionable = true) => (() => {
                if (undefined !== input.IAM)
                    return $io10(input, true && _exceptionable);
                else
                    return $io8(input, true && _exceptionable);
            })();
            const $iu1 = (input, _exceptionable = true) => (() => {
                if (undefined !== input.image)
                    return $io5(input, true && _exceptionable);
                else if (undefined !== input.name)
                    return $io12(input, true && _exceptionable);
                else
                    return false;
            })();
            return "object" === typeof input && null !== input && $io0(input, true);
        };
        if (false === __is(input)) {
            const $report = typia.createValidateEquals.report(errors);
            ((input, _path, _exceptionable = true) => {
                const $join = typia.createValidateEquals.join;
                const $vo0 = (input, _path, _exceptionable = true) => ["string" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "string",
                        value: input.version
                    }), "container" === input.type || $report(_exceptionable, {
                        path: _path + ".type",
                        expected: "\"container\"",
                        value: input.type
                    }), undefined === input.meta || ("object" === typeof input.meta && null !== input.meta && false === Array.isArray(input.meta) || $report(_exceptionable, {
                        path: _path + ".meta",
                        expected: "(__type | undefined)",
                        value: input.meta
                    })) && $vo1(input.meta, _path + ".meta", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".meta",
                        expected: "(__type | undefined)",
                        value: input.meta
                    }), undefined === input.global || ("object" === typeof input.global && null !== input.global && false === Array.isArray(input.global) || $report(_exceptionable, {
                        path: _path + ".global",
                        expected: "(__type.o1 | undefined)",
                        value: input.global
                    })) && $vo2(input.global, _path + ".global", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".global",
                        expected: "(__type.o1 | undefined)",
                        value: input.global
                    }), (Array.isArray(input.ops) || $report(_exceptionable, {
                        path: _path + ".ops",
                        expected: "Ops",
                        value: input.ops
                    })) && input.ops.map((elem, _index1) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
                        path: _path + ".ops[" + _index1 + "]",
                        expected: "Operation<keyof OperationArgsMap>",
                        value: elem
                    })) && $vo4(elem, _path + ".ops[" + _index1 + "]", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".ops[" + _index1 + "]",
                        expected: "Operation<keyof OperationArgsMap>",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".ops",
                        expected: "Ops",
                        value: input.ops
                    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["version", "type", "meta", "global", "ops"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo1 = (input, _path, _exceptionable = true) => [undefined === input.trigger || "string" === typeof input.trigger || $report(_exceptionable, {
                        path: _path + ".trigger",
                        expected: "(string | undefined)",
                        value: input.trigger
                    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["trigger"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo2 = (input, _path, _exceptionable = true) => [undefined === input.image || "string" === typeof input.image || $report(_exceptionable, {
                        path: _path + ".image",
                        expected: "(string | undefined)",
                        value: input.image
                    }), undefined === input.gpu || "boolean" === typeof input.gpu || $report(_exceptionable, {
                        path: _path + ".gpu",
                        expected: "(boolean | undefined)",
                        value: input.gpu
                    }), (null !== input.entrypoint || $report(_exceptionable, {
                        path: _path + ".entrypoint",
                        expected: "(Array<string> | string | undefined)",
                        value: input.entrypoint
                    })) && (undefined === input.entrypoint || "string" === typeof input.entrypoint || (Array.isArray(input.entrypoint) || $report(_exceptionable, {
                        path: _path + ".entrypoint",
                        expected: "(Array<string> | string | undefined)",
                        value: input.entrypoint
                    })) && input.entrypoint.map((elem, _index2) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".entrypoint[" + _index2 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".entrypoint",
                        expected: "(Array<string> | string | undefined)",
                        value: input.entrypoint
                    })), undefined === input.env || ("object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) || $report(_exceptionable, {
                        path: _path + ".env",
                        expected: "(__type.o2 | undefined)",
                        value: input.env
                    })) && $vo3(input.env, _path + ".env", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".env",
                        expected: "(__type.o2 | undefined)",
                        value: input.env
                    }), undefined === input.work_dir || "string" === typeof input.work_dir || $report(_exceptionable, {
                        path: _path + ".work_dir",
                        expected: "(string | undefined)",
                        value: input.work_dir
                    }), 0 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["image", "gpu", "entrypoint", "env", "work_dir"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo3 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return "string" === typeof value || $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "string",
                            value: value
                        });
                    }).every(flag => flag)].every(flag => flag);
                const $vo4 = (input, _path, _exceptionable = true) => ["container/run" === input.type || "container/create-volume" === input.type || $report(_exceptionable, {
                        path: _path + ".type",
                        expected: "(\"container/create-volume\" | \"container/run\")",
                        value: input.type
                    }), "string" === typeof input.id || $report(_exceptionable, {
                        path: _path + ".id",
                        expected: "string",
                        value: input.id
                    }), ("object" === typeof input.args && null !== input.args || $report(_exceptionable, {
                        path: _path + ".args",
                        expected: "(__type.o3 | __type.o7)",
                        value: input.args
                    })) && $vu1(input.args, _path + ".args", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".args",
                        expected: "(__type.o3 | __type.o7)",
                        value: input.args
                    }), undefined === input.results || ("object" === typeof input.results && null !== input.results && false === Array.isArray(input.results) || $report(_exceptionable, {
                        path: _path + ".results",
                        expected: "(OperationResults | undefined)",
                        value: input.results
                    })) && $vo13(input.results, _path + ".results", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".results",
                        expected: "(OperationResults | undefined)",
                        value: input.results
                    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["type", "id", "args", "results"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo5 = (input, _path, _exceptionable = true) => ["string" === typeof input.image || $report(_exceptionable, {
                        path: _path + ".image",
                        expected: "string",
                        value: input.image
                    }), (null !== input.cmd || $report(_exceptionable, {
                        path: _path + ".cmd",
                        expected: "(Array<string> | string | undefined)",
                        value: input.cmd
                    })) && (undefined === input.cmd || "string" === typeof input.cmd || (Array.isArray(input.cmd) || $report(_exceptionable, {
                        path: _path + ".cmd",
                        expected: "(Array<string> | string | undefined)",
                        value: input.cmd
                    })) && input.cmd.map((elem, _index3) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".cmd[" + _index3 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".cmd",
                        expected: "(Array<string> | string | undefined)",
                        value: input.cmd
                    })), undefined === input.volumes || (Array.isArray(input.volumes) || $report(_exceptionable, {
                        path: _path + ".volumes",
                        expected: "([{ name: string; dest: string; }] | undefined)",
                        value: input.volumes
                    })) && ((input.volumes.length === 1 || $report(_exceptionable, {
                        path: _path + ".volumes",
                        expected: "[__type.o4]",
                        value: input.volumes
                    })) && [
                        ("object" === typeof input.volumes[0] && null !== input.volumes[0] || $report(_exceptionable, {
                            path: _path + ".volumes[0]",
                            expected: "__type.o4",
                            value: input.volumes[0]
                        })) && $vo6(input.volumes[0], _path + ".volumes[0]", true && _exceptionable) || $report(_exceptionable, {
                            path: _path + ".volumes[0]",
                            expected: "__type.o4",
                            value: input.volumes[0]
                        })
                    ].every(flag => flag)) || $report(_exceptionable, {
                        path: _path + ".volumes",
                        expected: "([{ name: string; dest: string; }] | undefined)",
                        value: input.volumes
                    }), undefined === input.expose || "number" === typeof input.expose || $report(_exceptionable, {
                        path: _path + ".expose",
                        expected: "(number | undefined)",
                        value: input.expose
                    }), undefined === input.private || "boolean" === typeof input.private || $report(_exceptionable, {
                        path: _path + ".private",
                        expected: "(boolean | undefined)",
                        value: input.private
                    }), undefined === input.gpu || "boolean" === typeof input.gpu || $report(_exceptionable, {
                        path: _path + ".gpu",
                        expected: "(boolean | undefined)",
                        value: input.gpu
                    }), undefined === input.work_dir || "string" === typeof input.work_dir || $report(_exceptionable, {
                        path: _path + ".work_dir",
                        expected: "(string | undefined)",
                        value: input.work_dir
                    }), undefined === input.output || "string" === typeof input.output || $report(_exceptionable, {
                        path: _path + ".output",
                        expected: "(string | undefined)",
                        value: input.output
                    }), (null !== input.entrypoint || $report(_exceptionable, {
                        path: _path + ".entrypoint",
                        expected: "(Array<string> | string | undefined)",
                        value: input.entrypoint
                    })) && (undefined === input.entrypoint || "string" === typeof input.entrypoint || (Array.isArray(input.entrypoint) || $report(_exceptionable, {
                        path: _path + ".entrypoint",
                        expected: "(Array<string> | string | undefined)",
                        value: input.entrypoint
                    })) && input.entrypoint.map((elem, _index4) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".entrypoint[" + _index4 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".entrypoint",
                        expected: "(Array<string> | string | undefined)",
                        value: input.entrypoint
                    })), undefined === input.env || ("object" === typeof input.env && null !== input.env && false === Array.isArray(input.env) || $report(_exceptionable, {
                        path: _path + ".env",
                        expected: "(__type.o5 | undefined)",
                        value: input.env
                    })) && $vo7(input.env, _path + ".env", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".env",
                        expected: "(__type.o5 | undefined)",
                        value: input.env
                    }), undefined === input.resources || (Array.isArray(input.resources) || $report(_exceptionable, {
                        path: _path + ".resources",
                        expected: "(Array<Resource> | undefined)",
                        value: input.resources
                    })) && input.resources.map((elem, _index5) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
                        path: _path + ".resources[" + _index5 + "]",
                        expected: "(S3Secure | S3Unsecure)",
                        value: elem
                    })) && $vu0(elem, _path + ".resources[" + _index5 + "]", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".resources[" + _index5 + "]",
                        expected: "(S3Secure | S3Unsecure)",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".resources",
                        expected: "(Array<Resource> | undefined)",
                        value: input.resources
                    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["image", "cmd", "volumes", "expose", "private", "gpu", "work_dir", "output", "entrypoint", "env", "resources"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo6 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "string",
                        value: input.name
                    }), "string" === typeof input.dest || $report(_exceptionable, {
                        path: _path + ".dest",
                        expected: "string",
                        value: input.dest
                    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["name", "dest"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo7 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return "string" === typeof value || $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "string",
                            value: value
                        });
                    }).every(flag => flag)].every(flag => flag);
                const $vo8 = (input, _path, _exceptionable = true) => ["S3" === input.type || $report(_exceptionable, {
                        path: _path + ".type",
                        expected: "\"S3\"",
                        value: input.type
                    }), undefined === input.url || "string" === typeof input.url || $report(_exceptionable, {
                        path: _path + ".url",
                        expected: "(string | undefined)",
                        value: input.url
                    }), "string" === typeof input.target || $report(_exceptionable, {
                        path: _path + ".target",
                        expected: "string",
                        value: input.target
                    }), undefined === input.files || (Array.isArray(input.files) || $report(_exceptionable, {
                        path: _path + ".files",
                        expected: "(Array<string> | undefined)",
                        value: input.files
                    })) && input.files.map((elem, _index6) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".files[" + _index6 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".files",
                        expected: "(Array<string> | undefined)",
                        value: input.files
                    }), undefined === input.allowWrite || "boolean" === typeof input.allowWrite || $report(_exceptionable, {
                        path: _path + ".allowWrite",
                        expected: "(boolean | undefined)",
                        value: input.allowWrite
                    }), undefined === input.buckets || (Array.isArray(input.buckets) || $report(_exceptionable, {
                        path: _path + ".buckets",
                        expected: "(Array<__type> | undefined)",
                        value: input.buckets
                    })) && input.buckets.map((elem, _index7) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
                        path: _path + ".buckets[" + _index7 + "]",
                        expected: "__type.o6",
                        value: elem
                    })) && $vo9(elem, _path + ".buckets[" + _index7 + "]", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".buckets[" + _index7 + "]",
                        expected: "__type.o6",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".buckets",
                        expected: "(Array<__type> | undefined)",
                        value: input.buckets
                    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["type", "url", "target", "files", "allowWrite", "buckets"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo9 = (input, _path, _exceptionable = true) => ["string" === typeof input.url || $report(_exceptionable, {
                        path: _path + ".url",
                        expected: "string",
                        value: input.url
                    }), undefined === input.files || (Array.isArray(input.files) || $report(_exceptionable, {
                        path: _path + ".files",
                        expected: "(Array<string> | undefined)",
                        value: input.files
                    })) && input.files.map((elem, _index8) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".files[" + _index8 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".files",
                        expected: "(Array<string> | undefined)",
                        value: input.files
                    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["url", "files"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo10 = (input, _path, _exceptionable = true) => ["S3" === input.type || $report(_exceptionable, {
                        path: _path + ".type",
                        expected: "\"S3\"",
                        value: input.type
                    }), undefined === input.url || "string" === typeof input.url || $report(_exceptionable, {
                        path: _path + ".url",
                        expected: "(string | undefined)",
                        value: input.url
                    }), "string" === typeof input.target || $report(_exceptionable, {
                        path: _path + ".target",
                        expected: "string",
                        value: input.target
                    }), undefined === input.files || (Array.isArray(input.files) || $report(_exceptionable, {
                        path: _path + ".files",
                        expected: "(Array<string> | undefined)",
                        value: input.files
                    })) && input.files.map((elem, _index9) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".files[" + _index9 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".files",
                        expected: "(Array<string> | undefined)",
                        value: input.files
                    }), undefined === input.allowWrite || "boolean" === typeof input.allowWrite || $report(_exceptionable, {
                        path: _path + ".allowWrite",
                        expected: "(boolean | undefined)",
                        value: input.allowWrite
                    }), undefined === input.buckets || (Array.isArray(input.buckets) || $report(_exceptionable, {
                        path: _path + ".buckets",
                        expected: "(Array<__type> | undefined)",
                        value: input.buckets
                    })) && input.buckets.map((elem, _index10) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
                        path: _path + ".buckets[" + _index10 + "]",
                        expected: "__type.o6",
                        value: elem
                    })) && $vo9(elem, _path + ".buckets[" + _index10 + "]", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".buckets[" + _index10 + "]",
                        expected: "__type.o6",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".buckets",
                        expected: "(Array<__type> | undefined)",
                        value: input.buckets
                    }), ("object" === typeof input.IAM && null !== input.IAM || $report(_exceptionable, {
                        path: _path + ".IAM",
                        expected: "S3Auth",
                        value: input.IAM
                    })) && $vo11(input.IAM, _path + ".IAM", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".IAM",
                        expected: "S3Auth",
                        value: input.IAM
                    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["type", "url", "target", "files", "allowWrite", "buckets", "IAM"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo11 = (input, _path, _exceptionable = true) => ["string" === typeof input.REGION || $report(_exceptionable, {
                        path: _path + ".REGION",
                        expected: "string",
                        value: input.REGION
                    }), "string" === typeof input.ACCESS_KEY_ID || $report(_exceptionable, {
                        path: _path + ".ACCESS_KEY_ID",
                        expected: "string",
                        value: input.ACCESS_KEY_ID
                    }), "string" === typeof input.SECRET_ACCESS_KEY || $report(_exceptionable, {
                        path: _path + ".SECRET_ACCESS_KEY",
                        expected: "string",
                        value: input.SECRET_ACCESS_KEY
                    }), 3 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["REGION", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo12 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "string",
                        value: input.name
                    }), 1 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["name"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vo13 = (input, _path, _exceptionable = true) => [false === _exceptionable || Object.keys(input).map(key => {
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return (null !== value || $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "(OperationResult | string)",
                            value: value
                        })) && (undefined !== value || $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "(OperationResult | string)",
                            value: value
                        })) && ("string" === typeof value || ("object" === typeof value && null !== value || $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "(OperationResult | string)",
                            value: value
                        })) && $vo14(value, _path + $join(key), true && _exceptionable) || $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "(OperationResult | string)",
                            value: value
                        }));
                    }).every(flag => flag)].every(flag => flag);
                const $vo14 = (input, _path, _exceptionable = true) => ["string" === typeof input.regex || $report(_exceptionable, {
                        path: _path + ".regex",
                        expected: "string",
                        value: input.regex
                    }), (Array.isArray(input.logType) || $report(_exceptionable, {
                        path: _path + ".logType",
                        expected: "[StdOptions, (StdOptions | undefined)?, (StdOptions | undefined)?, (StdOptions | undefined)?]",
                        value: input.logType
                    })) && ((1 <= input.logType.length && 4 >= input.logType.length || $report(_exceptionable, {
                        path: _path + ".logType",
                        expected: "[(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\"), (\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined), (\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined), (\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)]",
                        value: input.logType
                    })) && [
                        "stdin" === input.logType[0] || "stdout" === input.logType[0] || "stderr" === input.logType[0] || "nodeerr" === input.logType[0] || $report(_exceptionable, {
                            path: _path + ".logType[0]",
                            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\")",
                            value: input.logType[0]
                        }),
                        undefined === input.logType[1] || "stdin" === input.logType[1] || "stdout" === input.logType[1] || "stderr" === input.logType[1] || "nodeerr" === input.logType[1] || $report(_exceptionable, {
                            path: _path + ".logType[1]",
                            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)",
                            value: input.logType[1]
                        }),
                        undefined === input.logType[2] || "stdin" === input.logType[2] || "stdout" === input.logType[2] || "stderr" === input.logType[2] || "nodeerr" === input.logType[2] || $report(_exceptionable, {
                            path: _path + ".logType[2]",
                            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)",
                            value: input.logType[2]
                        }),
                        undefined === input.logType[3] || "stdin" === input.logType[3] || "stdout" === input.logType[3] || "stderr" === input.logType[3] || "nodeerr" === input.logType[3] || $report(_exceptionable, {
                            path: _path + ".logType[3]",
                            expected: "(\"nodeerr\" | \"stderr\" | \"stdin\" | \"stdout\" | undefined)",
                            value: input.logType[3]
                        })
                    ].every(flag => flag)) || $report(_exceptionable, {
                        path: _path + ".logType",
                        expected: "[StdOptions, (StdOptions | undefined)?, (StdOptions | undefined)?, (StdOptions | undefined)?]",
                        value: input.logType
                    }), 2 === Object.keys(input).length || (false === _exceptionable || Object.keys(input).map(key => {
                        if (["regex", "logType"].some(prop => key === prop))
                            return true;
                        const value = input[key];
                        if (undefined === value)
                            return true;
                        return $report(_exceptionable, {
                            path: _path + $join(key),
                            expected: "undefined",
                            value: value
                        });
                    }).every(flag => flag))].every(flag => flag);
                const $vu0 = (input, _path, _exceptionable = true) => (() => {
                    if (undefined !== input.IAM)
                        return $vo10(input, _path, true && _exceptionable);
                    else
                        return $vo8(input, _path, true && _exceptionable);
                })();
                const $vu1 = (input, _path, _exceptionable = true) => (() => {
                    if (undefined !== input.image)
                        return $vo5(input, _path, true && _exceptionable);
                    else if (undefined !== input.name)
                        return $vo12(input, _path, true && _exceptionable);
                    else
                        return $report(_exceptionable, {
                            path: _path,
                            expected: "(__type.o3 | __type.o7)",
                            value: input
                        });
                })();
                return ("object" === typeof input && null !== input || $report(true, {
                    path: _path + "",
                    expected: "JobDefinition",
                    value: input
                })) && $vo0(input, _path + "", true) || $report(true, {
                    path: _path + "",
                    expected: "JobDefinition",
                    value: input
                });
            })(input, "$input", true);
        }
        const success = 0 === errors.length;
        return {
            success,
            errors,
            data: success ? input : undefined
        };
    };
    if (!req.body) {
        return res.status(400).send('Missing job definition.');
    }
    const isValid = validator(req.body);
    if (!isValid.success) {
        res.status(400).send(JSON.stringify({
            error: 'Failed to validate job defintion.',
            message: isValid.errors,
        }));
    }
    const sessionId = res.locals['session_id'];
    if (sessionId !== 'ADMIN') {
        res.status(200).send();
    }
    const id = flowHandler.generateRandomId(32);
    flowHandler.start(id, req.body);
    try {
        const result = await flowHandler.run(id);
        if (sessionId === 'ADMIN') {
            res.status(200).send(result.state.opStates[0].results['prediction'][0]);
            return;
        }
        await client.POST('/api/benchmarks/submit', {
            // @ts-ignore WAITING ON ENDPOINT CREATION + DEFINING THE RESPONSE OBJECT
            body: result.state,
            params: {
                header: {
                    authorization: sdk.authorization.generate(sessionId, {
                        includeTime: true,
                    }),
                },
            },
        });
    }
    catch (error) {
        throw error;
    }
}
