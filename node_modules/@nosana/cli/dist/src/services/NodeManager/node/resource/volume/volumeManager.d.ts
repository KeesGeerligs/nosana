import { RequiredResource, Resource } from '../../../provider/types.js';
import { ContainerOrchestrationInterface } from '../../../provider/containerOrchestration/interface';
import { NodeRepository } from '../../../repository/NodeRepository.js';
export declare class VolumeManager {
    private containerOrchestration;
    private repository;
    private fetched;
    private market_required_volumes;
    private progressBarReporter;
    constructor(containerOrchestration: ContainerOrchestrationInterface, repository: NodeRepository);
    pullMarketRequiredVolumes(remoteResources: RequiredResource[]): Promise<void>;
    createRemoteVolume(resource: RequiredResource): Promise<string>;
    private runResourceManagerContainer;
    setVolume(bucket: string, volume: string): Promise<void>;
    hasVolume(resource: Resource): Promise<boolean>;
    getVolume(resource: RequiredResource | Resource): Promise<string>;
    pruneVolumes(): Promise<void>;
    resyncResourcesDB(): Promise<void>;
}
