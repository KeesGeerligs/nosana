export interface LogObserver {
    update(log: NodeLogEntry): void;
}
export declare const log: () => NodeLog;
export interface NodeLogEntryPending {
    isPending: boolean;
    expecting: string | undefined;
}
export interface NodeLogEntry {
    log: string;
    method: string;
    type: string;
    pending?: NodeLogEntryPending;
    timestamp: number;
    job: string | undefined;
    payload?: any;
}
declare class NodeLog {
    private observers;
    private shared;
    private job;
    constructor();
    addObserver(observer: LogObserver): void;
    removeObserver(observer: LogObserver): void;
    private notifyObservers;
    private addLog;
    private process;
    private handleRecommend;
    private handleResourceManager;
    private handleBenchmark;
    private handleExpiryHandler;
    private handleContainerCheckHandler;
    private handleStakeHandler;
    private handleHealthHandler;
    private handleProvider;
    private handleNodeRepository;
    private handleJobExternalUtil;
    private handleHealthy;
    private handlePullImage;
    private handleCreateNetwork;
    private handleRunContainer;
    private handleRunFlowContainer;
    private handleApiHandler;
    private handleMarketHandler;
    private handleExit;
    private handleStop;
    private handleRestart;
    private handlePending;
    private handleJobHandler;
    private handleFlowHandler;
}
export {};
