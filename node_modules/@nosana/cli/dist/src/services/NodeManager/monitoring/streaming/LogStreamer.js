import WebSocket from 'ws';
import { log } from '../log/NodeLog.js';
export const logStreaming = (() => {
    let instance = null;
    return (node) => {
        if (!instance) {
            instance = new LogStreamer(node);
        }
        return instance;
    };
})();
export class LogStreamer {
    constructor(privatenode) {
        this.logs = new Map();
        this.index = 0;
        this.clients = new Map();
        log().addObserver(this);
    }
    clear() {
        this.logs.clear();
    }
    update(log) {
        const logMessage = JSON.stringify(log);
        this.index = this.index + 1;
        const job = log.job;
        if (job) {
            this.logs.set(job, (this.logs.get(job) ?? []).concat([logMessage]));
            const clients = this.clients.get(job) ?? [];
            clients.forEach((ws) => {
                ws.send(JSON.stringify({ data: logMessage, path: 'log' }));
            });
        }
        this.logs.set('all', (this.logs.get('all') ?? []).concat([logMessage]));
    }
    subscribe(ws, job) {
        this.clients.set(job, (this.clients.get(job) ?? []).concat([ws]));
        const logs = this.logs.get(job) ?? [];
        logs.forEach((log) => {
            if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ data: log, path: 'log' }));
            }
        });
    }
    unsubscribe(ws) {
        for (const [job, clients] of this.clients) {
            const updatedClients = clients.filter((client) => client !== ws);
            if (updatedClients.length > 0) {
                this.clients.set(job, updatedClients);
            }
            else {
                this.clients.delete(job);
            }
        }
    }
}
