export class NodeRepository {
    constructor(db) {
        this.db = db;
    }
    getflow(id) {
        return this.db.data.flows[id];
    }
    getFlows() {
        return this.db.data.flows;
    }
    setflow(id, flow) {
        this.db.data.flows[id] = flow;
        this.db.write();
    }
    deleteflow(id) {
        delete this.db.data.flows[id];
        this.db.write();
    }
    addOpstate(id, opstate) {
        this.db.data.flows[id].state.opStates.push(opstate);
        this.db.write();
    }
    getFlowState(id) {
        return this.db.data.flows[id]?.state;
    }
    updateflowState(id, updatedFields) {
        Object.assign(this.db.data.flows[id].state, updatedFields);
        this.db.write();
    }
    updateflowStateSecret(id, updatedFields) {
        if (!this.db.data.flows[id]?.state?.secrets) {
            this.db.data.flows[id].state.secrets = {};
        }
        this.db.data.flows[id].state.secrets = {
            ...this.db.data.flows[id].state.secrets,
            ...updatedFields,
        };
        this.db.write();
    }
    getFlowSecret(id, key) {
        const secrets = this.db.data.flows[id]?.state?.secrets ?? {};
        return secrets[key];
    }
    updateflowStateError(id, error) {
        if (!this.db.data.flows[id]?.state?.errors) {
            this.db.data.flows[id].state.errors = [];
        }
        this.db.data.flows[id].state.errors.push(error);
        this.db.write();
    }
    getOpState(id, index) {
        return this.db.data.flows[id].state.opStates[index];
    }
    updateOpState(id, opIndex, updatedFields) {
        Object.assign(this.db.data.flows[id].state.opStates[opIndex], updatedFields);
        this.db.write();
    }
    updateOpStateLogs(id, opIndex, log) {
        if (!this.db.data.flows[id].state.opStates[opIndex].logs) {
            this.db.data.flows[id].state.opStates[opIndex].logs = [];
        }
        this.db.data.flows[id].state.opStates[opIndex].logs.push(log);
        this.db.write();
    }
    updateNodeInfo(updatedFields) {
        Object.assign(this.db.data.info, updatedFields);
        this.db.write();
    }
    getNodeInfo() {
        return this.db.data.info;
    }
    getImagesResources() {
        return this.db.data.resources.images;
    }
    getImageResource(image) {
        return this.db.data.resources.images[image];
    }
    createImageResource(image, fields) {
        this.db.data.resources.images[image] = fields;
        this.db.write();
    }
    updateImageResource(image, updatedFields) {
        if (!this.db.data.resources.images[image]) {
            this.createImageResource(image, updatedFields);
        }
        Object.assign(this.db.data.resources.images[image], updatedFields);
        this.db.write();
    }
    deleteImageResource(image) {
        delete this.db.data.resources.images[image];
        this.db.write();
    }
    getVolumesResources() {
        return this.db.data.resources.volumes;
    }
    getVolumeResource(volume) {
        return this.db.data.resources.volumes[volume];
    }
    createVolumeResource(volume, fields) {
        this.db.data.resources.volumes[volume] = fields;
        this.db.write();
    }
    updateVolumeResource(volume, updatedFields) {
        if (!this.db.data.resources.volumes[volume]) {
            this.createVolumeResource(volume, updatedFields);
        }
        Object.assign(this.db.data.resources.volumes[volume], updatedFields);
        this.db.write();
    }
    deleteVolumeResource(volume) {
        delete this.db.data.resources.volumes[volume];
        this.db.write();
    }
    displayLog(log) {
        return log;
    }
    getFlowOperationName(id, index) {
        if (this.db.data.flows[id]) {
            return this.db.data.flows[id].jobDefinition.ops[index].id;
        }
        return 'null';
    }
}
