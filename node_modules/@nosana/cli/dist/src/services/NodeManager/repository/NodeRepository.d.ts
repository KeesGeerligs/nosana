import { NodeDb, ResourceHistory, VolumeResource } from '../../../providers/modules/db/index.js';
import { LowSync } from 'lowdb';
import { Flow, OpState, FlowState, Log } from '../provider/types.js';
export declare class NodeRepository {
    private db;
    constructor(db: LowSync<NodeDb>);
    getflow(id: string): Flow;
    getFlows(): {
        [key: string]: Flow;
    };
    setflow(id: string, flow: Flow): void;
    deleteflow(id: string): void;
    addOpstate(id: string, opstate: OpState): void;
    getFlowState(id: string): FlowState;
    updateflowState(id: string, updatedFields: Partial<FlowState>): void;
    updateflowStateSecret(id: string, updatedFields: {
        [key: string]: string;
    }): void;
    getFlowSecret(id: string, key: string): string | undefined;
    updateflowStateError(id: string, error: Error | unknown): void;
    getOpState(id: string, index: number): OpState;
    updateOpState(id: string, opIndex: number, updatedFields: Partial<OpState>): void;
    updateOpStateLogs(id: string, opIndex: number, log: Log): void;
    updateNodeInfo(updatedFields: Partial<NodeDb['info']>): void;
    getNodeInfo(): NodeDb['info'];
    getImagesResources(): {
        [key: string]: ResourceHistory;
    };
    getImageResource(image: string): ResourceHistory;
    createImageResource(image: string, fields: ResourceHistory): void;
    updateImageResource(image: string, updatedFields: Partial<ResourceHistory> | ResourceHistory): void;
    deleteImageResource(image: string): void;
    getVolumesResources(): {
        [key: string]: VolumeResource;
    };
    getVolumeResource(volume: string): VolumeResource;
    createVolumeResource(volume: string, fields: VolumeResource): void;
    updateVolumeResource(volume: string, updatedFields: Partial<VolumeResource> | VolumeResource): void;
    deleteVolumeResource(volume: string): void;
    displayLog(log: string): string;
    getFlowOperationName(id: string, index: number): string;
}
