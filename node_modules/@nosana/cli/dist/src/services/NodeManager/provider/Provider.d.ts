import { ContainerOrchestrationInterface } from './containerOrchestration/interface.js';
import { OperationArgsMap } from './types.js';
import { NodeRepository } from '../repository/NodeRepository.js';
import { ResourceManager } from '../node/resource/resourceManager.js';
export declare class Provider {
    private containerOrchestration;
    private repository;
    private resourceManager;
    constructor(containerOrchestration: ContainerOrchestrationInterface, repository: NodeRepository, resourceManager: ResourceManager);
    private currentContainer;
    private exposedUrlHealthCheck?;
    stopReverseProxyApi(address: string): Promise<boolean>;
    setUpReverseProxyApi(address: string): Promise<boolean>;
    private startServiceExposedUrlHealthCheck;
    stopServiceExposedUrlHealthCheck(): void;
    containerRunOperation(id: string, index: number): Promise<boolean>;
    finishCurrentRunningContainer(): Promise<void>;
    containerRunStopOperation(id: string, index: number): Promise<boolean>;
    volumeCreateOperation(id: string, index: number): Promise<boolean>;
    volumeStopOperation(id: string, index: number): Promise<boolean>;
    runOperation(type: string, param: {
        id: string;
        index: number;
        name: string;
    }): Promise<boolean>;
    stopOperation(type: string, param: {
        id: string;
        index: number;
        name: string;
    }): Promise<boolean>;
}
export declare function parseOpArgsCmd(cmd: OperationArgsMap['container/run']['cmd']): string[] | undefined;
