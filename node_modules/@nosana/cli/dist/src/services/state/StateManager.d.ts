export declare class StateManager<TState extends string, TStateData extends Record<TState, any>> {
    private currentState;
    private currentStateEntry;
    private stateHistory;
    private eventEmitter;
    private eventName;
    private sharedData;
    private trackedWords;
    constructor(initialState: TState, initialData: TStateData[TState], eventName: string, trackedWords?: string[]);
    getCurrentState(): TState;
    getCurrentStateEntry(): {
        state: TState;
        data: TStateData[TState];
        timestamp: Date;
    };
    updateState(newState: TState, data: TStateData[TState]): void;
    private autoSaveTrackedWords;
    setSharedData(key: string, value: any): void;
    getSharedData(key: string): any;
    getSharedDataObj(...keys: string[]): Record<string, any>;
    onStateChange(callback: (entry: {
        state: TState;
        data: TStateData[TState];
        timestamp: Date;
    }) => void): void;
    getStateHistory(): {
        state: TState;
        data: TStateData[TState];
        timestamp: Date;
    }[];
    private createStateHistoryEntry;
    private addStateToHistory;
    private emitStateChange;
}
