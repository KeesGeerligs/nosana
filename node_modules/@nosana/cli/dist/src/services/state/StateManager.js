import { EventEmitter } from 'events';
export class StateManager {
    constructor(initialState, initialData, eventName, trackedWords = []) {
        this.currentState = initialState;
        this.currentStateEntry = this.createStateHistoryEntry(initialState, initialData);
        this.stateHistory = [this.currentStateEntry];
        this.eventEmitter = new EventEmitter();
        this.eventName = eventName;
        this.sharedData = {};
        this.trackedWords = trackedWords;
    }
    getCurrentState() {
        return this.currentState;
    }
    getCurrentStateEntry() {
        return this.currentStateEntry;
    }
    updateState(newState, data) {
        this.currentState = newState;
        this.currentStateEntry = this.createStateHistoryEntry(newState, data);
        this.addStateToHistory(this.currentStateEntry);
        this.autoSaveTrackedWords(data);
        this.emitStateChange(this.currentStateEntry);
    }
    autoSaveTrackedWords(data) {
        this.trackedWords.forEach((word) => {
            if (data.hasOwnProperty(word)) {
                this.setSharedData(word, data[word]);
            }
        });
    }
    setSharedData(key, value) {
        this.sharedData[key] = value;
    }
    getSharedData(key) {
        return this.sharedData[key];
    }
    getSharedDataObj(...keys) {
        const result = {};
        keys.forEach((key) => {
            if (this.sharedData.hasOwnProperty(key)) {
                result[key] = this.sharedData[key];
            }
        });
        return result;
    }
    onStateChange(callback) {
        this.eventEmitter.on(this.eventName, callback);
    }
    getStateHistory() {
        return this.stateHistory;
    }
    createStateHistoryEntry(state, data) {
        return {
            state,
            data,
            timestamp: new Date(),
        };
    }
    addStateToHistory(entry) {
        this.stateHistory.push(entry);
    }
    emitStateChange(entry) {
        this.eventEmitter.emit(this.eventName, entry);
    }
}
