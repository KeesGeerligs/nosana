import { Client, Job, Market, Run } from '@nosana/sdk';
import { PublicKey, TokenAmount } from '@solana/web3.js';
import 'rpc-websockets/dist/lib/client.js';
import { FlowState } from '../providers/Provider.js';
import { PodmanProvider } from '../providers/PodmanProvider.js';
import { DockerProvider } from '../providers/DockerProvider.js';
import Logger from '../providers/modules/logger/index.js';
export declare const TUNNEL_IMAGE = "registry.hub.docker.com/nosana/tunnel:0.1.0";
export type NodeStats = {
    sol: number;
    nos: TokenAmount | undefined;
    stake: number;
    nfts: Array<PublicKey>;
};
export type HealthCheckArgs = {
    market: string;
    marketAccount: Market | null;
    accessKey?: PublicKey | undefined;
    printDetailed?: boolean;
};
export type HealthCheckResponse = {
    accessKey: PublicKey | undefined;
};
export declare class NosanaNode {
    provider: DockerProvider | PodmanProvider;
    sdk: Client;
    address: string;
    market: Market | void;
    run: Run | void;
    logger: Logger;
    constructor(client: Client, providerName: string | undefined, providerUrl: string | undefined, configLocation: string | undefined, gpu: string);
    ensureContainerDoesNotExist(containerName: string): Promise<void>;
    startAPI(): Promise<number>;
    checkRun(): Promise<Run | void>;
    waitForJob(marketAccount: Market): Promise<FlowState | null>;
    checkQueued(market?: PublicKey): Promise<Market | void>;
    waitForRun(market?: PublicKey, enableQueueCheck?: Function | boolean): Promise<Run>;
    finishJob(job: Job, run: PublicKey, result: Partial<FlowState>): Promise<void>;
    getNodeStats(): Promise<NodeStats>;
    healthCheck({ market, marketAccount, accessKey, printDetailed, }: HealthCheckArgs): Promise<HealthCheckResponse>;
    runBenchmark(printDetailed?: boolean): Promise<string>;
    join(): Promise<{
        market: string;
        accessKey: PublicKey;
    }>;
    shutdown(): Promise<void>;
    static isRunExpired(run: Run, expireTime: number): Boolean;
}
