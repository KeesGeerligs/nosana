const reactiveEvents = {
    DELETE: 'DELETE',
    CREATE: 'CREATE',
    UPDATE: 'UPDATE',
};
export class ReactiveState extends Map {
    constructor(iterable) {
        super(iterable);
        this.callbacks = new Map();
    }
    broadcast(key, event, value) {
        const callback = this.callbacks.get(key);
        if (callback) {
            callback(event, value);
        }
    }
    list() {
        return [...this.values()];
    }
    delete(key) {
        const value = this.get(key);
        if (value) {
            super.delete(key);
            this.broadcast(key, 'DELETE', value);
            return true;
        }
        return false;
    }
    set(key, value) {
        const exists = this.has(key);
        super.set(key, value);
        this.broadcast(key, exists ? 'UPDATE' : 'CREATE', value);
        return this;
    }
    addListener(key, callback) {
        this.callbacks.set(key, callback);
    }
    removeListener(key) {
        this.callbacks.delete(key);
    }
}
