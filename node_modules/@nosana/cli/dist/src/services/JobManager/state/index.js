import { ReactiveState } from './helper/reactiveState.js';
import { JobDB } from '../db/index.js';
export class JobManagerState {
    constructor(config) {
        this.db = new JobDB(config).db;
        this.state = new ReactiveState();
        Object.entries(this.db.data.jobs).forEach(([id, job]) => {
            this.state.set(id, job);
        });
    }
    delete(key) {
        if (this.state.delete(key)) {
            delete this.db.data.jobs[key];
            this.db.write();
        }
    }
    get(key) {
        return this.state.get(key);
    }
    list() {
        return this.state.list();
    }
    has(key) {
        return this.state.has(key);
    }
    set(key, stateOrCallback) {
        let value;
        if (typeof stateOrCallback === 'function') {
            value = stateOrCallback(this.state.get(key));
        }
        else {
            value = stateOrCallback;
        }
        this.db.data.jobs[key] = value;
        this.db.write();
        this.state.set(key, value);
    }
    subscribe(key, callback) {
        this.state.addListener(key, callback);
        const initValue = this.state.get(key);
        if (initValue)
            callback('CREATE', initValue);
    }
    unsubscribe(key) {
        this.state.removeListener(key);
    }
}
