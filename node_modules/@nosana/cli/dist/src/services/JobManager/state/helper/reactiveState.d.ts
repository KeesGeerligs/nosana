declare const reactiveEvents: {
    readonly DELETE: "DELETE";
    readonly CREATE: "CREATE";
    readonly UPDATE: "UPDATE";
};
export type ReactiveEvent = keyof typeof reactiveEvents;
export declare class ReactiveState<K extends unknown, T extends unknown> extends Map<K, T> {
    private callbacks;
    constructor(iterable?: Iterable<readonly [K, T]> | null | undefined);
    private broadcast;
    list(): T[];
    delete(key: K): boolean;
    set(key: K, value: T): this;
    addListener(key: K, callback: (event: ReactiveEvent, value: T) => void): void;
    removeListener(key: K): void;
}
export {};
