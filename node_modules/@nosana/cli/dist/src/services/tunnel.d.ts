/// <reference types="node" />
import { Request } from 'express';
import { Socket } from 'socket.io-client';
import { Readable, Duplex } from 'stream';
export declare function stopTunnel(): void;
export declare function initTunnel(options: {
    server: string;
    port: number;
    host?: string;
    path?: string;
    origin?: string;
}): void;
export declare class TunnelRequest extends Readable {
    protected _socket: Socket;
    protected _requestId: string;
    constructor({ socket, requestId }: {
        socket: Socket;
        requestId: string;
    });
    _read(): void;
}
export declare class TunnelResponse extends Duplex {
    protected _socket: Socket;
    protected _responseId: string;
    constructor({ socket, responseId, duplex, }: {
        socket: Socket;
        responseId: string;
        duplex?: boolean;
    });
    _write(chunk: any, encoding: any, callback: Function): void;
    _writev(chunks: any, callback: Function): void;
    _final(callback: Function): void;
    _destroy(e: any, callback: Function): void;
    writeHead(statusCode: Request['statusCode'] | null, statusMessage: Request['statusMessage'] | null, headers: Request['headers'], httpVersion?: Request['httpVersion']): void;
    _read(size: number): void;
}
